Call corresponding visitor method(s)
Call corresponding visitor method(s)
Gets the <code>Object</code> associated with the specified key
Sets the <code>Value</code> associated with the specified key
Returns true if the action is enabled
Sets whether the {@code Action} is enabled
Returns an array of <code>Object</code>s which are keys for which values have been set for this <code>AbstractAction</code>, or <code>null</code> if no keys have values set
Supports reporting bound property changes
Adds a <code>PropertyChangeListener</code> to the listener list
Removes a <code>PropertyChangeListener</code> from the listener list
Returns an array of all the <code>PropertyChangeListener</code>s added to this AbstractAction with addPropertyChangeListener()
Clones the abstract action
Visits an annotation value as if by passing itself to that value's {@link AnnotationValue#accept accept}
Visits an annotation value as if by passing itself to that value's {@link AnnotationValue#accept accept} method passing {@code null} for the additional parameter
{@inheritDoc} <p>The default implementation of this method in {@code AbstractAnnotationValueVisitor6} will always throw {@code UnknownAnnotationValueException}
This default implementation does no painting
This default implementation returns a new {@link Insets} object that is initialized by the {@link #getBorderInsets(Component,Insets)} method
Reinitializes the insets parameter with this Border's current Insets
This default implementation returns false
This convenience method calls the static method
Returns a rectangle using the arguments minus the insets of the border
Returns the baseline
Returns an enum indicating how the baseline of a component changes as the size changes
Sets the <code>hideActionText</code> property, which determines whether the button displays text from the <code>Action</code>
Returns the value of the <code>hideActionText</code> property, which determines whether the button displays text from the <code>Action</code>
Returns the button's text
Sets the button's text
Returns the state of the button
Sets the state of the button
Programmatically perform a "click"
Programmatically perform a "click"
Sets space for margin between the button's border and the label
Returns the margin between the button's border and the label
Returns the default icon
Sets the button's default icon
Returns the pressed icon for the button
Sets the pressed icon for the button
Returns the selected icon for the button
Sets the selected icon for the button
Returns the rollover icon for the button
Sets the rollover icon for the button
Returns the rollover selection icon for the button
Sets the rollover selected icon for the button
Returns the icon used by the button when it's disabled
Sets the disabled icon for the button
Returns the icon used by the button when it's disabled and selected
Sets the disabled selection icon for the button
Returns the vertical alignment of the text and icon
Sets the vertical alignment of the icon and text
Returns the horizontal alignment of the icon and text
Sets the horizontal alignment of the icon and text
Returns the vertical position of the text relative to the icon
Sets the vertical position of the text relative to the icon
Returns the horizontal position of the text relative to the icon
Sets the horizontal position of the text relative to the icon
Returns the amount of space between the text and the icon displayed in this button
If both the icon and text properties are set, this property defines the space between them
Verify that the {@code key} argument is a legal value for the {@code horizontalAlignment} and {@code horizontalTextPosition} properties
Verify that the {@code key} argument is a legal value for the vertical properties
{@inheritDoc}
Sets the action command for this button
Returns the action command for this button
Sets the <code>Action</code>
Returns the currently set <code>Action</code> for this <code>ActionEvent</code> source, or <code>null</code> if no <code>Action</code> is set
Sets the properties on this button to match those in the specified <code>Action</code>
Updates the button's state in response to property changes in the associated action
Creates and returns a <code>PropertyChangeListener</code> that is responsible for listening for changes from the specified <code>Action</code> and updating the appropriate properties
Gets the <code>borderPainted</code> property
Sets the <code>borderPainted</code> property
Paint the button's border if <code>BorderPainted</code> property is true and the button has a border
Gets the <code>paintFocus</code> property
Sets the <code>paintFocus</code> property, which must be <code>true</code> for the focus state to be painted
Gets the <code>contentAreaFilled</code> property
Sets the <code>contentAreaFilled</code> property
Gets the <code>rolloverEnabled</code> property
Sets the <code>rolloverEnabled</code> property, which must be <code>true</code> for rollover effects to occur
Returns the keyboard mnemonic from the the current model
Sets the keyboard mnemonic on the current model
This method is now obsolete, please use <code>setMnemonic(int)</code> to set the mnemonic for a button
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character
Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events
Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events
Returns the model that this button represents
Sets the model that this button represents
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Adds the specified component to this container at the specified index, refer to {@link java
Sets the layout manager for this container, refer to {@link java
Adds a <code>ChangeListener</code> to the button
Removes a ChangeListener from the button
Returns an array of all the <code>ChangeListener</code>s added to this AbstractButton with addChangeListener()
Notifies all listeners that have registered interest for notification on this event type
Adds an <code>ActionListener</code> to the button
Removes an <code>ActionListener</code> from the button
Returns an array of all the <code>ActionListener</code>s added to this AbstractButton with addActionListener()
Subclasses that want to handle <code>ChangeEvents</code> differently can override this to return another <code>ChangeListener</code> implementation
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Enables (or disables) the button
Returns the label text
Sets the label text
Adds an <code>ItemListener</code> to the <code>checkbox</code>
Removes an <code>ItemListener</code> from the button
Returns an array of all the <code>ItemListener</code>s added to this AbstractButton with addItemListener()
Returns an array (length 1) containing the label or <code>null</code> if the button is not selected
This is overridden to return false if the current <code>Icon</code>'s <code>Image</code> is not equal to the passed in <code>Image</code> <code>img</code>
Returns a string representation of this <code>AbstractButton</code>
Returns the accessible name of this object
Get the AccessibleIcons associated with this object if one or more exist
Get the state set of this object
Get the AccessibleRelationSet associated with this object if one exists
Get the AccessibleAction associated with this object
Get the AccessibleValue associated with this object
Returns the number of Actions available in this object
Return a description of the specified action of the object
Perform the specified Action on the object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Given a point in local coordinates, return the zero-based index of the character under that Point
Determine the bounding box of the character at the given index into the string
Return the number of characters (valid indicies)
Return the zero-based offset of the caret
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Return the AttributeSet for a given character at a given index
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Returns the tool tip text
Returns the titled border text
Returns key bindings associated with this object
Returns true
Returns true
Calls <code>fireEditingStopped</code> and returns true
Calls <code>fireEditingCanceled</code>
Adds a <code>CellEditorListener</code> to the listener list
Removes a <code>CellEditorListener</code> from the listener list
Returns an array of all the <code>CellEditorListener</code>s added to this AbstractCellEditor with addCellEditorListener()
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Resolves parsed {@code ChronoField} values into a date during parsing
Compares this chronology to another chronology
Checks if this chronology is equal to another chronology
A hash code for this chronology
Outputs this chronology as a {@code String}, using the chronology ID
Returns an iterator over the elements contained in this collection
{@inheritDoc} <p>This implementation returns <tt>size() == 0</tt>
{@inheritDoc} <p>This implementation iterates over the elements in the collection, checking each element in turn for equality with the specified element
{@inheritDoc} <p>This implementation returns an array containing all the elements returned by this collection's iterator, in the same order, stored in consecutive elements of the array, starting with index {@code 0}
{@inheritDoc} <p>This implementation returns an array containing all the elements returned by this collection's iterator in the same order, stored in consecutive elements of the array, starting with index {@code 0}
{@inheritDoc} <p>This implementation always throws an <tt>UnsupportedOperationException</tt>
{@inheritDoc} <p>This implementation iterates over the collection looking for the specified element
{@inheritDoc} <p>This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection
{@inheritDoc} <p>This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn
{@inheritDoc} <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection
{@inheritDoc} <p>This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection
{@inheritDoc} <p>This implementation iterates over this collection, removing each element using the <tt>Iterator
Returns a string representation of this collection
Invoked automatically when the model's state changes
Builds a new chooser panel
Returns a string containing the display name of the panel
Provides a hint to the look and feel as to the <code>KeyEvent
Provides a hint to the look and feel as to the index of the character in <code>getDisplayName</code> that should be visually identified as the mnemonic
Returns the small display icon for the panel
Returns the large display icon for the panel
Invoked when the panel is added to the chooser
Invoked when the panel is removed from the chooser
Returns the model that the chooser panel is editing
Returns the color that is currently selected
Draws the panel
Compare algorithm described in dateDime (3
Given normalized values, determines order-relation between give date/time objects
Parses time hh:mm:ss
Parses date CCYY-MM-DD
Parses date CCYY-MM
Shared code from Date and YearMonth datatypes
Parses time zone: 'Z' or {+,-} followed by hh:mm
Computes index of given char within StringBuffer
Validates given date/time object accoring to W3C PR Schema [D
Return index of UTC char: 'Z', '+', '-'
Returns <code>true</code> if the character at start is 'Z', '+' or '-'
Given start and end position, parses string value
If timezone present - normalize dateTime [E Adding durations to dateTimes]
Resets object representation of date/time
Given {year,month} computes maximum number of days for given month
Supports managing a set of properties
Replaces the document properties dictionary for this document
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this document
Gets the asynchronous loading priority
Sets the asynchronous loading priority
Sets the <code>DocumentFilter</code>
Returns the <code>DocumentFilter</code> that is responsible for filtering of insertion/removal
This allows the model to be safely rendered in the presence of currency, if the model supports being updated asynchronously
Returns the length of the data
Adds a document listener for notification of any changes
Removes a document listener
Returns an array of all the document listeners registered on this document
Adds an undo listener for notification of any changes
Removes an undo listener
Returns an array of all the undoable edit listeners registered on this document
A convenience method for looking up a property value
A convenience method for storing up a property value
Removes some content from the document
Deletes the region of text from <code>offset</code> to <code>offset + length</code>, and replaces it with <code>text</code>
Inserts some content into the document
Gets a sequence of text from the document
Fetches the text contained within the given portion of the document
Returns a position that will track change as the document is altered
Returns a position that represents the start of the document
Returns a position that represents the end of the document
Gets all root elements defined
Returns the root element that views should be based upon unless some other mechanism for assigning views to element structures is provided
Returns the root element of the bidirectional structure for this document
Get the paragraph element containing the given position
Fetches the context for managing attributes
Updates document structure as a result of text insertion
Updates any document structure as a result of text removal
Updates any document structure as a result of text removal
Gives a diagnostic dump
Gets the content for the document
Creates a document leaf element
Creates a document branch element, that can contain other elements
Fetches the current writing thread if there is one
Acquires a lock to begin mutating the document this lock protects
Releases a write lock previously obtained via <code>writeLock</code>
Acquires a lock to begin reading some state from the document
Does a read unlock
Creates a position within the content that will track change as the content is mutated
Current length of the sequence of character content
Inserts a string of characters into the sequence
Removes some portion of the sequence
Fetches a string of characters contained in the sequence
Gets a sequence of characters and copies them into a Segment
Adds an attribute to the given set, and returns the new representative set
Adds a set of attributes to the element
Removes an attribute from the set
Removes a set of attributes for the element
Removes a set of attributes for the element
Fetches an empty AttributeSet
Reclaims an attribute set
Dumps a debugging representation of the element hierarchy
Gets the number of attributes that are defined
Checks whether a given attribute is defined
Checks whether two attribute sets are equal
Copies a set of attributes
Gets the value of an attribute
Gets the names of all attributes
Checks whether a given attribute name/value is defined
Checks whether the element contains all the attributes
Gets the resolving parent
Adds an attribute to the element
Adds a set of attributes to the element
Removes an attribute from the set
Removes a set of attributes for the element
Removes a set of attributes for the element
Sets the resolving parent
Retrieves the underlying model
Gets the parent of the element
Gets the attributes for the element
Gets the name of the element
Gets the starting offset in the model for the element
Gets the ending offset in the model for the element
Gets a child element
Gets the number of children for the element
Gets the child element index closest to the given model offset
Checks whether the element is a leaf
Returns the child <code>TreeNode</code> at index <code>childIndex</code>
Returns the number of children <code>TreeNode</code>'s receiver contains
Returns the parent <code>TreeNode</code> of the receiver
Returns the index of <code>node</code> in the receivers children
Returns true if the receiver allows children
Returns the children of the receiver as an <code>Enumeration</code>
Gets the child element that contains the given model position
Replaces content with a new set of elements
Converts the element to a string
Gets the element name
Gets the starting offset in the model for the element
Gets the ending offset in the model for the element
Gets a child element
Gets the number of children for the element
Gets the child element index closest to the given model offset
Checks whether the element is a leaf
Returns true if the receiver allows children
Returns the children of the receiver as an <code>Enumeration</code>
Converts the element to a string
Gets the starting offset in the model for the element
Gets the ending offset in the model for the element
Gets the element name
Gets the child element index closest to the given model offset
Gets a child element
Returns the number of child elements
Checks whether the element is a leaf
Returns true if the receiver allows children
Returns the children of the receiver as an <code>Enumeration</code>
Returns a string description of the change event
Adds a document edit
Redoes a change
Undoes a change
DefaultDocument events are significant
Provides a localized, human readable description of this edit suitable for use in, say, a change log
Provides a localized, human readable description of the undoable form of this edit, e
Provides a localized, human readable description of the redoable form of this edit, e
Returns the type of event
Returns the offset within the document of the start of the change
Returns the length of the change
Gets the document that sourced the change event
Gets the changes for an element
Returns the underlying element
Returns the index into the list of elements
Gets a list of children that were removed
Gets a list of children that were added
Redoes a change
Undoes a change
This method retrieves the name of current document class
This method allows the programmer to decide which document factory to use when constructing the DOM tree
Returns the DOM document object
Drops all references to the last DOM which was built by this parser
Resets the parser state
Set the locale to use for messages
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
A comment
A processing instruction
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
This method notifies the end of a general entity
Record baseURI information for the Element (by adding xml:base attribute) or for the ProcessingInstruction (by setting a baseURI field) Non deferred DOM
Record baseURI information for the Element (by adding xml:base attribute) or for the ProcessingInstruction (by setting a baseURI field) Deferred DOM
The start of the DTD
The end of the DTD
The start of a conditional section
The end of a conditional section
The start of the DTD external subset
The end of the DTD external subset
An internal entity declaration
An external entity declaration
This method notifies of the start of a parameter entity
This method notifies the end of a parameter entity
An unparsed entity declaration
A notation declaration
Characters within an IGNORE conditional section
An element declaration
An attribute declaration
The start of an attribute list
The end of an attribute list
Visits any program element as if by passing itself to that element's {@link Element#accept accept} method
Visits any program element as if by passing itself to that element's {@link Element#accept accept} method and passing {@code null} for the additional parameter
{@inheritDoc} <p> The default implementation of this method in {@code AbstractElementVisitor6} will always throw {@code UnknownElementException}
Returns a {@code RunnableFuture} for the given runnable and default value
Returns a {@code RunnableFuture} for the given callable task
Closes this channel
Closes this channel
Marks the beginning of an I/O operation that might block indefinitely
Marks the end of an I/O operation that might block indefinitely
Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes
Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes
Sets the <code>TreeModel</code> that will provide the data
Returns the <code>TreeModel</code> that is providing the data
Determines whether or not the root node from the <code>TreeModel</code> is visible
Returns true if the root node of the tree is displayed
Sets the height of each cell
Returns the height of each row
Sets the <code>TreeSelectionModel</code> used to manage the selection to new LSM
Returns the model used to maintain the selection
Returns the preferred height
Returns the preferred width for the passed in region
Returns true if the value identified by row is currently expanded
Returns a rectangle giving the bounds needed to draw path
Returns the path for passed in row
Returns the row that the last item identified in path is visible at
Returns the path to the node that is closest to x,y
Returns an <code>Enumerator</code> that increments over the visible paths starting at the passed in location
Returns the number of visible children for row
Marks the path <code>path</code> expanded state to <code>isExpanded</code>
Returns true if the path is expanded, and visible
Number of rows being displayed
Informs the <code>TreeState</code> that it needs to recalculate all the sizes it is referencing
Instructs the <code>LayoutCache</code> that the bounds for <code>path</code> are invalid, and need to be updated
<p> Invoked after a node (or a set of siblings) has changed in some way
<p>Invoked after nodes have been inserted into the tree
<p>Invoked after nodes have been removed from the tree
<p>Invoked after the tree has drastically changed structure from a given node down
Returns the rows that the <code>TreePath</code> instances in <code>path</code> are being displayed at
Returns, by reference in <code>placeIn</code>, the size needed to represent <code>value</code>
Returns true if the height of each row is a fixed size
Returns, by reference in bounds, the size and x origin to place value at
Appends the specified element to the end of this list (optional operation)
{@inheritDoc}
{@inheritDoc} <p>This implementation always throws an {@code UnsupportedOperationException}
{@inheritDoc} <p>This implementation always throws an {@code UnsupportedOperationException}
{@inheritDoc} <p>This implementation always throws an {@code UnsupportedOperationException}
{@inheritDoc} <p>This implementation first gets a list iterator (with {@code listIterator()})
{@inheritDoc} <p>This implementation first gets a list iterator that points to the end of the list (with {@code listIterator(size())})
Removes all of the elements from this list (optional operation)
{@inheritDoc} <p>This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using {@code add(int, E)}
Returns an iterator over the elements in this list in proper sequence
{@inheritDoc} <p>This implementation returns {@code listIterator(0)}
{@inheritDoc} <p>This implementation returns a straightforward implementation of the {@code ListIterator} interface that extends the implementation of the {@code Iterator} interface returned by the {@code iterator()} method
{@inheritDoc} <p>This implementation returns a list that subclasses {@code AbstractList}
Compares the specified object with this list for equality
Returns the hash code value for this list
Removes from this list all of the elements whose index is between {@code fromIndex}, inclusive, and {@code toIndex}, exclusive
Adds a listener to the list that's notified each time a change to the data model occurs
Removes a listener from the list that's notified each time a change to the data model occurs
Returns an array of all the list data listeners registered on this <code>AbstractListModel</code>
<code>AbstractListModel</code> subclasses must call this method <b>after</b> one or more elements of the list change
<code>AbstractListModel</code> subclasses must call this method <b>after</b> one or more elements are added to the model
<code>AbstractListModel</code> subclasses must call this method <b>after</b> one or more elements are removed from the model
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns a string representation of this map
Returns a shallow copy of this <tt>AbstractMap</tt> instance: the keys and values themselves are not cloned
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value (optional operation)
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
By default, the getNode method is unsupported and throw an {@link java
Convenience method for getting the current output encoding
Convenience method for setting the output encoding
Convenience method for getting the current schemaLocation
Convenience method for setting the schemaLocation
Convenience method for getting the current noNamespaceSchemaLocation
Convenience method for setting the noNamespaceSchemaLocation
Convenience method for getting the formatted output flag
Convenience method for setting the formatted output flag
Convenience method for getting the fragment flag
Convenience method for setting the fragment flag
Gets the corresponding Java encoding name from an IANA name
Default implementation of the setProperty method handles the four defined properties in Marshaller
Default implementation of the getProperty method handles the four defined properties in Marshaller
Sets the thread that currently owns exclusive access
Returns the thread last set by {@code setExclusiveOwnerThread}, or {@code null} if never set
Implements the <tt>put</tt> method as per the specification in {@link Preferences#put(String,String)}
Implements the <tt>get</tt> method as per the specification in {@link Preferences#get(String,String)}
Implements the <tt>remove(String)</tt> method as per the specification in {@link Preferences#remove(String)}
Implements the <tt>clear</tt> method as per the specification in {@link Preferences#clear()}
Implements the <tt>putInt</tt> method as per the specification in {@link Preferences#putInt(String,int)}
Implements the <tt>getInt</tt> method as per the specification in {@link Preferences#getInt(String,int)}
Implements the <tt>putLong</tt> method as per the specification in {@link Preferences#putLong(String,long)}
Implements the <tt>getLong</tt> method as per the specification in {@link Preferences#getLong(String,long)}
Implements the <tt>putBoolean</tt> method as per the specification in {@link Preferences#putBoolean(String,boolean)}
Implements the <tt>getBoolean</tt> method as per the specification in {@link Preferences#getBoolean(String,boolean)}
Implements the <tt>putFloat</tt> method as per the specification in {@link Preferences#putFloat(String,float)}
Implements the <tt>getFloat</tt> method as per the specification in {@link Preferences#getFloat(String,float)}
Implements the <tt>putDouble</tt> method as per the specification in {@link Preferences#putDouble(String,double)}
Implements the <tt>getDouble</tt> method as per the specification in {@link Preferences#getDouble(String,double)}
Implements the <tt>putByteArray</tt> method as per the specification in {@link Preferences#putByteArray(String,byte[])}
Implements the <tt>getByteArray</tt> method as per the specification in {@link Preferences#getByteArray(String,byte[])}
Implements the <tt>keys</tt> method as per the specification in {@link Preferences#keys()}
Implements the <tt>children</tt> method as per the specification in {@link Preferences#childrenNames()}
Returns all known unremoved children of this node
Implements the <tt>parent</tt> method as per the specification in {@link Preferences#parent()}
Implements the <tt>node</tt> method as per the specification in {@link Preferences#node(String)}
Implements the <tt>nodeExists</tt> method as per the specification in {@link Preferences#nodeExists(String)}
Implements the <tt>removeNode()</tt> method as per the specification in {@link Preferences#removeNode()}
Implements the <tt>name</tt> method as per the specification in {@link Preferences#name()}
Implements the <tt>absolutePath</tt> method as per the specification in {@link Preferences#absolutePath()}
Implements the <tt>isUserNode</tt> method as per the specification in {@link Preferences#isUserNode()}
Put the given key-value association into this preference node
Return the value associated with the specified key at this preference node, or <tt>null</tt> if there is no association for this key, or the association cannot be determined at this time
Remove the association (if any) for the specified key at this preference node
Removes this preference node, invalidating it and any preferences that it contains
Returns all of the keys that have an associated value in this preference node
Returns the names of the children of this preference node
Returns the named child if it exists, or <tt>null</tt> if it does not
Returns the named child of this preference node, creating it if it does not already exist
Returns the absolute path name of this preferences node
Implements the <tt>sync</tt> method as per the specification in {@link Preferences#sync()}
This method is invoked with this node locked
Implements the <tt>flush</tt> method as per the specification in {@link Preferences#flush()}
This method is invoked with this node locked
Returns <tt>true</tt> iff this node (or an ancestor) has been removed with the {@link #removeNode()} method
Implements the <tt>exportNode</tt> method as per the specification in {@link Preferences#exportNode(OutputStream)}
Implements the <tt>exportSubtree</tt> method as per the specification in {@link Preferences#exportSubtree(OutputStream)}
If the processor class is annotated with {@link SupportedOptions}, return an unmodifiable set with the same set of strings as the annotation
If the processor class is annotated with {@link SupportedAnnotationTypes}, return an unmodifiable set with the same set of strings as the annotation
If the processor class is annotated with {@link SupportedSourceVersion}, return the source version in the annotation
Initializes the processor with the processing environment by setting the {@code processingEnv} field to the value of the {@code processingEnv} argument
{@inheritDoc}
Returns an empty iterable of completions
Returns {@code true} if this object has been {@linkplain #init initialized}, {@code false} otherwise
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning <tt>true</tt> upon success and throwing an <tt>IllegalStateException</tt> if no space is currently available
Retrieves and removes the head of this queue
Retrieves, but does not remove, the head of this queue
Removes all of the elements from this queue
Adds all of the elements in the specified collection to this queue
Returns the current value of synchronization state
Sets the value of synchronization state
Atomically sets synchronization state to the given updated value if the current state value equals the expected value
Attempts to acquire in exclusive mode
Attempts to set the state to reflect a release in exclusive mode
Attempts to acquire in shared mode
Attempts to set the state to reflect a release in shared mode
Returns {@code true} if synchronization is held exclusively with respect to the current (calling) thread
Acquires in exclusive mode, ignoring interrupts
Acquires in exclusive mode, aborting if interrupted
Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
Releases in exclusive mode
Acquires in shared mode, ignoring interrupts
Acquires in shared mode, aborting if interrupted
Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
Releases in shared mode
Queries whether any threads are waiting to acquire
Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked
Returns the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued
Returns true if the given thread is currently queued
Queries whether any threads have been waiting to acquire longer than the current thread
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a collection containing threads that may be waiting to acquire in exclusive mode
Returns a collection containing threads that may be waiting to acquire in shared mode
Returns a string identifying this synchronizer, as well as its state
Queries whether the given ConditionObject uses this synchronizer as its lock
Queries whether any threads are waiting on the given condition associated with this synchronizer
Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns the current value of synchronization state
Sets the value of synchronization state
Atomically sets synchronization state to the given updated value if the current state value equals the expected value
Attempts to acquire in exclusive mode
Attempts to set the state to reflect a release in exclusive mode
Attempts to acquire in shared mode
Attempts to set the state to reflect a release in shared mode
Returns {@code true} if synchronization is held exclusively with respect to the current (calling) thread
Acquires in exclusive mode, ignoring interrupts
Acquires in exclusive mode, aborting if interrupted
Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
Releases in exclusive mode
Acquires in shared mode, ignoring interrupts
Acquires in shared mode, aborting if interrupted
Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
Releases in shared mode
Queries whether any threads are waiting to acquire
Queries whether any threads have ever contended to acquire this synchronizer; that is if an acquire method has ever blocked
Returns the first (longest-waiting) thread in the queue, or {@code null} if no threads are currently queued
Returns true if the given thread is currently queued
Queries whether any threads have been waiting to acquire longer than the current thread
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a collection containing threads that may be waiting to acquire in exclusive mode
Returns a collection containing threads that may be waiting to acquire in shared mode
Returns a string identifying this synchronizer, as well as its state
Queries whether the given ConditionObject uses this synchronizer as its lock
Queries whether any threads are waiting on the given condition associated with this synchronizer
Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
{@inheritDoc}
Get any extra attributes which the painter implementation would like to include in the image cache lookups
<p>Gets the PaintContext for this painting operation
<p>Configures the given Graphics2D
Actually performs the painting operation
Decodes and returns a float value representing the actual pixel location for the given encoded X value
Decodes and returns a float value representing the actual pixel location for the given encoded y value
Decodes and returns a float value representing the actual pixel location for the anchor point given the encoded X value of the control point, and the offset distance to the anchor from that control point
Decodes and returns a float value representing the actual pixel location for the anchor point given the encoded Y value of the control point, and the offset distance to the anchor from that control point
Decodes and returns a color, which is derived from a base color in UI defaults
Decodes and returns a color, which is derived from a offset between two other colors
Given parameters for creating a LinearGradientPaint, this method will create and return a linear gradient paint
Given parameters for creating a RadialGradientPaint, this method will create and return a radial gradient paint
Get a color property from the given JComponent
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
This method notifies of the start of an entity
This method notifies the end of an entity
The start of an element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
A comment
A processing instruction
The end of the document
The start of the DTD external subset
The end of the DTD external subset
This method notifies of the start of parameter entity
This method notifies the end of an entity
An element declaration
An attribute declaration
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The end of the DTD
Parses the input source specified by the given system identifier
parse
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
Set the locale to use for messages
Allow an application to register a DTD event handler
Allow an application to register a document event handler
Allow an application to register a content event handler
Return the current content handler
Return the current DTD handler
Set the state of any feature in a SAX2 parser
Query the state of a feature
Set the value of any property in a SAX2 parser
Query the value of a property
Set the DTD declaration event handler
Returns the DTD declaration event handler
Set the lexical event handler
Returns the lexical handler
Send startPrefixMapping events
Send endPrefixMapping events
Reset all components before parsing
Public identifier
System identifier
Line number
Column number
Sets the XML attributes
Sets the value of the protected <code>context</code> field to the specified <code>ScriptContext</code>
Returns the value of the protected <code>context</code> field
Returns the <code>Bindings</code> with the specified scope value in the protected <code>context</code> field
Sets the <code>Bindings</code> with the corresponding scope value in the <code>context</code> field
Sets the specified value with the specified key in the <code>ENGINE_SCOPE</code> <code>Bindings</code> of the protected <code>context</code> field
Gets the value for the specified key in the <code>ENGINE_SCOPE</code> of the protected <code>context</code> field
<code>eval(Reader, Bindings)</code> calls the abstract <code>eval(Reader, ScriptContext)</code> method, passing it a <code>ScriptContext</code> whose Reader, Writers and Bindings for scopes other that <code>ENGINE_SCOPE</code> are identical to those members of the protected <code>context</code> field
Same as <code>eval(Reader, Bindings)</code> except that the abstract <code>eval(String, ScriptContext)</code> is used
<code>eval(Reader)</code> calls the abstract <code>eval(Reader, ScriptContext)</code> passing the value of the <code>context</code> field
Same as <code>eval(Reader)</code> except that the abstract <code>eval(String, ScriptContext)</code> is used
Returns a <code>SimpleScriptContext</code>
Returns the provider that created this channel
Registers this channel with the given selector, returning a selection key
Closes this channel
Closes this selectable channel
Adjusts this channel's blocking mode
Adjusts this channel's blocking mode
Cancels this key
Closes this selector
Closes this selector
Returns the provider that created this channel
Retrieves this selector's cancelled-key set
Registers the given channel with this selector
Removes the given key from its channel's key set
Marks the beginning of an I/O operation that might block indefinitely
Marks the end of an I/O operation that might block indefinitely
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element (optional operation)
Inserts the specified element at the specified position in this list (optional operation)
Removes the element at the specified position in this list (optional operation)
Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
Returns an iterator over the elements in this list (in proper sequence)
Returns a list iterator over the elements in this list (in proper sequence)
Returns a <code>String</code> representation of the specified <code>Element</code>
Returns a <code>byte[]</code> representation of the specified <code>Element</code>
Returns a <code>String</code> representation of the specified <code>NodeList</code>
Returns a <code>byte[]</code> representation of the specified <code>NodeList</code>
Use the Canonicalizer to serialize the node
Use the Canonicalizer to serialize the node
Compares the specified object with this set for equality
Returns the hash code value for this set
Removes from this set all of its elements that are contained in the specified collection (optional operation)
Adds a ChangeListener to the model's listener list
Removes a ChangeListener from the model's listener list
Returns an array of all the <code>ChangeListener</code>s added to this AbstractSpinnerModel with addChangeListener()
Run each ChangeListeners stateChanged() method
Return an array of all the listeners of the given type that were added to this model
Returns a default name for the column using spreadsheet conventions:  A, B, C, 
Returns a column given its name
Returns <code>Object
Returns false
This empty implementation is provided so users don't have to implement  this method if their data model is not editable
Adds a listener to the list that's notified each time a change to the data model occurs
Removes a listener from the list that's notified each time a change to the data model occurs
Returns an array of all the table model listeners registered on this model
Notifies all listeners that all cell values in the table's rows may have changed
Notifies all listeners that the table's structure has changed
Notifies all listeners that rows in the range <code>[firstRow, lastRow]</code>, inclusive, have been inserted
Notifies all listeners that rows in the range <code>[firstRow, lastRow]</code>, inclusive, have been updated
Notifies all listeners that rows in the range <code>[firstRow, lastRow]</code>, inclusive, have been deleted
Notifies all listeners that the value of the cell at <code>[row, column]</code> has been updated
Forwards the given notification event to all <code>TableModelListeners</code> that registered themselves as listeners for this table model
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>AbstractTableModel</code>
Debugging
Wrap the initial input DOM in a dom adapter
Push a new parameter frame
Pop the topmost parameter frame
Add a new global parameter if not already in the current frame
Add a new global or local parameter if not already in the current frame
Clears the parameter stack
Get the value of a parameter from the current frame or <tt>null</tt> if undefined
Set the translet's message handler - must implement MessageHandler
Pass a message to the message handler - used by Message class
Adds a DecimalFormat object to the _formatSymbols map
Retrieves a named DecimalFormat object from the _formatSymbols map
Give the translet an opportunity to perform a prepass on the document to extract any information that it can store in an optimized form
After constructing the translet object, this method must be called to perform any version-specific post-initialization that's required
This method is used to pass the largest DOM size to the translet
Creates a KeyIndex object of the desired size - don't want to resize!!!
Adds a value to a key/id index
Create an empty KeyIndex in the DOM case
Returns the index for a given key (or id)
This method builds key indexes - it is overridden in the compiled translet in cases where the <xsl:key> element is used
This method builds key indexes - it is overridden in the compiled translet in cases where the <xsl:key> element is used
Sets the DOM cache used for additional documents loaded using the document() function
Returns the DOM cache used for this translet
Multiple output document extension
Main transform() method - this is overridden by the compiled translet
Calls transform() with a given output handler
Used by some compiled code as a shortcut for passing strings to the output handler
Add's a name of an element whose text contents should be output as CDATA
Transfer the output settings to the output post-processor
Return the state of the services mechanism feature
Set the state of the services mechanism feature
Return allowed protocols for accessing external stylesheet
Set allowed protocols for accessing external stylesheet
Visits any type mirror as if by passing itself to that type mirror's {@link TypeMirror#accept accept} method
Visits any type mirror as if by passing itself to that type mirror's {@link TypeMirror#accept accept} method and passing {@code null} for the additional parameter
Visits a {@code UnionType} element by calling {@code visitUnknown}
Visits an {@code IntersectionType} element by calling {@code visitUnknown}
{@inheritDoc} <p> The default implementation of this method in {@code AbstractTypeVisitor6} will always throw {@code UnknownTypeException}
Visits a {@code UnionType} in a manner defined by a subclass
Visits an {@code IntersectionType} in a manner defined by a subclass
Sets <code>alive</code> to false
Throws <code>CannotUndoException</code> if <code>canUndo</code> returns <code>false</code>
Returns true if this edit is <code>alive</code> and <code>hasBeenDone</code> is <code>true</code>
Throws <code>CannotRedoException</code> if <code>canRedo</code> returns false
Returns <code>true</code> if this edit is <code>alive</code> and <code>hasBeenDone</code> is <code>false</code>
This default implementation returns false
This default implementation returns false
This default implementation returns true
This default implementation returns ""
Retreives the value from the defaults table with key <code>AbstractUndoableEdit
Retreives the value from the defaults table with key <code>AbstractUndoableEdit
Returns a string that displays and identifies this object's properties
Obtains a configured XMLReader
Unmarshals an object by using the specified XMLReader and the InputSource
Indicates whether or not the Unmarshaller is configured to validate during unmarshal operations
Allow an application to register a validation event handler
Specifies whether or not the Unmarshaller should validate during unmarshal operations
Return the current event handler or the default event handler if one hasn't been set
Creates an UnmarshalException from a SAXException
Default implementation of the setProperty method always throws PropertyException since there are no required properties
Default implementation of the getProperty method always throws PropertyException since there are no required properties
The source <code>DocumentView</code> of which this is an <code>AbstractView</code>
Returns the first offset to be output
Returns the last offset to be output
Fetches the ElementIterator
Returns the Writer that is used to output the content
Fetches the document
This method determines whether the current element is in the range specified
This abstract method needs to be implemented by subclasses
Returns the text associated with the element
Writes out text
Enables subclasses to set the number of characters they want written per line
Returns the maximum line length
Sets the current line length
Returns the current line length
Returns true if the current line should be considered empty
Sets whether or not lines can be wrapped
Returns whether or not the lines can be wrapped
Enables subclasses to specify how many spaces an indent maps to
Returns the amount of space to indent
Sets the String used to represent newlines
Returns the string used to represent newlines
Increments the indent level
Decrements the indent level
Returns the current indentation level
Does indentation
Writes out a character
Writes out a string
Writes the line separator
All write methods call into this one
Writes out the set of attributes as " &lt;name&gt;=&lt;value&gt;" pairs
The last stop in writing out content
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
This method notifies the start of an entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of an entity
A comment
A processing instruction
Sets the document source
Returns the document source
The start of the DTD
The start of the DTD external subset
The end of the DTD external subset
This method notifies the start of an entity
This method notifies the end of an entity
Characters within an IGNORE conditional section
An element declaration
The start of an attribute list
An attribute declaration
The end of an attribute list
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The start of a conditional section
The end of a conditional section
The end of the DTD
The start of a content model
A content model of ANY
A content model of EMPTY
A start of either a mixed or children content model
The appearance of "#PCDATA" within a group signifying a mixed content model
A referenced element in a mixed or children content model
The separator between choices or sequences of a mixed or children content model
The occurrence count for a child in a children content model or for the mixed content model group
The end of a group for mixed or children content models
The end of a content model
reset all components before parsing
Used to initialize an <code>Acceptor</code>
Used to determine if an <code>Acceptor</code> has been initialized
PEPt uses separate caches for each type of <code>Acceptor</code> as given by <code>getConnectionCacheType</code>
Set the {@link com
Get the {@link com
Used to determine if the <code>Acceptor</code> should register with {@link com
Accept a connection request
Close the <code>Acceptor</code>
Get the {@link com
Used to get a {@link com
Used to finish creating a {@link com
Used to get a {@link com
Used to get a {@link com
Get the {@code DomainCombiner} associated with this {@code AccessControlContext}
Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object
Checks two AccessControlContext objects for equality
Returns the hash code value for this context
Gets the Permission object associated with this exception, or null if there was no corresponding Permission object
Performs the specified {@code PrivilegedAction} with privileges enabled
Performs the specified {@code PrivilegedAction} with privileges enabled
Performs the specified {@code PrivilegedAction} with privileges enabled and restricted by the specified {@code AccessControlContext}
Performs the specified {@code PrivilegedAction} with privileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited by specified {@code Permission} arguments
Performs the specified {@code PrivilegedAction} with privileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited by specified {@code Permission} arguments
Performs the specified {@code PrivilegedExceptionAction} with privileges enabled
Performs the specified {@code PrivilegedExceptionAction} with privileges enabled
Performs the specified {@code PrivilegedExceptionAction} with privileges enabled and restricted by the specified {@code AccessControlContext}
Performs the specified {@code PrivilegedExceptionAction} with privileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited by specified {@code Permission} arguments
Performs the specified {@code PrivilegedExceptionAction} with privileges enabled and restricted by the specified {@code AccessControlContext} and with a privilege scope limited by specified {@code Permission} arguments
This method takes a "snapshot" of the current calling context, which includes the current Thread's inherited AccessControlContext and any limited privilege scope, and places it in an AccessControlContext object
Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy
Set access flags aka "modifiers"
Set access flags aka "modifiers"
Returns the AccessibleContext associated with this object
Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object
Returns a description of the specified action of the object
Performs the specified Action on the object
Obtains the key as a localized string
Obtains the key as a localized string
Gets localized string describing the key using the default locale
Gets localized string describing the key using the default locale
Gets the background color of this object
Sets the background color of this object
Gets the foreground color of this object
Sets the foreground color of this object
Gets the Cursor of this object
Sets the Cursor of this object
Gets the Font of this object
Sets the Font of this object
Gets the FontMetrics of this object
Determines if the object is enabled
Sets the enabled state of the object
Determines if the object is visible
Sets the visible state of the object
Determines if the object is showing
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns the location of the object on the screen
Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space
Sets the location of the object relative to the parent
Gets the bounds of this object in the form of a Rectangle object
Sets the bounds of this object in the form of a Rectangle object
Returns the size of this object in the form of a Dimension object
Resizes this object so that it has width and height
Returns the Accessible child, if one exists, contained at the local coordinate Point
Returns whether this object can accept focus or not
Requests focus for this object
Adds the specified focus listener to receive focus events from this component
Removes the specified focus listener so it no longer receives focus events from this component
Gets the accessibleName property of this object
Sets the localized accessible name of this object
Gets the accessibleDescription property of this object
Sets the accessible description of this object
Gets the role of this object
Gets the state set of this object
Gets the Accessible parent of this object
Sets the Accessible parent of this object
Gets the 0-based index of this object in its accessible parent
Returns the number of accessible children of the object
Returns the specified Accessible child of the object
Gets the locale of the component
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Gets the AccessibleAction associated with this object that supports one or more actions
Gets the AccessibleComponent associated with this object that has a graphical representation
Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected
Gets the AccessibleText associated with this object presenting text on the display
Gets the AccessibleEditableText associated with this object presenting editable text on the display
Gets the AccessibleValue associated with this object that supports a Numerical value
Gets the AccessibleIcons associated with an object that has one or more associated icons
Gets the AccessibleRelationSet associated with an object
Gets the AccessibleTable associated with an object
Support for reporting bound property changes
Sets the text contents to the specified string
Inserts the specified string at the given index/
Returns the text string between two indices
Deletes the text between two indices
Cuts the text between two indices into the system clipboard
Pastes the text from the system clipboard into the text starting at the specified index
Replaces the text between two indices with the specified string
Selects the text between two indices
Sets attributes for the text between two indices
Returns the tool tip text
Returns the titled border text
Returns key bindings associated with this object
Returns the row number of an index in the table
Returns the column number of an index in the table
Returns the index at a row and column in the table
Returns the text between two indices
Returns the <code>AccessibleTextSequence</code> at a given index
Returns the <code>AccessibleTextSequence</code> after a given index
Returns the <code>AccessibleTextSequence</code> before a given index
Returns the bounding rectangle of the text between two indices
Since the document a link is associated with may have changed, this method returns whether or not this Link is still valid (with respect to the document it references)
Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the "default" action of this LINK object (e
Performs the specified Action on the object
Returns a String description of this particular link action
Returns an object that represents the link action, as appropriate for that link
Returns an object that represents the link anchor, as appropriate for that link
Gets the index with the hypertext document at which this link begins
Gets the index with the hypertext document at which this link ends
Returns the number of links within this hypertext document
Returns the nth Link of this Hypertext document
Returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index
Gets the description of the icon
Sets the description of the icon
Gets the width of the icon
Gets the height of the icon
Returns the number of key bindings for this object
Returns a key binding for this object
Convenience method to set the {@code accessible} flag for an array of objects with a single security check (for efficiency)
Set the {@code accessible} flag for this object to the indicated boolean value
Get the value of the {@code accessible} flag for this object
{@inheritDoc}
Returns the key for this relation
Returns the target objects for this relation
Sets the target object for this relation
Sets the target objects for this relation
Adds a new relation to the current relation set
Adds all of the relations to the existing relation set
Removes a relation from the current relation set
Removes all the relations from the current relation set
Returns the number of relations in the relation set
Returns whether the relation set contains a relation that matches the specified key
Returns the relation that matches the specified key
Returns the current relation set as an array of AccessibleRelation
Creates a localized String representing all the relations in the set using the default locale
Returns the mapping between the programmatic keys and the localized display strings
Returns the number of Accessible children currently selected
Returns an Accessible representing the specified selected child of the object
Determines if the current child of this object is selected
Adds the specified Accessible child of the object to the object's selection
Removes the specified child of the object from the object's selection
Clears the selection in the object, so that no children in the object are selected
Causes every child of the object to be selected if the object supports multiple selections
Adds a new state to the current state set if it is not already present
Adds all of the states to the existing state set
Removes a state from the current state set
Removes all the states from the current state set
Checks if the current state is in the state set
Returns the current state set as an array of AccessibleState
Creates a localized String representing all the states in the set using the default locale
Returns an array of DataFlavor objects for the MIME types this object supports
Returns an InputStream for a DataFlavor
Returns the caption for the table
Sets the caption for the table
Returns the summary description of the table
Sets the summary description of the table
Returns the number of rows in the table
Returns the number of columns in the table
Returns the Accessible at a specified row and column in the table
Returns the number of rows occupied by the Accessible at a specified row and column in the table
Returns the number of columns occupied by the Accessible at a specified row and column in the table
Returns the row headers as an AccessibleTable
Sets the row headers
Returns the column headers as an AccessibleTable
Sets the column headers
Returns the description of the specified row in the table
Sets the description text of the specified row of the table
Returns the description text of the specified column in the table
Sets the description text of the specified column in the table
Returns a boolean value indicating whether the accessible at a specified row and column is selected
Returns a boolean value indicating whether the specified row is selected
Returns a boolean value indicating whether the specified column is selected
Returns the selected rows in a table
Returns the selected columns in a table
Returns the type of event
Returns the first row that changed
Returns the last row that changed
Returns the first column that changed
Returns the last column that changed
Given a point in local coordinates, return the zero-based index of the character under that Point
Determines the bounding box of the character at the given index into the string
Returns the number of characters (valid indicies)
Returns the zero-based offset of the caret
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Returns the AttributeSet for a given character at a given index
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Sets the name of this ACL
Returns the name of this ACL
Adds an ACL entry to this ACL
Removes an ACL entry from this ACL
Returns an enumeration for the set of allowed permissions for the specified principal (representing an entity such as an individual or a group)
Returns an enumeration of the entries in this ACL
Checks whether or not the specified principal has the specified permission
Returns a string representation of the ACL contents
Specifies the principal for which permissions are granted or denied by this ACL entry
Returns the principal for which permissions are granted or denied by this ACL entry
Sets this ACL entry to be a negative one
Returns true if this is a negative ACL entry (one denying the associated principal the set of permissions in the entry), false otherwise
Adds the specified permission to this ACL entry
Removes the specified permission from this ACL entry
Checks if the specified permission is part of the permission set in this entry
Returns an enumeration of the permissions in this ACL entry
Returns a string representation of the contents of this ACL entry
Clones this ACL entry
Returns the name of the attribute view
Reads the access control list
Updates (replace) the access control list
Call corresponding visitor method(s)
Explicit value of the WS-Addressing <code>Action</code> message addressing property for the <code>input</code> message of the operation
Explicit value of the WS-Addressing <code>Action</code> message addressing property for the <code>output</code> message of the operation
Explicit value of the WS-Addressing <code>Action</code> message addressing property for the <code>fault</code> message(s) of the operation
Returns the command string associated with this action
Returns the timestamp of when this event occurred
Returns the modifier keys held down during this action event
Returns a parameter string identifying this action event
Invoked when an action occurs
Sets this <code>ActionMap</code>'s parent
Returns this <code>ActionMap</code>'s parent
Adds a binding for <code>key</code> to <code>action</code>
Returns the binding for <code>key</code>, messaging the parent <code>ActionMap</code> if the binding is not locally defined
Removes the binding for <code>key</code> from this <code>ActionMap</code>
Removes all the mappings from this <code>ActionMap</code>
Returns the <code>Action</code> names that are bound in this <code>ActionMap</code>
Returns the number of bindings in this {@code ActionMap}
Returns an array of the keys defined in this <code>ActionMap</code> and its parent
Returns the object's activation identifier
Register an object descriptor for an activatable remote object so that is can be activated on demand
Informs the system that the object with the corresponding activation <code>id</code> is currently inactive
Revokes previous registration for the activation descriptor associated with <code>id</code>
Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port
Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port, and the specified client and server socket factories
Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls
Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls
Remove the remote object, obj, from the RMI runtime
Returns the group identifier for the object specified by this descriptor
Returns the class name for the object specified by this descriptor
Returns the code location for the object specified by this descriptor
Returns a "marshalled object" containing intialization/activation data for the object specified by this descriptor
Returns the "restart" mode of the object associated with this activation descriptor
Compares two activation descriptors for content equality
Return the same hashCode for similar <code>ActivationDesc</code>s
Returns the detail message, including the message from the cause, if any, of this exception
Returns the cause of this exception
The group's <code>inactiveObject</code> method is called indirectly via a call to the <code>Activatable
The group's <code>activeObject</code> method is called when an object is exported (either by <code>Activatable</code> object construction or an explicit call to <code>Activatable
Create and set the activation group for the current VM
Returns the current activation group's identifier
Set the activation system for the VM
Returns the activation system for the VM
This protected method is necessary for subclasses to make the <code>activeObject</code> callback to the group's monitor
This protected method is necessary for subclasses to make the <code>inactiveGroup</code> callback to the group's monitor
Returns the group's class name (possibly <code>null</code>)
Returns the group's code location
Returns the group's initialization data
Returns the group's property-override list
Returns the group's command-environment control object
Compares two activation group descriptors for content equality
Produce identical numbers for similar <code>ActivationGroupDesc</code>s
Fetch the configured path-qualified java command name
Fetch the configured java command options
Compares two command environments for content equality
Return identical values for similar <code>CommandEnvironment</code>s
Returns the group's activation system
Returns a hashcode for the group's identifier
Compares two group identifiers for content equality
Activate the object for this id
Returns a hashcode for the activation id
Compares two activation ids for content equality
The activator calls an instantiator's <code>newInstance</code> method in order to recreate in that group an object with the activation identifier, <code>id</code>, and descriptor, <code>desc</code>
An activation group calls its monitor's <code>inactiveObject</code> method when an object in its group becomes inactive (deactivates)
Informs that an object is now active
Informs that the group is now inactive
The <code>registerObject</code> method is used to register an activation descriptor, <code>desc</code>, and obtain an activation identifier for a activatable remote object
Remove the activation id and associated descriptor previously registered with the <code>ActivationSystem</code>; the object can no longer be activated via the object's activation id
Register the activation group
Callback to inform activation system that group is now active
Remove the activation group
Shutdown the activation system
Set the activation descriptor, <code>desc</code> for the object with the activation identifier, <code>id</code>
Set the activation group descriptor, <code>desc</code> for the object with the activation group identifier, <code>id</code>
Returns the activation descriptor, for the object with the activation identifier, <code>id</code>
Returns the activation group descriptor, for the group with the activation group identifier, <code>id</code>
Activate the object associated with the activation identifier, <code>id</code>
Dispatch the event to its target, listeners of the events source, or do whatever it is this event is supposed to do
get Returbs the entry assigned to the key, or creates a new entry in state INVALID if none is present
This operation is invoked when the ORB receives  a request for an object reference that identifies  a target POA that does not exist
Dispatch the character content of a node to an output handler
Return the node identity from a node handle
Return the node handle from a node identity
Implementation of the DTM interfaces
Specifies if this feature is enabled or disabled
If addressing is enabled, this property determines whether the endpoint requires WS-Addressing
If addressing is enabled, this property determines whether endpoint requires the use of anonymous responses, or non-anonymous responses, or all
{@inheritDoc}
If addressing is enabled, this property determines whether the endpoint requires WS-Addressing
If addressing is enabled, this property determines whether endpoint requires the use of anonymous responses, or non-anonymous responses, or all responses
Gets the orientation of the adjustable object
Sets the minimum value of the adjustable object
Gets the minimum value of the adjustable object
Sets the maximum value of the adjustable object
Gets the maximum value of the adjustable object
Sets the unit value increment for the adjustable object
Gets the unit value increment for the adjustable object
Sets the block value increment for the adjustable object
Gets the block value increment for the adjustable object
Sets the length of the proportional indicator of the adjustable object
Gets the length of the proportional indicator
Sets the current value of the adjustable object
Gets the current value of the adjustable object
Adds a listener to receive adjustment events when the value of the adjustable object changes
Removes an adjustment listener
Returns the <code>Adjustable</code> object where this event originated
Returns the current value in the adjustment event
Returns the type of adjustment which caused the value changed event
Returns <code>true</code> if this is one of multiple adjustment events
Invoked when the value of the adjustable has changed
Updates the checksum with the specified byte (the low eight bits of the argument b)
Updates the checksum with the specified array of bytes
Updates the checksum with the specified array of bytes
Updates the checksum with the bytes from the specified buffer
Resets the checksum to initial value
Returns the checksum value
Returns a transform representing a translation transformation
Returns a transform representing a rotation transformation
Returns a transform that rotates coordinates around an anchor point
Returns a transform that rotates coordinates according to a rotation vector
Returns a transform that rotates coordinates around an anchor point according to a rotation vector
Returns a transform that rotates coordinates by the specified number of quadrants
Returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point
Returns a transform representing a scaling transformation
Returns a transform representing a shearing transformation
Retrieves the flag bits describing the conversion properties of this transform
Returns the determinant of the matrix representation of the transform
Retrieves the 6 specifiable values in the 3x3 affine transformation matrix and places them into an array of double precisions values
Returns the X coordinate scaling element (m00) of the 3x3 affine transformation matrix
Returns the Y coordinate scaling element (m11) of the 3x3 affine transformation matrix
Returns the X coordinate shearing element (m01) of the 3x3 affine transformation matrix
Returns the Y coordinate shearing element (m10) of the 3x3 affine transformation matrix
Returns the X coordinate of the translation element (m02) of the 3x3 affine transformation matrix
Returns the Y coordinate of the translation element (m12) of the 3x3 affine transformation matrix
Concatenates this transform with a translation transformation
Concatenates this transform with a rotation transformation
Concatenates this transform with a transform that rotates coordinates around an anchor point
Concatenates this transform with a transform that rotates coordinates according to a rotation vector
Concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector
Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants
Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point
Concatenates this transform with a scaling transformation
Concatenates this transform with a shearing transformation
Resets this transform to the Identity transform
Sets this transform to a translation transformation
Sets this transform to a rotation transformation
Sets this transform to a translated rotation transformation
Sets this transform to a rotation transformation that rotates coordinates according to a rotation vector
Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector
Sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants
Sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point
Sets this transform to a scaling transformation
Sets this transform to a shearing transformation
Sets this transform to a copy of the transform in the specified <code>AffineTransform</code> object
Sets this transform to the matrix specified by the 6 double precision values
Concatenates an <code>AffineTransform</code> <code>Tx</code> to this <code>AffineTransform</code> Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by <code>Tx</code>
Concatenates an <code>AffineTransform</code> <code>Tx</code> to this <code>AffineTransform</code> Cx in a less commonly used way such that <code>Tx</code> modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space
Returns an <code>AffineTransform</code> object representing the inverse transformation
Sets this transform to the inverse of itself
Transforms the specified <code>ptSrc</code> and stores the result in <code>ptDst</code>
Transforms an array of point objects by this transform
Transforms an array of floating point coordinates by this transform
Transforms an array of double precision coordinates by this transform
Transforms an array of floating point coordinates by this transform and stores the results into an array of doubles
Transforms an array of double precision coordinates by this transform and stores the results into an array of floats
Inverse transforms the specified <code>ptSrc</code> and stores the result in <code>ptDst</code>
Inverse transforms an array of double precision coordinates by this transform
Transforms the relative distance vector specified by <code>ptSrc</code> and stores the result in <code>ptDst</code>
Transforms an array of relative distance vectors by this transform
Returns a new {@link Shape} object defined by the geometry of the specified <code>Shape</code> after it has been transformed by this transform
Returns a <code>String</code> that represents the value of this {@link Object}
Returns <code>true</code> if this <code>AffineTransform</code> is an identity transform
Returns a copy of this <code>AffineTransform</code> object
Returns the hashcode for this transform
Returns <code>true</code> if this <code>AffineTransform</code> represents the same affine coordinate transform as the specified argument
Returns the interpolation type used by this op
Transforms the source <CODE>BufferedImage</CODE> and stores the results in the destination <CODE>BufferedImage</CODE>
Transforms the source <CODE>Raster</CODE> and stores the results in the destination <CODE>Raster</CODE>
Returns the bounding box of the transformed destination
Returns the bounding box of the transformed destination
Creates a zeroed destination image with the correct size and number of bands
Creates a zeroed destination <CODE>Raster</CODE> with the correct size and number of bands
Returns the location of the corresponding destination point given a point in the source
Returns the affine transform used by this transform operation
Returns the rendering hints used by this transform operation
Returns a <code>byte</code> array
Sets the KANonce
Returns additional information regarding the <code>AgreementMethod</code>
Adds additional <code>AgreementMethod</code> information
Removes additional <code>AgreementMethod</code> information
Returns information relating to the originator's shared secret
Sets the information relating to the originator's shared secret
Returns information relating to the recipient's shared secret
Sets the information relating to the recipient's shared secret
Returns the algorithm URI of this <code>CryptographicMethod</code>
Method getAlgorithmURI
Sets the algorithm's URI as used in the signature
Determines whether an algorithm is granted permission for the specified cryptographic primitives
Determines whether a key is granted permission for the specified cryptographic primitives
Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives
Returns the algorithm URI of this <code>AlgorithmMethod</code>
Returns the algorithm parameters of this <code>AlgorithmMethod</code>
Returns the standard name of the algorithm this parameter generator is associated with
Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
Returns the provider of this algorithm parameter generator object
Initializes this parameter generator for a certain size
Initializes this parameter generator for a certain size and source of randomness
Initializes this parameter generator with a set of algorithm-specific parameter generation values
Initializes this parameter generator with a set of algorithm-specific parameter generation values
Generates the parameters
Initializes this parameter generator for a certain size and source of randomness
Initializes this parameter generator with a set of algorithm-specific parameter generation values
Generates the parameters
Returns the name of the algorithm associated with this parameter object
Returns a parameter object for the specified algorithm
Returns a parameter object for the specified algorithm
Returns a parameter object for the specified algorithm
Returns the provider of this parameter object
Initializes this parameter object using the parameters specified in {@code paramSpec}
Imports the specified parameters and decodes them according to the primary decoding format for parameters
Imports the parameters from {@code params} and decodes them according to the specified decoding scheme
Returns a (transparent) specification of this parameter object
Returns the parameters in their primary encoding format
Returns the parameters encoded in the specified scheme
Returns a formatted string describing the parameters
Initializes this parameters object using the parameters specified in {@code paramSpec}
Imports the specified parameters and decodes them according to the primary decoding format for parameters
Imports the parameters from {@code params} and decodes them according to the specified decoding format
Returns a (transparent) specification of this parameters object
Returns the parameters in their primary encoding format
Returns the parameters encoded in the specified format
Returns a formatted string describing the parameters
Checks if the specified permission is "implied" by this object
Checks two AllPermission objects for equality
Returns the hash code value for this object
Returns the canonical string representation of the actions
Returns a new PermissionCollection object for storing AllPermission objects
Call corresponding visitor method(s)
Creates an <code>AlphaComposite</code> object with the specified rule
Creates an <code>AlphaComposite</code> object with the specified rule and the constant alpha to multiply with the alpha of the source
Creates a context for the compositing operation
Returns the alpha value of this <code>AlphaComposite</code>
Returns the compositing rule of this <code>AlphaComposite</code>
Returns a similar <code>AlphaComposite</code> object that uses the specified compositing rule
Returns a similar <code>AlphaComposite</code> object that uses the specified alpha value
Returns the hashcode for this composite
Determines whether the specified object is equal to this <code>AlphaComposite</code>
Returns the ancestor that the event actually occurred on
Returns the parent of the ancestor the event actually occurred on
Returns the component that the listener was added to
Called when the source or one of its ancestors is made visible either by setVisible(true) being called or by its being added to the component hierarchy
Called when the source or one of its ancestors is made invisible either by setVisible(false) being called or by its being remove from the component hierarchy
Called when either the source or one of its ancestors is moved
AND two expressions and return the boolean result
Evaluate this operation directly to a boolean
Call corresponding visitor method(s)
Returns the potentially annotated generic component type of this array type
Returns the annotations that are <em>directly present</em> on this construct
Returns this construct's annotation of the specified type if such an annotation is <em>present</em>, else {@code null}
Returns annotations that are <em>associated</em> with this construct
Returns true if an annotation for the specified type is <em>present</em> on this element, else false
Returns this element's annotation for the specified type if such an annotation is <em>present</em>, else null
Returns annotations that are <em>present</em> on this element
Returns annotations that are <em>associated</em> with this element
Returns this element's annotation for the specified type if such an annotation is <em>directly present</em>, else null
Returns this element's annotation(s) for the specified type if such annotations are either <em>directly present</em> or <em>indirectly present</em>
Returns annotations that are <em>directly present</em> on this element
Returns the potentially annotated actual type arguments of this parameterized type
Returns the underlying type that this annotated type represents
Returns the potentially annotated bounds of this type variable
Returns the potentially annotated lower bounds of this wildcard type
Returns the potentially annotated upper bounds of this wildcard type
Returns the value of the attribute, which may be null
Returns the String representation of this Annotation
Returns the annotation type of this annotation
Returns this annotation's elements and their values
Check for the synthesized bit on the annotation
Returns the annotation type element
Returns the value associated with the annotation type element
Returns the type of this annotation
Returns the values of this annotation's elements
Returns the elements of this annotation type
Returns the default value of this element
Returns the <tt>Method</tt> object for the incorrectly typed element
Returns the type of data found in the incorrectly typed element
Returns the value
Returns a string representation of this value
Applies a visitor to this value
Visits an annotation value
A convenience method equivalent to {@code v
Visits a {@code boolean} value in an annotation
Visits a {@code byte} value in an annotation
Visits a {@code char} value in an annotation
Visits a {@code double} value in an annotation
Visits a {@code float} value in an annotation
Visits an {@code int} value in an annotation
Visits a {@code long} value in an annotation
Visits a {@code short} value in an annotation
Visits a string value in an annotation
Visits a type value in an annotation
Visits an {@code enum} value in an annotation
Visits an annotation value in an annotation
Visits an array value in an annotation
Visits an unknown kind of annotation value
Checks for equality between this <code>Any</code> object and the given <code>Any</code> object
Returns type information for the element contained in this <code>Any</code> object
Sets this <code>Any</code> object's <code>type</code> field to the given <code>TypeCode</code> object and clears its value
Reads off (unmarshals) the value of an <code>Any</code> object from the given input stream using the given typecode
Writes out the value of this <code>Any</code> object to the given output stream
Creates an output stream into which this <code>Any</code> object's value can be marshalled
Creates an input stream from which this <code>Any</code> object's value can be unmarshalled
Extracts the <code>short</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>short</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>int</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>int</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>long</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>long</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>short</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>short</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>int</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>int</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>long</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>long</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>float</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>float</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>double</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>double</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>boolean</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>boolean</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>char</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>char</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>char</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>char</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>byte</code> in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>byte</code> into this <code>Any</code> object's <code>value</code> field
Extracts the <code>Any</code> object in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>Any</code> object into this <code>Any</code> object's <code>value</code> field
Extracts the <code>org
Inserts the given <code>org
Extracts the <code>java
Inserts the given <code>java
Inserts the given <code>java
Inserts the given <code>org
Extracts the <code>String</code> object in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>String</code> object into this <code>Any</code> object's <code>value</code> field
Extracts the <code>String</code> object in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>String</code> object into this <code>Any</code> object's <code>value</code> field
Extracts the <code>TypeCode</code> object in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>TypeCode</code> object into this <code>Any</code> object's <code>value</code> field
Extracts the <code>Principal</code> object in this <code>Any</code> object's <code>value</code> field
Inserts the given <code>Principal</code> object into this <code>Any</code> object's <code>value</code> field
Extracts a <code>Streamable</code> from this <code>Any</code> object's <code>value</code> field
Inserts the given <code>Streamable</code> object into this <code>Any</code> object's <code>value</code> field
Extracts the <code>java
Throws an <a href="package-summary
Throws an <a href="package-summary
Reads from <code>input</code> and initalizes the value in the Holder with the unmarshalled data
Marshals to <code>output</code> the value in this <code>AnyHolder</code> object
Returns the <code>TypeCode</code> object corresponding to the value held in this <code>AnyHolder</code> object
returns the type of the element contained in the Any
sets the type of the element to be contained in the Any
checks for equality between Anys
returns an output stream that an Any value can be marshaled into
returns an input stream that an Any value can be marshaled out of
takes a streamable and inserts its reference into the any
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
A variant of the insertion operation that takes a typecode argument as well
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
See the description of the <a href="#anyOps">general Any operations
Note that the Serializable really should be an IDLEntity of some kind
Utility method for insert_Value and Util
Get the class name of the configured {@code LoginModule}
Return the controlFlag (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL) for this {@code LoginModule}
Get the options configured for this {@code LoginModule}
Return a String representation of this controlFlag
Appends the specified character sequence to this <tt>Appendable</tt>
Appends a subsequence of the specified character sequence to this <tt>Appendable</tt>
Appends the specified character to this <tt>Appendable</tt>
Sets this applet's stub
Determines if this applet is active
Gets the URL of the document in which this applet is embedded
Gets the base URL
Returns the value of the named parameter in the HTML tag
Determines this applet's context, which allows the applet to query and affect the environment in which it runs
Requests that this applet be resized
Requests that this applet be resized
Indicates if this container is a validate root
Requests that the argument string be displayed in the "status window"
Returns an <code>Image</code> object that can then be painted on the screen
Returns an <code>Image</code> object that can then be painted on the screen
Get an audio clip from the given URL
Returns the <code>AudioClip</code> object specified by the <code>URL</code> argument
Returns the <code>AudioClip</code> object specified by the <code>URL</code> and <code>name</code> arguments
Returns information about this applet
Gets the locale of the applet
Returns information about the parameters that are understood by this applet
Plays the audio clip at the specified absolute URL
Plays the audio clip given the URL and a specifier that is relative to it
Called by the browser or applet viewer to inform this applet that it has been loaded into the system
Called by the browser or applet viewer to inform this applet that it should start its execution
Called by the browser or applet viewer to inform this applet that it should stop its execution
Called by the browser or applet viewer to inform this applet that it is being reclaimed and that it should destroy any resources that it has allocated
Gets the AccessibleContext associated with this Applet
Get the role of this object
Get the state of this object
Creates an audio clip
Returns an <code>Image</code> object that can then be painted on the screen
Finds and returns the applet in the document represented by this applet context with the given name
Finds all the applets in the document represented by this applet context
Requests that the browser or applet viewer show the Web page indicated by the <code>url</code> argument
Requests that the browser or applet viewer show the Web page indicated by the <code>url</code> argument
Requests that the argument string be displayed in the "status window"
Associates the specified stream with the specified key in this applet context
Returns the stream to which specified key is associated within this applet context
Finds all the keys of the streams in this applet context
<p> If passed to the appropriate variant of java
<p> Activate, and/or mark Applet active
Determines if the applet is active
Gets the URL of the document in which the applet is embedded
Gets the base URL
Returns the value of the named parameter in the HTML tag
Returns the applet's context
Called when the applet wants to be resized
Returns the CORBA repository ID of the exception without removing it from the exceptions input stream
Returns the input stream from which the exception data can be read as its parameters
Returns the starting angle of the arc
Returns the angular extent of the arc
Returns the arc closure type of the arc: {@link #OPEN}, {@link #CHORD}, or {@link #PIE}
Returns the starting point of the arc
Returns the ending point of the arc
Sets the location, size, angular extents, and closure type of this arc to the specified double values
Sets the location, size, angular extents, and closure type of this arc to the specified values
Sets the location, size, angular extents, and closure type of this arc to the specified values
Sets this arc to be the same as the specified arc
Sets the position, bounds, angular extents, and closure type of this arc to the specified values
Sets the position, bounds, and angular extents of this arc to the specified value
Sets the starting angle of this arc to the specified double value
Sets the angular extent of this arc to the specified double value
Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc
Sets the starting angle and angular extent of this arc using two sets of coordinates
Sets the starting angle and angular extent of this arc using two points
Sets the closure type of this arc to the specified value: <CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>
{@inheritDoc} Note that the arc <a href="Arc2D
Returns the high-precision framing rectangle of the arc
Constructs a <code>Rectangle2D</code> of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc
Determines whether or not the specified angle is within the angular extents of the arc
Determines whether or not the specified point is inside the boundary of the arc
Determines whether or not the interior of the arc intersects the interior of the specified rectangle
Determines whether or not the interior of the arc entirely contains the specified rectangle
Determines whether or not the interior of the arc entirely contains the specified rectangle
Returns an iteration object that defines the boundary of the arc
Returns the hashcode for this <code>Arc2D</code>
Determines whether or not the specified <code>Object</code> is equal to this <code>Arc2D</code>
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc} Note that the arc <a href="Arc2D
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Adds the shape of the specified <code>Area</code> to the shape of this <code>Area</code>
Subtracts the shape of the specified <code>Area</code> from the shape of this <code>Area</code>
Sets the shape of this <code>Area</code> to the intersection of its current shape and the shape of the specified <code>Area</code>
Sets the shape of this <code>Area</code> to be the combined area of its current shape and the shape of the specified <code>Area</code>, minus their intersection
Removes all of the geometry from this <code>Area</code> and restores it to an empty area
Tests whether this <code>Area</code> object encloses any area
Tests whether this <code>Area</code> consists entirely of straight edged polygonal geometry
Tests whether this <code>Area</code> is rectangular in shape
Tests whether this <code>Area</code> is comprised of a single closed subpath
Returns a high precision bounding {@link Rectangle2D} that completely encloses this <code>Area</code>
Returns a bounding {@link Rectangle} that completely encloses this <code>Area</code>
Returns an exact copy of this <code>Area</code> object
Tests whether the geometries of the two <code>Area</code> objects are equal
Transforms the geometry of this <code>Area</code> using the specified {@link AffineTransform}
Creates a new <code>Area</code> object that contains the same geometry as this <code>Area</code> transformed by the specified <code>AffineTransform</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a {@link PathIterator} for the outline of this <code>Area</code> object
Creates a <code>PathIterator</code> for the flattened outline of this <code>Area</code> object
Detect if the data is being delivered with the necessary hints to allow the averaging algorithm to do its work
Combine the components for the delivered byte pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete
Combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete
Call corresponding visitor method(s)
Get the qualified name for this argument
Set the qualified name for this argument
Get the value for this argument
Set the value of this argument
Have the object release it's resources
Get the value expression for this argument
Set the value expression for this argument
Tell if this variable is a parameter passed with a with-param or as a top-level parameter
Tell if this variable is currently visible
Update visibility status of this variable
Equality function specialized for the variable name
Retrieves the SQL type name of the elements in the array designated by this <code>Array</code> object
Retrieves the JDBC type of the elements in the array designated by this <code>Array</code> object
Retrieves the contents of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object in the form of an array in the Java programming language
Retrieves the contents of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object
Retrieves a slice of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object, beginning with the specified <code>index</code> and containing up to <code>count</code> successive elements of the SQL array
Retreives a slice of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object, beginning with the specified <code>index</code> and containing up to <code>count</code> successive elements of the SQL array
Retrieves a result set that contains the elements of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object
Retrieves a result set that contains the elements of the SQL <code>ARRAY</code> value designated by this <code>Array</code> object
Retrieves a result set holding the elements of the subarray that starts at index <code>index</code> and contains up to <code>count</code> successive elements
Retrieves a result set holding the elements of the subarray that starts at index <code>index</code> and contains up to <code>count</code> successive elements
This method frees the <code>Array</code> object and releases the resources that it holds
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and throwing an {@code IllegalStateException} if this queue is full
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and {@code false} if this queue is full
Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full
Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full
Returns the number of elements in this queue
Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Returns an array containing all of the elements in this queue, in proper sequence
Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this queue
Returns an iterator over the elements in this queue in proper sequence
Returns a {@link Spliterator} over the elements in this queue
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail)
Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail)
Inserts the specified element at the end of this deque
Inserts the specified element at the end of this deque
Retrieves and removes the head of the queue represented by this deque
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns {@code null} if this deque is empty
Retrieves, but does not remove, the head of the queue represented by this deque
Retrieves, but does not remove, the head of the queue represented by this deque, or returns {@code null} if this deque is empty
Pushes an element onto the stack represented by this deque
Pops an element from the stack represented by this deque
Returns the number of elements in this deque
Returns {@code true} if this deque contains no elements
Returns an iterator over the elements in this deque
Returns {@code true} if this deque contains the specified element
Removes a single instance of the specified element from this deque
Removes all of the elements from this deque
Returns an array containing all of the elements in this deque in proper sequence (from first to last element)
Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
Returns a copy of this deque
Creates a <em><a href="Spliterator
Call corresponding visitor method(s)
Trims the capacity of this <tt>ArrayList</tt> instance to be the list's current size
Increases the capacity of this <tt>ArrayList</tt> instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument
Returns the number of elements in this list
Returns <tt>true</tt> if this list contains no elements
Returns <tt>true</tt> if this list contains the specified element
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
Returns a shallow copy of this <tt>ArrayList</tt> instance
Returns an array containing all of the elements in this list in proper sequence (from first to last element)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element
Appends the specified element to the end of this list
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Removes the first occurrence of the specified element from this list, if it is present
Removes all of the elements from this list
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator
Inserts all of the elements in the specified collection into this list, starting at the specified position
Removes from this list all of the elements whose index is between {@code fromIndex}, inclusive, and {@code toIndex}, exclusive
Removes from this list all of its elements that are contained in the specified collection
Retains only the elements in this list that are contained in the specified collection
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Returns a list iterator over the elements in this list (in proper sequence)
Returns an iterator over the elements in this list in proper sequence
Returns a view of the portion of this list between the specified {@code fromIndex}, inclusive, and {@code toIndex}, exclusive
Creates a <em><a href="Spliterator
<p>Fetch notifications that match the given listeners
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array into ascending numerical order
Sorts the specified range of the array into ascending numerical order
Sorts the specified array of objects into ascending order, according to the {@linkplain Comparable natural ordering} of its elements
Sorts the specified range of the specified array of objects into ascending order, according to the {@linkplain Comparable natural ordering} of its elements
Sorts the specified array of objects according to the order induced by the specified comparator
Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Sorts the specified array of objects into ascending order, according to the {@linkplain Comparable natural ordering} of its elements
Sorts the specified range of the specified array of objects into ascending order, according to the {@linkplain Comparable natural ordering} of its elements
Sorts the specified array of objects according to the order induced by the specified comparator
Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Cumulates, in parallel, each element of the given array in place, using the supplied function
Performs {@link #parallelPrefix(Object[], BinaryOperator)} for the given subrange of the array
Cumulates, in parallel, each element of the given array in place, using the supplied function
Performs {@link #parallelPrefix(long[], LongBinaryOperator)} for the given subrange of the array
Cumulates, in parallel, each element of the given array in place, using the supplied function
Performs {@link #parallelPrefix(double[], DoubleBinaryOperator)} for the given subrange of the array
Cumulates, in parallel, each element of the given array in place, using the supplied function
Performs {@link #parallelPrefix(int[], IntBinaryOperator)} for the given subrange of the array
Searches the specified array of longs for the specified value using the binary search algorithm
Searches a range of the specified array of longs for the specified value using the binary search algorithm
Searches the specified array of ints for the specified value using the binary search algorithm
Searches a range of the specified array of ints for the specified value using the binary search algorithm
Searches the specified array of shorts for the specified value using the binary search algorithm
Searches a range of the specified array of shorts for the specified value using the binary search algorithm
Searches the specified array of chars for the specified value using the binary search algorithm
Searches a range of the specified array of chars for the specified value using the binary search algorithm
Searches the specified array of bytes for the specified value using the binary search algorithm
Searches a range of the specified array of bytes for the specified value using the binary search algorithm
Searches the specified array of doubles for the specified value using the binary search algorithm
Searches a range of the specified array of doubles for the specified value using the binary search algorithm
Searches the specified array of floats for the specified value using the binary search algorithm
Searches a range of the specified array of floats for the specified value using the binary search algorithm
Searches the specified array for the specified object using the binary search algorithm
Searches a range of the specified array for the specified object using the binary search algorithm
Searches the specified array for the specified object using the binary search algorithm
Searches a range of the specified array for the specified object using the binary search algorithm
Returns <tt>true</tt> if the two specified arrays of longs are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of ints are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of shorts are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of chars are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of bytes are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of booleans are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of doubles are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of floats are <i>equal</i> to one another
Returns <tt>true</tt> if the two specified arrays of Objects are <i>equal</i> to one another
Assigns the specified long value to each element of the specified array of longs
Assigns the specified long value to each element of the specified range of the specified array of longs
Assigns the specified int value to each element of the specified array of ints
Assigns the specified int value to each element of the specified range of the specified array of ints
Assigns the specified short value to each element of the specified array of shorts
Assigns the specified short value to each element of the specified range of the specified array of shorts
Assigns the specified char value to each element of the specified array of chars
Assigns the specified char value to each element of the specified range of the specified array of chars
Assigns the specified byte value to each element of the specified array of bytes
Assigns the specified byte value to each element of the specified range of the specified array of bytes
Assigns the specified boolean value to each element of the specified array of booleans
Assigns the specified boolean value to each element of the specified range of the specified array of booleans
Assigns the specified double value to each element of the specified array of doubles
Assigns the specified double value to each element of the specified range of the specified array of doubles
Assigns the specified float value to each element of the specified array of floats
Assigns the specified float value to each element of the specified range of the specified array of floats
Assigns the specified Object reference to each element of the specified array of Objects
Assigns the specified Object reference to each element of the specified range of the specified array of Objects
Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Copies the specified array, truncating or padding with <tt>false</tt> (if necessary) so the copy has the specified length
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Returns a fixed-size list backed by the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the "deep contents" of the specified array
Returns <tt>true</tt> if the two specified arrays are <i>deeply equal</i> to one another
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the "deep contents" of the specified array
Set all elements of the specified array, using the provided generator function to compute each element
Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Set all elements of the specified array, using the provided generator function to compute each element
Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Set all elements of the specified array, using the provided generator function to compute each element
Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Set all elements of the specified array, using the provided generator function to compute each element
Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Returns a {@link Spliterator} covering all of the specified array
Returns a {@link Spliterator} covering the specified range of the specified array
Returns a {@link Spliterator
Returns a {@link Spliterator
Returns a {@link Spliterator
Returns a {@link Spliterator
Returns a {@link Spliterator
Returns a {@link Spliterator
Returns a sequential {@link Stream} with the specified array as its source
Returns a sequential {@link Stream} with the specified range of the specified array as its source
Returns a sequential {@link IntStream} with the specified array as its source
Returns a sequential {@link IntStream} with the specified range of the specified array as its source
Returns a sequential {@link LongStream} with the specified array as its source
Returns a sequential {@link LongStream} with the specified range of the specified array as its source
Returns a sequential {@link DoubleStream} with the specified array as its source
Returns a sequential {@link DoubleStream} with the specified range of the specified array as its source
Returns the dimension of arrays described by this <tt>ArrayType</tt> instance
Returns the <i>open type</i> of element values contained in the arrays described by this <tt>ArrayType</tt> instance
Returns <code>true</code> if the open data values this open type describes are primitive arrays, <code>false</code> otherwise
Tests whether <var>obj</var> is a value for this <code>ArrayType</code> instance
Compares the specified <code>obj</code> parameter with this <code>ArrayType</code> instance for equality
Returns the hash code value for this <code>ArrayType</code> instance
Returns a string representation of this <code>ArrayType</code> instance
Create an {@code ArrayType} instance in a type-safe manner
Create an {@code ArrayType} instance in a type-safe manner
Read a single character
Read characters into a portion of an array
Skip characters
Tell whether this stream is ready to be read
Tell whether this stream supports the mark() operation
Mark the present position in the stream
Reset the stream
Close the stream
Call corresponding visitor method(s)
Fetch the major axis (the axis the children are tiled along)
Fetch the minor axis (the axis orthogonal to the tiled axis)
Get the top part of the margin around the view
Set the top part of the margin around the view
Get the bottom part of the margin around the view
Set the bottom part of the margin around the view
Get the left part of the margin around the view
Set the left part of the margin around the view
Get the right part of the margin around the view
Set the right part of the margin around the view
Fetch the span along an axis that is taken up by the insets
Set the estimatedMajorSpan property that determines if the major span should be treated as being estimated
Is the major span currently estimated?
Fetch the object representing the layout state of of the child at the given index
Fetch the queue to use for layout
New ChildState records are created through this method to allow subclasses the extend the ChildState records to do/hold more
Requirements changed along the major axis
Requirements changed along the minor axis
Publish the changes in preferences upward to the parent view
Calls the superclass to update the child views, and updates the status records for the children
Loads all of the children to initialize the view
Fetches the child view index representing the given position in the model
Update the layout in response to receiving notification of change from the model
Sets the parent of the view
Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout
Sets the size of the view
Render the view using the given allocation and rendering surface
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Returns the number of views in this view
Gets the nth child view
Fetches the allocation for the given child view
Returns the child view index representing the given position in the model
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Provides a way to determine the next visually represented model location that one might place a caret
Notification that a child changed
Paint the children that intersect the clip area
Fetch the allocation to use for a child view
Fetches the child view index at the given point
Fetch the allocation to use for a child view
Copy the currently allocated shape into the Rectangle used to store the current allocation
Locate the view responsible for an offset into the box along the major axis
Fetch the child view this record represents
Update the child state
What is the span along the minor axis
What is the offset along the minor axis
What is the span along the major axis
Get the offset along the major axis
This method should only be called by the ChildLocator, it is simply a convenient place to hold the cached location
Mark preferences changed for this child
Has the child view been laid out
Called when the response to an asynchronous operation is available
Reads a sequence of bytes from this channel into the given buffer
Reads a sequence of bytes from this channel into the given buffer
Writes a sequence of bytes to this channel from the given buffer
Writes a sequence of bytes to this channel from the given buffer
Closes this channel
Returns the provider that created this channel group
Creates an asynchronous channel group with a fixed thread pool
Creates an asynchronous channel group with a given thread pool that creates new threads as needed
Creates an asynchronous channel group with a given thread pool
Tells whether or not this asynchronous channel group is shutdown
Tells whether or not this group has terminated
Initiates an orderly shutdown of the group
Shuts down the group and closes all open channels in the group
Awaits termination of the group
Returns the system-wide default asynchronous channel provider for this invocation of the Java virtual machine
Constructs a new asynchronous channel group with a fixed thread pool
Constructs a new asynchronous channel group with the given thread pool
Opens an asynchronous server-socket channel
Opens an asynchronous socket channel
Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
Returns the current size of this channel's file
Truncates this channel's file to the given size
Forces any updates to this channel's file to be written to the storage device that contains it
Acquires a lock on the given region of this channel's file
Acquires an exclusive lock on this channel's file
Acquires a lock on the given region of this channel's file
Acquires an exclusive lock on this channel's file
Attempts to acquire a lock on the given region of this channel's file
Attempts to acquire an exclusive lock on this channel's file
Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
Returns the provider that created this channel
Opens an asynchronous server-socket channel
Opens an asynchronous server-socket channel
Binds the channel's socket to a local address and configures the socket to listen for connections
Binds the channel's socket to a local address and configures the socket to listen for connections
Accepts a connection
Accepts a connection
{@inheritDoc} <p> If there is a security manager set, its {@code checkConnect} method is called with the local address and {@code -1} as its arguments to see if the operation is allowed
Returns the provider that created this channel
Opens an asynchronous socket channel
Opens an asynchronous socket channel
Shutdown the connection for reading without closing the channel
Shutdown the connection for writing without closing the channel
Returns the remote address to which this channel's socket is connected
Connects this channel
Connects this channel
Reads a sequence of bytes from this channel into the given buffer
Reads a sequence of bytes from this channel into a subsequence of the given buffers
Writes a sequence of bytes to this channel from the given buffer
Writes a sequence of bytes to this channel from a subsequence of the given buffers
{@inheritDoc} <p> If there is a security manager set, its {@code checkConnect} method is called with the local address and {@code -1} as its arguments to see if the operation is allowed
Call corresponding visitor method(s)
Returns the current value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Unconditionally sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the previous value
Returns the String representation of the current value
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the old value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically updates the current value with the results of applying the given function, returning the previous value
Atomically updates the current value with the results of applying the given function, returning the updated value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current value
Returns the value of this {@code AtomicInteger} as an {@code int}
Returns the value of this {@code AtomicInteger} as a {@code long} after a widening primitive conversion
Returns the value of this {@code AtomicInteger} as a {@code float} after a widening primitive conversion
Returns the value of this {@code AtomicInteger} as a {@code double} after a widening primitive conversion
Returns the length of the array
Gets the current value at position {@code i}
Sets the element at position {@code i} to the given value
Eventually sets the element at position {@code i} to the given value
Atomically sets the element at position {@code i} to the given value and returns the old value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically increments by one the element at index {@code i}
Atomically decrements by one the element at index {@code i}
Atomically adds the given value to the element at index {@code i}
Atomically increments by one the element at index {@code i}
Atomically decrements by one the element at index {@code i}
Atomically adds the given value to the element at index {@code i}
Atomically updates the element at index {@code i} with the results of applying the given function, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function, returning the updated value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current values of array
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the old value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically updates the current value with the results of applying the given function, returning the previous value
Atomically updates the current value with the results of applying the given function, returning the updated value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current value
Returns the value of this {@code AtomicLong} as an {@code int} after a narrowing primitive conversion
Returns the value of this {@code AtomicLong} as a {@code long}
Returns the value of this {@code AtomicLong} as a {@code float} after a widening primitive conversion
Returns the value of this {@code AtomicLong} as a {@code double} after a widening primitive conversion
Returns the length of the array
Gets the current value at position {@code i}
Sets the element at position {@code i} to the given value
Eventually sets the element at position {@code i} to the given value
Atomically sets the element at position {@code i} to the given value and returns the old value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically increments by one the element at index {@code i}
Atomically decrements by one the element at index {@code i}
Atomically adds the given value to the element at index {@code i}
Atomically increments by one the element at index {@code i}
Atomically decrements by one the element at index {@code i}
Atomically adds the given value to the element at index {@code i}
Atomically updates the element at index {@code i} with the results of applying the given function, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function, returning the updated value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current values of array
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
Returns the current value of the reference
Returns the current value of the mark
Returns the current values of both the reference and the mark
Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark
Atomically sets the value of both the reference and mark to the given update values if the current reference is {@code ==} to the expected reference and the current mark is equal to the expected mark
Unconditionally sets the value of both the reference and mark
Atomically sets the value of the mark to the given update value if the current reference is {@code ==} to the expected reference
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically sets the value to the given updated value if the current value {@code ==} the expected value
Atomically sets to the given value and returns the old value
Atomically updates the current value with the results of applying the given function, returning the previous value
Atomically updates the current value with the results of applying the given function, returning the updated value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current value
Returns the length of the array
Gets the current value at position {@code i}
Sets the element at position {@code i} to the given value
Eventually sets the element at position {@code i} to the given value
Atomically sets the element at position {@code i} to the given value and returns the old value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value
Atomically updates the element at index {@code i} with the results of applying the given function, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function, returning the updated value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values, returning the updated value
Returns the String representation of the current values of array
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value {@code ==} the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function, returning the updated value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
Atomically updates the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
Returns the current value of the reference
Returns the current value of the stamp
Returns the current values of both the reference and the stamp
Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp
Atomically sets the value of both the reference and stamp to the given update values if the current reference is {@code ==} to the expected reference and the current stamp is equal to the expected stamp
Unconditionally sets the value of both the reference and stamp
Atomically sets the value of the stamp to the given update value if the current reference is {@code ==} to the expected reference
<p>Consider MIME content <code>data</code> for optimized binary storage as an attachment
<p>Consider binary <code>data</code> for optimized binary storage as an attachment
<p>Read-only property that returns true if JAXB marshaller should enable XOP creation
<p>Add MIME <code>data</code> as an attachment and return attachment's content-id, cid
Returns the number of bytes in this <code>AttachmentPart</code> object
Clears out the content of this <code>AttachmentPart</code> object
Gets the content of this <code>AttachmentPart</code> object as a Java object
Gets the content of this <code>AttachmentPart</code> object as an InputStream as if a call had been made to <code>getContent</code> and no <code>DataContentHandler</code> had been registered for the <code>content-type</code> of this <code>AttachmentPart</code>
Gets the content of this <code>AttachmentPart</code> object as a byte[] array as if a call had been made to <code>getContent</code> and no <code>DataContentHandler</code> had been registered for the <code>content-type</code> of this <code>AttachmentPart</code>
Returns an <code>InputStream</code> which can be used to obtain the content of <code>AttachmentPart</code>  as Base64 encoded character data, this method would base64 encode the raw bytes of the attachment and return
Sets the content of this attachment part to that of the given <code>Object</code> and sets the value of the <code>Content-Type</code> header to the given type
Sets the content of this attachment part to that contained by the <code>InputStream</code> <code>content</code> and sets the value of the <code>Content-Type</code> header to the value contained in <code>contentType</code>
Sets the content of this attachment part to that contained by the <code>byte[]</code> array <code>content</code> and sets the value of the <code>Content-Type</code> header to the value contained in <code>contentType</code>
Sets the content of this attachment part from the Base64 source <code>InputStream</code>  and sets the value of the <code>Content-Type</code> header to the value contained in <code>contentType</code>, This method would first decode the base64 input and write the resulting raw bytes to the attachment
Gets the <code>DataHandler</code> object for this <code>AttachmentPart</code> object
Sets the given <code>DataHandler</code> object as the data handler for this <code>AttachmentPart</code> object
Gets the value of the MIME header whose name is "Content-ID"
Gets the value of the MIME header whose name is "Content-Location"
Gets the value of the MIME header whose name is "Content-Type"
Sets the MIME header whose name is "Content-ID" with the given value
Sets the MIME header whose name is "Content-Location" with the given value
Sets the MIME header whose name is "Content-Type" with the given value
Removes all MIME headers that match the given name
Removes all the MIME header entries
Gets all the values of the header identified by the given <code>String</code>
Changes the first header entry that matches the given name to the given value, adding a new header if no existing header matches
Adds a MIME header with the specified name and value to this <code>AttachmentPart</code> object
Retrieves all the headers for this <code>AttachmentPart</code> object as an iterator over the <code>MimeHeader</code> objects
Retrieves all <code>MimeHeader</code> objects that match a name in the given array
Retrieves all <code>MimeHeader</code> objects whose name does not match a name in the given array
<p>Lookup MIME content by content-id, <code>cid</code>, and return as a {@link DataHandler}
<p>Retrieve the attachment identified by content-id, <code>cid</code>,  as a <tt>byte[]</tt></p>
<p>Read-only property that returns true if JAXB unmarshaller needs to perform XOP processing
Get the number of attribute nodes in the list
Look up an attribute's Namespace URI by index
Look up an attribute's local name by index
Look up an attribute's qualified name by index
Get the attribute's node type by index
Get the attribute's node value by index
Get the attribute's node type by name
Look up an attribute's type by Namespace name
Look up an attribute's value by name
Look up an attribute's value by Namespace name
Look up the index of an attribute by Namespace name
Look up the index of an attribute by raw XML 1
Returns the name of this attribute
<code>True</code> if this attribute was explicitly given a value in the instance document, <code>false</code> otherwise
On retrieval, the value of the attribute is returned as a string
On retrieval, the value of the attribute is returned as a string
The <code>Element</code> node this attribute is attached to or <code>null</code> if this attribute is not in use
The type information associated with this attribute
Returns whether this attribute is known to be of type ID (i
Compares two attributes based on the C14n specification
Returns a String containing the  name of the attribute
Returns an Object that is the value of this attribute
Compares the current Attribute Object with another Attribute Object
Returns a hash code value for this attribute
Returns a String object representing this Attribute's value
Gets the name of the attribute which has changed
Gets the type of the attribute which has changed
Gets the old value of the attribute which has changed
Gets the new value of the attribute which has changed
Invoked before sending the specified notification to the listener
Enables all the attribute change notifications the attribute name of which equals the specified name to be sent to the listener
Disables all the attribute change notifications the attribute name of which equals the specified attribute name to be sent to the listener
Disables all the attribute names
Gets all the enabled attribute names for this filter
Returns the index of the first character of the run with respect to all attributes containing the current character
Returns the index of the first character of the run with respect to the given {@code attribute} containing the current character
Returns the index of the first character of the run with respect to the given {@code attributes} containing the current character
Returns the index of the first character following the run with respect to all attributes containing the current character
Returns the index of the first character following the run with respect to the given {@code attribute} containing the current character
Returns the index of the first character following the run with respect to the given {@code attributes} containing the current character
Returns a map with the attributes defined on the current character
Returns the value of the named {@code attribute} for the current character
Returns the keys of all attributes defined on the iterator's text range
Compares two objects for equality
Returns a hash code value for the object
Returns a string representation of the object
Returns the name of the attribute
Resolves instances being deserialized to the predefined constants
Adds an attribute to the entire string
Adds an attribute to a subrange of the string
Adds a set of attributes to a subrange of the string
Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string
Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Returns the array of printing attribute classes for which the Print Service instance does not support the attribute at all, or null if there are no such attributes
Returns the array of printing attributes for which the Print Service instance supports the attribute but does not support that particular value of the attribute, or null if there are no such attribute values
Get the next node via getFirstAttribute && getNextAttribute
Returns the axis being iterated, if it is known
Return the number of attributes in this list
Return the name of an attribute in this list (by position)
Return the type of an attribute in the list (by position)
Return the value of an attribute in the list (by position)
Return the type of an attribute in the list (by name)
Return the value of an attribute in the list (by name)
Set the attribute list, discarding previous contents
Add an attribute to an attribute list
Remove an attribute from the list
Clear the attribute list
Return the number of attributes in the list
Get the name of an attribute (by position)
Get the type of an attribute (by position)
Get the value of an attribute (by position)
Get the type of an attribute (by name)
Get the value of an attribute (by name)
Adds an attribute using its nodeName attribute
Adds an attribute using its namespaceURI and localName
NON-DOM: Remove the node object NOTE: Specifically removes THIS NODE -- not the node with this name, nor the node with these contents
Internal removeNamedItem method allowing to specify whether an exception must be thrown if the specified name is not found
Introduced in DOM Level 2
Internal removeNamedItemNS method allowing to specify whether an exception must be thrown if the specified local name and namespace URI is not found
Cloning a NamedNodeMap is a DEEP OPERATION; it always clones all the nodes contained in the map
Override parent's method to set the ownerNode correctly
Get this AttributeMap in sync with the given "defaults" map
Sets the unexecuted modification list to be e
Retrieves the unexecuted modification list
The string representation of this exception consists of information about where the error occurred, and the first unexecuted modification
[attribute declaration]: An item isomorphic to the declaration component itself
[schema default]
[schema normalized value]
[schema specified]
Determines the extent to which the document has been validated
Determine the validity of the node with respect to the validation being attempted
A list of error codes generated from validation attempts
An item isomorphic to the type definition used to validate this element
If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple thype definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value
An item isomorphic to the attribute declaration used to validate this attribute
Reset()
When this attribute reader is added via the static method     Attribute
Returns the value of the specified attribute name, or null if the attribute name was not found
Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found
Returns the value of the specified Attributes
Associates the specified value with the specified attribute name (key) in this Map
Associates the specified value with the specified attribute name, specified as a String
Removes the attribute with the specified name (key) from this Map
Returns true if this Map maps one or more attribute names (keys) to the specified value
Returns true if this Map contains the specified attribute name (key)
Copies all of the attribute name-value mappings from the specified Attributes to this Map
Removes all attributes from this Map
Returns the number of attributes in this Map
Returns true if this Map contains no attributes
Returns a Set view of the attribute names (keys) contained in this Map
Returns a Collection view of the attribute values contained in this Map
Returns a Collection view of the attribute name-value mappings contained in this Map
Compares the specified Attributes object with this Map for equality
Returns the hash code value for this Map
Returns a copy of the Attributes, implemented as follows: <pre>     public Object clone() { return new Attributes(this); } </pre> Since the attribute names and values are themselves immutable, the Attributes returned can be safely modified without affecting the original
Compares this attribute name to another for equality
Computes the hash value for this attribute name
Returns the attribute name as a String
Returns false unless the attribute was declared in the DTD
Returns false unless the attribute was declared in the DTD
Returns false unless the attribute was declared in the DTD
Returns true unless the attribute value was provided by DTD defaulting
Returns true unless the attribute value was provided by DTD defaulting
Returns true unless the attribute value was provided by DTD defaulting
Returns the current value of the attribute's "declared" flag
Returns the current value of the attribute's "declared" flag
Returns the current value of the attribute's "declared" flag
Returns the current value of an attribute's "specified" flag
Returns the current value of an attribute's "specified" flag
Returns the current value of an attribute's "specified" flag
Copy an entire Attributes object
Add an attribute to the end of the list, setting its "specified" flag to true
Assign a value to the "declared" flag of a specific attribute
Assign a value to the "specified" flag of a specific attribute
Returns the number of attributes that are defined locally in this set
Checks whether the named attribute has a value specified in the set without resolving through another attribute set
Determines if the two attribute sets are equivalent
Returns an attribute set that is guaranteed not to change over time
Fetches the value of the given attribute
Returns an enumeration over the names of the attributes that are defined locally in the set
Returns {@code true} if this set defines an attribute with the same name and an equal value
Returns {@code true} if this set defines all the attributes from the given set with equal values
Gets the resolving parent
Creates an unmodifiable view of the given attribute set
Creates an unmodifiable view of the given doc attribute set
Creates an unmodifiable view of the given print request attribute set
Creates an unmodifiable view of the given print job attribute set
Creates an unmodifiable view of the given print service attribute set
Creates a synchronized view of the given attribute set
Creates a synchronized view of the given doc attribute set
Creates a synchronized view of the given print request attribute set
Creates a synchronized view of the given print job attribute set
Creates a synchronized view of the given print service attribute set
Verify that the given object is a {@link java
Verify that the given object is an instance of the given interface, which is assumed to be interface {@link Attribute Attribute} or a subinterface thereof
Verify that the given attribute category object is equal to the category of the given attribute value object
Return the number of attributes in the list
Return an attribute's Namespace URI
Return an attribute's local name
Return an attribute's qualified (prefixed) name
Return an attribute's type by index
Return an attribute's value by index
Look up an attribute's index by Namespace name
Look up an attribute's index by qualified (prefixed) name
Look up an attribute's type by Namespace-qualified name
Look up an attribute's type by qualified (prefixed) name
Look up an attribute's value by Namespace-qualified name
Look up an attribute's value by qualified (prefixed) name
Clear the attribute list for reuse
Copy an entire Attributes object
Add an attribute to the end of the list
Set an attribute in the list
Remove an attribute from the list
Set the Namespace URI of a specific attribute
Set the local name of a specific attribute
Set the qualified name of a specific attribute
Set the type of a specific attribute
Set the value of a specific attribute
This method gets the index of an attribute given its qName
This method adds the attribute, but also records its qName/index pair in the hashtable for fast lookup by getIndex(qName)
This method clears the accumulated attributes
This method sets the attributes, previous attributes are cleared, it also keeps the hashtable up to date for quick lookup via getIndex(qName)
This method gets the index of an attribute given its uri and locanName
Sets the XML attributes to be wrapped
Returns a string representation of the name of the attribute
<p>Applies the <CODE>AttributeValueExp</CODE> on an MBean
Returns the string representing its value
Sets the MBean server on which the query is to be performed
<p>Return the value of the given attribute in the named MBean
Returns the name of the attribute view
Method getSchemaTypeInfo
NON-DOM method for debugging convenience
NON-DOM: resets this node and sets specified values for the node
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 3
Starts playing this audio clip
Starts playing this audio clip in a loop
Stops playing this audio clip
Obtains the audio file type, such as <code>WAVE</code> or <code>AU</code>
Obtains the size in bytes of the entire audio file (not just its audio data)
Obtains the format of the audio data contained in the audio file
Obtains the length of the audio data contained in the file, expressed in sample frames
Obtain an unmodifiable map of properties
Obtain the property value specified by the key
Provides a string representation of the file format
Finalizes the equals method
Finalizes the hashCode method
Provides the file type's name as the <code>String</code> representation of the file type
Obtains the common file name extension for this file type
Obtains the audio file format of the input stream provided
Obtains the audio file format of the URL provided
Obtains the audio file format of the <code>File</code> provided
Obtains an audio input stream from the input stream provided
Obtains an audio input stream from the URL provided
Obtains an audio input stream from the <code>File</code> provided
Obtains the file types for which file writing support is provided by this audio file writer
Indicates whether file writing support for the specified file type is provided by this audio file writer
Obtains the file types that this audio file writer can write from the audio input stream specified
Indicates whether an audio file of the type specified can be written from the audio input stream indicated
Writes a stream of bytes representing an audio file of the file type indicated to the output stream provided
Writes a stream of bytes representing an audio file of the file format indicated to the external file provided
Obtains the type of encoding for sounds in this format
Obtains the sample rate
Obtains the size of a sample
Obtains the number of channels
Obtains the frame size in bytes
Obtains the frame rate in frames per second
Indicates whether the audio data is stored in big-endian or little-endian byte order
Obtain an unmodifiable map of properties
Obtain the property value specified by the key
Indicates whether this format matches the one specified
Returns a string that describes the format, such as: "PCM SIGNED 22050 Hz 16 bit mono big-endian"
Finalizes the equals method
Finalizes the hashCode method
Provides the <code>String</code> representation of the encoding
Obtains the audio format of the sound data in this audio input stream
Obtains the length of the stream, expressed in sample frames rather than bytes
Reads the next byte of data from the audio input stream
Reads some number of bytes from the audio input stream and stores them into the buffer array <code>b</code>
Reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array
Skips over and discards a specified number of bytes from this audio input stream
Returns the maximum number of bytes that can be read (or skipped over) from this audio input stream without blocking
Closes this audio input stream and releases any system resources associated with the stream
Marks the current position in this audio input stream
Repositions this audio input stream to the position it had at the time its <code>mark</code> method was last invoked
Tests whether this audio input stream supports the <code>mark</code> and <code>reset</code> methods
Obtains an array of mixer info objects that represents the set of audio mixers that are currently installed on the system
Obtains the requested audio mixer
Obtains information about all source lines of a particular type that are supported by the installed mixers
Obtains information about all target lines of a particular type that are supported by the installed mixers
Indicates whether the system supports any lines that match the specified <code>Line
Obtains a line that matches the description in the specified <code>Line
Obtains a clip that can be used for playing back an audio file or an audio stream
Obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream
Obtains a source data line that can be used for playing back audio data in the format specified by the <code>AudioFormat</code> object
Obtains a source data line that can be used for playing back audio data in the format specified by the <code>AudioFormat</code> object, provided by the mixer specified by the <code>Mixer
Obtains a target data line that can be used for recording audio data in the format specified by the <code>AudioFormat</code> object
Obtains a target data line that can be used for recording audio data in the format specified by the <code>AudioFormat</code> object, provided by the mixer specified by the <code>Mixer
Obtains the encodings that the system can obtain from an audio input stream with the specified encoding using the set of installed format converters
Obtains the encodings that the system can obtain from an audio input stream with the specified format using the set of installed format converters
Indicates whether an audio input stream of the specified encoding can be obtained from an audio input stream that has the specified format
Obtains an audio input stream of the indicated encoding, by converting the provided audio input stream
Obtains the formats that have a particular encoding and that the system can obtain from a stream of the specified format using the set of installed format converters
Indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format
Obtains an audio input stream of the indicated format, by converting the provided audio input stream
Obtains the audio file format of the provided input stream
Obtains the audio file format of the specified URL
Obtains the audio file format of the specified <code>File</code>
Obtains an audio input stream from the provided input stream
Obtains an audio input stream from the URL provided
Obtains an audio input stream from the provided <code>File</code>
Obtains the file types for which file writing support is provided by the system
Indicates whether file writing support for the specified file type is provided by the system
Obtains the file types that the system can write from the audio input stream specified
Indicates whether an audio file of the specified file type can be written from the indicated audio input stream
Writes a stream of bytes representing an audio file of the specified file type to the output stream provided
Writes a stream of bytes representing an audio file of the specified file type to the external file provided
Add additional information identified by a key to the Augmentations structure
Get information identified by a key from the Augmentations structure
Remove additional info from the Augmentations structure
Returns an enumeration of the keys in the Augmentations structure
Remove all objects from the Augmentations structure
Add additional information identified by a key to the Augmentations structure
Get information identified by a key from the Augmentations structure
Remove additional info from the Augmentations structure
Returns an enumeration of the keys in the Augmentations structure
Remove all objects from the Augmentations structure
Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication
Ask the authenticator that has been registered with the system for a password
Ask the authenticator that has been registered with the system for a password
Ask the authenticator that has been registered with the system for a password
Gets the {@code hostname} of the site or proxy requesting authentication, or {@code null} if not available
Gets the {@code InetAddress} of the site requesting authorization, or {@code null} if not available
Gets the port number for the requested connection
Give the protocol that's requesting the connection
Gets the prompt string given by the requestor
Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example)
Called when password authorization is needed
Returns the URL that resulted in this request for authentication
Returns whether the requestor is a Proxy or a Server
Get the ad-type field
Get a copy of the ad-data field
Returns the authentication id to check
Returns the authorization id to check
Determines whether the authentication id is allowed to act on behalf of the authorization id
Sets whether the authorization is allowed
Returns the id of the authorized user
Sets the id of the authorized entity
Log in to this provider
Log out from this provider
Set a {@code CallbackHandler}
Closes this resource, relinquishing any underlying resources
This method returns the <code>Insets</code> describing the autoscrolling region or border relative to the geometry of the implementing Component
notify the <code>Component</code> to autoscroll <P>
Retargets an event to a new source
Returns the event type
Returns a String representation of this object
Returns a string representing the state of this <code>Event</code>
Consumes this event, if this event can be consumed
Returns whether this event has been consumed
Invoked when an event is dispatched in the AWT
Forwards the AWT event to the listener delegate
Returns the event mask associated with the listener
Removes a listener from this multicaster
Handles the componentResized event by invoking the componentResized methods on listener-a and listener-b
Handles the componentMoved event by invoking the componentMoved methods on listener-a and listener-b
Handles the componentShown event by invoking the componentShown methods on listener-a and listener-b
Handles the componentHidden event by invoking the componentHidden methods on listener-a and listener-b
Handles the componentAdded container event by invoking the componentAdded methods on listener-a and listener-b
Handles the componentRemoved container event by invoking the componentRemoved methods on listener-a and listener-b
Handles the focusGained event by invoking the focusGained methods on listener-a and listener-b
Handles the focusLost event by invoking the focusLost methods on listener-a and listener-b
Handles the keyTyped event by invoking the keyTyped methods on listener-a and listener-b
Handles the keyPressed event by invoking the keyPressed methods on listener-a and listener-b
Handles the keyReleased event by invoking the keyReleased methods on listener-a and listener-b
Handles the mouseClicked event by invoking the mouseClicked methods on listener-a and listener-b
Handles the mousePressed event by invoking the mousePressed methods on listener-a and listener-b
Handles the mouseReleased event by invoking the mouseReleased methods on listener-a and listener-b
Handles the mouseEntered event by invoking the mouseEntered methods on listener-a and listener-b
Handles the mouseExited event by invoking the mouseExited methods on listener-a and listener-b
Handles the mouseDragged event by invoking the mouseDragged methods on listener-a and listener-b
Handles the mouseMoved event by invoking the mouseMoved methods on listener-a and listener-b
Handles the windowOpened event by invoking the windowOpened methods on listener-a and listener-b
Handles the windowClosing event by invoking the windowClosing methods on listener-a and listener-b
Handles the windowClosed event by invoking the windowClosed methods on listener-a and listener-b
Handles the windowIconified event by invoking the windowIconified methods on listener-a and listener-b
Handles the windowDeiconfied event by invoking the windowDeiconified methods on listener-a and listener-b
Handles the windowActivated event by invoking the windowActivated methods on listener-a and listener-b
Handles the windowDeactivated event by invoking the windowDeactivated methods on listener-a and listener-b
Handles the windowStateChanged event by invoking the windowStateChanged methods on listener-a and listener-b
Handles the windowGainedFocus event by invoking the windowGainedFocus methods on listener-a and listener-b
Handles the windowLostFocus event by invoking the windowLostFocus methods on listener-a and listener-b
Handles the actionPerformed event by invoking the actionPerformed methods on listener-a and listener-b
Handles the itemStateChanged event by invoking the itemStateChanged methods on listener-a and listener-b
Handles the adjustmentValueChanged event by invoking the adjustmentValueChanged methods on listener-a and listener-b
Handles the inputMethodTextChanged event by invoking the inputMethodTextChanged methods on listener-a and listener-b
Handles the caretPositionChanged event by invoking the caretPositionChanged methods on listener-a and listener-b
Handles the hierarchyChanged event by invoking the hierarchyChanged methods on listener-a and listener-b
Handles the ancestorMoved event by invoking the ancestorMoved methods on listener-a and listener-b
Handles the ancestorResized event by invoking the ancestorResized methods on listener-a and listener-b
Handles the mouseWheelMoved event by invoking the mouseWheelMoved methods on listener-a and listener-b
Adds component-listener-a with component-listener-b and returns the resulting multicast listener
Adds container-listener-a with container-listener-b and returns the resulting multicast listener
Adds focus-listener-a with focus-listener-b and returns the resulting multicast listener
Adds key-listener-a with key-listener-b and returns the resulting multicast listener
Adds mouse-listener-a with mouse-listener-b and returns the resulting multicast listener
Adds mouse-motion-listener-a with mouse-motion-listener-b and returns the resulting multicast listener
Adds window-listener-a with window-listener-b and returns the resulting multicast listener
Adds window-state-listener-a with window-state-listener-b and returns the resulting multicast listener
Adds window-focus-listener-a with window-focus-listener-b and returns the resulting multicast listener
Adds action-listener-a with action-listener-b and returns the resulting multicast listener
Adds item-listener-a with item-listener-b and returns the resulting multicast listener
Adds adjustment-listener-a with adjustment-listener-b and returns the resulting multicast listener
Adds input-method-listener-a with input-method-listener-b and returns the resulting multicast listener
Adds hierarchy-listener-a with hierarchy-listener-b and returns the resulting multicast listener
Adds hierarchy-bounds-listener-a with hierarchy-bounds-listener-b and returns the resulting multicast listener
Adds mouse-wheel-listener-a with mouse-wheel-listener-b and returns the resulting multicast listener
Removes the old component-listener from component-listener-l and returns the resulting multicast listener
Removes the old container-listener from container-listener-l and returns the resulting multicast listener
Removes the old focus-listener from focus-listener-l and returns the resulting multicast listener
Removes the old key-listener from key-listener-l and returns the resulting multicast listener
Removes the old mouse-listener from mouse-listener-l and returns the resulting multicast listener
Removes the old mouse-motion-listener from mouse-motion-listener-l and returns the resulting multicast listener
Removes the old window-listener from window-listener-l and returns the resulting multicast listener
Removes the old window-state-listener from window-state-listener-l and returns the resulting multicast listener
Removes the old window-focus-listener from window-focus-listener-l and returns the resulting multicast listener
Removes the old action-listener from action-listener-l and returns the resulting multicast listener
Removes the old item-listener from item-listener-l and returns the resulting multicast listener
Removes the old adjustment-listener from adjustment-listener-l and returns the resulting multicast listener
Removes the old input-method-listener from input-method-listener-l and returns the resulting multicast listener
Removes the old hierarchy-listener from hierarchy-listener-l and returns the resulting multicast listener
Removes the old hierarchy-bounds-listener from hierarchy-bounds-listener-l and returns the resulting multicast listener
Removes the old mouse-wheel-listener from mouse-wheel-listener-l and returns the resulting multicast listener
Returns the resulting multicast listener from adding listener-a and listener-b together
Returns the resulting multicast listener after removing the old listener from listener-l
Returns an array of all the objects chained as <code><em>Foo</em>Listener</code>s by the specified <code>java
Registers a new class which the factory methods in <code>AWTKeyStroke</code> will use when generating new instances of <code>AWTKeyStroke</code>s
Returns a shared instance of an <code>AWTKeyStroke</code> that represents a <code>KEY_TYPED</code> event for the specified character
Returns a shared instance of an {@code AWTKeyStroke} that represents a {@code KEY_TYPED} event for the specified Character object and a set of modifiers
Returns a shared instance of an <code>AWTKeyStroke</code>, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released
Returns a shared instance of an <code>AWTKeyStroke</code>, given a numeric key code and a set of modifiers
Returns an <code>AWTKeyStroke</code> which represents the stroke which generated a given <code>KeyEvent</code>
Parses a string and returns an <code>AWTKeyStroke</code>
Returns the character for this <code>AWTKeyStroke</code>
Returns the numeric key code for this <code>AWTKeyStroke</code>
Returns the modifier keys for this <code>AWTKeyStroke</code>
Returns whether this <code>AWTKeyStroke</code> represents a key release
Returns the type of <code>KeyEvent</code> which corresponds to this <code>AWTKeyStroke</code>
Returns a numeric value for this object that is likely to be unique, making it a good choice as the index value in a hash table
Returns true if this object is identical to the specified object
Returns a string that displays and identifies this object's properties
Returns a cached instance of <code>AWTKeyStroke</code> (or a subclass of <code>AWTKeyStroke</code>) which is equal to this instance
Initialize an AxesWalker during the parse of the XPath expression
Get a cloned AxesWalker
Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
The root node of the TreeWalker, as specified in setRoot(int root)
Get the analysis bits for this walker, as defined in the WalkerFactory
Set the root node of the TreeWalker
The node at which the TreeWalker is currently positioned
Set the next walker in the location step chain
Get the next walker in the location step chain
Set or clear the previous walker reference in the location step chain
Get the previous walker reference in the location step chain
Get the next node in document order on the axes
Moves the <code>TreeWalker</code> to the next visible node in document order relative to the current node, and returns the new node
Get the index of the last node that can be itterated to
Set the DTM for this walker
Get the DTM for this walker
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
This will traverse the heararchy, calling the visitor for each member
Returns the string representing the object
Returns the <CODE>ValueExp</CODE> that originated the exception
Returns the string representing the object
Returns the offset into the document that was not legal
Returns the string representing the object
Call corresponding visitor method(s)
Returns a copy of the linear combination matrix
Transforms the <CODE>Raster</CODE> using the matrix specified in the constructor
Returns the bounding box of the transformed destination
Creates a zeroed destination <CODE>Raster</CODE> with the correct size and number of bands
Returns the location of the corresponding destination point given a point in the source <CODE>Raster</CODE>
Returns the rendering hints for this operation
Creates a new BandedSampleModel with the specified width and height
Creates a new BandedSampleModel with a subset of the bands of this BandedSampleModel
Creates a DataBuffer that corresponds to this BandedSampleModel, The DataBuffer's data type, number of banks, and size will be consistent with this BandedSampleModel
Returns data for a single pixel in a primitive array of type TransferType
Returns all samples for the specified pixel in an int array
Returns all samples for the specified rectangle of pixels in an int array, one sample per data array element
Returns as int the sample in a specified band for the pixel located at (x,y)
Returns the sample in a specified band for the pixel located at (x,y) as a float
Returns the sample in a specified band for a pixel located at (x,y) as a double
Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element
Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType
Sets a pixel in the DataBuffer using an int array of samples for input
Sets all samples for a rectangle of pixels from an int array containing one sample per array element
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element
Returns a {@link Encoder} that encodes using the <a href="#basic">Basic</a> type base64 encoding scheme
Returns a {@link Encoder} that encodes using the <a href="#url">URL and Filename safe</a> type base64 encoding scheme
Returns a {@link Encoder} that encodes using the <a href="#mime">MIME</a> type base64 encoding scheme
Returns a {@link Encoder} that encodes using the <a href="#mime">MIME</a> type base64 encoding scheme with specified line length and line separators
Returns a {@link Decoder} that decodes using the <a href="#basic">Basic</a> type base64 encoding scheme
Returns a {@link Decoder} that decodes using the <a href="#url">URL and Filename safe</a> type base64 encoding scheme
Returns a {@link Decoder} that decodes using the <a href="#mime">MIME</a> type base64 decoding scheme
Encodes all bytes from the specified byte array into a newly-allocated byte array using the {@link Base64} encoding scheme
Encodes all bytes from the specified byte array using the {@link Base64} encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0
Encodes the specified byte array into a String using the {@link Base64} encoding scheme
Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the {@link Base64} encoding scheme
Wraps an output stream for encoding byte data using the {@link Base64} encoding scheme
Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data
Decodes all bytes from the input byte array using the {@link Base64} encoding scheme, writing the results into a newly-allocated output byte array
Decodes a Base64 encoded String into a newly-allocated byte array using the {@link Base64} encoding scheme
Decodes all bytes from the input byte array using the {@link Base64} encoding scheme, writing the results into the given output byte array, starting at offset 0
Decodes all bytes from the input byte buffer using the {@link Base64} encoding scheme, writing the results into a newly-allocated ByteBuffer
Returns an input stream for decoding {@link Base64} encoded byte stream
Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType
get all built-in simple types, which are stored in a hashtable keyed by the name
Create a new simple type which is derived by restriction from another simple type
Create a new simple type which is derived by list from another simple type
Create a new simple type which is derived by union from a list of other simple types
Serializes the DOM element using the previously specified writer and output format
Serializes a node using the previously specified writer and output format
Serializes the DOM document fragmnt using the previously specified writer and output format
Serializes the DOM document using the previously specified writer and output format
Called at the end of the document to wrap it up
Serialize the DOM node
Must be called by a method about to print any type of content
Called to print the text contents in the prevailing element format
Returns the suitable entity reference for this character value, or null if no such entity exists
Called to serializee the DOM element
Comments and PIs cannot be serialized before the root element, because the root element serializes the document type, which generally comes first
Called to print additional text with whitespace handling
Print a document type public or system identifier URL
Escapes a string so it may be printed as text content or attribute value
Return the state of the current element
Enter a new element state for the specified element
Leave the current element state and return to the state of the parent element
Returns true if in the state of the document
Returns the namespace prefix for the specified URI
The method modifies global DOM error object
DOM level 3: Check a node to determine if it contains unbound namespace prefixes
Performs the necessary internal configurations and initializations to allow any JDBC <code>RowSet</code> implementation to start using the standard facilities provided by a <code>BaseRowSet</code> instance
The listener will be notified whenever an event occurs on this <code>RowSet</code> object
Removes the designated object from this <code>RowSet</code> object's list of listeners
Notifies all of the listeners registered with this <code>RowSet</code> object that its cursor has moved
Notifies all of the listeners registered with this <code>RowSet</code> object that one of its rows has changed
Notifies all of the listeners registered with this <code>RowSet</code> object that its entire contents have changed
Retrieves the SQL query that is the command for this <code>RowSet</code> object
Sets this <code>RowSet</code> object's <code>command</code> property to the given <code>String</code> object and clears the parameters, if any, that were set for the previous command
Retrieves the JDBC URL that this <code>RowSet</code> object's <code>javax
Sets the Url property for this <code>RowSet</code> object to the given <code>String</code> object and sets the dataSource name property to <code>null</code>
Returns the logical name that when supplied to a naming service that uses the Java Naming and Directory Interface (JNDI) API, will retrieve a <code>javax
Sets the <code>DataSource</code> name property for this <code>RowSet</code> object to the given logical name and sets this <code>RowSet</code> object's Url property to <code>null</code>
Returns the user name used to create a database connection
Sets the username property for this <code>RowSet</code> object to the given user name
Returns the password used to create a database connection for this <code>RowSet</code> object
Sets the password used to create a database connection for this <code>RowSet</code> object to the given <code>String</code> object
Sets the type for this <code>RowSet</code> object to the specified type
Returns the type of this <code>RowSet</code> object
Sets the concurrency for this <code>RowSet</code> object to the specified concurrency
Returns a <code>boolean</code> indicating whether this <code>RowSet</code> object is read-only
Sets this <code>RowSet</code> object's readOnly  property to the given <code>boolean</code>
Returns the transaction isolation property for this <code>RowSet</code> object's connection
Sets the transaction isolation property for this JDBC <code>RowSet</code> object to the given constant
Retrieves the type map associated with the <code>Connection</code> object for this <code>RowSet</code> object
Installs the given <code>java
Retrieves the maximum number of bytes that can be used for a column value in this <code>RowSet</code> object
Sets the maximum number of bytes that can be used for a column value in this <code>RowSet</code> object to the given number
Retrieves the maximum number of rows that this <code>RowSet</code> object may contain
Sets the maximum number of rows that this <code>RowSet</code> object may contain to the given number
Sets to the given <code>boolean</code> whether or not the driver will scan for escape syntax and do escape substitution before sending SQL statements to the database
Retrieves the maximum number of seconds the driver will wait for a query to execute
Sets to the given number the maximum number of seconds the driver will wait for a query to execute
Retrieves a <code>boolean</code> indicating whether rows marked for deletion appear in the set of current rows
Sets the property <code>showDeleted</code> to the given <code>boolean</code> value, which determines whether rows marked for deletion appear in the set of current rows
Ascertains whether escape processing is enabled for this <code>RowSet</code> object
Gives the driver a performance hint as to the direction in which the rows in this <code>RowSet</code> object will be processed
Retrieves this <code>RowSet</code> object's current setting for the fetch direction
Sets the fetch size for this <code>RowSet</code> object to the given number of rows
Returns the fetch size for this <code>RowSet</code> object
Returns the concurrency for this <code>RowSet</code> object
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to the given <code>boolean</code> in the Java programming language
Sets the designated parameter to the given <code>byte</code> in the Java programming language
Sets the designated parameter to the given <code>short</code> in the Java programming language
Sets the designated parameter to an <code>int</code> in the Java programming language
Sets the designated parameter to the given <code>long</code> in the Java programming language
Sets the designated parameter to the given <code>float</code> in the Java programming language
Sets the designated parameter to the given <code>double</code> in the Java programming language
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>String</code> value
Sets the designated parameter to the given array of bytes
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given input stream
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given input stream
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>Reader</code> object
Sets the designated parameter to an <code>Object</code> in the Java programming language
Sets the value of the designated parameter with the given <code>Object</code> value
Sets the designated parameter to an <code>Object</code> in the Java programming language
Sets the designated parameter to the given <code>Ref</code> object in the Java programming language
Sets the designated parameter to the given <code>Blob</code> object in the Java programming language
Sets the designated parameter to the given <code>Clob</code> object in the Java programming language
Sets the designated parameter to an <code>Array</code> object in the Java programming language
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Clears all of the current parameter values in this <code>RowSet</code> object's internal representation of the parameters to be set in this <code>RowSet</code> object's command when it is executed
Retrieves an array containing the parameter values (both Objects and primitives) that have been set for this <code>RowSet</code> object's command and throws an <code>SQLException</code> object if all parameters have not been set
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to the given Java <code>boolean</code> value
Sets the designated parameter to the given Java <code>byte</code> value
Sets the designated parameter to the given Java <code>short</code> value
Sets the designated parameter to the given Java <code>int</code> value
Sets the designated parameter to the given Java <code>long</code> value
Sets the designated parameter to the given Java <code>float</code> value
Sets the designated parameter to the given Java <code>double</code> value
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given Java <code>String</code> value
Sets the designated parameter to the given Java array of bytes
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter to the given input stream
Sets the designated parameter to the given input stream
Sets the designated parameter to the given <code>Reader</code> object
Sets the designated parameter in this <code>RowSet</code> object's command to a <code>Reader</code> object
Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
Create a new simple type which is derived by restriction from another simple type
Create a new simple type which is derived by list from another simple type
Create a new simple type which is derived by union from a list of other simple types
Implementation internal
Returns an iterator for the elements of this stream
Returns a spliterator for the elements of this stream
Returns whether this stream, if a terminal operation were to be executed, would execute in parallel
Returns an equivalent stream that is sequential
Returns an equivalent stream that is parallel
Returns an equivalent stream that is <a href="package-summary
Returns an equivalent stream with an additional close handler
Closes this stream, causing all close handlers for this stream pipeline to be called
Returns the direction of the arrow
Sets the direction of the arrow
Returns the preferred size of the {@code BasicArrowButton}
Returns the minimum size of the {@code BasicArrowButton}
Returns the maximum size of the {@code BasicArrowButton}
Returns whether the arrow button should get the focus
Paints a triangle
Determines whether obj is equal to this attribute
Calculates the hash code of this attribute
Generates the string representation of this attribute
Retrieves an enumeration of this attribute's values
Retrieves one of this attribute's values
Determines whether a value is in this attribute
Adds a new value to this attribute
Removes a specified value from this attribute
Retrieves the syntax definition associated with this attribute
Retrieves this attribute's schema definition
Generates the string representation of this attribute set
Determines whether this <tt>BasicAttributes</tt> is equal to another <tt>Attributes</tt> Two <tt>Attributes</tt> are equal if they are both instances of <tt>Attributes</tt>, treat the case of attribute IDs the same way, and contain the same attributes
Calculates the hash code of this BasicAttributes
Returns a border instance for a JSplitPane divider
Register default key actions: pressing space to "click" a button and registring the keyboard mnemonic (if any)
Unregister's default key actions
As of Java 2 platform v 1
Method which renders the text of the current button
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Removes installed preview panel from the UI delegate
Creates the internal editor component
Sets the item that should be edited
Installs the default colors, default font, default renderer, and default editor into the JComboBox
Creates and installs listeners for the combo box and its model
Uninstalls the default colors, default font, default renderer, and default editor from the combo box
Removes the installed listeners from the combo box and its model
Creates the popup portion of the combo box
Creates a <code>KeyListener</code> which will be added to the combo box
Creates a <code>FocusListener</code> which will be added to the combo box
Creates a list data listener which will be added to the <code>ComboBoxModel</code>
Creates an <code>ItemListener</code> which will be added to the combo box
Creates a <code>PropertyChangeListener</code> which will be added to the combo box
Creates a layout manager for managing the components which make up the combo box
Creates the default renderer that will be used in a non-editiable combo box
Creates the default editor that will be used in editable combo boxes
Creates and initializes the components which make up the aggregate combo box
The aggregate components which comprise the combo box are unregistered and uninitialized
This public method is implementation specific and should be private
This public method is implementation specific and should be private
This protected method is implementation specific and should be private
This protected method is implementation specific and should be private
This public method is implementation specific and should be private
This public method is implementation specific and should be private
Creates a button which will be used as the control to show or hide the popup portion of the combo box
Tells if the popup is visible or not
Hides the popup
Determines if the JComboBox is focus traversable
The minimum size is the size of the display area plus insets plus the button
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Returns whether or not the supplied keyCode maps to a key that is used for navigation
Selects the next item in the list
Selects the previous item in the list
Hides the popup if it is showing and shows the popup if it is hidden
Returns the area that is reserved for drawing the currently selected item
Gets the insets from the JComboBox
Paints the currently selected item
Paints the background of the currently selected item
Return the default size of an empty display area of the combo box using the current renderer and font
Returns the calculated size of the display area
Returns the size a component would have if used as a cell renderer
Adds keyboard actions to the JComboBox
Removes the focus InputMap and ActionMap
Implementation of ComboPopup
Implementation of ComboPopup
Implementation of ComboPopup
Implementation of ComboPopup
Implementation of ComboPopup
Implementation of ComboPopup
Called when the UI is uninstalling
Removes the listeners from the combo box model
Creates a listener that will watch for mouse-press and release events on the combo box
Creates the mouse motion listener which will be added to the combo box
Creates the key listener that will be added to the combo box
Creates a list selection listener that watches for selection changes in the popup's list
Creates a list data listener which will be added to the <code>ComboBoxModel</code>
Creates a mouse listener that watches for mouse events in the popup's list
Creates a mouse motion listener that watches for mouse motion events in the popup's list
Creates a <code>PropertyChangeListener</code> which will be added to the combo box
Creates an <code>ItemListener</code> which will be added to the combo box
Creates the JList used in the popup to display the items in the combo box model
Configures the list which is used to hold the combo box items in the popup
Adds the listeners to the list control
Creates the scroll pane which houses the scrollable list
Configures the scrollable portion which holds the list within the combo box popup
Configures the popup portion of the combo box
This method adds the necessary listeners to the JComboBox
Installs the listeners on the combo box model
Overridden to unconditionally return false
This protected method is implementation specific and should be private
This protected method is implementation specific and should be private
This protected method is implementation specific and should be private
This protected method is implementation specific and should be private
Gets the AccessibleContext associated with this BasicComboPopup
This is is a utility method that helps event handlers figure out where to send the focus when the popup is brought up
Makes the popup visible if it is hidden and makes it hidden if it is visible
Retrieves the height of the popup based on the current ListCellRenderer and the maximum row count
Calculate the placement and size of the popup portion of the combo box based on the combo box location and the enclosing screen bounds
A utility method used by the event listeners
Responds to mouse-pressed events on the combo box
Responds to the user terminating a click or drag that began on the combo box
Retrieves the control's object identifier string
Determines the control's criticality
Retrieves the control's ASN
Desktop icons can not be resized
Installs the <code>PropertyChangeListener</code> returned from <code>createPropertyChangeListener</code> on the <code>JDesktopPane</code>
Uninstalls the <code>PropertyChangeListener</code> returned from <code>createPropertyChangeListener</code> from the <code>JDesktopPane</code>
Returns the <code>PropertyChangeListener</code> to install on the <code>JDesktopPane</code>
This method is used to interrupt file loading thread
Renames a file in the underlying file system
Obsolete - not used
Obsolete - not used
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Returns an array of all the property change listeners registered on this component
Support for reporting bound property changes for boolean properties
Creates a UI for the JTextPane
Fetches the name used as a key to lookup properties through the UIManager
{@inheritDoc}
{@inheritDoc}
Fetches the EditorKit for the UI
This method gets called when a bound property is changed on the associated JTextComponent
Returns the time of last modification
Returns the time of last access
Returns the creation time
Tells whether the file is a regular file with opaque content
Tells whether the file is a directory
Tells whether the file is a symbolic link
Tells whether the file is something other than a regular file, directory, or symbolic link
Returns the size of the file (in bytes)
Returns an object that uniquely identifies the given file, or {@code null} if a file key is not available
Returns the name of the attribute view
Reads the basic file attributes as a bulk operation
Updates any or all of the file's last modified time, last access time, and create time attributes
Creates a {@code BasicFileChooserUI} implementation for the specified component
Property to remember whether a directory is currently selected in the UI
Property to remember whether a directory is currently selected in the UI
Property to remember the directory that is currently selected in the UI
Property to remember the directory that is currently selected in the UI
Returns the default accept all file filter
Returns the title of this dialog
The JList used for representing the files is created by subclasses, but the selection is monitored in this class
Creates a UI for a JFormattedTextField
Fetches the name used as a key to lookup properties through the UIManager
Returns the amount of space taken up by a border drawn by <code>drawEtchedRect()</code>
Returns the amount of space taken up by a border drawn by <code>drawGroove()</code>
Draw a string with the graphics <code>g</code> at location (x,y)  just like <code>g
Draw a string with the graphics <code>g</code> at location (<code>x</code>, <code>y</code>) just like <code>g
Create an html renderer for the given component and string of html
Returns the baseline for the html renderer
Check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering
Stash the HTML render for the given text into the client properties of the given JComponent
Invoked from paintComponent
Post a WINDOW_CLOSING-like event to the frame, so that it can be treated like a regular Frame
Installs necessary mouse handlers on <code>newPane</code> and adds it to the frame
Returns the proper DesktopManager
This method is called when the user wants to close the frame
This method is called when the user wants to maximize the frame
This method is called when the user wants to minimize the frame
This method is called when the user wants to iconify the frame
This method is called when the user wants to deiconify the frame
This method is called when the frame becomes selected
This method is called when the frame is no longer selected
Detects changes in state from the JInternalFrame and handles actions
Invoked when a JInternalFrame's parent's size changes
Forwards the call to SwingUtilities
Paint clippedText at textX, textY with the labels foreground color
Paint clippedText at textX, textY with background
Paints the label text with the foreground color, if the label is opaque then paints the entire background with the background color
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Installs default properties
Registers listeners
Registers components
Registers keyboard actions
Uninstalls default properties
Unregisters listeners
Unregisters components
Unregisters keyboard actions
Returns an instance of {@code BasicLabelUI}
Paint one List cell: compute the relevant state, get the "rubber stamp" cell renderer component, and then use the CellRendererPane to paint it
Paint the rows that intersect the Graphics objects clipRect
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
The preferredSize of the list depends upon the layout orientation
Selected the previous row and force it to be visible
Selected the previous row and force it to be visible
Registers the keyboard bindings on the <code>JList</code> that the <code>BasicListUI</code> is associated with
Unregisters keyboard actions installed from <code>installKeyboardActions</code>
Creates and installs the listeners for the JList, its model, and its selectionModel
Removes the listeners from the JList, its model, and its selectionModel
Initializes list properties such as font, foreground, and background, and adds the CellRendererPane
Sets the list properties that have not been explicitly overridden to {@code null}
Initializes <code>this
Uninitializes <code>this
Returns a new instance of BasicListUI
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the height of the specified row based on the current layout
Convert the JList relative coordinate to the row that contains it, based on the current layout
Return the JList relative Y coordinate of the origin of the specified row or -1 if row isn't valid
If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset updateLayoutStateNeeded
Recompute the value of cellHeight or cellHeights based and cellWidth, based on the current font and the current values of fixedCellWidth, fixedCellHeight, and prototypeCellValue
Creates a delegate that implements MouseInputListener
Creates an instance of ListSelectionHandler that's added to the JLists by selectionModel as needed
Creates an instance of ListDataListener that's added to the JLists by model as needed
Creates an instance of PropertyChangeHandler that's added to the JList by installUI()
Returns the look and feel defaults
{@inheritDoc}
{@inheritDoc}
Populates {@code table} with mappings from {@code uiClassID} to the fully qualified name of the ui class
Populates {@code table} with system colors
Populates {@code table} with the {@code name-color} pairs in {@code systemColors}
Populates {@code table} with the defaults for the basic look and feel
Returns an <code>ActionMap</code> containing the audio actions for this look and feel
Creates and returns an {@code Action} used to play a sound
If necessary, invokes {@code actionPerformed} on {@code audioAction} to play a sound
Creates a <code>PropertyChangeListener</code> which will be added to the menu item
We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint()
Draws the background of the menu item
Renders the text of the current menu item
Call this method when a menu item is to be activated
Invoked when the mouse has been clicked on the menu
Invoked when the mouse has been released on the menu
Invoked when the cursor enters the menu
Invoked when a mouse button is pressed on the menu and then dragged
Creates a new BasicOptionPaneUI instance
Installs the receiver as the L&amp;F for the passed in <code>JOptionPane</code>
Removes the receiver from the L&amp;F controller of the passed in split pane
Returns the minimum size the option pane should be
If <code>c</code> is the <code>JOptionPane</code> the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the <code>LayoutManager</code> for the <code>JOptionPane</code>, and <code>getMinimumOptionPaneSize</code>
Messaged from installComponents to create a Container containing the body of the message
Creates the appropriate object to represent <code>msg</code> and places it into <code>container</code>
Returns the message to display from the JOptionPane the receiver is providing the look and feel for
Creates and adds a JLabel representing the icon returned from <code>getIcon</code> to <code>top</code>
Returns the icon from the JOptionPane the receiver is providing the look and feel for, or the default icon as returned from <code>getDefaultIcon</code>
Returns the icon to use for the passed in type
Returns the maximum number of characters to place on a line
Recursively creates new JLabel instances to represent <code>d</code>
Creates and returns a Container containing the buttons
Creates the appropriate object to represent each of the objects in <code>buttons</code> and adds it to <code>container</code>
Returns the buttons to display from the JOptionPane the receiver is providing the look and feel for
Returns true, basic L&amp;F wants all the buttons to have the same width
Returns the initial index into the buttons to select
Sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputComponent
If inputComponent is non-null, the focus is requested on that, otherwise request focus on the default value
Returns true if in the last call to validateComponent the message or buttons contained a subclass of Component
If the source of the PropertyChangeEvent <code>e</code> equals the optionPane and is one of the ICON_PROPERTY, MESSAGE_PROPERTY, OPTIONS_PROPERTY or INITIAL_VALUE_PROPERTY, validateComponent is invoked
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Adds a component to the parser configuration
Parse an XML document
Sets the document handler on the last component in the pipeline to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
Set the state of a feature
setProperty
Set the locale to use for messages
Returns the locale
reset all components before parsing and namespace context
Check a property
Check a feature
Creates a UI for a JPasswordField
Fetches the name used as a key to look up properties through the UIManager
Installs the necessary properties on the JPasswordField
Creates a view (PasswordView) for an element
Checks if the specified permission is "implied" by this object
Checks two BasicPermission objects for equality
Returns the hash code value for this object
Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission
Returns a new PermissionCollection object for storing BasicPermission objects
Starts the animation thread, creating and initializing it if necessary
Stops the animation thread
Removes all listeners installed by this object
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
The "selectionForeground" is the color of the text when it is painted over a filled area of the progress bar
The "selectionBackground" is the color of the text when it is painted over an unfilled area of the progress bar
Returns the width (if HORIZONTAL) or height (if VERTICAL) of each of the individual cells/units to be rendered in the progress bar
Returns the spacing between each of the cells/units in the progress bar
This determines the amount of the progress bar that should be filled based on the percent done gathered from the model
Delegates painting to one of two methods: paintDeterminate or paintIndeterminate
Stores the position and size of the bouncing box that would be painted for the current animation index in <code>r</code> and returns <code>r</code>
Returns the length of the "bouncing box" to be painted
All purpose paint method that should do the right thing for all linear bouncing-box progress bars
All purpose paint method that should do the right thing for almost all linear, determinate progress bars
Designate the place where the progress string will be painted
The Minimum size for this component is 10
Gets the index of the current animation frame
Returns the number of frames for the complete animation loop used by an indeterminate JProgessBar
Sets the index of the current animation frame to the specified value and requests that the progress bar be repainted
Sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted
Returns an instance of {@code BasicRadioButtonUI}
Returns the default icon
paint the radio button
Paints focused radio button
The preferred size of the radio button
Invoked when a property changes on the root pane
Sets whether or not the mouse is currently over the thumb
Returns true if the mouse is currently over the thumb
A vertical scrollbar's preferred width is the maximum of preferred widths of the (non <code>null</code>) increment/decrement buttons, and the minimum width of the thumb
Returns the smallest acceptable size for the thumb
Returns the largest acceptable size for the thumb
Set the bounds of the thumb and force a repaint that includes the old thumbBounds and the new one
Return the current size/location of the thumb
Returns the current bounds of the track, i
Indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button)
If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page
Set the models value to the position of the thumb's top of Vertical scrollbar, or the left/right of Horizontal scrollbar in left-to-right/right-to-left scrollbar relative to the origin of the track
Invoked when the mouse exits the scrollbar
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Creates an instance of MouseWheelListener, which is added to the JScrollPane by installUI()
Creates an instance of PropertyChangeListener that's added to the JScrollPane by installUI()
Called when the mouse wheel is rotated while over a JScrollPane
Returns true if the user is dragging the slider
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Returns true if all the labels from the label table have the same baseline
Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders
Returns the biggest value that has an entry in the label table
Returns the smallest value that has an entry in the label table
Returns the label that corresponds to the highest slider value in the label table
Returns the label that corresponds to the lowest slider value in the label table
Called for every label in the label table
Called for every label in the label table
This function is called when a mousePressed was detected in the track, not in the thumb
Returns the y location for the specified value
Returns the value at the y position
Returns the value at the x position
If the mouse is pressed above the "thumb" component then reduce the scrollbars value by one page ("page up"), otherwise increase it by one page
Set the models value to the position of the top/left of the thumb relative to the origin of the track
Returns a new instance of BasicSpinnerUI
Calls <code>installDefaults</code>, <code>installListeners</code>, and then adds the components returned by <code>createNextButton</code>, <code>createPreviousButton</code>, and <code>createEditor</code>
Calls <code>uninstallDefaults</code>, <code>uninstallListeners</code>, and then removes all of the spinners children
Initializes <code>PropertyChangeListener</code> with a shared object that delegates interesting PropertyChangeEvents to protected methods
Removes the <code>PropertyChangeListener</code> added by installListeners
Initialize the <code>JSpinner</code> <code>border</code>, <code>foreground</code>, and <code>background</code>, properties based on the corresponding "Spinner
Sets the <code>JSpinner's</code> layout manager to null
Installs the necessary listeners on the next button, <code>c</code>, to update the <code>JSpinner</code> in response to a user gesture
Installs the necessary listeners on the previous button, <code>c</code>, to update the <code>JSpinner</code> in response to a user gesture
Creates a <code>LayoutManager</code> that manages the <code>editor</code>, <code>nextButton</code>, and <code>previousButton</code> children of the JSpinner
Creates a <code>PropertyChangeListener</code> that can be added to the JSpinner itself
Creates a decrement button, i
Creates an increment button, i
This method is called by installUI to get the editor component of the <code>JSpinner</code>
Called by the <code>PropertyChangeListener</code> when the <code>JSpinner</code> editor property changes
Installs the keyboard Actions onto the JSpinner
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Sets the SplitPaneUI that is using the receiver
Returns the <code>SplitPaneUI</code> the receiver is currently in
Sets the size of the divider to <code>newSize</code>
Returns the size of the divider, that is the width if the splitpane is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT
Sets the border of this component
Returns the border of this component or null if no border is currently set
If a border has been set on this component, returns the border's insets, else calls super
Sets whether or not the mouse is currently over the divider
Returns whether or not the mouse is currently over the divider
Returns dividerSize x dividerSize
Returns dividerSize x dividerSize
Property change event, presumably from the JSplitPane, will message updateOrientation if necessary
Paints the divider
Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes
Creates and return an instance of JButton that can be used to collapse the left component in the split pane
Creates and return an instance of JButton that can be used to collapse the right component in the split pane
Message to prepare for dragging
Messages the BasicSplitPaneUI with dragDividerTo that this instance is contained in
Messages the BasicSplitPaneUI with finishDraggingTo that this instance is contained in
Starts the dragging session by creating the appropriate instance of DragController
If dragger is not null it is messaged with completeDrag
If dragger is not null it is messaged with continueDrag
Resets the cursor based on the orientation
Invoked when the mouse enters a component
Invoked when the mouse exits a component
Returns true if the dragging session is valid
Returns the new position to put the divider at based on the passed in MouseEvent
Returns the x argument, since this is used for horizontal splits
Messages dragDividerTo with the new location for the mouse event
Messages finishDraggingTo with the new location for the mouse event
Returns the y argument, since this is used for vertical splits
Returns the new position to put the divider at based on the passed in MouseEvent
Creates a new BasicSplitPaneUI instance
Installs the UI
Installs the UI defaults
Installs the event listeners for the UI
Installs the keyboard actions for the UI
Uninstalls the UI
Uninstalls the UI defaults
Uninstalls the event listeners for the UI
Uninstalls the keyboard actions for the UI
Creates a PropertyChangeListener for the JSplitPane UI
Creates a FocusListener for the JSplitPane UI
As of Java 2 platform v1
As of Java 2 platform v1
As of Java 2 platform v1
As of Java 2 platform v1
As of Java 2 platform v1
Returns the orientation for the JSplitPane
Set the orientation for the JSplitPane
Determines whether the JSplitPane is set to use a continuous layout
Turn continuous layout on/off
Returns the last drag location of the JSplitPane
Set the last drag location of the JSplitPane
Returns the divider between the top Components
Returns the default non continuous layout divider, which is an instance of {@code Canvas} that fills in the background with dark gray
Sets the divider to use when the splitPane is configured to not continuously layout
Sets the divider to use
Returns the divider to use when the splitPane is configured to not continuously layout
Returns the splitpane this instance is currently contained in
Creates the default divider
Messaged to reset the preferred sizes
Sets the location of the divider to location
Returns the location of the divider, which may differ from what the splitpane thinks the location of the divider is
Gets the minimum location of the divider
Gets the maximum location of the divider
Called when the specified split pane has finished painting its children
{@inheritDoc}
Returns the preferred size for the passed in component, This is passed off to the current layout manager
Returns the minimum size for the passed in component, This is passed off to the current layout manager
Returns the maximum size for the passed in component, This is passed off to the current layout manager
Returns the insets
Resets the layout manager based on orientation and messages it with invalidateLayout to pull in appropriate Components
Should be messaged before the dragging session starts, resets lastDragLocation and dividerSize
Messaged during a dragging session to move the divider to the passed in location
Messaged to finish the dragging session
As of Java 2 platform v1
Messaged from the <code>JSplitPane</code> the receiver is contained in
Does the actual layout
Adds the component at place
Returns the minimum size needed to contain the children
Returns the preferred size needed to contain the children
Removes the specified component from our knowledge
Adds the specified component to the layout, using the specified constraint object
Returns the alignment along the x axis
Returns the alignment along the y axis
Does nothing
Returns the maximum layout size, which is Integer
Marks the receiver so that the next time this instance is laid out it'll ask for the preferred sizes
Resets the size of the Component at the passed in location
Sets the sizes to <code>newSizes</code>
Returns the sizes of the components
Returns the width of the passed in Components preferred size
Returns the width of the passed in component
Returns the available width based on the container size and Insets
Returns the left inset, unless the Insets are null in which case 0 is returned
Sets the width of the component c to be size, placing its x location at location, y to the insets
Determines the components
Returns a <code>Shape</code> whose interior defines the stroked outline of a specified <code>Shape</code>
Returns the line width
Returns the end cap style
Returns the line join style
Returns the limit of miter joins
Returns the array representing the lengths of the dash segments
Returns the current dash phase
Returns the hashcode for this stroke
Tests if a specified object is equal to this <code>BasicStroke</code> by first testing if it is a <code>BasicStroke</code> and then comparing its width, join, cap, miter limit, dash, and dash phase attributes with those of this <code>BasicStroke</code>
Invoked by <code>installUI</code> to create a layout manager object to manage the <code>JTabbedPane</code>
Creates and installs any required subcomponents for the JTabbedPane
Creates and returns a JButton that will provide the user with a way to scroll the tabs in a particular direction
Removes any installed subcomponents from the JTabbedPane
Sets the tab the mouse is currently over to <code>index</code>
Returns the tab the mouse is currently over, or {@code -1} if the mouse is no longer over any tab
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Returns the baseline for the specified tab
Returns the amount the baseline is offset by
Paints the tabs in the tab area
this function draws the border around each tab note that this function does now draw the background of the tab
Returns the bounds of the specified tab index
Returns the tab index which intersects the specified point in the JTabbedPane's coordinate space
Returns the bounds of the specified tab in the coordinate space of the JTabbedPane component
Returns the text View object required to render stylized text (HTML) for the specified tab or null if no specialized text rendering is needed for this tab
Returns the index of the tab that has focus
Creates the mouse listener for the JTableHeader
Initializes JTableHeader properties such as font, foreground, and background
Attaches listeners to the JTableHeader
Register all keyboard actions on the JTableHeader
Unregisters default key actions
Returns the index of the column header over which the mouse currently is
This method gets called every time when a rollover column in the table header is updated
Returns the baseline
Return the minimum size of the header
Return the preferred size of the header
Return the maximum size of the header
Creates the key listener for handling keyboard navigation in the JTable
Creates the focus listener for handling keyboard navigation in the JTable
Creates the mouse listener for the JTable
Initialize JTable properties, e
Attaches listeners to the JTable
Register all keyboard actions on the JTable
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Return the minimum size of the table
Return the preferred size of the table
Return the maximum size of the table
Paint a representation of the <code>table</code> instance that was set in installUI()
Get the next node via getNextXXX
Returns the next node in the set and advances the position of the iterator in the set
Get a cloned Iterator that is reset to the beginning  of the query
Creates a UI for a JTextArea
Fetches the name used as a key to look up properties through the UIManager
This method gets called when a bound property is changed on the associated JTextComponent
The method is overridden to take into account caret width
The method is overridden to take into account caret width
Creates the view for an element
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Creates a UI for a JTextField
Fetches the name used as a key to lookup properties through the UIManager
Creates a view (FieldView) based on an element
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Creates a UI for the JTextPane
Fetches the name used as a key to lookup properties through the UIManager
This method gets called when a bound property is changed on the associated JTextComponent
Creates the object to use for a caret
Creates the object to use for adding highlights
Fetches the name of the keymap that will be installed/used by default for this UI
Creates the keymap to use for the text component, and installs any necessary bindings into it
This method gets called when a bound property is changed on the associated JTextComponent
Gets the name used as a key to look up properties through the UIManager
Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color
Sets the component properties that have not been explicitly overridden to {@code null}
Installs listeners for the UI
Uninstalls listeners for the UI
Paints a background for the view
Fetches the text component associated with this UI implementation
Flags model changes
Sets the current root of the view hierarchy and calls invalidate()
Paints the interface safely with a guarantee that the model won't change from the view of this thread
Installs the UI for a component
Deinstalls the UI for a component
Superclass paints background in an uncontrollable way (i
Paints the interface
Gets the preferred size for the editor component
Gets the minimum size for the editor component
Gets the maximum size for the editor component
Gets the allocation to give the root View
Converts the given location in the model to a place in the view coordinate system
Converts the given location in the model to a place in the view coordinate system
Converts the given place in the view coordinate system to the nearest representative location in the model
Converts the given place in the view coordinate system to the nearest representative location in the model
{@inheritDoc}
Causes the portion of the view responsible for the given part of the model to be repainted
Causes the portion of the view responsible for the given part of the model to be repainted
Fetches the EditorKit for the UI
Fetches a View with the allocation of the associated text component (i
Returns the string to be used as the tooltip at the passed in location
Creates a view for an element
Creates a view for an element
Overriden so that the text will not be rendered as shifted for Toggle buttons and subclasses
Creates a rollover border for toolbar components
Creates the non rollover border for toolbar components
No longer used, use BasicToolBarUI
Creates a window which contains the toolbar after it has been dragged out from its container
Returns a flag to determine whether rollover button borders are enabled
Sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag
Installs rollover borders on all the child components of the JComponent
Installs non-rollover borders on all the child components of the JComponent
Installs normal borders on all the child components of the JComponent
Sets the border of the component to have a rollover border which was created by the {@link #createRolloverBorder} method
Returns a rollover border for the button
Sets the border of the component to have a non-rollover border which was created by the {@link #createNonRolloverBorder} method
Returns a non-rollover border for the button
Sets the border of the component to have a normal border
Gets the color displayed when over a docking area
Sets the color displayed when over a docking area
Gets the color displayed when over a floating area
Sets the color displayed when over a floating area
Paints the contents of the window used for dragging
Returns the orientation of the toolbar window when the toolbar is floating
Updates the componentListener, if necessary
Sets the row height, this is forwarded to the treeState
Sets the TreeCellRenderer to <code>tcr</code>
Return currentCellRenderer, which will either be the trees renderer, or defaultCellRenderer, which ever wasn't null
Sets the TreeModel
Sets the root to being visible
Determines whether the node handles are to be displayed
Sets the cell editor
Configures the receiver to allow, or not allow, editing
Resets the selection model
Returns the Rectangle enclosing the label portion that the last item in path will be drawn into
Returns the path for passed in row
Returns the row that the last item identified in path is visible at
Returns the number of rows that are being displayed
Returns the path to the node that is closest to x,y
Returns true if the tree is being edited
Stops the current editing session
Cancels the current editing session
Selects the last item in path and tries to edit it
Returns the path to the element that is being edited
Invoked after the <code>tree</code> instance variable has been set, but before any defaults/listeners have been installed
Invoked from installUI after all the defaults/listeners have been installed
Intalls the subcomponents of the tree, which is the renderer pane
Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree
Creates a listener that is responsible that updates the UI based on how the tree changes
Creates the listener responsible for updating the selection based on mouse events
Creates a listener that is responsible for updating the display when focus is lost/gained
Creates the listener reponsible for getting key events from the tree
Creates the listener responsible for getting property change events from the selection model
Creates the listener that updates the display based on selection change methods
Creates a listener to handle events from the current editor
Creates and returns a new ComponentHandler
Creates and returns the object responsible for updating the treestate when nodes expanded state changes
Creates the object responsible for managing what is expanded, as well as the size of nodes
Returns the renderer pane that renderer components are placed in
Creates a default cell editor
Returns the default cell renderer that is used to do the stamping of each node
Returns a listener that can update the tree when the model changes
Uninstalls the renderer pane
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Tells if a {@code DropLocation} should be indicated by a line between nodes
Paints the drop line
Returns a unbounding box for the drop line
Paints the horizontal part of the leg
Paints the vertical part of the leg
Paints the expand (toggle) part of a row
Paints the renderer part of a row
Returns true if the expand (toggle) control should be drawn for the specified row
Paints a vertical line
Paints a horizontal line
The vertical element of legs between nodes starts at the bottom of the parent node by default
The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default
Returns the location, along the x-axis, to render a particular row at
Makes all the nodes that are expanded in JTree expanded in LayoutCache
Updates the expanded state of all the descendants of <code>path</code> by getting the expanded descendants from the tree and forwarding to the tree state
Returns a path to the last child of <code>parent</code>
Updates how much each depth should be offset by
Updates the cellEditor based on the editability of the JTree that we're contained in
Messaged from the tree we're in when the renderer has changed
Resets the TreeState instance based on the tree we're providing the look and feel for
Marks the cached size as being invalid, and messages the tree with <code>treeDidChange</code>
Updates the <code>preferredSize</code> instance variable, which is returned from <code>getPreferredSize()</code>
Messaged from the VisibleTreeNode after it has been expanded
Messaged from the VisibleTreeNode after it has collapsed
Ensures that the rows identified by beginRow through endRow are visible
Sets the preferred minimum size
Returns the minimum preferred size
Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, true)
Returns the preferred size to represent the tree in <I>c</I>
Returns the minimum size for this component
Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0
Messages to stop the editing session
Stops the editing session
Will start editing for node if there is a cellEditor and shouldSelectCell returns true
If the <code>mouseX</code> and <code>mouseY</code> are in the expand/collapse region of the <code>row</code>, this will toggle the row
Returns true if <code>mouseX</code> and <code>mouseY</code> fall in the area of row that is used to expand/collapse the node and the node at <code>row</code> does not represent a leaf
Messaged when the user clicks the particular row, this invokes toggleExpandState
Expands path if it is not expanded, or collapses row if it is expanded
Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse
Returning true signifies a mouse event on the node should select from the anchor point
Returning true indicates the row under the mouse should be toggled based on the event
Messaged to update the selection based on a MouseEvent over a particular row
Updates the lead row of the selection
Returns the lead row of the selection
Called whenever an item in the tree has been expanded
Called whenever an item in the tree has been collapsed
Creates, if necessary, and starts a Timer to check if need to resize the bounds
Returns the JScrollPane housing the JTree, or null if one isn't found
Public as a result of Timer
Messaged when the selection changes in the tree we're displaying for
Messaged when editing has stopped in the tree
Messaged when editing has been canceled in the tree
Invoked when a key has been typed
Invoked when focus is activated on the tree we're in, redraws the lead row
Invoked when focus is activated on the tree we're in, redraws the lead row
Responsible for getting the size of a particular node
Invoked when a mouse button has been pressed on a component
Invoked when the mouse button has been moved on a component (with no buttons no down)
Standard function count(node-set)
Standard function position()
XSLT Standard function sum(node-set)
XSLT Standard function string()
XSLT Standard function string(value)
XSLT Standard function string(value)
XSLT Standard function number()
XSLT Standard function number(value)
XSLT Standard function round()
XSLT Standard function boolean()
XSLT Standard function substring()
XSLT Standard function substring()
XSLT Standard function substring-after()
XSLT Standard function substring-before()
XSLT Standard function translate()
XSLT Standard function normalize-space()
XSLT Standard function normalize-space(string)
XSLT Standard function generate-id()
utility function for calls to local-name()
External functions that cannot be resolved are replaced with a call to this method
Utility function to throw a runtime error on the use of an extension function when the secure processing feature is set to true
Utility function to throw a runtime error on the use of an extension element when the secure processing feature is set to true
Utility function to throw a runtime error for an unsupported element
XSLT Standard function namespace-uri(node-set)
XSLT Standard function system-property(name)
XSLT Standard function namespace-uri()
Implements the object-type() extension function
Implements the nodeset() extension function
Utility function: node-set/node-set compare
Utility function: node-set/number compare
Utility function: node-set/string comparison
Utility function: used to test context node's language
Utility function: used in StringType to convert a string to a real
Utility function: used in StringType to convert a string to an int
Utility function: used in RealType to convert a real to a string
Utility function: used in RealType to convert a real to an integer
Utility function: used to convert references to node-sets
Utility function: used to convert reference to org
Utility function: used to convert reference to org
Utility function: used to convert reference to long
Utility function: used to convert reference to double
Utility function: used to convert reference to boolean
Utility function: used to convert reference to String
Utility function used to convert a w3c Node into an internal DOM iterator
Utility function used to convert a w3c NodeList into a internal DOM iterator
Utility function used to convert references to DOMs
Utility function: used with nth position filters to convert a sequence of nodes to just one single node (the one at position n)
Utility function to check if xsl:attribute has a valid qname This method should only be invoked if the name attribute is an AVT
Utility function to check if a name is a valid ncname This method should only be invoked if the attribute value is an AVT
Utility function to check if a name is a valid qname This method should only be invoked if the attribute value is an AVT
Utility function for the implementation of xsl:element
This function is used in the execution of xsl:element
These functions are used in the execution of xsl:element to generate and reset namespace prefix index local to current transformation process
Print a run-time error message
Replace a certain character in a string with a new substring
Utility method to allow setting parameters of the form {namespaceuri}localName which get mapped to an instance variable in the class Hence  a parameter of the form "{http://foo
Utility method to calculate string-length as a number of code points,  to avoid possible errors with string that contains  complementary characters
Call corresponding visitor method(s)
Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred
Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred
Start Java code generation
Default _main method
Instantiate the javaBean named as a child of this <code>BeanContext</code>
Analagous to <code>java
Analagous to <code>java
Adds the specified <code>BeanContextMembershipListener</code> to receive <code>BeanContextMembershipEvents</code> from this <code>BeanContext</code> whenever it adds or removes a child <code>Component</code>(s)
Removes the specified <code>BeanContextMembershipListener</code> so that it no longer receives <code>BeanContextMembershipEvent</code>s when the child <code>Component</code>(s) are added or removed
<p> Objects that implement this interface, shall fire a java
Gets the <code>BeanContext</code> associated with this <code>BeanContextChild</code>
Adds a <code>PropertyChangeListener</code> to this <code>BeanContextChild</code> in order to receive a <code>PropertyChangeEvent</code> whenever the specified property has changed
Removes a <code>PropertyChangeListener</code> from this <code>BeanContextChild</code>  so that it no longer receives <code>PropertyChangeEvents</code> when the specified property is changed
Adds a <code>VetoableChangeListener</code> to this <code>BeanContextChild</code> to receive events whenever the specified property changes
Removes a <code>VetoableChangeListener</code> from this <code>BeanContextChild</code> so that it no longer receives events when the specified property changes
Gets the <code>java
Sets the <code>BeanContext</code> for this <code>BeanContextChildSupport</code>
Gets the nesting <code>BeanContext</code> for this <code>BeanContextChildSupport</code>
Add a PropertyChangeListener for a specific property
Remove a PropertyChangeListener for a specific property
Add a VetoableChangeListener for a specific property
Removes a <code>VetoableChangeListener</code>
A service provided by the nesting BeanContext has been revoked
A new service is available from the nesting BeanContext
Gets the <tt>BeanContextChild</tt> associated with this <tt>BeanContextChildSupport</tt>
Reports whether or not this class is a delegate of another
Report a bound property update to any registered listeners
Report a vetoable property update to any registered listeners
Called from setBeanContext to validate (or otherwise) the pending change in the nesting BeanContext property value
This method may be overridden by subclasses to provide their own release behaviors
This method may be overridden by subclasses to provide their own initialization behaviors
Gets the <code>java
Gets the <code>BeanContext</code> associated with this event
Sets the <code>BeanContext</code> from which this event was propagated
Gets the <code>BeanContext</code> from which this event was propagated
Reports whether or not this event is propagated from some other <code>BeanContext</code>
Gets the number of children affected by the notification
Is the child specified affected by the event?
Gets the array of children affected by this event
Gets the array of children affected by this event
Called when a child or list of children is added to a <code>BeanContext</code> that this listener is registered with
Called when a child or list of children is removed from a <code>BeanContext</code> that this listener is registered with
Gets the <code>BeanContextChild</code> (or subinterface) associated with this object
Gets the source as a reference of type <code>BeanContextServices</code>
Gets the service class that is the subject of this notification
Gets the list of service dependent selectors
Invoked by <code>BeanContextServices</code>, this method requests an instance of a service from this <code>BeanContextServiceProvider</code>
Invoked by <code>BeanContextServices</code>, this method releases a nested <code>BeanContextChild</code>'s (or any arbitrary object associated with a <code>BeanContextChild</code>) reference to the specified service
Invoked by <code>BeanContextServices</code>, this method gets the current service selectors for the specified service
Gets a <code>BeanInfo</code> array, one for each service class or interface statically available from this ServiceProvider
Gets the source as a reference of type <code>BeanContextServices</code>
Gets the service class that is the subject of this notification
Checks this event to determine whether or not the service being revoked is of a particular class
Reports if the current service is being forcibly revoked, in which case the references are now invalidated and unusable
The service named has been revoked
Adds a service to this BeanContext
BeanContextServiceProviders wishing to remove a currently registered service from this context may do so via invocation of this method
Reports whether or not a given service is currently available from this context
A <code>BeanContextChild</code>, or any arbitrary object associated with a <code>BeanContextChild</code>, may obtain a reference to a currently registered service from its nesting <code>BeanContextServices</code> via invocation of this method
Releases a <code>BeanContextChild</code>'s (or any arbitrary object associated with a BeanContextChild) reference to the specified service by calling releaseService() on the underlying <code>BeanContextServiceProvider</code>
Gets the currently available services for this context
Gets the list of service dependent service parameters (Service Selectors) for the specified service, by calling getCurrentServiceSelectors() on the underlying BeanContextServiceProvider
Adds a <code>BeanContextServicesListener</code> to this BeanContext
Removes a <code>BeanContextServicesListener</code> from this <code>BeanContext</code>
The service named has been registered
called by BeanContextSupport superclass during construction and deserialization to initialize subclass transient state
Gets the <tt>BeanContextServices</tt> associated with this <tt>BeanContextServicesSupport</tt>
<p> Subclasses can override this method to insert their own subclass of Child without having to override add() or the other Collection methods that add children to the set
subclasses can override this method to create new subclasses of BCSSServiceProvider without having to override addService() in order to instantiate
add a BeanContextServicesListener
remove a BeanContextServicesListener
add a service
add a service
remove a service
has a service, which may be delegated
obtain a service which may be delegated
release a service
BeanContextServicesListener callback, propagates event to all currently registered listeners and BeanContextServices children, if this BeanContextService does not already implement this service itself
BeanContextServicesListener callback, propagates event to all currently registered listeners and BeanContextServices children, if this BeanContextService does not already implement this service itself
Gets the <tt>BeanContextServicesListener</tt> (if any) of the specified child
called from superclass child removal operations after a child has been successfully removed
called from setBeanContext to notify a BeanContextChild to release resources obtained from the nesting BeanContext
called from setBeanContext to notify a BeanContextChild to allocate resources obtained from the nesting BeanContext
Fires a <tt>BeanContextServiceEvent</tt> notifying of a new service
Fires a <tt>BeanContextServiceAvailableEvent</tt> indicating that a new service has become available
Fires a <tt>BeanContextServiceEvent</tt> notifying of a service being revoked
Fires a <tt>BeanContextServiceRevokedEvent</tt> indicating that a particular service is no longer available
called from BeanContextSupport writeObject before it serializes the children 
called from BeanContextSupport readObject before it deserializes the children 
Returns the service provider
Gets the instance of <tt>BeanContext</tt> that this object is providing the implementation for
<p> The instantiateChild method is a convenience hook in BeanContext to simplify the task of instantiating a Bean, nested, into a <tt>BeanContext</tt>
Gets the number of children currently nested in this BeanContext
Reports whether or not this <tt>BeanContext</tt> is empty
Determines whether or not the specified object is currently a child of this <tt>BeanContext</tt>
Determines whether or not the specified object is currently a child of this <tt>BeanContext</tt>
Gets all JavaBean or <tt>BeanContext</tt> instances currently nested in this <tt>BeanContext</tt>
Gets all JavaBean or <tt>BeanContext</tt> instances currently nested in this BeanContext
Gets an array containing all children of this <tt>BeanContext</tt> that match the types contained in arry
<p> Subclasses can override this method to insert their own subclass of Child without having to override add() or the other Collection methods that add children to the set
Adds/nests a child within this <tt>BeanContext</tt>
Removes a child from this BeanContext
internal remove used when removal caused by unexpected <tt>setBeanContext</tt> or by <tt>remove()</tt> invocation
Tests to see if all objects in the specified <tt>Collection</tt> are children of this <tt>BeanContext</tt>
add Collection to set of Children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field
remove all specified children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field
retain only specified children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field
clear the children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field
Adds a BeanContextMembershipListener
Removes a BeanContextMembershipListener
Sets the new design time value for this <tt>BeanContext</tt>
Reports whether or not this object is in currently in design time mode
Sets the locale of this BeanContext
Gets the locale for this <tt>BeanContext</tt>
<p> This method is typically called from the environment in order to determine if the implementor "needs" a GUI
notify this instance that it may no longer render a GUI
Notify this instance that it may now render a GUI
Used to determine if the <tt>BeanContext</tt> child is avoiding using its GUI
Is this <tt>BeanContext</tt> in the process of being serialized?
Returns an iterator of all children of this <tt>BeanContext</tt>
called by writeObject after defaultWriteObject() but prior to serialization of currently serializable children
called by readObject after defaultReadObject() but prior to deserialization of any children
Called by readObject with the newly deserialized child and BCSChild
Used by writeObject to serialize a Collection
used by readObject to deserialize a collection
Used to serialize all children of this <tt>BeanContext</tt>
When an instance of this class is used as a delegate for the implementation of the BeanContext protocols (and its subprotocols) there exists a 'chicken and egg' problem during deserialization
subclasses may envelope to monitor veto child property changes
subclasses may envelope to monitor child property changes
<p> Subclasses of this class may override, or envelope, this method to add validation behavior for the BeanContext to examine child objects immediately prior to their being added to the BeanContext
<p> Subclasses of this class may override, or envelope, this method to add validation behavior for the BeanContext to examine child objects immediately prior to their being removed from the BeanContext
subclasses may override this method to simply extend add() semantics after the child has been added and before the event notification has occurred
subclasses may override this method to simply extend remove() semantics after the child has been removed and before the event notification has occurred
Gets the Component (if any) associated with the specified child
Gets the Serializable (if any) associated with the specified Child
Gets the PropertyChangeListener (if any) of the specified child
Gets the VetoableChangeListener (if any) of the specified child
Gets the BeanContextMembershipListener (if any) of the specified child
Gets the BeanContextChild (if any) of the specified child
Fire a BeanContextshipEvent on the BeanContextMembershipListener interface
Fire a BeanContextshipEvent on the BeanContextMembershipListener interface
protected method called from constructor and readObject to initialize transient state of BeanContextSupport instance
Gets a copy of the this BeanContext's children
Tests to see if two class objects, or their names are equal
Gets the bean's Class object
Gets the Class object for the bean's customizer
Returns the bean descriptor that provides overall information about the bean, such as its display name or its customizer
Returns the event descriptors of the bean that define the types of events fired by this bean
A bean may have a default event typically applied when this bean is used
Returns descriptors for all properties of the bean
A bean may have a default property commonly updated when this bean is customized
Returns the method descriptors of the bean that define the externally visible methods supported by this bean
This method enables the current {@code BeanInfo} object to return an arbitrary collection of other {@code BeanInfo} objects that provide additional information about the current bean
Returns an image that can be used to represent the bean in toolboxes or toolbars
<p> Instantiate a JavaBean
<p> Instantiate a JavaBean
Instantiate a bean
From a given bean, obtain an object representing a specified type view of that source object
Check if a bean can be viewed as a given target type
Test if we are in design-mode
Determines whether beans can assume a GUI is available
Used to indicate whether of not we are running in an application builder environment
Used to indicate whether of not we are running in an environment where GUI interaction is available
Fetch an integer
Fetch an integer with the specified tag
Fetch an integer and return a long value
Fetch an integer with the specified tag and return a long value
Fetch an octet string
Fetch an octet string with a specified tag
Fetch an object identifier
Fetch an object identifier with a specified tag
Fetch a <CODE>NULL</CODE> value
Fetch a <CODE>NULL</CODE> value with a specified tag
Fetch an <CODE>ANY</CODE> value
Fetch an <CODE>ANY</CODE> value with a specific tag
Fetch a sequence header
Fetch a sequence header with a specific tag
Close a sequence
Return <CODE>true</CODE> if the end of the current sequence is not reached
Get the tag of the data at the current position
Trim the encoding data and returns the length of the encoding
Put an integer
Put an integer with the specified tag
Put an integer expressed as a long
Put an integer expressed as a long with the specified tag
Put an octet string
Put an octet string with a specified tag
Put an object identifier
Put an object identifier with a specified tag
Put a <CODE>NULL</CODE> value
Put a <CODE>NULL</CODE> value with a specified tag
Put an <CODE>ANY</CODE> value
Put an <CODE>ANY</CODE> value
Open a sequence
Close a sequence
Close a sequence with the specified tag
Put a tag and move the current position backward
Put a length and move the current position backward
Put an integer value and move the current position backward
Put an integer value expressed as a long
Put a byte string and move the current position backward
Put an oid and move the current position backward
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
Returns the outer highlight color of the bevel border when rendered on the specified component
Returns the inner highlight color of the bevel border when rendered on the specified component
Returns the inner shadow color of the bevel border when rendered on the specified component
Returns the outer shadow color of the bevel border when rendered on the specified component
Returns the outer highlight color of the bevel border
Returns the inner highlight color of the bevel border
Returns the inner shadow color of the bevel border
Returns the outer shadow color of the bevel border
Returns the type of the bevel border
Returns whether or not the border is opaque
Performs this operation on the given arguments
Returns a composed {@code BiConsumer} that performs, in sequence, this operation followed by the {@code after} operation
Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi
Return true if the line is not left-to-right or right-to-left
Return true if the line is all left-to-right text and the base direction is left-to-right
Return true if the line is all right-to-left text, and the base direction is right-to-left
Return the length of text in the line
Return true if the base direction is left-to-right
Return the base level (0 if left-to-right, 1 if right-to-left)
Return the resolved level of the character at offset
Return the number of level runs
Return the level of the nth logical run in this line
Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line
Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line
Return true if the specified text requires bidi analysis
Reorder the objects in the array into visual order based on their levels
Display the bidi internal state, used in debugging
Applies this function to the given arguments
Returns a composed function that first applies this function to its input, and then applies the {@code after} function to the result
Translates a {@code long} unscaled value and an {@code int} scale into a {@code BigDecimal}
Translates a {@code long} value into a {@code BigDecimal} with a scale of zero
Translates a {@code double} into a {@code BigDecimal}, using the {@code double}'s canonical string representation provided by the {@link Double#toString(double)} method
Returns a {@code BigDecimal} whose value is {@code (this + augend)}, and whose scale is {@code max(this
Returns a {@code BigDecimal} whose value is {@code (this + augend)}, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)}, and whose scale is {@code max(this
Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)}, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is <tt>(this &times; multiplicand)</tt>, and whose scale is {@code (this
Returns a {@code BigDecimal} whose value is <tt>(this &times; multiplicand)</tt>, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is as specified
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is as specified
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is {@code this
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose scale is {@code this
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, and whose preferred scale is {@code (this
Returns a {@code BigDecimal} whose value is {@code (this / divisor)}, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is the integer part of the quotient {@code (this / divisor)} rounded down
Returns a {@code BigDecimal} whose value is the integer part of {@code (this / divisor)}
Returns a {@code BigDecimal} whose value is {@code (this % divisor)}
Returns a {@code BigDecimal} whose value is {@code (this % divisor)}, with rounding according to the context settings
Returns a two-element {@code BigDecimal} array containing the result of {@code divideToIntegralValue} followed by the result of {@code remainder} on the two operands
Returns a two-element {@code BigDecimal} array containing the result of {@code divideToIntegralValue} followed by the result of {@code remainder} on the two operands calculated with rounding according to the context settings
Returns a {@code BigDecimal} whose value is <tt>(this<sup>n</sup>)</tt>, The power is computed exactly, to unlimited precision
Returns a {@code BigDecimal} whose value is <tt>(this<sup>n</sup>)</tt>
Returns a {@code BigDecimal} whose value is the absolute value of this {@code BigDecimal}, and whose scale is {@code this
Returns a {@code BigDecimal} whose value is the absolute value of this {@code BigDecimal}, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is {@code (-this)}, and whose scale is {@code this
Returns a {@code BigDecimal} whose value is {@code (-this)}, with rounding according to the context settings
Returns a {@code BigDecimal} whose value is {@code (+this)}, and whose scale is {@code this
Returns a {@code BigDecimal} whose value is {@code (+this)}, with rounding according to the context settings
Returns the signum function of this {@code BigDecimal}
Returns the <i>scale</i> of this {@code BigDecimal}
Returns the <i>precision</i> of this {@code BigDecimal}
Returns a {@code BigInteger} whose value is the <i>unscaled value</i> of this {@code BigDecimal}
Returns a {@code BigDecimal} rounded according to the {@code MathContext} settings
Returns a {@code BigDecimal} whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this {@code BigDecimal}'s unscaled value by the appropriate power of ten to maintain its overall value
Returns a {@code BigDecimal} whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this {@code BigDecimal}'s unscaled value by the appropriate power of ten to maintain its overall value
Returns a {@code BigDecimal} whose scale is the specified value, and whose value is numerically equal to this {@code BigDecimal}'s
Returns a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the left
Returns a {@code BigDecimal} which is equivalent to this one with the decimal point moved {@code n} places to the right
Returns a BigDecimal whose numerical value is equal to ({@code this} * 10<sup>n</sup>)
Returns a {@code BigDecimal} which is numerically equal to this one but with any trailing zeros removed from the representation
Compares this {@code BigDecimal} with the specified {@code BigDecimal}
Compares this {@code BigDecimal} with the specified {@code Object} for equality
Returns the minimum of this {@code BigDecimal} and {@code val}
Returns the maximum of this {@code BigDecimal} and {@code val}
Returns the hash code for this {@code BigDecimal}
Returns the string representation of this {@code BigDecimal}, using scientific notation if an exponent is needed
Returns a string representation of this {@code BigDecimal}, using engineering notation if an exponent is needed
Returns a string representation of this {@code BigDecimal} without an exponent field
Converts this {@code BigDecimal} to a {@code BigInteger}
Converts this {@code BigDecimal} to a {@code BigInteger}, checking for lost information
Converts this {@code BigDecimal} to a {@code long}
Converts this {@code BigDecimal} to a {@code long}, checking for lost information
Converts this {@code BigDecimal} to an {@code int}
Converts this {@code BigDecimal} to an {@code int}, checking for lost information
Converts this {@code BigDecimal} to a {@code short}, checking for lost information
Converts this {@code BigDecimal} to a {@code byte}, checking for lost information
Converts this {@code BigDecimal} to a {@code float}
Converts this {@code BigDecimal} to a {@code double}
Returns the size of an ulp, a unit in the last place, of this {@code BigDecimal}
Returns a positive BigInteger that is probably prime, with the specified bitLength
Returns the first integer greater than this {@code BigInteger} that is probably prime
Returns a BigInteger whose value is equal to that of the specified {@code long}
Returns a BigInteger whose value is {@code (this + val)}
Returns a BigInteger whose value is {@code (this - val)}
Returns a BigInteger whose value is {@code (this * val)}
Returns a BigInteger whose value is {@code (this / val)}
Returns an array of two BigIntegers containing {@code (this / val)} followed by {@code (this % val)}
Returns a BigInteger whose value is {@code (this % val)}
Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>
Returns a BigInteger whose value is the greatest common divisor of {@code abs(this)} and {@code abs(val)}
Returns a BigInteger whose value is the absolute value of this BigInteger
Returns a BigInteger whose value is {@code (-this)}
Returns the signum function of this BigInteger
Returns a BigInteger whose value is {@code (this mod m})
Returns a BigInteger whose value is <tt>(this<sup>exponent</sup> mod m)</tt>
Returns a BigInteger whose value is {@code (this}<sup>-1</sup> {@code mod m)}
Returns a BigInteger whose value is {@code (this << n)}
Returns a BigInteger whose value is {@code (this >> n)}
Returns a BigInteger whose value is {@code (this & val)}
Returns a BigInteger whose value is {@code (this | val)}
Returns a BigInteger whose value is {@code (this ^ val)}
Returns a BigInteger whose value is {@code (~this)}
Returns a BigInteger whose value is {@code (this & ~val)}
Returns {@code true} if and only if the designated bit is set
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped
Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit)
Returns the number of bits in the minimal two's-complement representation of this BigInteger, <i>excluding</i> a sign bit
Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit
Returns {@code true} if this BigInteger is probably prime, {@code false} if it's definitely composite
Compares this BigInteger with the specified BigInteger
Compares this BigInteger with the specified Object for equality
Returns the minimum of this BigInteger and {@code val}
Returns the maximum of this BigInteger and {@code val}
Returns the hash code for this BigInteger
Returns the String representation of this BigInteger in the given radix
Returns the decimal String representation of this BigInteger
Returns a byte array containing the two's-complement representation of this BigInteger
Converts this BigInteger to an {@code int}
Converts this BigInteger to a {@code long}
Converts this BigInteger to a {@code float}
Converts this BigInteger to a {@code double}
Converts this {@code BigInteger} to a {@code long}, checking for lost information
Converts this {@code BigInteger} to an {@code int}, checking for lost information
Converts this {@code BigInteger} to a {@code short}, checking for lost information
Converts this {@code BigInteger} to a {@code byte}, checking for lost information
Returns a {@link BinaryOperator} which returns the lesser of two elements according to the specified {@code Comparator}
Returns a {@link BinaryOperator} which returns the greater of two elements according to the specified {@code Comparator}
Retrieves the contents of this address as an Object
Determines whether obj is equal to this address
Computes the hash code of this address using its address type and contents
Generates the string representation of this address
Unmarshal XML infoset view to a JAXB object tree
Unmarshal XML root element by provided <tt>declaredType</tt> to a JAXB object tree
Marshal a JAXB object tree to a new XML document
Gets the XML element associated with the given JAXB object
Gets the JAXB object associated with the given XML element
Takes an JAXB object and updates its associated XML node and its descendants
Changes in JAXB object tree are updated in its associated XML parse tree
Takes an XML node and updates its associated JAXB object and its descendants
Specifies whether marshal, unmarshal and update methods performs validation on their XML content
Gets the last {@link Schema} object (including null) set by the {@link #setSchema(Schema)} method
Allow an application to register a <tt>ValidationEventHandler</tt>
Return the current event handler or the default event handler if one hasn't been set
Set the particular property in the underlying implementation of <tt>Binder</tt>
Get the particular property in the underlying implementation of <tt>Binder</tt>
Return the next binding
Return the next n bindings
lists next n bindings
Destroy this BindingIterator object
Abstract method for returning the next binding in the NamingContext for which this BindingIterator was created
Abstract method for destroying this BindingIterator
Abstract method for returning the remaining number of elements
This operation returns the next binding
This operation returns at most the requested number of bindings
This operation destroys the iterator
Get the context that is used to initialize the message context for request messages
Get the context that resulted from processing a response message
Get the Binding for this binding provider
Returns the <code>EndpointReference</code> associated with this <code>BindingProvider</code> instance
Returns the <code>EndpointReference</code> associated with this <code>BindingProvider</code> instance
Set a named value
Adds all the mappings in a given <code>Map</code> to this <code>Bindings</code>
Returns <tt>true</tt> if this map contains a mapping for the specified key
Returns the value to which this map maps the specified key
Removes the mapping for this key from this map if it is present (optional operation)
Evaluates this predicate on the given arguments
Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Returns a predicate that represents the logical negation of this predicate
Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Set the mask for this bit array
See setMask()
Returns the size of this bit array (in bits)
Returns true if the given bit is set
Returns the next set bit from a given position
Returns the integer array in which the bit array is contained
Sets a given bit
Merge two bit arrays
Resizes the bit array - try to avoid using this method!!!
Read the whole tree from a file (serialized)
Returns a new bit set containing all the bits in the given long array
Returns a new bit set containing all the bits in the given long buffer between its position and limit
Returns a new bit set containing all the bits in the given byte array
Returns a new bit set containing all the bits in the given byte buffer between its position and limit
Returns a new byte array containing all the bits in this bit set
Returns a new long array containing all the bits in this bit set
Sets the bit at the specified index to the complement of its current value
Sets each bit from the specified {@code fromIndex} (inclusive) to the specified {@code toIndex} (exclusive) to the complement of its current value
Sets the bit at the specified index to {@code true}
Sets the bit at the specified index to the specified value
Sets the bits from the specified {@code fromIndex} (inclusive) to the specified {@code toIndex} (exclusive) to {@code true}
Sets the bits from the specified {@code fromIndex} (inclusive) to the specified {@code toIndex} (exclusive) to the specified value
Sets the bit specified by the index to {@code false}
Sets the bits from the specified {@code fromIndex} (inclusive) to the specified {@code toIndex} (exclusive) to {@code false}
Sets all of the bits in this BitSet to {@code false}
Returns the value of the bit with the specified index
Returns a new {@code BitSet} composed of bits from this {@code BitSet} from {@code fromIndex} (inclusive) to {@code toIndex} (exclusive)
Returns the index of the first bit that is set to {@code true} that occurs on or after the specified starting index
Returns the index of the first bit that is set to {@code false} that occurs on or after the specified starting index
Returns the index of the nearest bit that is set to {@code true} that occurs on or before the specified starting index
Returns the index of the nearest bit that is set to {@code false} that occurs on or before the specified starting index
Returns the "logical size" of this {@code BitSet}: the index of the highest set bit in the {@code BitSet} plus one
Returns true if this {@code BitSet} contains no bits that are set to {@code true}
Returns true if the specified {@code BitSet} has any bits set to {@code true} that are also set to {@code true} in this {@code BitSet}
Returns the number of bits set to {@code true} in this {@code BitSet}
Performs a logical <b>AND</b> of this target bit set with the argument bit set
Performs a logical <b>OR</b> of this bit set with the bit set argument
Performs a logical <b>XOR</b> of this bit set with the bit set argument
Clears all of the bits in this {@code BitSet} whose corresponding bit is set in the specified {@code BitSet}
Returns the hash code value for this bit set
Returns the number of bits of space actually in use by this {@code BitSet} to represent bit values
Compares this object against the specified object
Cloning this {@code BitSet} produces a new {@code BitSet} that is equal to it
Returns a string representation of this bit set
Returns a stream of indices for which this {@code BitSet} contains a bit in the set state
Returns the number of bytes in the <code>BLOB</code> value designated by this <code>Blob</code> object
Retrieves all or part of the <code>BLOB</code> value that this <code>Blob</code> object represents, as an array of bytes
Retrieves the <code>BLOB</code> value designated by this <code>Blob</code> instance as a stream
Retrieves the byte position at which the specified byte array <code>pattern</code> begins within the <code>BLOB</code> value that this <code>Blob</code> object represents
Retrieves the byte position in the <code>BLOB</code> value designated by this <code>Blob</code> object at which <code>pattern</code> begins
Writes the given array of bytes to the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at position <code>pos</code>, and returns the number of bytes written
Writes all or part of the given <code>byte</code> array to the <code>BLOB</code> value that this <code>Blob</code> object represents and returns the number of bytes written
Retrieves a stream that can be used to write to the <code>BLOB</code> value that this <code>Blob</code> object represents
Truncates the <code>BLOB</code> value that this <code>Blob</code> object represents to be <code>len</code> bytes in length
This method frees the <code>Blob</code> object and releases the resources that it holds
Returns an <code>InputStream</code> object that contains a partial <code>Blob</code> value, starting  with the byte specified by pos, which is length bytes in length
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and {@code false} if no space is currently available
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and {@code false} if no space is currently available
Inserts the specified element at the front of this deque, waiting if necessary for space to become available
Inserts the specified element at the end of this deque, waiting if necessary for space to become available
Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available
Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available
Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available
Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available
Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available
Removes the first occurrence of the specified element from this deque
Removes the last occurrence of the specified element from this deque
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and {@code false} if no space is currently available
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns {@code null} if this deque is empty
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available
Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns {@code null} if this deque is empty
Removes the first occurrence of the specified element from this deque
Returns {@code true} if this deque contains the specified element
Returns the number of elements in this deque
Returns an iterator over the elements in this deque in proper sequence
Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and {@code false} if no space is currently available
Inserts the specified element into this queue, waiting if necessary for space to become available
Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the head of this queue, waiting if necessary until an element becomes available
Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available
Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or {@code Integer
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Removes all available elements from this queue and adds them to the given collection
Removes at most the given number of available elements from this queue and adds them to the given collection
Establishes the parent view for this view
Calculate the requirements of the block along the major axis (i
Calculate the requirements of the block along the minor axis (i
Performs layout for the minor axis of the box (i
Renders using the given rendering surface and area on that surface
Fetches the attributes to use when rendering
Gets the resize weight
Gets the alignment
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Update any cached values that come from attributes
Overrides the method defined in the superclass
Overrides the method defined in the superclass
Process the image header
If set, the data will be written out in a top-down manner, the first scanline being written first
Returns the value of the <code>topDown</code> parameter
Returns the number of pages in this <code>Book</code>
Returns the {@link PageFormat} of the page specified by <code>pageIndex</code>
Returns the {@link Printable} instance responsible for rendering the page specified by <code>pageIndex</code>
Sets the <code>PageFormat</code> and the <code>Painter</code> for a specified page number
Appends a single page to the end of this <code>Book</code>
Appends <code>numPages</code> pages to the end of this <code>Book</code>
Apply the operation to two operands, and return the result
Evaluate this operation directly to a boolean
Parses the string argument as a boolean
Returns the value of this {@code Boolean} object as a boolean primitive
Returns a {@code Boolean} instance representing the specified {@code boolean} value
Returns a {@code Boolean} with a value represented by the specified string
Returns a {@code String} object representing the specified boolean
Returns a {@code String} object representing this Boolean's value
Returns a hash code for this {@code Boolean} object
Returns a hash code for a {@code boolean} value; compatible with {@code Boolean
Returns {@code true} if and only if the argument is not {@code null} and is a {@code Boolean} object that represents the same {@code boolean} value as this object
Returns {@code true} if and only if the system property named by the argument exists and is equal to the string {@code "true"}
Compares this {@code Boolean} instance with another
Compares two {@code boolean} values
Returns the result of applying the logical AND operator to the specified {@code boolean} operands
Returns the result of applying the logical OR operator to the specified {@code boolean} operands
Returns the result of applying the logical XOR operator to the specified {@code boolean} operands
Sets the current value for the control
Obtains this control's current value
Obtains the label for the specified state
Provides a string representation of the control
Reads unmarshalled data from <code>input</code> and assigns it to this <code>BooleanHolder</code> object's <code>value</code> field
Marshals the value in this <code>BooleanHolder</code> object's <code>value</code> field to the output stream <code>output</code>
Retrieves the <code>TypeCode</code> object that corresponds to the value held in this <code>BooleanHolder</code> object
Gets a result
Translates a real into an object of internal type <code>type</code>
Expects a boolean on the stack and pushes a string
Expects a boolean on the stack and pushes a real
Expects a boolean on the stack and pushes a boxed boolean
Translates an internal boolean into an external (Java) boolean
Translates an external (Java) boolean into internal boolean
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Get the length of the list
Clears the stack
Pushes an item onto the top of this stack
Removes the object at the top of this stack and returns that object as the value of this function
Removes the object at the top of this stack and returns the next object at the top as the value of this function
Set the item at the top of this stack
Looks at the object at the top of this stack without removing it from the stack
Looks at the object at the top of this stack without removing it from the stack
Looks at the object at the top of this stack without removing it from the stack
Tests if this stack is empty
SAX resolveEntity API
Transformer resolve API
Main startup routine for the bootstrap server
Dispatch is called by the ORB and will serve get(key) and list() invocations on the initial object key
Locates the object mentioned in the locate requests, and returns object here iff the object is the initial object key
Not implemented
Paints the border for the specified component with the specified position and size
Returns the insets of the border
Returns whether or not the border is opaque
Creates a line border withe the specified color
Creates a line border with the specified color and width
Creates a line border with the specified color, thickness, and corner shape
Creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a beveled border of the specified type, using the specified highlighting and shadowing
Creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas
Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
Creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing
Creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas
Creates a border with an "etched" look using the component's current background color for highlighting and shading
Creates a border with an "etched" look using the specified highlighting and shading colors
Creates a border with an "etched" look using the component's current background color for highlighting and shading
Creates a border with an "etched" look using the specified highlighting and shading colors
Creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)
Creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel)
Adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel)
Adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel)
Adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel)
Adds a title to an existing border, with the specified positioning, font and color
Creates an empty border that takes up no space
Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides
Creates a compound border with a <code>null</code> inside edge and a <code>null</code> outside edge
Creates a compound border specifying the border objects to use for the outside and inside edges
Creates a matte-look border using a solid color
Creates a matte-look border that consists of multiple tiles of a specified icon
Creates a border of the specified {@code stroke}
Creates a border of the specified {@code stroke} and {@code paint}
Creates a dashed border of the specified {@code paint}
Creates a dashed border of the specified {@code paint}, relative {@code length}, and relative {@code spacing}
Creates a dashed border of the specified {@code paint}, {@code thickness}, line shape, relative {@code length}, and relative {@code spacing}
Returns the horizontal gap between components
Sets the horizontal gap between components
Returns the vertical gap between components
Sets the vertical gap between components
Adds the specified component to the layout, using the specified constraint object
Removes the specified component from this border layout
Gets the component that was added using the given constraint
Returns the component that corresponds to the given constraint location based on the target <code>Container</code>'s component orientation
Gets the constraints for the specified component
Determines the minimum size of the <code>target</code> container using this layout manager
Determines the preferred size of the <code>target</code> container using this layout manager, based on the components in the container
Returns the maximum dimensions for this layout given the components in the specified target container
Returns the alignment along the x axis
Returns the alignment along the y axis
Invalidates the layout, indicating that if the layout manager has cached information it should be discarded
Lays out the container argument using this border layout
Returns a string representation of the state of this border layout
Returns the minimum acceptable value
Sets the model's minimum to <I>newMinimum</I>
Returns the model's maximum
Sets the model's maximum to <I>newMaximum</I>
Returns the model's current value
Sets the model's current value to <code>newValue</code> if <code>newValue</code> satisfies the model's constraints
This attribute indicates that any upcoming changes to the value of the model should be considered a single event
Returns true if the current changes to the value property are part of a series of changes
Returns the model's extent, the length of the inner range that begins at the model's value
Sets the model's extent
This method sets all of the model's data with a single method call
Adds a ChangeListener to the model's listener list
Removes a ChangeListener from the model's listener list
Creates a <code>Box</code> that displays its components from left to right
Creates a <code>Box</code> that displays its components from top to bottom
Creates an invisible component that's always the specified size
Creates an invisible, fixed-width component
Creates an invisible, fixed-height component
Creates an invisible "glue" component that can be useful in a Box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box)
Creates a horizontal glue component
Creates a vertical glue component
Throws an AWTError, since a Box can use only a BoxLayout
Paints this <code>Box</code>
Gets the AccessibleContext associated with this Box
Change the size requests for this shape
Paints this <code>Filler</code>
Gets the AccessibleContext associated with this Box
Gets the role of this object
Gets the role of this object
Returns the container that uses this layout manager
Returns the axis that was used to lay out components
Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed
Not used by this class
Not used by this class
Not used by this class
Returns the preferred dimensions for this layout, given the components in the specified target container
Returns the minimum dimensions needed to lay out the components contained in the specified target container
Returns the maximum dimensions the target container can use to lay out the components it contains
Returns the alignment along the X axis for the container
Returns the alignment along the Y axis for the container
Called by the AWT <!-- XXX CHECK! --> when the specified container needs to be laid out
Fetches the tile axis property
Sets the tile axis property
Invalidates the layout along an axis
Determines if the layout is valid along the given axis
Paints a child
Invalidates the layout and resizes the cache of requests/allocations
Forwards the given <code>DocumentEvent</code> to the child views that need to be notified of the change to the model
This is called by a child to indicate its preferred span has changed
Gets the resize weight
Sets the size of the view
Renders the <code>BoxView</code> using the given rendering surface and area on that surface
Fetches the allocation for the given child view
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Determines the desired alignment for this view along an axis
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Are the allocations for the children still valid?
Determines if a point falls before an allocated region
Determines if a point falls after an allocated region
Fetches the child view at the given coordinates
Allocates a region for a child view
Perform layout on the box
Returns the current width of the box
Returns the current height of the box
Performs layout for the major axis of the box (i
Performs layout for the minor axis of the box (i
Calculates the size requirements for the major axis <code>axis</code>
Calculates the size requirements for the minor axis <code>axis</code>
Computes the location and extent of each child view in this <code>BoxView</code> given the <code>targetSpan</code>, which is the width (or height) of the region we have to work with
Calculates the size requirements for this <code>BoxView</code> by examining the size of each child view
Fetches the offset of a particular child's current layout
Fetches the span of a particular child's current layout
Determines in which direction the next view lays
Handle adds itself to the list of resuable handles
Pass new target to instruction
Update target of instruction
Set new contents
Dump instruction as byte code to stream out
Called by InstructionList
Long output format: &lt;position in byte code&gt; &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt;target instruction&gt;"&gt;" "@"&lt;branch target offset&gt;
Read needed data (e
Set branch target
Create a copy of this iterator
Returns the first boundary
Returns the last boundary
Returns the nth boundary from the current boundary
Returns the boundary following the current boundary
Returns the boundary preceding the current boundary
Returns the first boundary following the specified character offset
Returns the last boundary preceding the specified character offset
Returns true if the specified character offset is a text boundary
Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int)
Get the text being scanned
Set a new text string to be scanned
Set a new text for scanning
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns a new <code>BreakIterator</code> instance for <a href="BreakIterator
Returns an array of all locales for which the <code>get*Instance</code> methods of this class can return localized instances
Returns a new <code>BreakIterator</code> instance for <a href="
Returns a new <code>BreakIterator</code> instance for <a href="
Returns a new <code>BreakIterator</code> instance for <a href="
Returns a new <code>BreakIterator</code> instance for <a href="
Call corresponding visitor method(s)
Returns this buffer's capacity
Returns this buffer's position
Sets this buffer's position
Returns this buffer's limit
Sets this buffer's limit
Sets this buffer's mark at its position
Resets this buffer's position to the previously-marked position
Clears this buffer
Flips this buffer
Rewinds this buffer
Returns the number of elements between the current position and the limit
Tells whether there are any elements between the current position and the limit
Tells whether or not this buffer is read-only
Tells whether or not this buffer is backed by an accessible array
Returns the array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is <a href="ByteBuffer
Returns the image type
Returns the <code>ColorModel</code>
Returns the {@link WritableRaster}
Returns a <code>WritableRaster</code> representing the alpha channel for <code>BufferedImage</code> objects with <code>ColorModel</code> objects that support a separate spatial alpha channel, such as <code>ComponentColorModel</code> and <code>DirectColorModel</code>
Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace
Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data
Sets a pixel in this <code>BufferedImage</code> to the specified RGB value
Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data
Returns the width of the <code>BufferedImage</code>
Returns the height of the <code>BufferedImage</code>
Returns the width of the <code>BufferedImage</code>
Returns the height of the <code>BufferedImage</code>
Returns the object that produces the pixels for the image
Returns a property of the image by name
Returns a property of the image by name
This method returns a {@link Graphics2D}, but is here for backwards compatibility
Creates a <code>Graphics2D</code>, which can be used to draw into this <code>BufferedImage</code>
Returns a subimage defined by a specified rectangular region
Returns whether or not the alpha has been premultiplied
Forces the data to match the state specified in the <code>isAlphaPremultiplied</code> variable
Returns a <code>String</code> representation of this <code>BufferedImage</code> object and its values
Returns a {@link Vector} of {@link RenderedImage} objects that are the immediate sources, not the sources of these immediate sources, of image data for this <code>BufferedImage</code>
Returns an array of names recognized by {@link #getProperty(String) getProperty(String)} or <code>null</code>, if no property names are recognized
Returns the minimum x coordinate of this <code>BufferedImage</code>
Returns the minimum y coordinate of this <code>BufferedImage</code>
Returns the <code>SampleModel</code> associated with this <code>BufferedImage</code>
Returns the number of tiles in the x direction
Returns the number of tiles in the y direction
Returns the minimum tile index in the x direction
Returns the minimum tile index in the y direction
Returns the tile width in pixels
Returns the tile height in pixels
Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0,&nbsp;0)
Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0,&nbsp;0)
Returns tile (<code>tileX</code>,&nbsp;<code>tileY</code>)
Returns the image as one large tile
Computes and returns an arbitrary region of the <code>BufferedImage</code>
Computes an arbitrary rectangular region of the <code>BufferedImage</code> and copies it into a specified <code>WritableRaster</code>
Sets a rectangular region of the image to the contents of the specified <code>Raster</code> <code>r</code>, which is assumed to be in the same coordinate space as the <code>BufferedImage</code>
Adds a tile observer
Removes a tile observer
Returns whether or not a tile is currently checked out for writing
Returns an array of {@link Point} objects indicating which tiles are checked out for writing
Returns whether or not any tile is checked out for writing
Checks out a tile for writing
Relinquishes permission to write to a tile
Returns the transparency
Returns the <code>BufferedImageOp</code>
Filters the information provided in the {@link ImageConsumer#setDimensions(int, int) setDimensions } method of the {@link ImageConsumer} interface
Filters the information provided in the {@link ImageConsumer#setColorModel(ColorModel) setColorModel} method of the <code>ImageConsumer</code> interface
Filters the information provided in the <code>setPixels</code> method of the <code>ImageConsumer</code> interface which takes an array of bytes
Filters the information provided in the <code>setPixels</code> method of the <code>ImageConsumer</code> interface which takes an array of integers
Filters the information provided in the <code>imageComplete</code> method of the <code>ImageConsumer</code> interface
Performs a single-input/single-output operation on a <CODE>BufferedImage</CODE>
Returns the bounding box of the filtered destination image
Creates a zeroed destination image with the correct size and number of bands
Returns the location of the corresponding destination point given a point in the source image
Returns the rendering hints for this operation
See the general contract of the <code>read</code> method of <code>InputStream</code>
Reads bytes from this byte-input stream into the specified byte array, starting at the given offset
See the general contract of the <code>skip</code> method of <code>InputStream</code>
Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
See the general contract of the <code>mark</code> method of <code>InputStream</code>
See the general contract of the <code>reset</code> method of <code>InputStream</code>
Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods
Closes this input stream and releases any system resources associated with the stream
Writes the specified byte to this buffered output stream
Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this buffered output stream
Flushes this buffered output stream
Reads a single character
Reads characters into a portion of an array
Reads a line of text
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark() operation, which it does
Marks the present position in the stream
Resets the stream to the most recent mark
Returns a {@code Stream}, the elements of which are lines read from this {@code BufferedReader}
Writes a single character
Writes a portion of an array of characters
Writes a portion of a String
Writes a line separator
Flushes the stream
Case: Called from ReaderThread on complete message or fragments
Case: called from CDRInputStream
Called once after creating this buffer manager and before it begins processing
Returns the mark/reset handler for this stream
Has the stream sent out any fragments so far?
Has the entire message been sent?  (Has sendMessage been called?)
Returns the correct buffer size for this type of buffer manager as set in the ORB
Called after Stub
A reference to the connection level stream will be required when sending fragments
Close the BufferManagerWrite and do any outstanding cleanup
Returns the correct buffer size for this type of buffer manager as set in the ORB
Close the BufferManagerWrite - do any outstanding cleanup
Returns the correct buffer size for this type of buffer manager as set in the ORB
Close the BufferManagerWrite and do any outstanding cleanup
Returns the correct buffer size for this type of buffer manager as set in the ORB
Close the BufferManagerWrite and do any outstanding cleanup
Returns the name representing this buffer pool
Returns an estimate of the number of buffers in the pool
Returns an estimate of the total capacity of the buffers in this pool
Returns an estimate of the memory that the Java virtual machine is using for this buffer pool
Returns the <code>BufferCapabilities</code> for this <code>BufferStrategy</code>
Creates a graphics context for the drawing buffer
Returns whether the drawing buffer was lost since the last call to <code>getDrawGraphics</code>
Returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white)
Makes the next available buffer visible by either copying the memory (blitting) or changing the display pointer (flipping)
Releases system resources currently consumed by this <code>BufferStrategy</code> and removes it from the associated Component
Creates the peer of the button
Gets the label of this button
Sets the button's label to be the specified string
Sets the command name for the action event fired by this button
Returns the command name of the action event fired by this button
Adds the specified action listener to receive action events from this button
Removes the specified action listener so that it no longer receives action events from this button
Returns an array of all the action listeners registered on this button
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Button</code>
Processes events on this button
Processes action events occurring on this button by dispatching them to any registered <code>ActionListener</code> objects
Returns a string representing the state of this <code>Button</code>
Gets the <code>AccessibleContext</code> associated with this <code>Button</code>
Get the accessible name of this object
Get the AccessibleAction associated with this object
Get the AccessibleValue associated with this object
Returns the number of Actions available in this object
Return a description of the specified action of the object
Perform the specified Action on the object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Get the role of this object
Adds the button to the group
Removes the button from the group
Clears the selection such that none of the buttons in the <code>ButtonGroup</code> are selected
Returns all the buttons that are participating in this group
Returns the model of the selected button
Sets the selected value for the <code>ButtonModel</code>
Returns whether a <code>ButtonModel</code> is selected
Returns the number of buttons in the group
Indicates partial commitment towards triggering the button
Indicates if the button has been selected
Indicates if the button can be selected or triggered by an input device, such as a mouse pointer
Indicates if the button is pressed
Indicates that the mouse is over the button
Marks the button as armed or unarmed
Selects or deselects the button
Enables or disables the button
Sets the button to pressed or unpressed
Sets or clears the button's rollover state
Sets the keyboard mnemonic (shortcut key or accelerator key) for the button
Gets the keyboard mnemonic for the button
Sets the action command string that gets sent as part of the <code>ActionEvent</code> when the button is triggered
Returns the action command string for the button
Identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group
Adds an <code>ActionListener</code> to the model
Removes an <code>ActionListener</code> from the model
Adds an <code>ItemListener</code> to the model
Removes an <code>ItemListener</code> from the model
Adds a <code>ChangeListener</code> to the model
Removes a <code>ChangeListener</code> from the model
Sets the label that is displayed on the button
Returns a new {@code String} object representing the specified {@code byte}
Returns a {@code Byte} instance representing the specified {@code byte} value
Parses the string argument as a signed {@code byte} in the radix specified by the second argument
Parses the string argument as a signed decimal {@code byte}
Returns a {@code Byte} object holding the value extracted from the specified {@code String} when parsed with the radix given by the second argument
Returns a {@code Byte} object holding the value given by the specified {@code String}
Decodes a {@code String} into a {@code Byte}
Returns the value of this {@code Byte} as a {@code byte}
Returns the value of this {@code Byte} as a {@code short} after a widening primitive conversion
Returns the value of this {@code Byte} as an {@code int} after a widening primitive conversion
Returns the value of this {@code Byte} as a {@code long} after a widening primitive conversion
Returns the value of this {@code Byte} as a {@code float} after a widening primitive conversion
Returns the value of this {@code Byte} as a {@code double} after a widening primitive conversion
Returns a {@code String} object representing this {@code Byte}'s value
Returns a hash code for this {@code Byte}; equal to the result of invoking {@code intValue()}
Returns a hash code for a {@code byte} value; compatible with {@code Byte
Compares this object to the specified object
Compares two {@code Byte} objects numerically
Compares two {@code byte} values numerically
Converts the argument to an {@code int} by an unsigned conversion
Converts the argument to a {@code long} by an unsigned conversion
Reads the next byte of data from this input stream
Reads up to <code>len</code> bytes of data into an array of bytes from this input stream
Skips <code>n</code> bytes of input from this input stream
Returns the number of remaining bytes that can be read (or skipped over) from this input stream
Tests if this <code>InputStream</code> supports mark/reset
Set the current marked position in the stream
Resets the buffer to the marked position
Closing a <tt>ByteArrayInputStream</tt> has no effect
Writes the specified byte to this byte array output stream
Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this byte array output stream
Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using <code>out
Resets the <code>count</code> field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded
Creates a newly allocated byte array
Returns the current size of the buffer
Converts the buffer's contents into a string decoding bytes using the platform's default character set
Converts the buffer's contents into a string by decoding the bytes using the named {@link java
Creates a newly allocated string
Closing a <tt>ByteArrayOutputStream</tt> has no effect
Allocates a new direct byte buffer
Allocates a new byte buffer
Wraps a byte array into a buffer
Wraps a byte array into a buffer
Creates a new byte buffer whose content is a shared subsequence of this buffer's content
Creates a new byte buffer that shares this buffer's content
Creates a new, read-only byte buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible byte array
Returns the byte array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this byte buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Modifies this buffer's byte order
Relative <i>get</i> method for reading a char value
Relative <i>put</i> method for writing a char value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading a char value
Absolute <i>put</i> method for writing a char value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as a char buffer
Relative <i>get</i> method for reading a short value
Relative <i>put</i> method for writing a short value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading a short value
Absolute <i>put</i> method for writing a short value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as a short buffer
Relative <i>get</i> method for reading an int value
Relative <i>put</i> method for writing an int value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading an int value
Absolute <i>put</i> method for writing an int value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as an int buffer
Relative <i>get</i> method for reading a long value
Relative <i>put</i> method for writing a long value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading a long value
Absolute <i>put</i> method for writing a long value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as a long buffer
Relative <i>get</i> method for reading a float value
Relative <i>put</i> method for writing a float value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading a float value
Absolute <i>put</i> method for writing a float value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as a float buffer
Relative <i>get</i> method for reading a double value
Relative <i>put</i> method for writing a double value&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method for reading a double value
Absolute <i>put</i> method for writing a double value&nbsp;&nbsp;<i>(optional operation)</i>
Creates a view of this byte buffer as a double buffer
Reads from <code>input</code> and initalizes the value in this <code>ByteHolder</code> object with the unmarshalled data
Marshals to <code>output</code> the value in this <code>ByteHolder</code> object
Returns the TypeCode corresponding to the value held in this <code>ByteHolder</code> object
The number of <code>byte</code>s in the list
Checks if the <code>byte</code> <code>item</code> is a member of this list
Returns the <code>index</code>th item in the collection
The number of <code>byte</code>s in the list
Checks if the <code>byte</code> <code>item</code> is a member of this list
Returns the <code>index</code>th item in the collection
Returns the lookup table data by reference
Returns an array of samples of a pixel, translated with the lookup table
Returns an array of samples of a pixel, translated with the lookup table
Retrieves the native byte order of the underlying platform
Constructs a string describing this object
Method namespaceIsRelative
Method namespaceIsRelative
Method namespaceIsAbsolute
Method namespaceIsAbsolute
This method throws an exception if the Attribute value contains a relative URI
This method throws a CanonicalizationException if the supplied Document is not able to be traversed using a TreeWalker
This method throws a CanonicalizationException if the supplied Element contains any relative namespaces
Populates this <code>CachedRowSet</code> object with data from the given <code>ResultSet</code> object
Populates this <code>CachedRowSet</code> object with data, using the given connection to produce the result set from which the data will be read
Propagates row update, insert and delete changes made to this <code>CachedRowSet</code> object to the underlying data source
Propagates all row update, insert and delete changes to the data source backing this <code>CachedRowSet</code> object using the specified <code>Connection</code> object to establish a connection to the data source
Restores this <code>CachedRowSet</code> object to its original value, that is, its value before the last set of changes
Releases the current contents of this <code>CachedRowSet</code> object and sends a <code>rowSetChanged</code> event to all registered listeners
Cancels the deletion of the current row and notifies listeners that a row has changed
Immediately removes the current row from this <code>CachedRowSet</code> object if the row has been inserted, and also notifies listeners that a row has changed
Immediately reverses the last update operation if the row has been modified
Indicates whether the designated column in the current row of this <code>CachedRowSet</code> object has been updated
Indicates whether the designated column in the current row of this <code>CachedRowSet</code> object has been updated
Converts this <code>CachedRowSet</code> object to a <code>Collection</code> object that contains all of this <code>CachedRowSet</code> object's data
Converts the designated column in this <code>CachedRowSet</code> object to a <code>Collection</code> object
Converts the designated column in this <code>CachedRowSet</code> object to a <code>Collection</code> object
Retrieves the <code>SyncProvider</code> implementation for this <code>CachedRowSet</code> object
Sets the <code>SyncProvider</code> object for this <code>CachedRowSet</code> object to the one specified
Returns the number of rows in this <code>CachedRowSet</code> object
Sets the metadata for this <code>CachedRowSet</code> object with the given <code>RowSetMetaData</code> object
Returns a <code>ResultSet</code> object containing the original value of this <code>CachedRowSet</code> object
Returns a <code>ResultSet</code> object containing the original value for the current row only of this <code>CachedRowSet</code> object
Sets the current row in this <code>CachedRowSet</code> object as the original row
Returns an identifier for the object (table) that was used to create this <code>CachedRowSet</code> object
Sets the identifier for the table from which this <code>CachedRowSet</code> object was derived to the given table name
Returns an array containing one or more column numbers indicating the columns that form a key that uniquely identifies a row in this <code>CachedRowSet</code> object
Sets this <code>CachedRowSet</code> object's <code>keyCols</code> field with the given array of column numbers, which forms a key for uniquely identifying a row in this <code>CachedRowSet</code> object
Returns a new <code>RowSet</code> object backed by the same data as that of this <code>CachedRowSet</code> object
Creates a <code>RowSet</code> object that is a deep copy of the data in this <code>CachedRowSet</code> object
Creates a <code>CachedRowSet</code> object that is an empty copy of this <code>CachedRowSet</code> object
Creates a <code>CachedRowSet</code> object that is a deep copy of this <code>CachedRowSet</code> object's data but is independent of it
Retrieves the first warning reported by calls on this <code>RowSet</code> object
Retrieves a <code>boolean</code> indicating whether rows marked for deletion appear in the set of current rows
Sets the property <code>showDeleted</code> to the given <code>boolean</code> value, which determines whether rows marked for deletion appear in the set of current rows
Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains a <code>Connection</code> object from the <code>ResultSet</code> or JDBC properties passed to it's constructors
Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
Each <code>CachedRowSet</code> object's <code>SyncProvider</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows
Populates this <code>CachedRowSet</code> object with data from the given <code>ResultSet</code> object
Sets the <code>CachedRowSet</code> object's page-size
Returns the page-size for the <code>CachedRowSet</code> object
Increments the current page of the <code>CachedRowSet</code>
Decrements the current page of the <code>CachedRowSet</code>
Returns the XPathSupport object used in this CachedXPathAPI %REVIEW% I'm somewhat concerned about the loss of encapsulation this causes, but the xml-security folks say they need it
Use an XPath string to select a single node
Use an XPath string to select a single node
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Evaluate XPath string to an XObject
Evaluate XPath string to an XObject
Evaluate XPath string to an XObject
Returns an OutputStream to which the response body can be written
Aborts the attempt to cache the response
Returns the response headers as a Map
Returns the response body as an InputStream
Returns the symbol table
Returns the grammar pool
Sets whether new parser instance receive shadow copies of the main symbol table
Creates a new DOM parser
Creates a new SAX parser
lock the grammar pool
clear the grammar pool
unlock the grammar pool
Retrieve the initial set of grammars for the validator to work with
Retrieve a particular grammar
Give the grammarPool the option of caching these grammars
Returns the grammar associated to the specified description
Returns true if the grammar pool contains a grammar associated to the specified description
Gets a calendar using the default time zone and locale
Gets a calendar using the specified time zone and default locale
Gets a calendar using the default time zone and specified locale
Gets a calendar with the specified time zone and locale
Returns an array of all locales for which the <code>getInstance</code> methods of this class can return localized instances
Converts the current calendar field values in {@link #fields fields[]} to the millisecond time value {@link #time}
Converts the current millisecond time value {@link #time} to calendar field values in {@link #fields fields[]}
Returns a <code>Date</code> object representing this <code>Calendar</code>'s time value (millisecond offset from the <a href="#Epoch">Epoch</a>")
Sets this Calendar's time with the given <code>Date</code>
Returns this Calendar's time value in milliseconds
Sets this Calendar's current time from the given long value
Returns the value of the given calendar field
Returns the value of the given calendar field
Sets the given calendar field to the given value
Sets the values for the calendar fields <code>YEAR</code>, <code>MONTH</code>, and <code>DAY_OF_MONTH</code>
Sets the values for the calendar fields <code>YEAR</code>, <code>MONTH</code>, <code>DAY_OF_MONTH</code>, <code>HOUR_OF_DAY</code>, and <code>MINUTE</code>
Sets the values for the fields <code>YEAR</code>, <code>MONTH</code>, <code>DAY_OF_MONTH</code>, <code>HOUR_OF_DAY</code>, <code>MINUTE</code>, and <code>SECOND</code>
Sets all the calendar field values and the time value (millisecond offset from the <a href="#Epoch">Epoch</a>) of this <code>Calendar</code> undefined
Sets the given calendar field value and the time value (millisecond offset from the <a href="#Epoch">Epoch</a>) of this <code>Calendar</code> undefined
Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a <code>get</code> method call
Returns the string representation of the calendar <code>field</code> value in the given <code>style</code> and <code>locale</code>
Returns a {@code Map} containing all names of the calendar {@code field} in the given {@code style} and {@code locale} and their corresponding field values
Fills in any unset fields in the calendar fields
Returns an unmodifiable {@code Set} containing all calendar types supported by {@code Calendar} in the runtime environment
Returns the calendar type of this {@code Calendar}
Compares this <code>Calendar</code> to the specified <code>Object</code>
Returns a hash code for this calendar
Returns whether this <code>Calendar</code> represents a time before the time represented by the specified <code>Object</code>
Returns whether this <code>Calendar</code> represents a time after the time represented by the specified <code>Object</code>
Compares the time values (millisecond offsets from the <a href="#Epoch">Epoch</a>) represented by two <code>Calendar</code> objects
Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules
Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
Adds the specified (signed) amount to the specified calendar field without changing larger fields
Sets the time zone with the given time zone value
Gets the time zone
Specifies whether or not date/time interpretation is to be lenient
Tells whether date/time interpretation is to be lenient
Sets what the first day of the week is; e
Gets what the first day of the week is; e
Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1
Gets what the minimal days required in the first week of the year are; e
Returns whether this {@code Calendar} supports week dates
Returns the week year represented by this {@code Calendar}
Sets the date of this {@code Calendar} with the the given date specifiers - week year, week of year, and day of week
Returns the number of weeks in the week year represented by this {@code Calendar}
Returns the minimum value for the given calendar field of this <code>Calendar</code> instance
Returns the maximum value for the given calendar field of this <code>Calendar</code> instance
Returns the highest minimum value for the given calendar field of this <code>Calendar</code> instance
Returns the lowest maximum value for the given calendar field of this <code>Calendar</code> instance
Returns the minimum value that the specified calendar field could have, given the time value of this <code>Calendar</code>
Returns the maximum value that the specified calendar field could have, given the time value of this <code>Calendar</code>
Creates and returns a copy of this object
Return a string representation of this calendar
Converts this object to an {@link Instant}
Sets the instant parameter to the given {@code instant} value that is a millisecond offset from <a href="Calendar
Sets the instant parameter to the {@code instant} value given by a {@link Date}
Sets the {@code field} parameter to the given {@code value}
Sets field parameters to their values given by {@code fieldValuePairs} that are pairs of a field and its value
Sets the date field parameters to the values given by {@code year}, {@code month}, and {@code dayOfMonth}
Sets the time of day field parameters to the values given by {@code hourOfDay}, {@code minute}, and {@code second}
Sets the time of day field parameters to the values given by {@code hourOfDay}, {@code minute}, {@code second}, and {@code millis}
Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week
Sets the time zone parameter to the given {@code zone}
Sets the lenient mode parameter to the value given by {@code lenient}
Sets the calendar type parameter to the given {@code type}
Sets the locale parameter to the given {@code locale}
Sets the week definition parameters to the values given by {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} that are used to determine the <a href="Calendar
Returns a {@code Calendar} built from the parameters set by the setter methods
Returns the first day of a week in the given {@code locale}
Returns the minimal number of days required in the first week of a year
Returns the string representation (display name) of the calendar <code>field value</code> in the given <code>style</code> and <code>locale</code>
Returns a {@code Map} containing all string representations (display names) of the {@code Calendar} {@code field} in the given {@code style} and {@code locale} and their corresponding field values
Computes a result, or throws an exception if unable to do so
Registers the OUT parameter in ordinal position <code>parameterIndex</code> to the JDBC type <code>sqlType</code>
Registers the parameter in ordinal position <code>parameterIndex</code> to be of JDBC type <code>sqlType</code>
Retrieves whether the last OUT parameter read had the value of SQL <code>NULL</code>
Retrieves the value of the designated JDBC <code>CHAR</code>, <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a <code>String</code> in the Java programming language
Retrieves the value of the designated JDBC <code>BIT</code> or <code>BOOLEAN</code> parameter as a <code>boolean</code> in the Java programming language
Retrieves the value of the designated JDBC <code>TINYINT</code> parameter as a <code>byte</code> in the Java programming language
Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter as a <code>short</code> in the Java programming language
Retrieves the value of the designated JDBC <code>INTEGER</code> parameter as an <code>int</code> in the Java programming language
Retrieves the value of the designated JDBC <code>BIGINT</code> parameter as a <code>long</code> in the Java programming language
Retrieves the value of the designated JDBC <code>FLOAT</code> parameter as a <code>float</code> in the Java programming language
Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code> in the Java programming language
Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>BINARY</code> or <code>VARBINARY</code> parameter as an array of <code>byte</code> values in the Java programming language
Retrieves the value of the designated JDBC <code>DATE</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>TIME</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a <code>java
Retrieves the value of the designated parameter as an <code>Object</code> in the Java programming language
Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a <code>java
Returns an object representing the value of OUT parameter <code>parameterIndex</code> and uses <code>map</code> for the custom mapping of the parameter value
Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code> parameter as a {@link java
Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a {@link java
Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an {@link java
Retrieves the value of the designated JDBC <code>DATE</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>TIME</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a <code>java
Registers the designated output parameter
Registers the OUT parameter named <code>parameterName</code> to the JDBC type <code>sqlType</code>
Registers the parameter named <code>parameterName</code> to be of JDBC type <code>sqlType</code>
Registers the designated output parameter
Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to the given Java <code>boolean</code> value
Sets the designated parameter to the given Java <code>byte</code> value
Sets the designated parameter to the given Java <code>short</code> value
Sets the designated parameter to the given Java <code>int</code> value
Sets the designated parameter to the given Java <code>long</code> value
Sets the designated parameter to the given Java <code>float</code> value
Sets the designated parameter to the given Java <code>double</code> value
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given Java <code>String</code> value
Sets the designated parameter to the given Java array of bytes
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to SQL <code>NULL</code>
Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a <code>String</code> in the Java programming language
Retrieves the value of a JDBC <code>BIT</code> or <code>BOOLEAN</code> parameter as a <code>boolean</code> in the Java programming language
Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code> in the Java programming language
Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code> in the Java programming language
Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code> in the Java programming language
Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code> in the Java programming language
Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code> in the Java programming language
Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code> in the Java programming language
Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code> parameter as an array of <code>byte</code> values in the Java programming language
Retrieves the value of a JDBC <code>DATE</code> parameter as a <code>java
Retrieves the value of a JDBC <code>TIME</code> parameter as a <code>java
Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a <code>java
Retrieves the value of a parameter as an <code>Object</code> in the Java programming language
Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a <code>java
Returns an object representing the value of OUT parameter <code>parameterName</code> and uses <code>map</code> for the custom mapping of the parameter value
Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code> parameter as a {@link java
Retrieves the value of a JDBC <code>BLOB</code> parameter as a {@link java
Retrieves the value of a JDBC <code>CLOB</code> parameter as a <code>java
Retrieves the value of a JDBC <code>ARRAY</code> parameter as an {@link java
Retrieves the value of a JDBC <code>DATE</code> parameter as a <code>java
Retrieves the value of a JDBC <code>TIME</code> parameter as a <code>java
Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a <code>java
Retrieves the value of a JDBC <code>DATALINK</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a <code>java
Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>Reader</code> object
Retrieves the value of the designated JDBC <code>NCLOB</code> parameter as a <code>java
Retrieves the value of a JDBC <code>NCLOB</code> parameter as a <code>java
Sets the designated parameter to the given <code>java
Retrieves the value of the designated <code>SQL XML</code> parameter as a <code>java
Retrieves the value of the designated <code>SQL XML</code> parameter as a <code>java
Retrieves the value of the designated <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> parameter as a <code>String</code> in the Java programming language
Retrieves the value of the designated <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> parameter as a <code>String</code> in the Java programming language
Retrieves the value of the designated parameter as a <code>java
Retrieves the value of the designated parameter as a <code>java
Retrieves the value of the designated parameter as a <code>java
Retrieves the value of the designated parameter as a <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter to the given input stream
Sets the designated parameter to the given input stream
Sets the designated parameter to the given <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>Reader</code> object
<p>Returns an object representing the value of OUT parameter {@code parameterIndex} and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported
<p>Returns an object representing the value of OUT parameter {@code parameterName} and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported
<p>Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Registers the OUT parameter in ordinal position {@code parameterIndex} to the JDBC type {@code sqlType}
Registers the parameter in ordinal position {@code parameterIndex} to be of JDBC type {@code sqlType}
Registers the designated output parameter
Registers the OUT parameter named <code>parameterName</code> to the JDBC type {@code sqlType}
Registers the parameter named <code>parameterName</code> to be of JDBC type {@code sqlType}
Registers the designated output parameter
<p> Retrieve or display the information requested in the provided Callbacks
Returns the type of this call site's target
Returns the target method of the call site, according to the behavior defined by this call site's specific class
Updates the target method of this call site, according to the behavior defined by this call site's specific class
Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
Call corresponding visitor method(s)
Stops further processing of a print job
Retrieves the environment that was in effect when this exception was created
Sets the environment that will be returned when getEnvironment() is called
Retrieves the "remaining new name" field of this exception, which is used when this exception is thrown during a rename() operation
Sets the "remaining new name" field of this exception
Retrieves the <code>altName</code> field of this exception
Sets the <code>altName</code> field of this exception
Retrieves the <code>altNameCtx</code> field of this exception
Sets the <code>altNameCtx</code> field of this exception
Returns the algorithm-specific input parameters associated with this <code>CanonicalizationMethod</code>
Method getInstance
Method register
Method register
This method registers the default algorithms
Method getURI
Method getIncludeComments
This method tries to canonicalize the given bytes
Canonicalizes the subtree rooted by <CODE>node</CODE>
Canonicalizes the subtree rooted by <CODE>node</CODE>
Canonicalizes an XPath node set
Canonicalizes an XPath node set
Canonicalizes an XPath node set
Canonicalizes an XPath node set
Sets the writer where the canonicalization ends
Returns the name of the implementing {@link CanonicalizerSpi} class
Set the canonicalizer behaviour to not reset
Always throws a CanonicalizationException because this is inclusive c14n
Always throws a CanonicalizationException because this is inclusive c14n
Returns the Attr[]s to be output for the given element
Returns the Attr[]s to be output for the given element
Always throws a CanonicalizationException because this is inclusive c14n
Always throws a CanonicalizationException because this is inclusive c14n
Returns the Attr[]s to be output for the given element
Returns the Attr[]s to be output for the given element
Method engineCanonicalizeSubTree
Method engineCanonicalizeSubTree
Method engineCanonicalizeSubTree
Method engineCanonicalizeXPathNodeSet
Method engineCanonicalizeSubTree
Method engineCanonicalizeXPathNodeSet
Canonicalizes a Subtree node
Canonicalizes a Subtree node
Method canonicalizeSubTree, this function is a recursive one
Canonicalizes all the nodes included in the currentNode and contained in the xpathNodeSet field
Adds to ns the definitions from the parent elements of el
Outputs an Attribute to the internal Writer
Outputs a PI to the internal Writer
Method outputCommentToWriter
Outputs a Text of CDATA section to the internal Writer
Always throws a CanonicalizationException
Always throws a CanonicalizationException
Returns the Attr[]s to be output for the given element
Returns the Attr[]s to be output for the given element
Method canonicalize
Method engineCanonicalizeXPathNodeSet
Method engineCanonicalizeXPathNodeSet
Returns the URI of this engine
Returns true if comments are included
C14n a nodeset
C14n a nodeset
C14n a node tree
C14n a node tree
Sets the writer where the canonicalization ends
Creates the peer of the canvas
Paints this canvas
Updates this canvas
Creates a new strategy for multi-buffering on this component
Creates a new strategy for multi-buffering on this component with the required buffer capabilities
Returns the <code>BufferStrategy</code> used by this component
Gets the AccessibleContext associated with this Canvas
Get the role of this object
Requests a GC that best suits this Canvas
Gets the horizontal gap between components
Sets the horizontal gap between components
Gets the vertical gap between components
Sets the vertical gap between components
Adds the specified component to this card layout's internal table of names
Removes the specified component from the layout
Determines the preferred size of the container argument using this card layout
Calculates the minimum size for the specified panel
Returns the maximum dimensions for this layout given the components in the specified target container
Returns the alignment along the x axis
Returns the alignment along the y axis
Invalidates the layout, indicating that if the layout manager has cached information it should be discarded
Lays out the specified container using this card layout
Flips to the first card of the container
Flips to the next card of the specified container
Flips to the previous card of the specified container
Flips to the last card of the container
Flips to the component that was added to this layout with the specified <code>name</code>, using <code>addLayoutComponent</code>
Returns a string representation of the state of this card layout
Called when the UI is being installed into the interface of a JTextComponent
Called when the UI is being removed from the interface of a JTextComponent
Renders the caret
Adds a listener to track whenever the caret position has been changed
Removes a listener that was tracking caret position changes
Determines if the caret is currently visible
Sets the visibility of the caret
Determines if the selection is currently visible
Sets the visibility of the selection
Set the current caret visual location
Gets the current caret visual location
Sets the blink rate of the caret
Gets the blink rate of the caret
Fetches the current position of the caret
Fetches the current position of the mark
Sets the caret position to some position
Moves the caret position (dot) to some other position, leaving behind the mark
Fetches the location of the caret
Fetches the location of other end of a logical selection
Called when the caret position is updated
Return a list of code point characters (not including the input value)  that can be substituted in a case insensitive match
Call corresponding visitor method(s)
Return the CatalogManager used by this catalog
Establish the CatalogManager used by this catalog
Setup readers
Add a new CatalogReader to the Catalog
Copies the reader list from the current Catalog to a new Catalog
Create a new Catalog object
Returns the current base URI
Returns the default override setting associated with this catalog
Load the system catalog files
Parse a catalog file, augmenting internal data structures
Parse a catalog file, augmenting internal data structures
Parse a catalog document, augmenting internal data structures
Parse all of the pending catalogs
Parse a single catalog file, augmenting internal data structures
Cleanup and process a Catalog entry
Handle unknown CatalogEntry types
Parse all subordinate catalogs
Return the applicable DOCTYPE system identifier
Return the applicable DOCUMENT entry
Return the applicable ENTITY system identifier
Return the applicable NOTATION system identifier
Return the applicable PUBLIC or SYSTEM identifier
Return the applicable PUBLIC or SYSTEM identifier
Return the applicable SYSTEM system identifier
Return the applicable SYSTEM system identifier in this catalog
Return the applicable URI
Return the applicable URI in this catalog
Search the subordinate catalogs, in order, looking for a match
Replace backslashes with forward slashes
Construct an absolute URI from a relative one, using the current base URI
Perform character normalization on a URI reference
Perform %-encoding on a single byte
Add to the current list of delegated catalogs
Lookup an entry type
Find out how many arguments an entry is required to have
Find out how many arguments an entry is required to have
Get the entry type
Get an entry argument
Set an entry argument
Return a detail message for this exception
Return the embedded exception, if any
Return the exception type
Override toString to pick up any embedded exception
Set the bootstrap resolver
Get the bootstrap resolver
Allow access to the static CatalogManager
How are missing properties handled? <p>If true, missing or unreadable property files will not be reported
How should missing properties be handled? <p>If ignore is true, missing or unreadable property files will not be reported
How are missing properties handled? <p>If ignore is true, missing or unreadable property files will not be reported
What is the current verbosity?
Set the current verbosity
What is the current verbosity?
Get the relativeCatalogs setting
Set the relativeCatalogs setting
Get the relativeCatalogs setting
Return the current list of catalog files
Set the list of catalog files
Return the current list of catalog files
Return the current prefer public setting
Set the prefer public setting
Return the current prefer public setting
Get the current use static catalog setting
Set the use static catalog setting
Get the current use static catalog setting
Get a new catalog instance
Get a catalog instance
<p>Obtain the oasisXMLCatalogPI setting from the properties
Get the current XML Catalog PI setting
Set the XML Catalog PI setting
Get the current XML Catalog PI setting
Obtain the Catalog class name setting from the properties
Get the current Catalog class name
Set the Catalog class name
Get the current Catalog class name
Read a catalog from a file
Read a catalog from an input stream
Return the underlying catalog
Implements the guts of the <code>resolveEntity</code> method for the SAX interface
Implements the <code>resolveEntity</code> method for the SAX interface
JAXP URIResolver API
A short integer indicating what type of node this is
Returns the node name
Convert the given any into a CDR encapsulated octet sequence
Decode the given octet sequence into an any based on a CDR encapsulated octet sequence
Convert the given any into a CDR encapsulated octet sequence
Decode the given octet sequence into an any based on a CDR encapsulated octet sequence
Unmarshal the extended GIOP header NOTE: May be fragmented, so should not be called by the ReaderThread
Override the default CDR factory behavior to get the negotiated code sets from the connection
return true if our ByteBuffer is sharing/equal to bb
Aligns the current position on the given octet boundary if there are enough bytes available to do so
This must be called after determining the proper ORB version, and setting it on the stream's ORB instance
Resets any internal references to code set converters
NOTE:  size passed to init means buffer size
Write the contents of the CDROutputStream to the specified output stream
overrides create_input_stream from CDROutputStream
Override the default CDR factory behavior to get the negotiated code sets from the connection
return true if our ByteBuffer is sharing/equal to bb
Returns the value contained in the editor
Asks the editor if it can start editing using <code>anEvent</code>
Returns true if the editing cell should be selected, false otherwise
Tells the editor to stop editing and accept any partially edited value as the value of the editor
Tells the editor to cancel editing and not accept any partially edited value
Adds a listener to the list that's notified when the editor stops, or cancels editing
Removes a listener from the list that's notified
This tells the listeners the editor has ended editing
This tells the listeners the editor has canceled editing
Overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured
Shouldn't be called
Shouldn't be called
If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway)
Paint a cell renderer component c on graphics object g
Calls this
Calls this
Gets the AccessibleContext associated with this CellRendererPane
Get the role of this object
Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this certificate
Returns the principal of the principal-key pair being guaranteed by the guarantor
Returns the key of the principal-key pair being guaranteed by the guarantor
Encodes the certificate to an output stream in a format that can be decoded by the {@code decode} method
Decodes a certificate from an input stream
Returns the name of the coding format
Returns a string that represents the contents of the certificate
Returns a certificate factory object that implements the specified certificate type
Returns a certificate factory object for the specified certificate type
Returns a certificate factory object for the specified certificate type
Returns the provider of this certificate factory
Returns the name of the certificate type associated with this certificate factory
Generates a certificate object and initializes it with the data read from the input stream {@code inStream}
Returns an iteration of the {@code CertPath} encodings supported by this certificate factory, with the default encoding first
Generates a {@code CertPath} object and initializes it with the data read from the {@code InputStream} inStream
Generates a {@code CertPath} object and initializes it with the data read from the {@code InputStream} inStream
Generates a {@code CertPath} object and initializes it with a {@code List} of {@code Certificate}s
Returns a (possibly empty) collection view of the certificates read from the given input stream {@code inStream}
Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream {@code inStream}
Returns a (possibly empty) collection view of the CRLs read from the given input stream {@code inStream}
Generates a certificate object and initializes it with the data read from the input stream {@code inStream}
Generates a {@code CertPath} object and initializes it with the data read from the {@code InputStream} inStream
Generates a {@code CertPath} object and initializes it with the data read from the {@code InputStream} inStream
Generates a {@code CertPath} object and initializes it with a {@code List} of {@code Certificate}s
Returns an iteration of the {@code CertPath} encodings supported by this certificate factory, with the default encoding first
Returns a (possibly empty) collection view of the certificates read from the given input stream {@code inStream}
Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream {@code inStream}
Returns a (possibly empty) collection view of the CRLs read from the given input stream {@code inStream}
Returns the date on which the certificate was revoked
Returns the reason the certificate was revoked
Returns the name of the authority that signed the certificate's revocation status information
Returns the invalidity date, as specified in the Invalidity Date extension of this {@code CertificateRevokedException}
Returns a map of X
Returns the type of {@code Certificate}s in this certification path
Returns an iteration of the encodings supported by this certification path, with the default encoding first
Compares this certification path for equality with the specified object
Returns the hashcode for this certification path
Returns a string representation of this certification path
Returns the encoded form of this certification path, using the default encoding
Returns the encoded form of this certification path, using the specified encoding
Returns the list of certificates in this certification path
Replaces the {@code CertPath} to be serialized with a {@code CertPathRep} object
Returns a {@code CertPath} constructed from the type and data
Returns a {@code CertPathBuilder} object that implements the specified algorithm
Returns a {@code CertPathBuilder} object that implements the specified algorithm
Returns a {@code CertPathBuilder} object that implements the specified algorithm
Returns the provider of this {@code CertPathBuilder}
Returns the name of the algorithm of this {@code CertPathBuilder}
Attempts to build a certification path using the specified algorithm parameter set
Returns the default {@code CertPathBuilder} type as specified by the {@code certpathbuilder
Returns a {@code CertPathChecker} that the encapsulated {@code CertPathBuilderSpi} implementation uses to check the revocation status of certificates
Returns the built certification path
Makes a copy of this {@code CertPathBuilderResult}
Attempts to build a certification path using the specified algorithm parameter set
Returns a {@code CertPathChecker} that this implementation uses to check the revocation status of certificates
Initializes the internal state of this {@code CertPathChecker}
Indicates if forward checking is supported
Performs the check(s) on the specified certificate using its internal state
Makes a copy of this {@code CertPathParameters}
Returns a {@code CertPathValidator} object that implements the specified algorithm
Returns a {@code CertPathValidator} object that implements the specified algorithm
Returns a {@code CertPathValidator} object that implements the specified algorithm
Returns the {@code Provider} of this {@code CertPathValidator}
Returns the algorithm name of this {@code CertPathValidator}
Validates the specified certification path using the specified algorithm parameter set
Returns the default {@code CertPathValidator} type as specified by the {@code certpathvalidator
Returns a {@code CertPathChecker} that the encapsulated {@code CertPathValidatorSpi} implementation uses to check the revocation status of certificates
Returns the certification path that was being validated when the exception was thrown
Returns the index of the certificate in the certification path that caused the exception to be thrown
Returns the reason that the validation failed
Makes a copy of this {@code CertPathValidatorResult}
Validates the specified certification path using the specified algorithm parameter set
Returns a {@code CertPathChecker} that this implementation uses to check the revocation status of certificates
Decides whether a {@code Certificate} should be selected
Makes a copy of this {@code CertSelector}
Method main
Returns a {@code Collection} of {@code Certificate}s that match the specified selector
Returns a {@code Collection} of {@code CRL}s that match the specified selector
Returns a {@code CertStore} object that implements the specified {@code CertStore} type and is initialized with the specified parameters
Returns a {@code CertStore} object that implements the specified {@code CertStore} type
Returns a {@code CertStore} object that implements the specified {@code CertStore} type
Returns the parameters used to initialize this {@code CertStore}
Returns the type of this {@code CertStore}
Returns the provider of this {@code CertStore}
Returns the default {@code CertStore} type as specified by the {@code certstore
Makes a copy of this {@code CertStoreParameters}
Returns a {@code Collection} of {@code Certificate}s that match the specified selector
Returns a {@code Collection} of {@code CRL}s that match the specified selector
Invoked when the target of the listener has changed its state
Tells whether or not this channel is open
Closes this channel
Get the initiator's address for this channel binding
Get the acceptor's address for this channel binding
Get the application specified data for this channel binding
Compares two instances of ChannelBinding
Returns a hashcode value for this ChannelBinding object
Constructs a stream that reads bytes from the given channel
Constructs a stream that writes bytes to the given channel
Constructs a stream that reads bytes from the given channel
Constructs a stream that writes bytes to the given channel
Constructs a channel that reads bytes from the given stream
Constructs a channel that writes bytes to the given stream
Constructs a reader that decodes bytes from the given channel using the given decoder
Constructs a reader that decodes bytes from the given channel according to the named charset
Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel
Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel
Returns a <tt>Character</tt> instance representing the specified <tt>char</tt> value
Returns the value of this {@code Character} object
Returns a hash code for this {@code Character}; equal to the result of invoking {@code charValue()}
Returns a hash code for a {@code char} value; compatible with {@code Character
Compares this object against the specified object
Returns a {@code String} object representing this {@code Character}'s value
Returns a {@code String} object representing the specified {@code char}
Determines whether the specified code point is a valid <a href="http://www
Determines whether the specified character (Unicode code point) is in the <a href="#BMP">Basic Multilingual Plane (BMP)</a>
Determines whether the specified character (Unicode code point) is in the <a href="#supplementary">supplementary character</a> range
Determines if the given {@code char} value is a <a href="http://www
Determines if the given {@code char} value is a <a href="http://www
Determines if the given {@code char} value is a Unicode <i>surrogate code unit</i>
Determines whether the specified pair of {@code char} values is a valid <a href="http://www
Determines the number of {@code char} values needed to represent the specified character (Unicode code point)
Converts the specified surrogate pair to its supplementary code point value
Returns the code point at the given index of the {@code CharSequence}
Returns the code point at the given index of the {@code char} array
Returns the code point at the given index of the {@code char} array, where only array elements with {@code index} less than {@code limit} can be used
Returns the code point preceding the given index of the {@code CharSequence}
Returns the code point preceding the given index of the {@code char} array
Returns the code point preceding the given index of the {@code char} array, where only array elements with {@code index} greater than or equal to {@code start} can be used
Returns the leading surrogate (a <a href="http://www
Returns the trailing surrogate (a <a href="http://www
Converts the specified character (Unicode code point) to its UTF-16 representation
Converts the specified character (Unicode code point) to its UTF-16 representation stored in a {@code char} array
Returns the number of Unicode code points in the text range of the specified char sequence
Returns the number of Unicode code points in a subarray of the {@code char} array argument
Returns the index within the given char sequence that is offset from the given {@code index} by {@code codePointOffset} code points
Returns the index within the given {@code char} subarray that is offset from the given {@code index} by {@code codePointOffset} code points
Determines if the specified character is a lowercase character
Determines if the specified character (Unicode code point) is a lowercase character
Determines if the specified character is an uppercase character
Determines if the specified character (Unicode code point) is an uppercase character
Determines if the specified character is a titlecase character
Determines if the specified character (Unicode code point) is a titlecase character
Determines if the specified character is a digit
Determines if the specified character (Unicode code point) is a digit
Determines if a character is defined in Unicode
Determines if a character (Unicode code point) is defined in Unicode
Determines if the specified character is a letter
Determines if the specified character (Unicode code point) is a letter
Determines if the specified character is a letter or digit
Determines if the specified character (Unicode code point) is a letter or digit
Determines if the specified character is permissible as the first character in a Java identifier
Determines if the specified character may be part of a Java identifier as other than the first character
Determines if the specified character (Unicode code point) is an alphabet
Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard
Determines if the specified character is permissible as the first character in a Java identifier
Determines if the character (Unicode code point) is permissible as the first character in a Java identifier
Determines if the specified character may be part of a Java identifier as other than the first character
Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character
Determines if the specified character is permissible as the first character in a Unicode identifier
Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier
Determines if the specified character may be part of a Unicode identifier as other than the first character
Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character
Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Converts the character argument to lowercase using case mapping information from the UnicodeData file
Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file
Converts the character argument to uppercase using case mapping information from the UnicodeData file
Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file
Converts the character argument to titlecase using case mapping information from the UnicodeData file
Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file
Returns the numeric value of the character {@code ch} in the specified radix
Returns the numeric value of the specified character (Unicode code point) in the specified radix
Returns the {@code int} value that the specified Unicode character represents
Returns the {@code int} value that the specified character (Unicode code point) represents
Determines if the specified character is ISO-LATIN-1 white space
Determines if the specified character is a Unicode space character
Determines if the specified character (Unicode code point) is a Unicode space character
Determines if the specified character is white space according to Java
Determines if the specified character (Unicode code point) is white space according to Java
Determines if the specified character is an ISO control character
Determines if the referenced character (Unicode code point) is an ISO control character
Returns a value indicating a character's general category
Returns a value indicating a character's general category
Determines the character representation for a specific digit in the specified radix
Returns the Unicode directionality property for the given character
Returns the Unicode directionality property for the given character (Unicode code point)
Determines whether the character is mirrored according to the Unicode specification
Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification
Compares two {@code Character} objects numerically
Compares two {@code char} values numerically
Returns the value obtained by reversing the order of the bytes in the specified <tt>char</tt> value
Returns the Unicode name of the specified character {@code codePoint}, or null if the code point is {@link #UNASSIGNED unassigned}
Compares two {@code Subset} objects for equality
Returns the standard hash code as defined by the {@link Object#hashCode} method
Returns the name of this subset
Returns the object representing the Unicode block containing the given character, or {@code null} if the character is not a member of a defined block
Returns the object representing the Unicode block containing the given character (Unicode code point), or {@code null} if the character is not a member of a defined block
Returns the UnicodeBlock with the given name
Returns the enum constant representing the Unicode script of which the given character (Unicode code point) is assigned to
Returns the UnicodeScript constant with the given Unicode script name or the script name alias
The character data of the node that implements this interface
The character data of the node that implements this interface
The number of 16-bit units that are available through <code>data</code> and the <code>substringData</code> method below
Extracts a range of data from the node
Append the string to the end of the character data of the node
Insert a string at the specified 16-bit unit offset
Remove a range of 16-bit units from the node
Replace the characters starting at the specified 16-bit unit offset with the specified string
Returns an empty node list
Convenience wrapper for calling setNodeValueInternal when we are not performing a replacement operation
This function added so that we can distinguish whether  setNodeValue has been called from some other DOM functions
Sets the content, possibly firing related events, and updating ranges (via notification to the document)
Retrieve character data currently stored in this node
Report number of characters currently stored in this node's data
Concatenate additional characters onto the end of the data stored in this node
Remove a range of characters from the node's value
Insert additional characters into the data stored in this node, at the offset specified
Replace a series of characters at the specified (zero-based) offset with a new string, NOT necessarily of the same length
Store character data into this node
Substring is more than a convenience function
Sets the position to getBeginIndex() and returns the character at that position
Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position
Gets the character at the current position (as returned by getIndex())
Increments the iterator's index by one and returns the character at the new index
Decrements the iterator's index by one and returns the character at the new index
Sets the position to the specified position in the text and returns that character
Returns the start index of the text
Returns the end index of the text
Returns the current index
Create a copy of this iterator
Get the character data of this event
Returns true if this set of Characters is all whitespace
Returns true if this is a CData section
Return true if this is ignorableWhiteSpace
Reads a single character
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark() operation, which it does
Marks the present position in the stream
Resets the stream to the most recent mark, or to the beginning if it has never been marked
Closes the stream and releases any system resources associated with it
Writes a character to the buffer
Writes characters to the buffer
Write a portion of a string to the buffer
Writes the contents of the buffer to another character stream
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Resets the buffer so that you can use it again without throwing away the already allocated buffer
Returns a copy of the input data
Returns the current size of the buffer
Converts input data to a string
Flush the stream
Close the stream
Allocates a new char buffer
Wraps a char array into a buffer
Wraps a char array into a buffer
Attempts to read characters into the specified character buffer
Wraps a character sequence into a buffer
Wraps a character sequence into a buffer
Creates a new char buffer whose content is a shared subsequence of this buffer's content
Creates a new char buffer that shares this buffer's content
Creates a new, read-only char buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible char array
Returns the char array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this char buffer is direct
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Returns a string containing the characters in this buffer
Returns the length of this character buffer
Reads the character at the given index relative to the current position
Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position
Appends the specified character sequence  to this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Appends a subsequence of the  specified character sequence  to this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Appends the specified char  to this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Retrieves this buffer's byte order
Reads from <code>input</code> and initalizes the value in this <code>CharHolder</code> object with the unmarshalled data
Marshals to <code>output</code> the value in this <code>CharHolder</code> object
Returns the <code>TypeCode</code> object  corresponding to the value held in this <code>CharHolder</code> object
Get the hash value of the character
Get the hash value of the character
Override of equals() for this object
Returns the length of this character sequence
Returns the <code>char</code> value at the specified index
Returns a <code>CharSequence</code> that is a subsequence of this sequence
Returns a string containing the characters in this sequence in the same order as this sequence
Returns a stream of {@code int} zero-extending the {@code char} values from this sequence
Returns a stream of code point values from this sequence
Tells whether the named charset is supported
Returns a charset object for the named charset
Constructs a sorted map from canonical charset names to charset objects
Returns the default charset of this Java virtual machine
Returns this charset's canonical name
Returns a set containing this charset's aliases
Returns this charset's human-readable name for the default locale
Tells whether or not this charset is registered in the <a href="http://www
Returns this charset's human-readable name for the given locale
Tells whether or not this charset contains the given charset
Constructs a new decoder for this charset
Constructs a new encoder for this charset
Tells whether or not this charset supports encoding
Convenience method that decodes bytes in this charset into Unicode characters
Convenience method that encodes Unicode characters into bytes in this charset
Convenience method that encodes a string into bytes in this charset
Compares this charset to another
Computes a hashcode for this charset
Tells whether or not this object is equal to another
Returns a string describing this charset
Returns the charset that created this decoder
Returns this decoder's replacement value
Changes this decoder's replacement value
Reports a change to this decoder's replacement value
Returns this decoder's current action for malformed-input errors
Changes this decoder's action for malformed-input errors
Reports a change to this decoder's malformed-input action
Returns this decoder's current action for unmappable-character errors
Changes this decoder's action for unmappable-character errors
Reports a change to this decoder's unmappable-character action
Returns the average number of characters that will be produced for each byte of input
Returns the maximum number of characters that will be produced for each byte of input
Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer
Flushes this decoder
Flushes this decoder
Resets this decoder, clearing any internal state
Resets this decoder, clearing any charset-specific internal state
Decodes one or more bytes into one or more characters
Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer
Tells whether or not this decoder implements an auto-detecting charset
Tells whether or not this decoder has yet detected a charset&nbsp;&nbsp;<i>(optional operation)</i>
Retrieves the charset that was detected by this decoder&nbsp;&nbsp;<i>(optional operation)</i>
Returns the charset that created this encoder
Returns this encoder's replacement value
Changes this encoder's replacement value
Reports a change to this encoder's replacement value
Tells whether or not the given byte array is a legal replacement value for this encoder
Returns this encoder's current action for malformed-input errors
Changes this encoder's action for malformed-input errors
Reports a change to this encoder's malformed-input action
Returns this encoder's current action for unmappable-character errors
Changes this encoder's action for unmappable-character errors
Reports a change to this encoder's unmappable-character action
Returns the average number of bytes that will be produced for each character of input
Returns the maximum number of bytes that will be produced for each character of input
Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer
Flushes this encoder
Flushes this encoder
Resets this encoder, clearing any internal state
Resets this encoder, clearing any charset-specific internal state
Encodes one or more characters into one or more bytes
Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer
Tells whether or not this encoder can encode the given character
Tells whether or not this encoder can encode the given character sequence
Creates an iterator that iterates over the charsets supported by this provider
Retrieves a charset for the given charset name
Creates the peer of the Checkbox
Gets the label of this check box
Sets this check box's label to be the string argument
Determines whether this check box is in the "on" or "off" state
Sets the state of this check box to the specified state
Returns an array (length 1) containing the checkbox label or null if the checkbox is not selected
Determines this check box's group
Sets this check box's group to the specified check box group
Adds the specified item listener to receive item events from this check box
Removes the specified item listener so that the item listener no longer receives item events from this check box
Returns an array of all the item listeners registered on this checkbox
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Checkbox</code>
Processes events on this check box
Processes item events occurring on this check box by dispatching them to any registered <code>ItemListener</code> objects
Returns a string representing the state of this <code>Checkbox</code>
Gets the AccessibleContext associated with this Checkbox
Fire accessible property change events when the state of the toggle button changes
Get the AccessibleAction associated with this object
Get the AccessibleValue associated with this object
Returns the number of Actions available in this object
Return a description of the specified action of the object
Perform the specified Action on the object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Get the role of this object
Get the state set of this object
Gets the current choice from this check box group
Sets the currently selected check box in this group to be the specified check box
Returns a string representation of this check box group, including the value of its current selection
Creates the peer of the checkbox item
Determines whether the state of this check box menu item is "on" or "off
Sets this check box menu item to the specified state
Returns the an array (length 1) containing the checkbox menu item label or null if the checkbox is not selected
Adds the specified item listener to receive item events from this check box menu item
Removes the specified item listener so that it no longer receives item events from this check box menu item
Returns an array of all the item listeners registered on this checkbox menuitem
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>CheckboxMenuItem</code>
Processes events on this check box menu item
Processes item events occurring on this check box menu item by dispatching them to any registered <code>ItemListener</code> objects
Returns a string representing the state of this <code>CheckBoxMenuItem</code>
Gets the AccessibleContext associated with this CheckboxMenuItem
Get the AccessibleAction associated with this object
Get the AccessibleValue associated with this object
Returns the number of Actions available in this object
Return a description of the specified action of the object
Perform the specified Action on the object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Get the role of this object
Sets the state of the checkbox to be checked {@code true} or unchecked {@code false}
Sets the state of the checkbox to be checked {@code true} or unchecked {@code false}
Sets the checkbox group for this checkbox
Sets the label that should be displayed on the checkbox
Call corresponding visitor method(s)
Reads a byte
Reads into an array of bytes
Skips specified number of bytes of input
Returns the Checksum for this input stream
Writes a byte
Writes an array of bytes
Returns the Checksum for this output stream
Updates the current checksum with the specified byte
Updates the current checksum with the specified array of bytes
Returns the current checksum value
Resets the checksum to its initial value
Return the first node out of the nodeset, if this expression is a nodeset expression
Returns the next node in the set and advances the position of the iterator in the set
Returns the axis being iterated, if it is known
Returns a duplicate of a given node
Returns the parent node of this node
The next child of this node's parent, or null if none
The previous child of this node's parent, or null if none
Get the next node via getNextXXX
Get a cloned Iterator that is reset to the beginning  of the query
Initialize the context values for this expression after it is cloned
Returns the axis being iterated, if it is known
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Creates the <code>Choice</code>'s peer
Returns the number of items in this <code>Choice</code> menu
Gets the string at the specified index in this <code>Choice</code> menu
Adds an item to this <code>Choice</code> menu
Obsolete as of Java 2 platform v1
Inserts the item into this choice at the specified position
Removes the first occurrence of <code>item</code> from the <code>Choice</code> menu
Removes an item from the choice menu at the specified position
Removes all items from the choice menu
Gets a representation of the current choice as a string
Returns an array (length 1) containing the currently selected item
Returns the index of the currently selected item
Sets the selected item in this <code>Choice</code> menu to be the item at the specified position
Sets the selected item in this <code>Choice</code> menu to be the item whose name is equal to the specified string
Adds the specified item listener to receive item events from this <code>Choice</code> menu
Removes the specified item listener so that it no longer receives item events from this <code>Choice</code> menu
Returns an array of all the item listeners registered on this choice
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Choice</code>
Processes events on this choice
Processes item events occurring on this <code>Choice</code> menu by dispatching them to any registered <code>ItemListener</code> objects
Returns a string representing the state of this <code>Choice</code> menu
Gets the <code>AccessibleContext</code> associated with this <code>Choice</code>
Get the AccessibleAction associated with this object
Get the role of this object
Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object
Returns a description of the specified action of the object
Perform the specified Action on the object
Get the prompt
Get the list of choices
Get the defaultChoice
Get the boolean determining whether multiple selections from the {@code choices} list are allowed
Set the selected choice
Set the selected choices
Get the selected choices
Sets the pattern
Gets the pattern
Set the choices to be used in formatting
Get the limits passed in the constructor
Get the formats passed in the constructor
Specialization of format
Returns pattern with formatted double
Parses a Number from the input text
Finds the least double greater than {@code d}
Finds the greatest double less than {@code d}
Overrides Cloneable
Generates a hash code for the message format object
Equality comparision between two
Finds the least double greater than {@code d} (if {@code positive} is {@code true}), or the greatest double less than {@code d} (if {@code positive} is {@code false})
Adds an item with the string {@code item} to the combo box list at index {@code index}
Removes the item at index {@code index} from the combo box list
Removes all items from the combo box list
Selects the item at index {@code index}
Returns the string table for class Chromaticity
Returns the enumeration value table for class Chromaticity
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Gets the range of valid values for the field
Checks if this field represents a component of a date
Checks if this field represents a component of a time
Checks that the specified value is valid for this field
Checks that the specified value is valid and fits in an {@code int}
Gets a comparator that compares {@code ChronoLocalDate} in time-line order ignoring the chronology
Obtains an instance of {@code ChronoLocalDate} from a temporal object
Gets the chronology of this date
Gets the era, as defined by the chronology
Checks if the year is a leap year, as defined by the calendar system
Returns the length of the month represented by this date, as defined by the calendar system
Returns the length of the year represented by this date, as defined by the calendar system
Checks if the specified field is supported
Checks if the specified unit is supported
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Queries this date using the specified query
Adjusts the specified temporal object to have the same date as this object
Calculates the amount of time until another date in terms of the specified unit
Calculates the period between this date and another date as a {@code ChronoPeriod}
Formats this date using the specified formatter
Combines this date with a time to create a {@code ChronoLocalDateTime}
Converts this date to the Epoch Day
Compares this date to another date, including the chronology
Checks if this date is after the specified date ignoring the chronology
Checks if this date is before the specified date ignoring the chronology
Checks if this date is equal to the specified date ignoring the chronology
Checks if this date is equal to another date, including the chronology
A hash code for this date
Outputs this date as a {@code String}
Gets a comparator that compares {@code ChronoLocalDateTime} in time-line order ignoring the chronology
Obtains an instance of {@code ChronoLocalDateTime} from a temporal object
Gets the chronology of this date-time
Gets the local date part of this date-time
Gets the local time part of this date-time
Checks if the specified field is supported
Checks if the specified unit is supported
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Queries this date-time using the specified query
Adjusts the specified temporal object to have the same date and time as this object
Formats this date-time using the specified formatter
Combines this time with a time-zone to create a {@code ChronoZonedDateTime}
Converts this date-time to an {@code Instant}
Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
Compares this date-time to another date-time, including the chronology
Checks if this date-time is after the specified date-time ignoring the chronology
Checks if this date-time is before the specified date-time ignoring the chronology
Checks if this date-time is equal to the specified date-time ignoring the chronology
Checks if this date-time is equal to another date-time, including the chronology
A hash code for this date-time
Outputs this date-time as a {@code String}
Obtains an instance of {@code Chronology} from a temporal object
Obtains an instance of {@code Chronology} from a locale
Obtains an instance of {@code Chronology} from a chronology ID or calendar system type
Returns the available chronologies
Gets the ID of the chronology
Gets the calendar type of the calendar system
Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields
Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields
Obtains a local date in this chronology from the era, year-of-era and day-of-year fields
Obtains a local date in this chronology from the proleptic-year and day-of-year fields
Obtains a local date in this chronology from the epoch-day
Obtains the current local date in this chronology from the system clock in the default time-zone
Obtains the current local date in this chronology from the system clock in the specified time-zone
Obtains the current local date in this chronology from the specified clock
Obtains a local date in this chronology from another temporal object
Obtains a local date-time in this chronology from another temporal object
Obtains a {@code ChronoZonedDateTime} in this chronology from another temporal object
Obtains a {@code ChronoZonedDateTime} in this chronology from an {@code Instant}
Checks if the specified year is a leap year
Calculates the proleptic-year given the era and year-of-era
Creates the chronology era object from the numeric value
Gets the list of eras for the chronology
Gets the range of valid values for the specified field
Gets the textual representation of this chronology
Resolves parsed {@code ChronoField} values into a date during parsing
Obtains a period for this chronology based on years, months and days
Compares this chronology to another chronology
Checks if this chronology is equal to another chronology
A hash code for this chronology
Outputs this chronology as a {@code String}
Obtains a {@code ChronoPeriod} consisting of amount of time between two dates
Gets the value of the requested unit
Gets the set of units supported by this period
Gets the chronology that defines the meaning of the supported units
Checks if all the supported units of this period are zero
Checks if any of the supported units of this period are negative
Returns a copy of this period with the specified period added
Returns a copy of this period with the specified period subtracted
Returns a new instance with each amount in this period in this period multiplied by the specified scalar
Returns a new instance with each amount in this period negated
Returns a copy of this period with the amounts of each unit normalized
Adds this period to the specified temporal object
Subtracts this period from the specified temporal object
Checks if this period is equal to another period, including the chronology
A hash code for this period
Outputs this period as a {@code String}
Gets the estimated duration of this unit in the ISO calendar system
Checks if the duration of the unit is an estimate
Checks if this unit is a date unit
Checks if this unit is a time unit
Gets a comparator that compares {@code ChronoZonedDateTime} in time-line order ignoring the chronology
Obtains an instance of {@code ChronoZonedDateTime} from a temporal object
Gets the local date part of this date-time
Gets the local time part of this date-time
Gets the local date-time part of this date-time
Gets the chronology of this date-time
Gets the zone offset, such as '+01:00'
Gets the zone ID, such as 'Europe/Paris'
Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
Returns a copy of this date-time with a different time-zone, retaining the instant
Checks if the specified field is supported
Checks if the specified unit is supported
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Queries this date-time using the specified query
Formats this date-time using the specified formatter
Converts this date-time to an {@code Instant}
Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
Compares this date-time to another date-time, including the chronology
Checks if the instant of this date-time is before that of the specified date-time
Checks if the instant of this date-time is after that of the specified date-time
Checks if the instant of this date-time is equal to that of the specified date-time
Checks if this date-time is equal to another date-time
A hash code for this date-time
Outputs this date-time as a {@code String}
Returns the type of encrypted data contained in the <code>CipherData</code>
Returns the cipher value as a base64 encoded <code>byte</code> array
Sets the <code>CipherData</code>'s value
Returns a reference to an external location containing the encrypted octet sequence (<code>byte</code> array)
Sets the <code>CipherData</code>'s reference
Returns an <code>URI</code> that contains an identifier that should be dereferenced
Gets the URI as an Attribute node
Returns the <code>Transforms</code> that specifies how to transform the <code>URI</code> to yield the appropriate cipher value
Sets the <code>Transforms</code> that specifies how to transform the <code>URI</code> to yield the appropriate cipher value
Returns the Base 64 encoded, encrypted octets that is the <code>CipherValue</code>
Sets the Base 64 encoded, encrypted octets that is the <code>CipherValue</code>
Converts the object to a string
Returns a string describing this {@code Class}, including information about modifiers and type parameters
Returns the {@code Class} object associated with the class or interface with the given string name
Returns the {@code Class} object associated with the class or interface with the given string name, using the given class loader
Creates a new instance of the class represented by this {@code Class} object
Determines if the specified {@code Object} is assignment-compatible with the object represented by this {@code Class}
Determines if the class or interface represented by this {@code Class} object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified {@code Class} parameter
Determines if the specified {@code Class} object represents an interface type
Determines if this {@code Class} object represents an array class
Determines if the specified {@code Class} object represents a primitive type
Returns true if this {@code Class} object represents an annotation type
Returns {@code true} if this class is a synthetic class; returns {@code false} otherwise
Returns the  name of the entity (class, interface, array class, primitive type, or void) represented by this {@code Class} object, as a {@code String}
Returns the class loader for the class
Returns an array of {@code TypeVariable} objects that represent the type variables declared by the generic declaration represented by this {@code GenericDeclaration} object, in declaration order
Returns the {@code Class} representing the superclass of the entity (class, interface, primitive type or void) represented by this {@code Class}
Returns the {@code Type} representing the direct superclass of the entity (class, interface, primitive type or void) represented by this {@code Class}
Gets the package for this class
Determines the interfaces implemented by the class or interface represented by this object
Returns the {@code Type}s representing the interfaces directly implemented by the class or interface represented by this object
Returns the {@code Class} representing the component type of an array
Returns the Java language modifiers for this class or interface, encoded in an integer
Gets the signers of this class
If this {@code Class} object represents a local or anonymous class within a method, returns a {@link java
If this {@code Class} object represents a local or anonymous class within a constructor, returns a {@link java
If the class or interface represented by this {@code Class} object is a member of another class, returns the {@code Class} object representing the class in which it was declared
Returns the immediately enclosing class of the underlying class
Returns the simple name of the underlying class as given in the source code
Return an informative string for the name of this type
Returns the canonical name of the underlying class as defined by the Java Language Specification
Returns {@code true} if and only if the underlying class is an anonymous class
Returns {@code true} if and only if the underlying class is a local class
Returns {@code true} if and only if the underlying class is a member class
Returns an array containing {@code Class} objects representing all the public classes and interfaces that are members of the class represented by this {@code Class} object
Returns an array containing {@code Field} objects reflecting all the accessible public fields of the class or interface represented by this {@code Class} object
Returns an array containing {@code Method} objects reflecting all the public methods of the class or interface represented by this {@code Class} object, including those declared by the class or interface and those inherited from superclasses and superinterfaces
Returns an array containing {@code Constructor} objects reflecting all the public constructors of the class represented by this {@code Class} object
Returns a {@code Field} object that reflects the specified public member field of the class or interface represented by this {@code Class} object
Returns a {@code Method} object that reflects the specified public member method of the class or interface represented by this {@code Class} object
Returns a {@code Constructor} object that reflects the specified public constructor of the class represented by this {@code Class} object
Returns an array of {@code Class} objects reflecting all the classes and interfaces declared as members of the class represented by this {@code Class} object
Returns an array of {@code Field} objects reflecting all the fields declared by the class or interface represented by this {@code Class} object
Returns an array containing {@code Method} objects reflecting all the declared methods of the class or interface represented by this {@code Class} object, including public, protected, default (package) access, and private methods, but excluding inherited methods
Returns an array of {@code Constructor} objects reflecting all the constructors declared by the class represented by this {@code Class} object
Returns a {@code Field} object that reflects the specified declared field of the class or interface represented by this {@code Class} object
Returns a {@code Method} object that reflects the specified declared method of the class or interface represented by this {@code Class} object
Returns a {@code Constructor} object that reflects the specified constructor of the class or interface represented by this {@code Class} object
Finds a resource with a given name
Finds a resource with a given name
Returns the {@code ProtectionDomain} of this class
Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked
Returns true if and only if this class was declared as an enum in the source code
Returns the elements of this enum class or null if this Class object does not represent an enum type
Casts an object to the class or interface represented by this {@code Class} object
Casts this {@code Class} object to represent a subclass of the class represented by the specified class object
{@inheritDoc}
Returns an {@code AnnotatedType} object that represents the use of a type to specify the superclass of the entity represented by this {@code Class} object
Returns an array of {@code AnnotatedType} objects that represent the use of types to specify superinterfaces of the entity represented by this {@code Class} object
Returns the class
Returns the array of bytes that contains the new class file
Return true if this class is abstract
Return true if this class implements or interface extends <code>java
Return true if this class implements or interface extends <code>java
Return the serialization methods for this class or interface
Return the Serializable fields of this class or interface
Return true if Serializable fields are explicitly defined with  the special class member <code>serialPersistentFields</code>
Return the superclass of this class
Return the superclass of this class
Test whether this class is a subclass of the specified class
Return interfaces implemented by this class or interfaces extended by this interface
Return interfaces implemented by this class or interfaces extended by this interface
Return the formal type parameters of this class or interface
Return the type parameter tags of this class or interface
Return <a href="{@docRoot}/com/sun/javadoc/package-summary
Return fields in this class or interface, filtered to the specified <a href="{@docRoot}/com/sun/javadoc/package-summary
Return the enum constants if this is an enum type
Return <a href="{@docRoot}/com/sun/javadoc/package-summary
Return methods in this class or interface, filtered to the specified <a href="{@docRoot}/com/sun/javadoc/package-summary
Return <a href="{@docRoot}/com/sun/javadoc/package-summary
Return constructors in this class, filtered to the specified <a href="{@docRoot}/com/sun/javadoc/package-summary
Return <a href="{@docRoot}/com/sun/javadoc/package-summary
Return nested classes and interfaces within this class or interface filtered to the specified <a href="{@docRoot}/com/sun/javadoc/package-summary
Find the specified class or interface within the context of this class doc
Get the list of classes and interfaces declared as imported
Get the list of packages declared as imported
The implementation of this method may transform the supplied class file and return a new replacement class file
Add an interface to this class, i
Remove an interface from this class
Set major version number of class file, default value is 45 (JDK 1
Set minor version number of class file, default value is 3 (JDK 1
Add an attribute to this class
Add a method to this class
Convenience method
Add a field to this class
Remove an attribute from this class
Remove a method from this class
Replace given method with new one
Replace given field with new one
Remove a field to this class
Add observer for this object
Remove observer for this object
Call notify() method on all observers
Pretend this is the stylesheet class
Returns <tt>true</tt> or <tt>false</tt> depending on whether this class inherits from <tt>AbstractTranslet</tt> or not
Loads the class with the specified <a href="#name">binary name</a>
Loads the class with the specified <a href="#name">binary name</a>
Returns the lock object for class loading operations
Finds the class with the specified <a href="#name">binary name</a>
Converts an array of bytes into an instance of class <tt>Class</tt>
Converts an array of bytes into an instance of class <tt>Class</tt>
Converts an array of bytes into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>
Converts a {@link java
Links the specified class
Finds a class with the specified <a href="#name">binary name</a>, loading it if necessary
Returns the class with the given <a href="#name">binary name</a> if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that <a href="#name">binary name</a>
Sets the signers of a class
Finds the resource with the given name
Finds all the resources with the given name
Finds the resource with the given name
Returns an enumeration of {@link java
Registers the caller as parallel capable
Find a resource of the specified name from the search path used to load classes
Finds all resources of the specified name from the search path used to load classes
Returns an input stream for reading the specified resource
Open for reading, a resource of the specified name from the search path used to load classes
Returns the parent class loader for delegation
Returns the system class loader for delegation
Defines a package by name in this <tt>ClassLoader</tt>
Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors
Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors
Returns the absolute path name of a native library
Sets the default assertion status for this class loader
Sets the package default assertion status for the named package
Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein
Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader
<p>Load the given class name through the list of class loaders
<p>Load the given class name through the list of class loaders, excluding the given one
<p>Load the given class name through the list of class loaders, stopping at the given one
Returns the total number of classes that have been loaded since the Java virtual machine has started execution
Returns the number of classes that are currently loaded in the Java virtual machine
Returns the total number of classes unloaded since the Java virtual machine has started execution
Tests if the verbose output for the class loading system is enabled
Enables or disables the verbose output for the class loading system
Returns the exception that was raised if an error occurred while attempting to load the class
Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise <tt>null</tt>)
Parse the given Java class file and return an object that represents the contained data, i
Checks for class path components in the following properties: "java
Return stream for class or resource on CLASSPATH
Computes the given class's derived value for this {@code ClassValue}
Returns the value for the given class
Removes the associated value for the given class
Called by a client to inform of getting an IOException
Called by this class to check a client connection
Tells a client to re-start again
Tells a client to stop because failing to call checkConnection
Terminates this object
The {@link com
Get the {@link com
Called to to fetch notifications from a server
Used to send out a notification about lost notifs
Called after reconnection is finished
At the beginning of a request the presentation block uses this to obtain an {@link com
After the presentation block has set data on the {@link com
After the presentation block completes a request it signals the PEPt runtime by calling this method
The object which the client called to perform the operation
The actual object on which the operation will be invoked
The profile that will be used to send the request
Contains the exception to be returned to the client
The CORBA::RepositoryId of the exception to be returned to the client
Returns the IOP::TaggedComponent with the given ID from the profile selected for this request
Returns all the tagged components with the given ID from the profile selected for this request
Returns the given policy in effect for this operation
Allows interceptors to add service contexts to the request
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
See RequestInfoImpl for javadoc
does not contain an etry for that ID, BAD_PARAM with a minor code of TBD_BP is raised
Overridden from RequestInfoImpl
Sets DII request object in the RequestInfoObject
Keeps track of whether initiate was called for a DII request
See comment for setDIIInitiate
The PICurrent stack should only be popped if it was pushed
Overridden from RequestInfoImpl
See description for RequestInfoImpl
Returns the object which the client called to perform the  operation
Returns the actual object on which the operation will be invoked
Returns the profile that will be used to send the request
Returns an any which contains the exception to be returned to  the client
Returns the repository id of the exception to be returned to  the client
Returns the <code>IOP
Returns an array of all tagged components with the given ID from the  profile selected for this request
Returns the given policy in effect for this operation
Allows Interceptors to add service contexts to the request
Allows an Interceptor to query request information and modify the  service context before the request is sent to the server
Allows an Interceptor to query information during a Time-Independent  Invocation (TII) polling get reply sequence
Allows an Interceptor to query the information on a reply after it  is returned from the server and before control is returned to the  client
Indicates to the interceptor that an exception occurred
Allows an Interceptor to query the information available when a  request results in something other than a normal reply or an  exception
Opens the clip, meaning that it should acquire any required system resources and become operational
Opens the clip with the format and audio data present in the provided audio input stream
Obtains the media length in sample frames
Obtains the media duration in microseconds
Sets the media position in sample frames
Sets the media position in microseconds
Sets the first and last sample frames that will be played in the loop
Starts looping playback from the current position
Returns the name of this clipboard object
Sets the current contents of the clipboard to the specified transferable object and registers the specified clipboard owner as the owner of the new contents
Returns a transferable object representing the current contents of the clipboard
Returns an array of <code>DataFlavor</code>s in which the current contents of this clipboard can be provided
Returns whether or not the current contents of this clipboard can be provided in the specified <code>DataFlavor</code>
Returns an object representing the current contents of this clipboard in the specified <code>DataFlavor</code>
Registers the specified <code>FlavorListener</code> to receive <code>FlavorEvent</code>s from this clipboard
Removes the specified <code>FlavorListener</code> so that it no longer receives <code>FlavorEvent</code>s from this <code>Clipboard</code>
Returns an array of all the <code>FlavorListener</code>s currently registered on this <code>Clipboard</code>
Notifies this object that it is no longer the clipboard owner
Retrieves the number of characters in the <code>CLOB</code> value designated by this <code>Clob</code> object
Retrieves a copy of the specified substring in the <code>CLOB</code> value designated by this <code>Clob</code> object
Retrieves the <code>CLOB</code> value designated by this <code>Clob</code> object as a <code>java
Retrieves the <code>CLOB</code> value designated by this <code>Clob</code> object as an ascii stream
Retrieves the character position at which the specified substring <code>searchstr</code> appears in the SQL <code>CLOB</code> value represented by this <code>Clob</code> object
Retrieves the character position at which the specified <code>Clob</code> object <code>searchstr</code> appears in this <code>Clob</code> object
Writes the given Java <code>String</code> to the <code>CLOB</code> value that this <code>Clob</code> object designates at the position <code>pos</code>
Writes <code>len</code> characters of <code>str</code>, starting at character <code>offset</code>, to the <code>CLOB</code> value that this <code>Clob</code> represents
Retrieves a stream to be used to write Ascii characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code>
Retrieves a stream to be used to write a stream of Unicode characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, at position <code>pos</code>
Truncates the <code>CLOB</code> value that this <code>Clob</code> designates to have a length of <code>len</code> characters
This method frees the <code>Clob</code> object and releases the resources the resources that it holds
Returns a <code>Reader</code> object that contains a partial <code>Clob</code> value, starting with the character specified by pos, which is length characters in length
Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone
Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone
Obtains a clock that returns the current instant using best available system clock
Obtains a clock that returns the current instant ticking in whole seconds using best available system clock
Obtains a clock that returns the current instant ticking in whole minutes using best available system clock
Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration
Obtains a clock that always returns the same instant
Obtains a clock that returns instants from the specified clock with the specified duration added <p> This clock wraps another clock, returning instants that are later by the specified duration
Gets the time-zone being used to create dates and times
Returns a copy of this clock with a different time-zone
Gets the current millisecond instant of the clock
Gets the current instant of the clock
Checks if this clock is equal to another clock
A hash code for this clock
Closes this stream and releases any system resources associated with it
Returns true if this closure is compiled in an inner class (i
Returns a reference to its parent closure or null if outermost
Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet
Add new variable to the closure
Get content model for the a given type
Allows the user to set arbitrary data on this content model node
Allows the user to get arbitrary data set on this content model node
Sets the value of a property
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump code attribute to file stream in binary format
Creates a codec of the given encoding
Create a <code>Codec</code> of the given encoding
Converts the given any into a byte array based on the encoding  format effective for this <code>Codec</code>
Decodes the given byte array into an Any based on the encoding  format effective for this <code>Codec</code>
Converts the given any into a byte array based on the encoding  format effective for this Codec
Decodes the given byte array into an Any based on the given  <code>TypeCode</code> and the encoding format effective for  this <code>Codec</code>
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump code exception to file stream in binary format
Get CodeException object
Sets the type of the Exception to catch
Gets the type of the Exception to catch, 'null' for ANY
Returns a string describing this coder result
Tells whether or not this object describes an underflow condition
Tells whether or not this object describes an overflow condition
Tells whether or not this object describes an error condition
Tells whether or not this object describes a malformed-input error
Tells whether or not this object describes an unmappable-character error
Returns the length of the erroneous input described by this object&nbsp;&nbsp;<i>(optional operation)</i>
Static factory method that returns the unique object describing a malformed-input error of the given length
Static factory method that returns the unique result object describing an unmappable-character error of the given length
Throws an exception appropriate to the result described by this object
Creates a CodeSetComponent from a String which contains a comma delimited list of OSF Code Set Registry numbers
CTB converter factory for single byte or variable length encodings
CTB converter factory for multibyte (mainly fixed) encodings
BTCConverter factory for single byte or variable width encodings
BTCConverter factory for fixed width multibyte encodings
Perform the code set negotiation algorithm and come up with the two encodings to use
CodeSetConversion is a singleton, and this is the access point
Returns the signer's certificate path
Returns the signature timestamp
Returns the hash code value for this code signer
Tests for equality between the specified object and this code signer
Returns a string describing this code signer
Returns the hash code value for this object
Tests for equality between the specified object and this object
Returns the location associated with this CodeSource
Returns the certificates associated with this CodeSource
Returns the code signers associated with this CodeSource
Returns true if this CodeSource object "implies" the specified CodeSource
Returns a string describing this CodeSource, telling its URL and certificates
Returns a string describing this action
Removes leading and trailing whitespaces of the string given as the parameter, then truncate any sequnce of tab, CR, LF, and SP by a single whitespace character ' '
No-op
returns true if the specified char is a white space character
Resets the cursor to the beginning of the string
Get the next collation element in the string
Get the previous collation element in the string
Return the primary component of a collation element
Return the secondary component of a collation element
Return the tertiary component of a collation element
Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements)
Returns the character offset in the original text corresponding to the next collation element
Return the maximum length of any expansion sequences that end with the specified comparison order
Set a new string over which to iterate
Set a new string over which to iterate
Compare this CollationKey to the target CollationKey
Returns the String that this CollationKey represents
Converts the CollationKey to a sequence of bits
Gets the Collator for the current default locale
Gets the Collator for the desired locale
Compares the source string to the target string according to the collation rules for this Collator
Compares its two arguments for order
Transforms the String into a series of bits that can be compared bitwise to other CollationKeys
Convenience method for comparing the equality of two strings based on this Collator's collation rules
Returns this Collator's strength property
Sets this Collator's strength property
Get the decomposition mode of this Collator
Set the decomposition mode of this Collator
Returns an array of all locales for which the <code>getInstance</code> methods of this class can return localized instances
Overrides Cloneable
Compares the equality of two Collators
Generates the hash code for this Collator
Returns a new <code>Collator</code> instance for the specified locale
Returns the number of elements in this collection
Returns <tt>true</tt> if this collection contains no elements
Returns <tt>true</tt> if this collection contains the specified element
Returns an iterator over the elements in this collection
Returns an array containing all of the elements in this collection
Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array
Ensures that this collection contains the specified element (optional operation)
Removes a single instance of the specified element from this collection, if it is present (optional operation)
Returns <tt>true</tt> if this collection contains all of the elements in the specified collection
Adds all of the elements in the specified collection to this collection (optional operation)
Removes all of this collection's elements that are also contained in the specified collection (optional operation)
Removes all of the elements of this collection that satisfy the given predicate
Retains only the elements in this collection that are contained in the specified collection (optional operation)
Removes all of the elements from this collection (optional operation)
Compares the specified object with this collection for equality
Returns the hash code value for this collection
Creates a {@link Spliterator} over the elements in this collection
Returns a sequential {@code Stream} with this collection as its source
Returns a possibly parallel {@code Stream} with this collection as its source
Returns the {@code Collection} from which {@code Certificate}s and {@code CRL}s are retrieved
Returns a copy of this object
Returns a formatted string describing the parameters
Sorts the specified list into ascending order, according to the {@linkplain Comparable natural ordering} of its elements
Sorts the specified list according to the order induced by the specified comparator
Searches the specified list for the specified object using the binary search algorithm
Searches the specified list for the specified object using the binary search algorithm
Reverses the order of the elements in the specified list
Randomly permutes the specified list using a default source of randomness
Randomly permute the specified list using the specified source of randomness
Swaps the elements at the specified positions in the specified list
Replaces all of the elements of the specified list with the specified element
Copies all of the elements from one list into another
Returns the minimum element of the given collection, according to the <i>natural ordering</i> of its elements
Returns the minimum element of the given collection, according to the order induced by the specified comparator
Returns the maximum element of the given collection, according to the <i>natural ordering</i> of its elements
Returns the maximum element of the given collection, according to the order induced by the specified comparator
Rotates the elements in the specified list by the specified distance
Replaces all occurrences of one specified value in a list with another
Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Returns an unmodifiable view of the specified collection
Returns an unmodifiable view of the specified set
Returns an unmodifiable view of the specified sorted set
Returns an unmodifiable view of the specified navigable set
Returns an unmodifiable view of the specified list
Returns an unmodifiable view of the specified map
Returns an unmodifiable view of the specified sorted map
Returns an unmodifiable view of the specified navigable map
Returns a synchronized (thread-safe) collection backed by the specified collection
Returns a synchronized (thread-safe) set backed by the specified set
Returns a synchronized (thread-safe) sorted set backed by the specified sorted set
Returns a synchronized (thread-safe) navigable set backed by the specified navigable set
Returns a synchronized (thread-safe) list backed by the specified list
Returns a synchronized (thread-safe) map backed by the specified map
Returns a synchronized (thread-safe) sorted map backed by the specified sorted map
Returns a synchronized (thread-safe) navigable map backed by the specified navigable map
Returns a dynamically typesafe view of the specified collection
Returns a dynamically typesafe view of the specified queue
Returns a dynamically typesafe view of the specified set
Returns a dynamically typesafe view of the specified sorted set
Returns a dynamically typesafe view of the specified navigable set
Returns a dynamically typesafe view of the specified list
Returns a dynamically typesafe view of the specified map
Returns a dynamically typesafe view of the specified sorted map
Returns a dynamically typesafe view of the specified navigable map
Returns an iterator that has no elements
Returns a list iterator that has no elements
Returns an enumeration that has no elements
Returns an empty set (immutable)
Returns an empty sorted set (immutable)
Returns an empty navigable set (immutable)
Returns an empty list (immutable)
Returns an empty map (immutable)
Returns an empty sorted map (immutable)
Returns an empty navigable map (immutable)
Returns an immutable set containing only the specified object
Returns an immutable list containing only the specified object
Returns an immutable map, mapping only the specified key to the specified value
Returns an immutable list consisting of <tt>n</tt> copies of the specified object
Returns a comparator that imposes the reverse of the <em>natural ordering</em> on a collection of objects that implement the {@code Comparable} interface
Returns a comparator that imposes the reverse ordering of the specified comparator
Returns an enumeration over the specified collection
Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration
Returns the number of elements in the specified collection equal to the specified object
Returns {@code true} if the two specified collections have no elements in common
Adds all of the specified elements to the specified collection
Returns a set backed by the specified map
Returns a view of a {@link Deque} as a Last-in-first-out (Lifo) {@link Queue}
A function that creates and returns a new mutable result container
A function that folds a value into a mutable result container
A function that accepts two partial results and merges them
Perform the final transformation from the intermediate accumulation type {@code A} to the final result type {@code R}
Returns a {@code Set} of {@code Collector
Returns a new {@code Collector} described by the given {@code supplier}, {@code accumulator}, and {@code combiner} functions
Returns a new {@code Collector} described by the given {@code supplier}, {@code accumulator}, {@code combiner}, and {@code finisher} functions
Returns a {@code Collector} that accumulates the input elements into a new {@code Collection}, in encounter order
Returns a {@code Collector} that accumulates the input elements into a new {@code List}
Returns a {@code Collector} that accumulates the input elements into a new {@code Set}
Returns a {@code Collector} that concatenates the input elements into a {@code String}, in encounter order
Returns a {@code Collector} that concatenates the input elements, separated by the specified delimiter, in encounter order
Returns a {@code Collector} that concatenates the input elements, separated by the specified delimiter, with the specified prefix and suffix, in encounter order
Adapts a {@code Collector} accepting elements of type {@code U} to one accepting elements of type {@code T} by applying a mapping function to each input element before accumulation
Adapts a {@code Collector} to perform an additional finishing transformation
Returns a {@code Collector} accepting elements of type {@code T} that counts the number of input elements
Returns a {@code Collector} that produces the minimal element according to a given {@code Comparator}, described as an {@code Optional<T>}
Returns a {@code Collector} that produces the maximal element according to a given {@code Comparator}, described as an {@code Optional<T>}
Returns a {@code Collector} that produces the sum of a integer-valued function applied to the input elements
Returns a {@code Collector} that produces the sum of a long-valued function applied to the input elements
Returns a {@code Collector} that produces the sum of a double-valued function applied to the input elements
Returns a {@code Collector} that produces the arithmetic mean of an integer-valued function applied to the input elements
Returns a {@code Collector} that produces the arithmetic mean of a long-valued function applied to the input elements
Returns a {@code Collector} that produces the arithmetic mean of a double-valued function applied to the input elements
Returns a {@code Collector} which performs a reduction of its input elements under a specified {@code BinaryOperator} using the provided identity
Returns a {@code Collector} which performs a reduction of its input elements under a specified {@code BinaryOperator}
Returns a {@code Collector} which performs a reduction of its input elements under a specified mapping function and {@code BinaryOperator}
Returns a {@code Collector} implementing a "group by" operation on input elements of type {@code T}, grouping elements according to a classification function, and returning the results in a {@code Map}
Returns a {@code Collector} implementing a cascaded "group by" operation on input elements of type {@code T}, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream {@code Collector}
Returns a {@code Collector} implementing a cascaded "group by" operation on input elements of type {@code T}, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream {@code Collector}
Returns a concurrent {@code Collector} implementing a "group by" operation on input elements of type {@code T}, grouping elements according to a classification function
Returns a concurrent {@code Collector} implementing a cascaded "group by" operation on input elements of type {@code T}, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream {@code Collector}
Returns a concurrent {@code Collector} implementing a cascaded "group by" operation on input elements of type {@code T}, grouping elements according to a classification function, and then performing a reduction operation on the values associated with a given key using the specified downstream {@code Collector}
Returns a {@code Collector} which partitions the input elements according to a {@code Predicate}, and organizes them into a {@code Map<Boolean, List<T>>}
Returns a {@code Collector} which partitions the input elements according to a {@code Predicate}, reduces the values in each partition according to another {@code Collector}, and organizes them into a {@code Map<Boolean, D>} whose values are the result of the downstream reduction
Returns a {@code Collector} that accumulates elements into a {@code Map} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a {@code Collector} that accumulates elements into a {@code Map} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a {@code Collector} that accumulates elements into a {@code Map} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a concurrent {@code Collector} that accumulates elements into a {@code ConcurrentMap} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a concurrent {@code Collector} that accumulates elements into a {@code ConcurrentMap} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a concurrent {@code Collector} that accumulates elements into a {@code ConcurrentMap} whose keys and values are the result of applying the provided mapping functions to the input elements
Returns a {@code Collector} which applies an {@code int}-producing mapping function to each input element, and returns summary statistics for the resulting values
Returns a {@code Collector} which applies an {@code long}-producing mapping function to each input element, and returns summary statistics for the resulting values
Returns a {@code Collector} which applies an {@code double}-producing mapping function to each input element, and returns summary statistics for the resulting values
Returns the red component in the range 0-255 in the default sRGB space
Returns the green component in the range 0-255 in the default sRGB space
Returns the blue component in the range 0-255 in the default sRGB space
Returns the alpha component in the range 0-255
Returns the RGB value representing the color in the default sRGB {@link ColorModel}
Creates a new <code>Color</code> that is a brighter version of this <code>Color</code>
Creates a new <code>Color</code> that is a darker version of this <code>Color</code>
Computes the hash code for this <code>Color</code>
Determines whether another object is equal to this <code>Color</code>
Returns a string representation of this <code>Color</code>
Converts a <code>String</code> to an integer and returns the specified opaque <code>Color</code>
Finds a color in the system properties
Finds a color in the system properties
Finds a color in the system properties
Converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model
Converts the components of a color, as specified by the default RGB model, to an equivalent set of values for hue, saturation, and brightness that are the three components of the HSB model
Creates a <code>Color</code> object based on the specified values for the HSB color model
Returns a <code>float</code> array containing the color and alpha components of the <code>Color</code>, as represented in the default sRGB color space
Returns a <code>float</code> array containing only the color components of the <code>Color</code>, in the default sRGB color space
Returns a <code>float</code> array containing the color and alpha components of the <code>Color</code>, in the <code>ColorSpace</code> of the <code>Color</code>
Returns a <code>float</code> array containing only the color components of the <code>Color</code>, in the <code>ColorSpace</code> of the <code>Color</code>
Returns a <code>float</code> array containing the color and alpha components of the <code>Color</code>, in the <code>ColorSpace</code> specified by the <code>cspace</code> parameter
Returns a <code>float</code> array containing only the color components of the <code>Color</code> in the <code>ColorSpace</code> specified by the <code>cspace</code> parameter
Returns the <code>ColorSpace</code> of this <code>Color</code>
Creates and returns a {@link PaintContext} used to generate a solid color field pattern
Returns the transparency mode for this <code>Color</code>
Returns the array of ICC_Profiles used to construct this ColorConvertOp
ColorConverts the source BufferedImage
ColorConverts the image data in the source Raster
Returns the bounding box of the destination, given this source
Returns the bounding box of the destination, given this source
Creates a zeroed destination image with the correct size and number of bands, given this source
Creates a zeroed destination Raster with the correct size and number of bands, given this source
Returns the location of the destination point given a point in the source
Returns the rendering hints used by this op
Returns the selected <code>Color</code> which should be non-<code>null</code>
Sets the selected color to <code>color</code>
Adds <code>listener</code> as a listener to changes in the model
Removes <code>listener</code> as a listener to changes in the model
Returns a ColorSpace representing one of the specific predefined color spaces
Returns true if the ColorSpace is CS_sRGB
Transforms a color value assumed to be in this ColorSpace into a value in the default CS_sRGB color space
Transforms a color value assumed to be in the default CS_sRGB color space into this ColorSpace
Transforms a color value assumed to be in this ColorSpace into the CS_CIEXYZ conversion color space
Transforms a color value assumed to be in the CS_CIEXYZ conversion color space into this ColorSpace
Returns the color space type of this ColorSpace (for example TYPE_RGB, TYPE_XYZ, 
Returns the number of components of this ColorSpace
Returns the name of the component given the component index
Returns the minimum normalized color component value for the specified component
Returns the maximum normalized color component value for the specified component
Returns the string table for class ColorSupported
Returns the enumeration value table for class ColorSupported
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a unique id, as an integer, for this ColorType
Returns the textual description of this <code>ColorType</code>
Return the component that should be added to the tree hierarchy for this editor
Set the item that should be edited
Return the edited item
Ask the editor to start editing and to select everything
Add an ActionListener
Remove an ActionListener
Set the selected item
Returns the selected item
Set the visibility of the popup
Determine the visibility of the popup
Determine whether or not the combo box itself is traversable
Shows the popup
Hides the popup
Returns true if the popup is visible (currently being displayed)
Returns the list that is being used to draw the items in the combo box
Returns a mouse listener that will be added to the combo box or null
Returns a mouse motion listener that will be added to the combo box or null
Returns a key listener that will be added to the combo box or null
Called to inform the ComboPopup that the UI is uninstalling
A short integer indicating what type of node this is
Returns the node name
<p>Retrieves the log writer for this <code>DataSource</code> object
<p>Sets the log writer for this <code>DataSource</code> object to the given <code>java
<p>Sets the maximum time in seconds that this data source will wait while attempting to connect to a database
Gets the maximum time in seconds that this data source can wait while attempting to connect to a database
Return the parent Logger of all the Loggers used by this data source
Starts this <CODE>CommunicatorServer</CODE>
Starts this <CODE>CommunicatorServer</CODE>
Stops this <CODE>CommunicatorServer</CODE>
Tests whether the <CODE>CommunicatorServer</CODE> is active
<p>Waits until either the State attribute of this MBean equals the specified <VAR>wantedState</VAR> parameter, or the specified  <VAR>timeOut</VAR> has elapsed
Gets the state of this <CODE>CommunicatorServer</CODE> as an integer
Gets the state of this <CODE>CommunicatorServer</CODE> as a string
Gets the host name used by this <CODE>CommunicatorServer</CODE>
Gets the port number used by this <CODE>CommunicatorServer</CODE>
Sets the port number used by this <CODE>CommunicatorServer</CODE>
Gets the protocol being used by this <CODE>CommunicatorServer</CODE>
The number of times the communicator server will attempt to bind before giving up
The delay, in ms, during which the communicator server will sleep before attempting to bind again
For SNMP Runtime internal use only
<CODE>doReceive()</CODE> should block until a client is available
<CODE>doProcess()</CODE> is called after <CODE>doReceive()</CODE>: it should process the requests of the incoming client
<CODE>doUnbind()</CODE> is called whenever the connector goes <CODE>OFFLINE</CODE>, except if <CODE>doBind()</CODE> has thrown an exception
Get the <code>MBeanServer</code> object to which incoming requests are sent
Set the <code>MBeanServer</code> object to which incoming requests are sent
Adds a listener for the notifications emitted by this CommunicatorServer
Removes the specified listener from this CommunicatorServer
Returns an array of MBeanNotificationInfo objects describing the notification types sent by this CommunicatorServer
Preregister method of connector
Stop the connector
Do nothing
Starts this <CODE>CommunicatorServer</CODE>
Stops this <CODE>CommunicatorServer</CODE>
Tests if the <CODE>CommunicatorServer</CODE> is active
Waits untill either the State attribute of this MBean equals the specified <VAR>state</VAR> parameter, or the specified  <VAR>timeOut</VAR> has elapsed
Gets the state of this <CODE>CommunicatorServer</CODE> as an integer
Gets the state of this <CODE>CommunicatorServer</CODE> as a string
Gets the host name used by this <CODE>CommunicatorServer</CODE>
Gets the port number used by this <CODE>CommunicatorServer</CODE>
Sets the port number used by this <CODE>CommunicatorServer</CODE>
Gets the protocol being used by this <CODE>CommunicatorServer</CODE>
Compares this object with the specified object for order
Compares its two arguments for order
Indicates whether some other object is &quot;equal to&quot; this comparator
Returns a comparator that imposes the reverse ordering of this comparator
Returns a lexicographic-order comparator with another comparator
Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given {@code Comparator}
Returns a lexicographic-order comparator with a function that extracts a {@code Comparable} sort key
Returns a lexicographic-order comparator with a function that extracts a {@code int} sort key
Returns a lexicographic-order comparator with a function that extracts a {@code long} sort key
Returns a lexicographic-order comparator with a function that extracts a {@code double} sort key
Returns a comparator that imposes the reverse of the <em>natural ordering</em>
Returns a comparator that compares {@link Comparable} objects in natural order
Returns a null-friendly comparator that considers {@code null} to be less than non-null
Returns a null-friendly comparator that considers {@code null} to be greater than non-null
Accepts a function that extracts a sort key from a type {@code T}, and returns a {@code Comparator<T>} that compares by that sort key using the specified {@link Comparator}
Accepts a function that extracts a {@link java
Accepts a function that extracts an {@code int} sort key from a type {@code T}, and returns a {@code Comparator<T>} that compares by that sort key
Accepts a function that extracts a {@code long} sort key from a type {@code T}, and returns a {@code Comparator<T>} that compares by that sort key
Accepts a function that extracts a {@code double} sort key from a type {@code T}, and returns a {@code Comparator<T>} that compares by that sort key
Compiles the script (source represented as a <code>String</code>) for later execution
Compiles the script (source read from <code>Reader</code>) for later execution
Returns the name of the Just-in-time (JIT) compiler
Tests if the Java virtual machine supports the monitoring of compilation time
Returns the approximate accumulated elapsed time (in milliseconds) spent in compilation
Gets the line map for this compilation unit, if available
This method implements the command line compiler
Executes the program stored in this <code>CompiledScript</code> object
Executes the program stored in the <code>CompiledScript</code> object using the supplied <code>Bindings</code> of attributes as the <code>ENGINE_SCOPE</code> of the associated <code>ScriptEngine</code> during script execution
Executes the program stored in the <code>CompiledScript</code> object
Returns the <code>ScriptEngine</code> whose <code>compile</code> method created this <code>CompiledScript</code>
Compiles the specified class
Compiles all classes whose name matches the specified string
Examines the argument type and its fields and perform some documented operation
Cause the Compiler to resume operation
Cause the Compiler to cease operation
Returns a new CompletableFuture that is asynchronously completed by a task running in the {@link ForkJoinPool#commonPool()} with the value obtained by calling the given Supplier
Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier
Returns a new CompletableFuture that is asynchronously completed by a task running in the {@link ForkJoinPool#commonPool()} after it runs the given action
Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action
Returns a new CompletableFuture that is already completed with the given value
Returns {@code true} if completed in any fashion: normally, exceptionally, or via cancellation
Waits if necessary for this future to complete, and then returns its result
Waits if necessary for at most the given time for this future to complete, and then returns its result, if available
Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally
Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent
If not already completed, sets the value returned by {@link #get()} and related methods to the given value
If not already completed, causes invocations of {@link #get()} and related methods to throw the given exception
Returns this CompletableFuture
Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value
Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete
Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result
If not already completed, completes this CompletableFuture with a {@link CancellationException}
Returns {@code true} if this CompletableFuture was cancelled before it completed normally
Returns {@code true} if this CompletableFuture completed exceptionally, in any way
Forcibly sets or resets the value subsequently returned by method {@link #get()} and related methods, whether or not already completed
Forcibly causes subsequent invocations of method {@link #get()} and related methods to throw the given exception, whether or not already completed
Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture
Returns a string identifying this CompletableFuture, as well as its completion state
Returns the text of the suggested completion
Returns an informative message about the completion
Invoked when an operation has completed
Invoked when an operation fails
Returns a completion of the value and message
Returns a completion of the value and an empty message
Submits a value-returning task for execution and returns a Future representing the pending results of the task
Submits a Runnable task for execution and returns a Future representing that task
Retrieves and removes the Future representing the next completed task, waiting if none are yet present
Retrieves and removes the Future representing the next completed task, or {@code null} if none are present
Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present
Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action
Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action
Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action
Returns a new CompletionStage that, when this stage completes normally, executes the given action
Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility
Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor
Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function
Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function
Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function
Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action
Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action
Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function
Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action
Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility
Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using the supplied executor
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action
Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function
Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action
Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility
Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor
Returns a new CompletionStage that, when this stage completes normally, is executed with this stage as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function
Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage's exception as the argument to the supplied function
Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes
Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes
Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes
Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function
Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function
Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function
Returns a {@link CompletableFuture} maintaining the same completion properties as this stage
Retrieves the value of this <code>CompletionStatus</code> object
Creates a <code>CompletionStatus</code> object from the given <code>int</code>
Gets the name of the component
Sets the name of the component to the specified string
Gets the parent of this component
Associate a <code>DropTarget</code> with this component
Gets the <code>DropTarget</code> associated with this <code>Component</code>
Gets the <code>GraphicsConfiguration</code> associated with this <code>Component</code>
Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations
Gets the toolkit of this component
Determines whether this component is valid
Determines whether this component is displayable
Determines whether this component should be visible when its parent is visible
Returns the position of the mouse pointer in this <code>Component</code>'s coordinate space if the <code>Component</code> is directly under the mouse pointer, otherwise returns <code>null</code>
Determines whether this component is showing on screen
Determines whether this component is enabled
Enables or disables this component, depending on the value of the parameter <code>b</code>
Returns true if this component is painted to an offscreen image ("buffer") that's copied to the screen later
Enables or disables input method support for this component
Shows or hides this component depending on the value of parameter <code>b</code>
Gets the foreground color of this component
Sets the foreground color of this component
Returns whether the foreground color has been explicitly set for this Component
Gets the background color of this component
Sets the background color of this component
Returns whether the background color has been explicitly set for this Component
Gets the font of this component
Sets the font of this component
Returns whether the font has been explicitly set for this Component
Gets the locale of this component
Sets the locale of this component
Gets the instance of <code>ColorModel</code> used to display the component on the output device
Gets the location of this component in the form of a point specifying the component's top-left corner
Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space
Moves this component to a new location
Moves this component to a new location
Returns the size of this component in the form of a <code>Dimension</code> object
Resizes this component so that it has width <code>width</code> and height <code>height</code>
Resizes this component so that it has width <code>d
Gets the bounds of this component in the form of a <code>Rectangle</code> object
Moves and resizes this component
Moves and resizes this component to conform to the new bounding rectangle <code>r</code>
Returns the current x coordinate of the components origin
Returns the current y coordinate of the components origin
Returns the current width of this component
Returns the current height of this component
Stores the bounds of this component into "return value" <b>rv</b> and return <b>rv</b>
Stores the width/height of this component into "return value" <b>rv</b> and return <b>rv</b>
Stores the x,y origin of this component into "return value" <b>rv</b> and return <b>rv</b>
Returns true if this component is completely opaque, returns false by default
A lightweight component doesn't have a native toolkit peer
Sets the preferred size of this component to a constant value
Returns true if the preferred size has been set to a non-<code>null</code> value otherwise returns false
Gets the preferred size of this component
Sets the minimum size of this component to a constant value
Returns whether or not <code>setMinimumSize</code> has been invoked with a non-null value
Gets the minimum size of this component
Sets the maximum size of this component to a constant value
Returns true if the maximum size has been set to a non-<code>null</code> value otherwise returns false
Gets the maximum size of this component
Returns the alignment along the x axis
Returns the alignment along the y axis
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Prompts the layout manager to lay out this component
Validates this component
Invalidates this component and its ancestors
Revalidates the component hierarchy up to the nearest validate root
Creates a graphics context for this component
Gets the font metrics for the specified font
Sets the cursor image to the specified cursor
Gets the cursor set in the component
Returns whether the cursor has been explicitly set for this Component
Paints this component
Updates this component
Paints this component and all of its subcomponents
Repaints this component
Repaints the component
Repaints the specified rectangle of this component
Repaints the specified rectangle of this component within <code>tm</code> milliseconds
Prints this component
Prints this component and all of its subcomponents
Repaints the component when the image has changed
Creates an image from the specified image producer
Creates an off-screen drawable image     to be used for double buffering
Creates a volatile off-screen drawable image     to be used for double buffering
Creates a volatile off-screen drawable image, with the given capabilities
Prepares an image for rendering on this component
Prepares an image for rendering on this component at the specified width and height
Returns the status of the construction of a screen representation of the specified image
Returns the status of the construction of a screen representation of the specified image
Sets whether or not paint messages received from the operating system should be ignored
Checks whether this component "contains" the specified point, where <code>x</code> and <code>y</code> are defined to be relative to the coordinate system of this component
Checks whether this component "contains" the specified point, where the point's <i>x</i> and <i>y</i> coordinates are defined to be relative to the coordinate system of this component
Determines if this component or one of its immediate subcomponents contains the (<i>x</i>,&nbsp;<i>y</i>) location, and if so, returns the containing component
Returns the component or subcomponent that contains the specified point
Dispatches an event to this component or one of its sub components
Adds the specified component listener to receive component events from this component
Removes the specified component listener so that it no longer receives component events from this component
Returns an array of all the component listeners registered on this component
Adds the specified focus listener to receive focus events from this component when this component gains input focus
Removes the specified focus listener so that it no longer receives focus events from this component
Returns an array of all the focus listeners registered on this component
Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes
Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component
Returns an array of all the hierarchy listeners registered on this component
Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes
Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component
Returns an array of all the hierarchy bounds listeners registered on this component
Adds the specified key listener to receive key events from this component
Removes the specified key listener so that it no longer receives key events from this component
Returns an array of all the key listeners registered on this component
Adds the specified mouse listener to receive mouse events from this component
Removes the specified mouse listener so that it no longer receives mouse events from this component
Returns an array of all the mouse listeners registered on this component
Adds the specified mouse motion listener to receive mouse motion events from this component
Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component
Returns an array of all the mouse motion listeners registered on this component
Adds the specified mouse wheel listener to receive mouse wheel events from this component
Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component
Returns an array of all the mouse wheel listeners registered on this component
Adds the specified input method listener to receive input method events from this component
Removes the specified input method listener so that it no longer receives input method events from this component
Returns an array of all the input method listeners registered on this component
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Component</code>
Gets the input method request handler which supports requests from input methods for this component
Gets the input context used by this component for handling the communication with input methods when text is entered in this component
Enables the events defined by the specified event mask parameter to be delivered to this component
Disables the events defined by the specified event mask parameter from being delivered to this component
Potentially coalesce an event being posted with an existing event
Processes events occurring on this component
Processes component events occurring on this component by dispatching them to any registered <code>ComponentListener</code> objects
Processes focus events occurring on this component by dispatching them to any registered <code>FocusListener</code> objects
Processes key events occurring on this component by dispatching them to any registered <code>KeyListener</code> objects
Processes mouse events occurring on this component by dispatching them to any registered <code>MouseListener</code> objects
Processes mouse motion events occurring on this component by dispatching them to any registered <code>MouseMotionListener</code> objects
Processes mouse wheel events occurring on this component by dispatching them to any registered <code>MouseWheelListener</code> objects
Processes input method events occurring on this component by dispatching them to any registered <code>InputMethodListener</code> objects
Processes hierarchy events occurring on this component by dispatching them to any registered <code>HierarchyListener</code> objects
Processes hierarchy bounds events occurring on this component by dispatching them to any registered <code>HierarchyBoundsListener</code> objects
Makes this <code>Component</code> displayable by connecting it to a native screen resource
Makes this <code>Component</code> undisplayable by destroying it native screen resource
Returns whether this <code>Component</code> can become the focus owner
Returns whether this Component can be focused
Sets the focusable state of this Component to the specified value
Sets the focus traversal keys for a given traversal operation for this Component
Returns the Set of focus traversal keys for a given traversal operation for this Component
Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component
Sets whether focus traversal keys are enabled for this Component
Returns whether focus traversal keys are enabled for this Component
Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
Requests that this <code>Component</code> get the input focus, and that this <code>Component</code>'s top-level ancestor become the focused <code>Window</code>
Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window
Requests that this <code>Component</code> get the input focus, if this <code>Component</code>'s top-level ancestor is already the focused <code>Window</code>
Returns the Container which is the focus cycle root of this Component's focus traversal cycle
Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle
Transfers the focus to the next component, as though this Component were the focus owner
Transfers the focus to the previous component, as though this Component were the focus owner
Transfers the focus up one focus traversal cycle
Returns <code>true</code> if this <code>Component</code> is the focus owner
Returns <code>true</code> if this <code>Component</code> is the    focus owner
Adds the specified popup menu to the component
Removes the specified popup menu from the component
Returns a string representing the state of this component
Returns a string representation of this component and its values
Prints a listing of this component to the standard system output stream <code>System
Prints a listing of this component to the specified output stream
Prints out a list, starting at the specified indentation, to the specified print stream
Prints a listing to the specified print writer
Prints out a list, starting at the specified indentation, to the specified print writer
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Returns an array of all the property change listeners registered on this component
Adds a PropertyChangeListener to the listener list for a specific property
Removes a <code>PropertyChangeListener</code> from the listener list for a specific property
Returns an array of all the listeners which have been associated with the named property
Support for reporting bound property changes for Object properties
Support for reporting bound property changes for boolean properties
Support for reporting bound property changes for integer properties
Reports a bound property change
Reports a bound property change
Reports a bound property change
Reports a bound property change
Reports a bound property change
Reports a bound property change
Sets the language-sensitive orientation that is to be used to order the elements or text within this component
Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component
Sets the <code>ComponentOrientation</code> property of this component and all components contained within it
Gets the <code>AccessibleContext</code> associated with this <code>Component</code>
Creates one or more complex, flipping buffers with the given capabilities
Flipping moves the contents of the back buffer to the front buffer, either by copying or by moving the video pointer
Destroys the buffers created through this object
Restore the drawing buffer if it has been lost
Makes the next available buffer visible by either blitting or flipping
{@inheritDoc}
{@inheritDoc}
Creates the back buffers
Makes the next available buffer visible
Restore the drawing buffer if it has been lost
Adds a <code>PropertyChangeListener</code> to the listener list
Remove a PropertyChangeListener from the listener list
Gets the accessible name of this object
Gets the accessible description of this object
Gets the role of this object
Gets the state of this object
Gets the <code>Accessible</code> parent of this object
Gets the index of this object in its accessible parent
Returns the number of accessible children in the object
Returns the nth <code>Accessible</code> child of the object
Returns the locale of this object
Gets the <code>AccessibleComponent</code> associated with this object if one exists
Gets the background color of this object
Sets the background color of this object
Gets the foreground color of this object
Sets the foreground color of this object
Gets the <code>Cursor</code> of this object
Sets the <code>Cursor</code> of this object
Gets the <code>Font</code> of this object
Sets the <code>Font</code> of this object
Gets the <code>FontMetrics</code> of this object
Determines if the object is enabled
Sets the enabled state of the object
Determines if the object is visible
Sets the visible state of the object
Determines if the object is showing
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns the location of the object on the screen
Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space
Sets the location of the object relative to the parent
Gets the bounds of this object in the form of a Rectangle object
Sets the bounds of this object in the form of a <code>Rectangle</code> object
Returns the size of this object in the form of a <code>Dimension</code> object
Resizes this object so that it has width and height
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Returns whether this object can accept focus or not
Requests focus for this object
Adds the specified focus listener to receive focus events from this component
Removes the specified focus listener so it no longer receives focus events from this component
Invoked when the component's size changes
Invoked when the component's position changes
Invoked when the component has been made visible
Invoked when the component has been made invisible
Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the alpha component for the specified pixel, scaled from 0 to 255
Returns the color/alpha components of the pixel in the default RGB color model format
Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB <CODE>ColorSpace</CODE>, sRGB
Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB <CODE>ColorSpace</CODE>, sRGB
Returns the alpha component for the specified pixel, scaled from 0 to 255
Returns the color/alpha components for the specified pixel in the default RGB color model format
Returns a data element array representation of a pixel in this <CODE>ColorModel</CODE>, given an integer pixel representation in the default RGB color model
Returns an array of unnormalized color/alpha components given a pixel in this <CODE>ColorModel</CODE>
Returns an array of unnormalized color/alpha components given a pixel in this <CODE>ColorModel</CODE>
Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array
Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array
Returns a pixel value represented as an int in this <CODE>ColorModel</CODE>, given an array of unnormalized color/alpha components
Returns a data element array representation of a pixel in this <CODE>ColorModel</CODE>, given an array of unnormalized color/alpha components
Returns a pixel value represented as an <code>int</code> in this <code>ColorModel</code>, given an array of normalized color/alpha components
Returns a data element array representation of a pixel in this <code>ColorModel</code>, given an array of normalized color/alpha components
Returns an array of all of the color/alpha components in normalized form, given a pixel in this <code>ColorModel</code>
Forces the raster data to match the state specified in the <CODE>isAlphaPremultiplied</CODE> variable, assuming the data is currently correctly described by this <CODE>ColorModel</CODE>
Returns true if <CODE>raster</CODE> is compatible with this <CODE>ColorModel</CODE>; false if it is not
Creates a <CODE>WritableRaster</CODE> with the specified width and height, that  has a data layout (<CODE>SampleModel</CODE>) compatible with this <CODE>ColorModel</CODE>
Creates a <CODE>SampleModel</CODE> with the specified width and height, that  has a data layout compatible with this <CODE>ColorModel</CODE>
Checks whether or not the specified <CODE>SampleModel</CODE> is compatible with this <CODE>ColorModel</CODE>
Returns a <CODE>Raster</CODE> representing the alpha channel of an image, extracted from the input <CODE>Raster</CODE>
Compares this color model with another for equality
Returns the originator of the event
Returns a parameter string identifying this event
Sets the parent, which must be a <code>ComponentInputMap</code> associated with the same component as this <code>ComponentInputMap</code>
Returns the component the <code>InputMap</code> was created for
Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>
Removes the binding for <code>key</code> from this object
Removes all the mappings from this object
Invoked when the component's size changes
Invoked when the component's position changes
Invoked when the component has been made visible
Invoked when the component has been made invisible
Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman
HorizontalLines: Do items run left-to-right?<br> Vertical Lines:  Do lines run left-to-right?<br> This will return true for horizontal, left-to-right writing systems such as Roman
Returns the orientation that is appropriate for the given locale
Returns the orientation appropriate for the given ResourceBundle's localization
Determines if a component has been obscured, i
Returns {@code true} when the peer can determine if a component has been obscured, {@code false} false otherwise
Makes a component visible or invisible
Enables or disables a component
Paints the component to the specified graphics context
Prints the component to the specified graphics context
Sets the location or size or both of the component
Called to let the component peer handle events
Called to coalesce paint events
Determines the location of the component on the screen
Determines the preferred size of the component
Determines the minimum size of the component
Returns the color model used by the component
Returns a graphics object to paint on the component
Returns a font metrics object to determine the metrics properties of the specified font
Disposes all resources held by the component peer
Sets the foreground color of this component
Sets the background color of this component
Sets the font of this component
Updates the cursor of the component
Requests focus on this component
Returns {@code true} when the component takes part in the focus traversal, {@code false} otherwise
Creates an image using the specified image producer
Creates an empty image with the specified width and height
Creates an empty volatile image with the specified width and height
Prepare the specified image for rendering on this component
Determines the status of the construction of the screen representaion of the specified image
Returns the graphics configuration that corresponds to this component
Determines if the component handles wheel scrolling itself
Create {@code numBuffers} flipping buffers with the specified buffer capabilities
Returns the back buffer as image
Move the back buffer to the front buffer
Destroys all created buffers
Reparents this peer to the new parent referenced by {@code newContainer} peer
Returns whether this peer supports reparenting to another parent without destroying the peer
Used by lightweight implementations to tell a ComponentPeer to layout its sub-elements
Applies the shape to the native component window
Lowers this component at the bottom of the above HW peer
Updates internal data structures related to the component's GC
Creates a new <code>ComponentSampleModel</code> with the specified width and height
Creates a new ComponentSampleModel with a subset of the bands of this ComponentSampleModel
Creates a <code>DataBuffer</code> that corresponds to this <code>ComponentSampleModel</code>
Gets the offset for the first band of pixel (x,y)
Gets the offset for band b of pixel (x,y)
Returns the number of bits per sample for all bands
Returns the number of bits per sample for the specified band
Returns the bank indices for all bands
Returns the band offset for all bands
Returns the scanline stride of this ComponentSampleModel
Returns the pixel stride of this ComponentSampleModel
Returns the number of data elements needed to transfer a pixel with the {@link #getDataElements(int, int, Object, DataBuffer) } and {@link #setDataElements(int, int, Object, DataBuffer) } methods
Returns data for a single pixel in a primitive array of type <code>TransferType</code>
Returns all samples for the specified pixel in an int array, one sample per array element
Returns all samples for the specified rectangle of pixels in an int array, one sample per array element
Returns as int the sample in a specified band for the pixel located at (x,y)
Returns the sample in a specified band for the pixel located at (x,y) as a float
Returns the sample in a specified band for a pixel located at (x,y) as a double
Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element
Sets the data for a single pixel in the specified <code>DataBuffer</code> from a primitive array of type <code>TransferType</code>
Sets a pixel in the <code>DataBuffer</code> using an int array of samples for input
Sets all samples for a rectangle of pixels from an int array containing one sample per array element
Sets a sample in the specified band for the pixel located at (x,y) in the <code>DataBuffer</code> using an int for input
Sets a sample in the specified band for the pixel located at (x,y) in the <code>DataBuffer</code> using a float for input
Sets a sample in the specified band for the pixel located at (x,y) in the <code>DataBuffer</code> using a double for input
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element
Configures the specified component appropriately for the look and feel
Reverses configuration which was done on the specified component during <code>installUI</code>
Paints the specified component appropriately for the look and feel
Notifies this UI delegate that it is time to paint the specified component
Returns the specified component's preferred size appropriate for the look and feel
Returns the specified component's minimum size appropriate for the look and feel
Returns the specified component's maximum size appropriate for the look and feel
Returns <code>true</code> if the specified <i>x,y</i> location is contained within the look and feel's defined shape of the specified component
Returns an instance of the UI delegate for the specified component
Returns the baseline
Returns an enum indicating how the baseline of he component changes as the size changes
Returns the number of accessible children in the object
Returns the <code>i</code>th <code>Accessible</code> child of the object
Create the component that is associated with this view
Fetch the component associated with the view
The real paint behavior occurs naturally from the association that the component has with its parent container (the same container hosting this view)
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Determines the desired alignment for this view along an axis
Sets the parent for a child view
Provides a mapping from the coordinate space of the model to that of the view
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Creates a context containing state that is used to perform the compositing operation
Releases resources allocated for a context
Composes the two source {@link Raster} objects and places the result in the destination {@link WritableRaster}
Returns the <i>composite type </i> of this <i>composite data</i> instance
Returns the value of the item whose name is <tt>key</tt>
Returns an array of the values of the items whose names are specified by <tt>keys</tt>, in the same order as <tt>keys</tt>
Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item whose name is <tt>key</tt>
Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item whose value is <tt>value</tt>
Returns an unmodifiable Collection view of the item values contained in this <tt>CompositeData</tt> instance
Compares the specified <var>obj</var> parameter with this <code>CompositeData</code> instance for equality
Returns the hash code value for this <code>CompositeData</code> instance
Returns a string representation of this <code>CompositeData</code> instance
Return the {@code CompositeData} that was supplied to the       constructor
Returns the <i>composite type </i> of this <i>composite data</i> instance
Returns the value of the item whose name is <tt>key</tt>
Returns an array of the values of the items whose names are specified by <tt>keys</tt>, in the same order as <tt>keys</tt>
Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item whose name is <tt>key</tt>
Returns <tt>true</tt> if and only if this <tt>CompositeData</tt> instance contains an item whose value is <tt>value</tt>
Returns an unmodifiable Collection view of the item values contained in this <tt>CompositeData</tt> instance
Compares the specified <var>obj</var> parameter with this <code>CompositeDataSupport</code> instance for equality
Returns the hash code value for this <code>CompositeDataSupport</code> instance
Returns a string representation of this <code>CompositeDataSupport</code> instance
<p>Return a {@code CompositeData} corresponding to the values in this object
Add an invocation handler for all methods on interface interf
Set the default invocation handler to use if none of the invocation handlers added by calls to addInvocationHandler apply
Generates the string representation of this composite name
Determines whether two composite names are equal
Computes the hash code of this composite name
Compares this CompositeName with the specified Object for order
Generates a copy of this composite name
Retrieves the number of components in this composite name
Determines whether this composite name is empty
Retrieves the components of this composite name as an enumeration of strings
Retrieves a component of this composite name
Creates a composite name whose components consist of a prefix of the components in this composite name
Creates a composite name whose components consist of a suffix of the components in this composite name
Determines whether a composite name is a prefix of this composite name
Determines whether a composite name is a suffix of this composite name
Adds the components of a composite name -- in order -- to the end of this composite name
Adds the components of a composite name -- in order -- at a specified position within this composite name
Adds a single component to the end of this composite name
Adds a single component at a specified position within this composite name
Deletes a component from this composite name
Returns <code>true</code> if this <code>CompositeType</code> instance defines an item whose name is <var>itemName</var>
Returns the description of the item whose name is <var>itemName</var>, or <code>null</code> if this <code>CompositeType</code> instance does not define any item whose name is <var>itemName</var>
Returns the <i>open type</i> of the item whose name is <var>itemName</var>, or <code>null</code> if this <code>CompositeType</code> instance does not define any item whose name is <var>itemName</var>
Returns an unmodifiable Set view of all the item names defined by this <code>CompositeType</code> instance
Tests whether <var>obj</var> is a value which could be described by this <code>CompositeType</code> instance
Compares the specified <code>obj</code> parameter with this <code>CompositeType</code> instance for equality
Returns the hash code value for this <code>CompositeType</code> instance
Returns a string representation of this <code>CompositeType</code> instance
Loads all of the children to initialize the view
Sets the parent of the view
Returns the number of child views of this view
Returns the n-th view in this container
Replaces child views
Fetches the allocation for the given child view to render into
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Provides a way to determine the next visually represented model location that one might place a caret
Returns the child view index representing the given position in the model
Tests whether a point lies before the rectangle range
Tests whether a point lies after the rectangle range
Fetches the child view at the given coordinates
Returns the allocation for a given child
Fetches the child view that represents the given position in the model
Fetches the child view index representing the given position in the model
Translates the immutable allocation given to the view to a mutable allocation that represents the interior allocation (i
Sets the insets from the paragraph attributes specified in the given attributes
Sets the insets for the view
Gets the left inset
Gets the right inset
Gets the top inset
Gets the bottom inset
Returns the next visual position for the cursor, in either the north or south direction
Returns the next visual position for the cursor, in either the east or west direction
Determines in which direction the next view lays
Returns whether or not the compound border is opaque
Paints the compound border by painting the outside border with the specified position and size and then painting the inside border at the specified position and size offset by the insets of the outside border
Reinitialize the insets parameter with this Border's current Insets
Returns the outside border object
Returns the inside border object
Returns the set of member controls that comprise the compound control
Provides a string representation of the control
Sends <code>undo</code> to all contained <code>UndoableEdits</code> in the reverse of the order in which they were added
Sends <code>redo</code> to all contained <code>UndoableEdit</code>s in the order in which they were added
Returns the last <code>UndoableEdit</code> in <code>edits</code>, or <code>null</code> if <code>edits</code> is empty
Sends <code>die</code> to each subedit, in the reverse of the order that they were added
If this edit is <code>inProgress</code>, accepts <code>anEdit</code> and returns true
Sets <code>inProgress</code> to false
Returns false if <code>isInProgress</code> or if super returns false
Returns false if <code>isInProgress</code> or if super returns false
Returns true if this edit is in progress--that is, it has not received end
Returns true if any of the <code>UndoableEdit</code>s in <code>edits</code> do
Returns <code>getPresentationName</code> from the last <code>UndoableEdit</code> added to <code>edits</code>
Returns <code>getUndoPresentationName</code> from the last <code>UndoableEdit</code> added to <code>edits</code>
Returns <code>getRedoPresentationName</code> from the last <code>UndoableEdit</code> added to <code>edits</code>
Returns a string that displays and identifies this object's properties
Generates the string representation of this compound name, using the syntax rules of the compound name
Determines whether obj is syntactically equal to this compound name
Computes the hash code of this compound name
Creates a copy of this compound name
Compares this CompoundName with the specified Object for order
Retrieves the number of components in this compound name
Determines whether this compound name is empty
Retrieves the components of this compound name as an enumeration of strings
Retrieves a component of this compound name
Creates a compound name whose components consist of a prefix of the components in this compound name
Creates a compound name whose components consist of a suffix of the components in this compound name
Determines whether a compound name is a prefix of this compound name
Determines whether a compound name is a suffix of this compound name
Adds the components of a compound name -- in order -- to the end of this compound name
Adds the components of a compound name -- in order -- at a specified position within this compound name
Adds a single component to the end of this compound name
Adds a single component at a specified position within this compound name
Deletes a component from this compound name
Returns the string table for class Compression
Returns the enumeration value table for class Compression
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
{@inheritDoc}
{@inheritDoc}
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Tests if the specified object is a key in this table
Returns {@code true} if this map maps one or more keys to the specified value
Maps the specified key to the specified value in this table
Copies all of the mappings from the specified map to this one
Removes the key (and its corresponding value) from this map
Removes all of the mappings from this map
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns the hash code value for this {@link Map}, i
Returns a string representation of this map
Compares the specified object with this map for equality
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key
If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless {@code null}
If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
Attempts to compute a mapping for the specified key and its current mapped value (or {@code null} if there is no current mapping)
If the specified key is not already associated with a (non-null) value, associates it with the given value
Legacy method testing if some key maps into the specified value in this table
Returns an enumeration of the keys in this table
Returns an enumeration of the values in this table
Returns the number of mappings
Creates a new {@link Set} backed by a ConcurrentHashMap from the given type to {@code Boolean
Creates a new {@link Set} backed by a ConcurrentHashMap from the given type to {@code Boolean
Returns a {@link Set} view of the keys in this map, using the given common mapped value for any additions (i
Performs the given action for each (key, value)
Performs the given action for each non-null transformation of each (key, value)
Returns a non-null result from applying the given search function on each (key, value), or null if none
Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value
Performs the given action for each key
Performs the given action for each non-null transformation of each key
Returns a non-null result from applying the given search function on each key, or null if none
Returns the result of accumulating all keys using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value
Performs the given action for each value
Performs the given action for each non-null transformation of each value
Returns a non-null result from applying the given search function on each value, or null if none
Returns the result of accumulating all values using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value
Performs the given action for each entry
Performs the given action for each non-null transformation of each entry
Returns a non-null result from applying the given search function on each entry, or null if none
Returns the result of accumulating all entries using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none
Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value
Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value
Returns the default mapped value for additions, or {@code null} if additions are not supported
{@inheritDoc}
Removes the key from this map view, by removing the key (and its corresponding value) from the backing map
Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined
Adds all of the elements in the specified collection to this set, as if by calling {@link #add} on each one
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
Inserts the specified element at the tail of this deque
Inserts the specified element at the tail of this deque
Removes the first element {@code e} such that {@code o
Removes the last element {@code e} such that {@code o
Returns {@code true} if this deque contains at least one element {@code e} such that {@code o
Returns {@code true} if this collection contains no elements
Returns the number of elements in this deque
Removes the first element {@code e} such that {@code o
Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator
Removes all of the elements from this deque
Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this deque in proper sequence
Returns an iterator over the elements in this deque in reverse sequential order
Returns a {@link Spliterator} over the elements in this deque
Inserts the specified element at the tail of this queue
Inserts the specified element at the tail of this queue
Returns {@code true} if this queue contains no elements
Returns the number of elements in this queue
Returns {@code true} if this queue contains the specified element
Removes a single instance of the specified element from this queue, if it is present
Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator
Returns an array containing all of the elements in this queue, in proper sequence
Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue in proper sequence
Returns a {@link Spliterator} over the elements in this queue
{@inheritDoc}
{@inheritDoc}
If the specified key is not already associated with a value, associate it with the given value
Removes the entry for a key only if currently mapped to a given value
Replaces the entry for a key only if currently mapped to a given value
Replaces the entry for a key only if currently mapped to some value
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a reverse order view of the mappings contained in this map
Returns a {@link NavigableSet} view of the keys contained in this map
Returns a {@link NavigableSet} view of the keys contained in this map
Returns a reverse order {@link NavigableSet} view of the keys contained in this map
Returns a shallow copy of this {@code ConcurrentSkipListMap} instance
Returns {@code true} if this map contains a mapping for the specified key
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key
Associates the specified value with the specified key in this map
Removes the mapping for the specified key from this map if present
Returns {@code true} if this map maps one or more keys to the specified value
Returns the number of key-value mappings in this map
Returns {@code true} if this map contains no key-value mappings
Removes all of the mappings from this map
If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless {@code null}
If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
Attempts to compute a mapping for the specified key and its current mapped value (or {@code null} if there is no current mapping)
If the specified key is not already associated with a value, associates it with the given value
Returns a {@link NavigableSet} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Compares the specified object with this map for equality
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a key-value mapping associated with the greatest key strictly less than the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the least key greater than or equal to the given key, or {@code null} if there is no such entry
Returns a key-value mapping associated with the least key strictly greater than the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the least key in this map, or {@code null} if the map is empty
Returns a key-value mapping associated with the greatest key in this map, or {@code null} if the map is empty
Removes and returns a key-value mapping associated with the least key in this map, or {@code null} if the map is empty
Removes and returns a key-value mapping associated with the greatest key in this map, or {@code null} if the map is empty
Returns a shallow copy of this {@code ConcurrentSkipListSet} instance
Returns the number of elements in this set
Returns {@code true} if this set contains no elements
Returns {@code true} if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Returns an iterator over the elements in this set in ascending order
Returns an iterator over the elements in this set in descending order
Compares the specified object with this set for equality
Removes from this set all of its elements that are contained in the specified collection
Returns a reverse order view of the elements contained in this set
Returns a {@link Spliterator} over the elements in this set
Causes the current thread to wait until it is signalled or {@linkplain Thread#interrupt interrupted}
Causes the current thread to wait until it is signalled
Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses
Wakes up one waiting thread
Wakes up all waiting threads
Wait for notification
Wait for at most msecs for notification
Notify a waiting thread
Notify all waiting threads
Retrieve an entry from the {@code Configuration} using an application name as an index
Refresh and reload the {@code Configuration} by re-reading all of the login configurations
Get the installed login Configuration
Set the login {@code Configuration}
Returns a Configuration object of the specified type
Returns a Configuration object of the specified type
Returns a Configuration object of the specified type
Return the Provider of this Configuration
Return the type of this Configuration
Return Configuration parameters
Retrieve the AppConfigurationEntries for the specified <i>name</i> from this Configuration
Refresh and reload the Configuration
Returns the exception associated to this error
Retrieve the AppConfigurationEntries for the specified <i>name</i>
Refresh and reload the Configuration
Get the prompt
Get the message type
Get the option type
Get the confirmation options
Get the default option
Set the selected confirmation option
Get the selected confirmation option
Creates a <code>Statement</code> object for sending SQL statements to the database
Creates a <code>PreparedStatement</code> object for sending parameterized SQL statements to the database
Creates a <code>CallableStatement</code> object for calling database stored procedures
Converts the given SQL statement into the system's native SQL grammar
Sets this connection's auto-commit mode to the given state
Retrieves the current auto-commit mode for this <code>Connection</code> object
Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this <code>Connection</code> object
Undoes all changes made in the current transaction and releases any database locks currently held by this <code>Connection</code> object
Releases this <code>Connection</code> object's database and JDBC resources immediately instead of waiting for them to be automatically released
Retrieves whether this <code>Connection</code> object has been closed
Retrieves a <code>DatabaseMetaData</code> object that contains metadata about the database to which this <code>Connection</code> object represents a connection
Puts this connection in read-only mode as a hint to the driver to enable database optimizations
Retrieves whether this <code>Connection</code> object is in read-only mode
Sets the given catalog name in order to select a subspace of this <code>Connection</code> object's database in which to work
Retrieves this <code>Connection</code> object's current catalog name
Attempts to change the transaction isolation level for this <code>Connection</code> object to the one given
Retrieves this <code>Connection</code> object's current transaction isolation level
Retrieves the first warning reported by calls on this <code>Connection</code> object
Clears all warnings reported for this <code>Connection</code> object
Creates a <code>Statement</code> object that will generate <code>ResultSet</code> objects with the given type and concurrency
Creates a <code>PreparedStatement</code> object that will generate <code>ResultSet</code> objects with the given type and concurrency
Creates a <code>CallableStatement</code> object that will generate <code>ResultSet</code> objects with the given type and concurrency
Retrieves the <code>Map</code> object associated with this <code>Connection</code> object
Installs the given <code>TypeMap</code> object as the type map for this <code>Connection</code> object
Changes the default holdability of <code>ResultSet</code> objects created using this <code>Connection</code> object to the given holdability
Retrieves the current holdability of <code>ResultSet</code> objects created using this <code>Connection</code> object
Creates an unnamed savepoint in the current transaction and returns the new <code>Savepoint</code> object that represents it
Creates a savepoint with the given name in the current transaction and returns the new <code>Savepoint</code> object that represents it
Undoes all changes made after the given <code>Savepoint</code> object was set
Removes the specified <code>Savepoint</code>  and subsequent <code>Savepoint</code> objects from the current transaction
Creates a <code>Statement</code> object that will generate <code>ResultSet</code> objects with the given type, concurrency, and holdability
Creates a <code>PreparedStatement</code> object that will generate <code>ResultSet</code> objects with the given type, concurrency, and holdability
Creates a <code>CallableStatement</code> object that will generate <code>ResultSet</code> objects with the given type and concurrency
Creates a default <code>PreparedStatement</code> object that has the capability to retrieve auto-generated keys
Creates a default <code>PreparedStatement</code> object capable of returning the auto-generated keys designated by the given array
Creates a default <code>PreparedStatement</code> object capable of returning the auto-generated keys designated by the given array
Constructs an object that implements the <code>Clob</code> interface
Constructs an object that implements the <code>Blob</code> interface
Constructs an object that implements the <code>NClob</code> interface
Constructs an object that implements the <code>SQLXML</code> interface
Returns true if the connection has not been closed and is still valid
Sets the value of the client info property specified by name to the value specified by value
Sets the value of the connection's client info properties
Returns the value of the client info property specified by name
Returns a list containing the name and current value of each client info property supported by the driver
Factory method for creating Array objects
Factory method for creating Struct objects
Sets the given schema name to access
Retrieves this <code>Connection</code> object's current schema name
Terminates an open connection
Sets the maximum period a <code>Connection</code> or objects created from the <code>Connection</code> will wait for the database to reply to any one request
Retrieves the number of milliseconds the driver will wait for a database request to complete
Close all connections in the connection cache
<P>Retrieves the <code>SQLException</code> for this <code>ConnectionEvent</code> object
Notifies this <code>ConnectionEventListener</code> that the application has called the method <code>close</code> on its representation of a pooled connection
Notifies this <code>ConnectionEventListener</code> that a fatal error has occurred and the pooled connection can no longer be used
Attempts to establish a physical database connection that can be used as a pooled connection
Attempts to establish a physical database connection that can be used as a pooled connection
Retrieves the unique {@link java
Retrieves the unique {@link java
Writes a formatted string to this console's output stream using the specified format string and arguments
A convenience method to write a formatted string to this console's output stream using the specified format string and arguments
Provides a formatted prompt, then reads a single line of text from the console
Reads a single line of text from the console
Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled
Reads a password or passphrase from the console with echoing disabled
Flushes the console and forces any buffered output to be written immediately 
Publish a <tt>LogRecord</tt>
Override <tt>StreamHandler
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Returns the target method of the call site, which behaves like a {@code final} field of the {@code ConstantCallSite}
Always throws an {@link UnsupportedOperationException}
Returns this call site's permanent target
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant class to file stream in binary format
Dump constant field reference to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant double to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant float to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant integer to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant long to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump name and signature index to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Resolve constant to a string representation
Retrieve constant at `index' from constant pool and resolve it to a string representation
Dump constant pool to file stream in binary format
Get constant from constant pool
Get constant from constant pool and check whether it has the expected type
Get string from constant pool and bypass the indirection of `ConstantClass' and `ConstantString' objects
Resize internal array of constants
Look for ConstantString in ConstantPool containing String `str'
Add a new String constant to the ConstantPool, if it is not already in there
Look for ConstantClass in ConstantPool named `str'
Add a new Class reference to the ConstantPool, if it is not already in there
Add a new Class reference to the ConstantPool for a given type
Add a reference to an array class (e
Look for ConstantInteger in ConstantPool
Add a new Integer constant to the ConstantPool, if it is not already in there
Look for ConstantFloat in ConstantPool
Add a new Float constant to the ConstantPool, if it is not already in there
Look for ConstantUtf8 in ConstantPool
Add a new Utf8 constant to the ConstantPool, if it is not already in there
Look for ConstantLong in ConstantPool
Add a new long constant to the ConstantPool, if it is not already in there
Look for ConstantDouble in ConstantPool
Add a new double constant to the ConstantPool, if it is not already in there
Look for ConstantNameAndType in ConstantPool
Add a new NameAndType constant to the ConstantPool if it is not already in there
Look for ConstantMethodref in ConstantPool
Add a new Methodref constant to the ConstantPool, if it is not already in there
Look for ConstantInterfaceMethodref in ConstantPool
Add a new InterfaceMethodref constant to the ConstantPool, if it is not already in there
Look for ConstantFieldref in ConstantPool
Add a new Fieldref constant to the ConstantPool, if it is not already in there
Use with care!
Import constant from another ConstantPool and return new index
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant field reference to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump String in Utf8 format to file stream
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump constant value attribute to file stream on binary format
{@inheritDoc}
Returns the name of this constructor, as a string
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares this {@code Constructor} against the specified object
Returns a hashcode for this {@code Constructor}
Returns a string describing this {@code Constructor}
Returns a string describing this {@code Constructor}, including type parameters
Uses the constructor represented by this {@code Constructor} object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
<p>The getter names
Performs this operation on the given argument
Returns a composed {@code Consumer} that performs, in sequence, this operation followed by the {@code after} operation
The {@link com
The parent {@link com
Used to get a {@link com
Used to determine if a {@link com
Used to determine if the {@link com
PEPt uses separate caches for each type of <code>ContactInfo</code> as given by <code>getConnectionCacheType</code>
Set the {@link com
Get the {@link com
Used to get a {@link com
Used to get a {@link com
Used to get a {@link com
Used to finish creating a {@link com
Used to get a {@link com
Used to get a {@link com
Used to lookup artifacts associated with this <code>ContactInfo</code>
Used to get a {@link com
The underlying list for this iterator
Used to report information to the iterator to be used in future invocations
Used to report information to the iterator to be used in future invocations
The exception to report to the presentation block
Gets the number of components in this panel
Gets the nth component in this container
Gets all the components in this container
Determines the insets of this container, which indicate the size of the container's border
Appends the specified component to the end of this container
Adds the specified component to this container
Adds the specified component to this container at the given position
Moves the specified component to the specified z-order index in the container
Returns the z-order index of the component inside the container
Adds the specified component to the end of this container
Adds the specified component to this container with the specified constraints at the specified index
Adds the specified component to this container at the specified index
Removes the component, specified by <code>index</code>, from this container
Removes the specified component from this container
Removes all the components from this container
Gets the layout manager for this container
Sets the layout manager for this container
Causes this container to lay out its components
Indicates if this container is a <i>validate root</i>
Invalidates the container
Validates this container and all of its subcomponents
Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid)
Sets the font of this container
Returns the preferred size of this container
Returns the minimum size of this container
Returns the maximum size of this container
Returns the alignment along the x axis
Returns the alignment along the y axis
Paints the container
Updates the container
Prints the container
Paints each of the components in this container
Prints each of the components in this container
Adds the specified container listener to receive container events from this container
Removes the specified container listener so it no longer receives container events from this container
Returns an array of all the container listeners registered on this container
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Container</code>
Processes events on this container
Processes container events occurring on this container by dispatching them to any registered ContainerListener objects
Locates the component that contains the x,y position
Gets the component that contains the specified point
Returns the position of the mouse pointer in this <code>Container</code>'s coordinate space if the <code>Container</code> is under the mouse pointer, otherwise returns <code>null</code>
Locates the visible child component that contains the specified position
Locates the visible child component that contains the specified point
Makes this Container displayable by connecting it to a native screen resource
Makes this Container undisplayable by removing its connection to its native screen resource
Checks if the component is contained in the component hierarchy of this container
Returns a string representing the state of this <code>Container</code>
Prints a listing of this container to the specified output stream
Prints out a list, starting at the specified indentation, to the specified print writer
Sets the focus traversal keys for a given traversal operation for this Container
Returns the Set of focus traversal keys for a given traversal operation for this Container
Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Container
Returns whether the specified Container is the focus cycle root of this Container's focus traversal cycle
Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root
Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root
Returns whether the focus traversal policy has been explicitly set for this Container
Sets whether this Container is the root of a focus traversal cycle
Returns whether this Container is the root of a focus traversal cycle
Sets whether this container will be used to provide focus traversal policy
Returns whether this container provides focus traversal policy
Transfers the focus down one focus traversal cycle
Sets the <code>ComponentOrientation</code> property of this container and all components contained within it
Adds a PropertyChangeListener to the listener list
Adds a PropertyChangeListener to the listener list for a specific property
Returns the number of accessible children in the object
Returns the nth <code>Accessible</code> child of the object
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Adds a PropertyChangeListener to the listener list
Remove a PropertyChangeListener from the listener list
Invoked when a component has been added to the container
Invoked when a component has been removed from the container
Returns the originator of the event
Returns the component that was affected by the event
Returns a parameter string identifying this event
Invoked when a component has been added to the container
Invoked when a component has been removed from the container
Returns the Component that should receive the focus after aComponent
Returns the Component that should receive the focus before aComponent
Returns the first Component in the traversal cycle
Returns the last Component in the traversal cycle
Returns the default Component to focus
Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly
Returns whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly
Determines whether a Component is an acceptable choice as the new focus owner
Returns the insets of this container
Notifies the peer that validation of the component tree is about to begin
Notifies the peer that validation of the component tree is finished
Notifies the peer that layout is about to begin
Notifies the peer that layout is finished
Receive an object for locating the origin of SAX document events
Receive notification of the beginning of a document
Receive notification of the end of a document
Begin the scope of a prefix-URI Namespace mapping
End the scope of a prefix-URI mapping
Receive notification of the beginning of an element
Receive notification of the end of an element
Receive notification of character data
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Receive notification of a skipped entity
Creates a new {@code ContentHandler} to read an object from a {@code URLStreamHandler}
Return true if the content model could match an empty input stream
Update elemVec with the list of elements that are part of the this contentModel
Return true if the token could potentially be the first token in the input stream
Return the element that must be next
Convert to a string
validate
Retrieves the name of this <code>Context</code> object
Retrieves the parent of this <code>Context</code> object
Creates a <code>Context</code> object with the given string as its name and with this <code>Context</code> object set as its parent
Creates a <code>NamedValue</code> object and adds it to this <code>Context</code> object
I Sets one or more property values in this <code>Context</code> object
Deletes from this <code>Context</code> object the <code>NamedValue</code> object(s) whose <code>name</code> field matches the given property name
Retrieves the <code>NamedValue</code> objects whose <code>name</code> field matches the given name or name pattern
Returns the number of <code>String</code> objects in this <code>ContextList</code> object
Adds a <code>String</code> object to this <code>ContextList</code> object
Returns the <code>String</code> object at the given index
Removes the <code>String</code> object at the given index
Execute this pattern step, including predicates
Execute the match pattern step relative to another step
Get the <a href="http://www
Get the current position, which is one less than the next nextNode() call will retrieve
Reset the iterator
If setShouldCacheNodes(true) is called, then nodes will be cached
If an index is requested, NodeSetDTM will call this method to run the iterator to the index
Set the current position in the node set
Get the length of the list
Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set
Get a cloned Iterator that is reset to the start of the iteration
Get a clone of this iterator
Get the index of the last node in this list
Set the index of the last node in this list
Maps the operation's output RenderContext into a RenderContext for each of the operation's sources
Creates a rendering, given a RenderContext and a ParameterBlock containing the operation's sources and parameters
Returns the bounding box for the output of the operation, performed on a given set of sources, in rendering-independent space
Gets the appropriate instance of the property specified by the name parameter
Returns a list of names recognized by getProperty
Returns true if successive renderings (that is, calls to create(RenderContext, ParameterBlock)) with the same arguments may produce different results
Obtains the control's type
Obtains a String describing the control type and its current state
Finalizes the equals method
Finalizes the hashCode method
Provides the <code>String</code> representation of the control type
Creates a control using this control factory
Creates a control using known control factories
Invoked when a <code>Sequencer</code> has encountered and processed a control-change event of interest to this listener
Returns the edge condition
Returns the Kernel
Performs a convolution on BufferedImages
Performs a convolution on Rasters
Creates a zeroed destination image with the correct size and number of bands
Creates a zeroed destination Raster with the correct size and number of bands, given this source
Returns the bounding box of the filtered destination image
Returns the bounding box of the filtered destination Raster
Returns the location of the destination point given a point in the source
Returns the rendering hints for this op
Gets the system-wide cookie handler
Sets (or unsets) the system-wide cookie handler
Gets all the applicable cookies from a cookie cache for the specified uri in the request header
Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache
To set the cookie policy of this cookie manager
To retrieve current cookie store
Will be called to see whether or not this cookie should be accepted
Adds one HTTP cookie to the store
Retrieve cookies associated with given URI, or whose domain matches the given URI
Get all not-expired cookies in cookie store
Get all URIs which identify the cookies in this cookie store
Remove a cookie from store
Remove all cookies in this cookie store
Set the Id of the copier to use if no other copier has been set
Return the copier for the default copier id
Register an ObjectCopierFactory under a particular id
Returns whether this copies attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this copies supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Obtain the ORB stream copier factory
Obtain the reference object "copier"
Create a fallback copier factory from the two ObjectCopierFactory arguments
Returns the number of elements in this list
Returns {@code true} if this list contains no elements
Returns {@code true} if this list contains the specified element
{@inheritDoc}
Returns the index of the first occurrence of the specified element in this list, searching forwards from {@code index}, or returns -1 if the element is not found
{@inheritDoc}
Returns the index of the last occurrence of the specified element in this list, searching backwards from {@code index}, or returns -1 if the element is not found
Returns a shallow copy of this list
Returns an array containing all of the elements in this list in proper sequence (from first to last element)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
{@inheritDoc}
Replaces the element at the specified position in this list with the specified element
Appends the specified element to the end of this list
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Removes the first occurrence of the specified element from this list, if it is present
Appends the element, if not present
Returns {@code true} if this list contains all of the elements of the specified collection
Removes from this list all of its elements that are contained in the specified collection
Retains only the elements in this list that are contained in the specified collection
Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator
Removes all of the elements from this list
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator
Inserts all of the elements in the specified collection into this list, starting at the specified position
Returns a string representation of this list
Compares the specified object with this list for equality
Returns the hash code value for this list
Returns an iterator over the elements in this list in proper sequence
{@inheritDoc} <p>The returned iterator provides a snapshot of the state of the list when the iterator was constructed
{@inheritDoc} <p>The returned iterator provides a snapshot of the state of the list when the iterator was constructed
Returns a {@link Spliterator} over the elements in this list
Returns a view of the portion of this list between {@code fromIndex}, inclusive, and {@code toIndex}, exclusive
Returns the number of elements in this set
Returns {@code true} if this set contains no elements
Returns {@code true} if this set contains the specified element
Returns an array containing all of the elements in this set
Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
Removes all of the elements from this set
Removes the specified element from this set if it is present
Adds the specified element to this set if it is not already present
Returns {@code true} if this set contains all of the elements of the specified collection
Adds all of the elements in the specified collection to this set if they're not already present
Removes from this set all of its elements that are contained in the specified collection
Retains only the elements in this set that are contained in the specified collection
Returns an iterator over the elements contained in this set in the order in which these elements were added
Compares the specified object with this set for equality
Returns a {@link Spliterator} over the elements in this set in the order in which these elements were added
This method overrides the org
Returns true if this object is implemented by a local servant
Clean up all connection resources
Discarding least recently used Connections that are not busy This method must be synchronized since one WorkerThread could be reclaming connections inside the synchronized backingStore block and a second WorkerThread (or a SelectorThread) could have already executed the if (numberOfConnections <= 
This will be called after the no-arg constructor before create is called
setLocalSubcontract sets cached information that is set whenever the effectiveTargetIOR changes
Will be true only in CorbanameURL class
If the RMI-IIOP maximum stream format version service context is present, it indicates the maximum stream format version we could use for the reply
Handle a locate request
XXX/REVISIT: We do not want to look for a servant in the POA/ServantManager case, but we could in most other cases
Always throws OBJECT_NOT_EXIST if operation is not a special method
Must always be called, just after the servant's method returns
Handles setting the connection's code sets if required
Returns the node type
Returns the node name
Deep-clone a document, including fixing ownerDoc for the cloned children
internal method to share code with subclass
Since a Document may contain at most one top-level Element child, and at most one DocumentType declaraction, we need to subclass our add-children methods to implement this constraint
Since insertBefore caches the docElement (and, currently, docType), removeChild has to know how to undo the cache REVISIT: According to the spec it is not allowed to alter neither the document element nor the document type in any way
Since we cache the docElement (and, currently, docType), replaceChild has to update the cache REVISIT: According to the spec it is not allowed to alter neither the document element nor the document type in any way
Factory method; creates an Attribute having this Document as its OwnerDoc
Factory method; creates a CDATASection having this Document as its OwnerDoc
Factory method; creates a Comment having this Document as its OwnerDoc
Factory method; creates a DocumentFragment having this Document as its OwnerDoc
Factory method; creates an Element having this Document as its OwnerDoc
Factory method; creates an EntityReference having this Document as its OwnerDoc
Factory method; creates a ProcessingInstruction having this Document as its OwnerDoc
Factory method; creates a Text node having this Document as its OwnerDoc
For XML, this provides access to the Document Type Definition
Convenience method, allowing direct access to the child node which is considered the root of the actual document content
Return a <em>live</em> collection of all descendent Elements (not just immediate children) having the specified tag name
Retrieve information describing the abilities of this particular DOM implementation
Sets whether the DOM implementation performs error checking upon operations
Returns true if the DOM implementation performs error checking
DOM Level 3 CR - Experimental
DOM Internal (Was a DOM L3 Core WD public interface method setActualEncoding ) An attribute specifying the actual encoding of this document
DOM Internal (Was a DOM L3 Core WD public interface method setXMLEncoding ) An attribute specifying, as part of the XML declaration, the encoding of this document
DOM Level 3 WD - Experimental
DOM Level 3 CR - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 CR - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental  Normalize document
DOM Level 3 CR - Experimental  The configuration used when <code>Document
Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
NON-DOM Factory method; creates a DocumentType having this Document as its OwnerDoc
NON-DOM Factory method; creates an Entity having this Document as its OwnerDoc
NON-DOM Factory method; creates a Notation having this Document as its OwnerDoc
NON-DOM Factory method: creates an element definition
NON-DOM: Get the number associated with this document
NON-DOM: Get a number associated with a node created with respect to this document
Copies a node from another document to this document
DOM Level 3 WD - Experimental Change the node's ownerDocument, and its subtree, to this Document
Traverses the DOM Tree and expands deferred nodes and their children
Introduced in DOM Level 2 Returns the Element whose ID is given by elementId
Remove all identifiers from the ID table
Registers an identifier name with a specified element node
Returns a previously registered element with the specified identifier name, or null if no element is registered
Removes a previously registered element with the specified identifier name
Introduced in DOM Level 2
NON-DOM: a factory method used by the Xerces DOM parser to create an element
Introduced in DOM Level 2
NON-DOM: a factory method used by the Xerces DOM parser to create an element
Introduced in DOM Level 2
Clone
Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class
Checks if the given qualified name is legal with respect to the version of XML to which this document must conform
Uses the kidOK lookup table to check whether the proposed tree structure is legal
Denotes that this node has changed
Returns the number of changes to this node
Associate an object to a key on this node
Retrieves the object associated to a key on a this node
Call user data handlers to let them know the nodes they are related to are being deleted
Checks if the given qualified name is legal with respect to the version of XML to which this document must conform
NON-DOM: kept for backward compatibility Store user data related to a given node This is a place where we could use weak references! Indeed, the node here won't be GC'ed as long as some user data is attached to it, since the userData table will have a reference to the node
NON-DOM: kept for backward compatibility Retreive user data related to a given node
NON-DOM: Obtain and return the single shared object
Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof
Introduced in DOM Level 2
Introduced in DOM Level 2
DOM Level 3 WD - Experimental
DOM Level 3 LS CR - Experimental
DOM Level 3 LS CR - Experimental
DOM Level 3 LS CR - Experimental
NON-DOM:  increment document/doctype counter
NON-DOM:  increment document/doctype counter
<p>Each coroutine in the set managed by a single CoroutineManager is identified by a small positive integer
In the standard coroutine architecture, coroutines are identified by their method names and are launched and run up to their first yield by simply resuming them; its's presumed that this recognizes the not-already-running case and does the right thing
Transfer control to another coroutine which has already been started and is waiting on this CoroutineManager
Terminate this entire set of coroutines
Make the ID available for reuse and terminate this coroutine, transferring control to the specified coroutine
Register a SAX-style content handler for us to output to
Register a SAX-style lexical handler for us to output to  Not all parsers support this
doParse() is a simple API which tells the coroutine parser to begin reading from a file
doMore() is a simple API which tells the coroutine parser that we need more nodes
doTerminate() is a simple API which tells the coroutine parser to terminate itself
Initialize the coroutine parser
Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}
Causes the current thread to wait until the latch has counted down to zero, unless the thread is {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses
Decrements the count of the latch, releasing all waiting threads if the count reaches zero
Returns the current count
Returns a string identifying this latch, as well as its state
The main computation performed by this task
Performs an action when method {@link #tryComplete} is invoked and the pending count is zero, or when the unconditional method {@link #complete} is invoked
Performs an action when method {@link #completeExceptionally(Throwable)} is invoked or method {@link #compute} throws an exception, and this task has not already otherwise completed normally
Returns the completer established in this task's constructor, or {@code null} if none
Returns the current pending count
Sets the pending count to the given value
Adds (atomically) the given value to the pending count
Sets (atomically) the pending count to the given count only if it currently holds the given expected value
If the pending count is nonzero, (atomically) decrements it
Returns the root of the current computation; i
If the pending count is nonzero, decrements the count; otherwise invokes {@link #onCompletion(CountedCompleter)} and then similarly tries to complete this task's completer, if one exists, else marks this task as complete
Equivalent to {@link #tryComplete} but does not invoke {@link #onCompletion(CountedCompleter)} along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task's completer, if one exists, else marks this task as complete
Regardless of pending count, invokes {@link #onCompletion(CountedCompleter)}, marks this task as complete and further triggers {@link #tryComplete} on this task's completer, if one exists
If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns {@code null}
If this task does not have a completer, invokes {@link ForkJoinTask#quietlyComplete} and returns {@code null}
Equivalent to {@code getRoot()
If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist
Implements execution conventions for CountedCompleters
Returns the result of the computation
A method that result-bearing CountedCompleters may optionally use to help maintain result data
This attribute is used for the identifier of the counter
This attribute is used for the style of the list
This attribute is used for the separator of the nested counters
Starts the counter monitor
Stops the counter monitor
Gets the derived gauge of the specified object, if this object is contained in the set of observed MBeans, or <code>null</code> otherwise
Gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed MBeans, or <code>0</code> otherwise
Gets the current threshold value of the specified object, if this object is contained in the set of observed MBeans, or <code>null</code> otherwise
Gets the initial threshold value common to all observed objects
Sets the initial threshold value common to all observed objects
Returns the derived gauge of the first object in the set of observed MBeans
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Gets the threshold value of the first object in the set of observed MBeans
Sets the initial threshold value
Gets the offset value common to all observed MBeans
Sets the offset value common to all observed MBeans
Gets the modulus value common to all observed MBeans
Sets the modulus value common to all observed MBeans
Gets the notification's on/off switch value common to all observed MBeans
Sets the notification's on/off switch value common to all observed MBeans
Gets the difference mode flag value common to all observed MBeans
Sets the difference mode flag value common to all observed MBeans
Returns a <CODE>NotificationInfo</CODE> object containing the name of the Java class of the notification and the notification types sent by the counter monitor
Gets the derived gauge
Gets the derived gauge timestamp
Gets the threshold value
Sets the threshold value
Gets the derived gauge for the specified MBean
Gets the derived gauge timestamp for the specified MBean
Gets the threshold value for the specified MBean
Gets the initial threshold value common to all observed objects
Sets the initial threshold value common to all observed MBeans
Gets the offset value
Sets the offset value
Gets the modulus value
Sets the modulus value
Gets the notification's on/off switch value
Sets the notification's on/off switch value
Gets the difference mode flag value
Sets the difference mode flag value
Dump instruction as byte code to stream out
Long output format: &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; constant pool index&gt;"&gt;"
Read needed data (i
Set the index to constant pool
Updates the CRC-32 checksum with the specified byte (the low eight bits of the argument b)
Updates the CRC-32 checksum with the specified array of bytes
Updates the CRC-32 checksum with the specified array of bytes
Updates the checksum with the bytes from the specified buffer
Resets CRC-32 to initial value
Returns CRC-32 value
Returns the type of this CRL
Returns a string representation of this CRL
Checks whether the given certificate is on this CRL
Decides whether a {@code CRL} should be selected
Makes a copy of this {@code CRLSelector}
Passes along  the properties from the source object after adding a property indicating the cropped region
Override the source image's dimensions and pass the dimensions of the rectangular cropped region to the ImageConsumer
Determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region
Determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region
Return the set of all possible CSS attribute keys
Translates a string to a <code>CSS
The string representation of the attribute
Fetch the default value for the attribute
Indicates if the attribute should be inherited from the parent or not
See the azimuth property definition in CSS2
See the azimuth property definition in CSS2
See the background property definition in CSS2
See the background property definition in CSS2
See the background-attachment property definition in CSS2
See the background-attachment property definition in CSS2
See the background-color property definition in CSS2
See the background-color property definition in CSS2
See the background-image property definition in CSS2
See the background-image property definition in CSS2
See the background-position property definition in CSS2
See the background-position property definition in CSS2
See the background-repeat property definition in CSS2
See the background-repeat property definition in CSS2
See the border property definition in CSS2
See the border property definition in CSS2
See the border-collapse property definition in CSS2
See the border-collapse property definition in CSS2
See the border-color property definition in CSS2
See the border-color property definition in CSS2
See the border-spacing property definition in CSS2
See the border-spacing property definition in CSS2
See the border-style property definition in CSS2
See the border-style property definition in CSS2
See the border-top property definition in CSS2
See the border-top property definition in CSS2
See the border-right property definition in CSS2
See the border-right property definition in CSS2
See the border-bottom property definition in CSS2
See the border-bottom property definition in CSS2
See the border-left property definition in CSS2
See the border-left property definition in CSS2
See the border-top-color property definition in CSS2
See the border-top-color property definition in CSS2
See the border-right-color property definition in CSS2
See the border-right-color property definition in CSS2
See the border-bottom-color property definition in CSS2
See the border-bottom-color property definition in CSS2
See the border-left-color property definition in CSS2
See the border-left-color property definition in CSS2
See the border-top-style property definition in CSS2
See the border-top-style property definition in CSS2
See the border-right-style property definition in CSS2
See the border-right-style property definition in CSS2
See the border-bottom-style property definition in CSS2
See the border-bottom-style property definition in CSS2
See the border-left-style property definition in CSS2
See the border-left-style property definition in CSS2
See the border-top-width property definition in CSS2
See the border-top-width property definition in CSS2
See the border-right-width property definition in CSS2
See the border-right-width property definition in CSS2
See the border-bottom-width property definition in CSS2
See the border-bottom-width property definition in CSS2
See the border-left-width property definition in CSS2
See the border-left-width property definition in CSS2
See the border-width property definition in CSS2
See the border-width property definition in CSS2
See the bottom property definition in CSS2
See the bottom property definition in CSS2
See the caption-side property definition in CSS2
See the caption-side property definition in CSS2
See the clear property definition in CSS2
See the clear property definition in CSS2
See the clip property definition in CSS2
See the clip property definition in CSS2
See the color property definition in CSS2
See the color property definition in CSS2
See the content property definition in CSS2
See the content property definition in CSS2
See the counter-increment property definition in CSS2
See the counter-increment property definition in CSS2
See the counter-reset property definition in CSS2
See the counter-reset property definition in CSS2
See the cue property definition in CSS2
See the cue property definition in CSS2
See the cue-after property definition in CSS2
See the cue-after property definition in CSS2
See the cue-before property definition in CSS2
See the cue-before property definition in CSS2
See the cursor property definition in CSS2
See the cursor property definition in CSS2
See the direction property definition in CSS2
See the direction property definition in CSS2
See the display property definition in CSS2
See the display property definition in CSS2
See the elevation property definition in CSS2
See the elevation property definition in CSS2
See the empty-cells property definition in CSS2
See the empty-cells property definition in CSS2
See the float property definition in CSS2
See the float property definition in CSS2
See the font property definition in CSS2
See the font property definition in CSS2
See the font-family property definition in CSS2
See the font-family property definition in CSS2
See the font-size property definition in CSS2
See the font-size property definition in CSS2
See the font-size-adjust property definition in CSS2
See the font-size-adjust property definition in CSS2
See the font-stretch property definition in CSS2
See the font-stretch property definition in CSS2
See the font-style property definition in CSS2
See the font-style property definition in CSS2
See the font-variant property definition in CSS2
See the font-variant property definition in CSS2
See the font-weight property definition in CSS2
See the font-weight property definition in CSS2
See the height property definition in CSS2
See the height property definition in CSS2
See the left property definition in CSS2
See the left property definition in CSS2
See the letter-spacing property definition in CSS2
See the letter-spacing property definition in CSS2
See the line-height property definition in CSS2
See the line-height property definition in CSS2
See the list-style property definition in CSS2
See the list-style property definition in CSS2
See the list-style-image property definition in CSS2
See the list-style-image property definition in CSS2
See the list-style-position property definition in CSS2
See the list-style-position property definition in CSS2
See the list-style-type property definition in CSS2
See the list-style-type property definition in CSS2
See the margin property definition in CSS2
See the margin property definition in CSS2
See the margin-top property definition in CSS2
See the margin-top property definition in CSS2
See the margin-right property definition in CSS2
See the margin-right property definition in CSS2
See the margin-bottom property definition in CSS2
See the margin-bottom property definition in CSS2
See the margin-left property definition in CSS2
See the margin-left property definition in CSS2
See the marker-offset property definition in CSS2
See the marker-offset property definition in CSS2
See the marks property definition in CSS2
See the marks property definition in CSS2
See the max-height property definition in CSS2
See the max-height property definition in CSS2
See the max-width property definition in CSS2
See the max-width property definition in CSS2
See the min-height property definition in CSS2
See the min-height property definition in CSS2
See the min-width property definition in CSS2
See the min-width property definition in CSS2
See the orphans property definition in CSS2
See the orphans property definition in CSS2
See the outline property definition in CSS2
See the outline property definition in CSS2
See the outline-color property definition in CSS2
See the outline-color property definition in CSS2
See the outline-style property definition in CSS2
See the outline-style property definition in CSS2
See the outline-width property definition in CSS2
See the outline-width property definition in CSS2
See the overflow property definition in CSS2
See the overflow property definition in CSS2
See the padding property definition in CSS2
See the padding property definition in CSS2
See the padding-top property definition in CSS2
See the padding-top property definition in CSS2
See the padding-right property definition in CSS2
See the padding-right property definition in CSS2
See the padding-bottom property definition in CSS2
See the padding-bottom property definition in CSS2
See the padding-left property definition in CSS2
See the padding-left property definition in CSS2
See the page property definition in CSS2
See the page property definition in CSS2
See the page-break-after property definition in CSS2
See the page-break-after property definition in CSS2
See the page-break-before property definition in CSS2
See the page-break-before property definition in CSS2
See the page-break-inside property definition in CSS2
See the page-break-inside property definition in CSS2
See the pause property definition in CSS2
See the pause property definition in CSS2
See the pause-after property definition in CSS2
See the pause-after property definition in CSS2
See the pause-before property definition in CSS2
See the pause-before property definition in CSS2
See the pitch property definition in CSS2
See the pitch property definition in CSS2
See the pitch-range property definition in CSS2
See the pitch-range property definition in CSS2
See the play-during property definition in CSS2
See the play-during property definition in CSS2
See the position property definition in CSS2
See the position property definition in CSS2
See the quotes property definition in CSS2
See the quotes property definition in CSS2
See the richness property definition in CSS2
See the richness property definition in CSS2
See the right property definition in CSS2
See the right property definition in CSS2
See the size property definition in CSS2
See the size property definition in CSS2
See the speak property definition in CSS2
See the speak property definition in CSS2
See the speak-header property definition in CSS2
See the speak-header property definition in CSS2
See the speak-numeral property definition in CSS2
See the speak-numeral property definition in CSS2
See the speak-punctuation property definition in CSS2
See the speak-punctuation property definition in CSS2
See the speech-rate property definition in CSS2
See the speech-rate property definition in CSS2
See the stress property definition in CSS2
See the stress property definition in CSS2
See the table-layout property definition in CSS2
See the table-layout property definition in CSS2
See the text-align property definition in CSS2
See the text-align property definition in CSS2
See the text-decoration property definition in CSS2
See the text-decoration property definition in CSS2
See the text-indent property definition in CSS2
See the text-indent property definition in CSS2
See the text-shadow property definition in CSS2
See the text-shadow property definition in CSS2
See the text-transform property definition in CSS2
See the text-transform property definition in CSS2
See the top property definition in CSS2
See the top property definition in CSS2
See the unicode-bidi property definition in CSS2
See the unicode-bidi property definition in CSS2
See the vertical-align property definition in CSS2
See the vertical-align property definition in CSS2
See the visibility property definition in CSS2
See the visibility property definition in CSS2
See the voice-family property definition in CSS2
See the voice-family property definition in CSS2
See the volume property definition in CSS2
See the volume property definition in CSS2
See the white-space property definition in CSS2
See the white-space property definition in CSS2
See the widows property definition in CSS2
See the widows property definition in CSS2
See the width property definition in CSS2
See the width property definition in CSS2
See the word-spacing property definition in CSS2
See the word-spacing property definition in CSS2
See the z-index property definition in CSS2
See the z-index property definition in CSS2
The encoding information used in this <code>@charset</code> rule
The encoding information used in this <code>@charset</code> rule
The declaration-block of this rule
The location of the style sheet to be imported
A list of media types for which this style sheet may be used
The style sheet referred to by this rule, if it has been loaded
A list of media types for this rule
A list of all CSS rules contained within the media block
Used to insert a new rule into the media block
Used to delete a rule from the media block
The parsable textual representation of the page selector for the rule
The parsable textual representation of the page selector for the rule
The declaration-block of this rule
The type of the value as defined by the constants specified above
A method to set the float value with a specified unit
This method is used to get a float value in a specified unit
A method to set the string value with the specified unit
This method is used to get the string value
This method is used to get the Counter value
This method is used to get the Rect value
This method is used to get the RGB color
The type of the rule, as defined above
The parsable textual representation of the rule
The parsable textual representation of the rule
The style sheet that contains this rule
If this rule is contained inside another rule (e
The number of <code>CSSRules</code> in the list
Used to retrieve a CSS rule by ordinal index
The parsable textual representation of the declaration block (excluding the surrounding curly braces)
The parsable textual representation of the declaration block (excluding the surrounding curly braces)
Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block
Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block
Used to remove a CSS property if it has been explicitly set within this declaration block
Used to retrieve the priority of a CSS property (e
Used to set a property value and priority within this declaration block
The number of properties that have been explicitly set in this declaration block
Used to retrieve the properties that have been explicitly set in this declaration block
The CSS rule that contains this declaration block or <code>null</code> if this <code>CSSStyleDeclaration</code> is not attached to a <code>CSSRule</code>
The textual representation of the selector for the rule set
The textual representation of the selector for the rule set
The declaration-block of this rule set
If this style sheet comes from an <code>@import</code> rule, the <code>ownerRule</code> attribute will contain the <code>CSSImportRule</code>
The list of all CSS rules contained within the style sheet
Used to insert a new rule into the style sheet
Used to delete a rule from the style sheet
A string representation of the current value
A string representation of the current value
A code defining the type of the value as defined above
The number of <code>CSSValues</code> in the list
Used to retrieve a <code>CSSValue</code> by ordinal index
Returns the X coordinate of the start point in double precision
Returns the Y coordinate of the start point in double precision
Returns the start point
Returns the X coordinate of the first control point in double precision
Returns the Y coordinate of the first control point in double precision
Returns the first control point
Returns the X coordinate of the second control point in double precision
Returns the Y coordinate of the second control point in double precision
Returns the second control point
Returns the X coordinate of the end point in double precision
Returns the Y coordinate of the end point in double precision
Returns the end point
Sets the location of the end points and control points of this curve to the specified double coordinates
Sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array
Sets the location of the end points and control points of this curve to the specified <code>Point2D</code> coordinates
Sets the location of the end points and control points of this curve to the coordinates of the <code>Point2D</code> objects at the specified offset in the specified array
Sets the location of the end points and control points of this curve to the same as those in the specified <code>CubicCurve2D</code>
Returns the square of the flatness of the cubic curve specified by the indicated control points
Returns the flatness of the cubic curve specified by the indicated control points
Returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index
Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index
Returns the square of the flatness of this curve
Returns the flatness of this curve
Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters
Subdivides the cubic curve specified by the <code>src</code> parameter and stores the resulting two subdivided curves into the <code>left</code> and <code>right</code> curve parameters
Subdivides the cubic curve specified by the coordinates stored in the <code>src</code> array at indices <code>srcoff</code> through (<code>srcoff</code>&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
Solves the cubic whose coefficients are in the <code>eqn</code> array and places the non-complex roots back into the same array, returning the number of roots
Solve the cubic whose coefficients are in the <code>eqn</code> array and place the non-complex roots into the <code>res</code> array, returning the number of roots
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iteration object that defines the boundary of the shape
Return an iteration object that defines the boundary of the flattened shape
Creates a new object of the same class as this object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location of the end points and control points of this curve to the specified {@code float} coordinates
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the <code>Currency</code> instance for the given currency code
Returns the <code>Currency</code> instance for the country of the given locale
Gets the set of available currencies
Gets the ISO 4217 currency code of this currency
Gets the symbol of this currency for the default {@link Locale
Gets the symbol of this currency for the specified locale
Gets the default number of fraction digits used with this currency
Returns the ISO 4217 numeric code of this currency
Gets the name that is suitable for displaying this currency for the default {@link Locale
Gets the name that is suitable for displaying this currency for the specified locale
Returns the ISO 4217 currency code of this currency
Gets the symbol of the given currency code for the specified locale
Returns a name for the currency that is appropriate for display to the user
Returns reference to the POA implementing the  object in whose context it is called
Returns the ObjectId identifying the object in  whose context it is called
Returns a cursor object with the specified predefined type
Returns a system-specific custom cursor object matching the specified name
Return the system default cursor
Returns the type for this cursor
Returns the name of this cursor
Returns a string representation of this cursor
Set the object to be customized
Register a listener for the PropertyChange event
Remove a listener for the PropertyChange event
Marshal method has to be implemented by the Customized Marshal class
Unmarshal method has to be implemented by the Customized Marshal class
Returns the number of parties required to trip this barrier
Waits until all {@linkplain #getParties parties} have invoked {@code await} on this barrier
Waits until all {@linkplain #getParties parties} have invoked {@code await} on this barrier, or the specified waiting time elapses
Queries if this barrier is in a broken state
Resets the barrier to its initial state
Returns the number of parties currently waiting at the barrier
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Retrieves whether the current user can call all the procedures returned by the method <code>getProcedures</code>
Retrieves whether the current user can use all the tables returned by the method <code>getTables</code> in a <code>SELECT</code> statement
Retrieves the URL for this DBMS
Retrieves the user name as known to this database
Retrieves whether this database is in read-only mode
Retrieves whether <code>NULL</code> values are sorted high
Retrieves whether <code>NULL</code> values are sorted low
Retrieves whether <code>NULL</code> values are sorted at the start regardless of sort order
Retrieves whether <code>NULL</code> values are sorted at the end regardless of sort order
Retrieves the name of this database product
Retrieves the version number of this database product
Retrieves the name of this JDBC driver
Retrieves the version number of this JDBC driver as a <code>String</code>
Retrieves this JDBC driver's major version number
Retrieves this JDBC driver's minor version number
Retrieves whether this database stores tables in a local file
Retrieves whether this database uses a file for each table
Retrieves whether this database treats mixed case unquoted SQL identifiers as case sensitive and as a result stores them in mixed case
Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in upper case
Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in lower case
Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in mixed case
Retrieves whether this database treats mixed case quoted SQL identifiers as case sensitive and as a result stores them in mixed case
Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in upper case
Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in lower case
Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in mixed case
Retrieves the string used to quote SQL identifiers
Retrieves a comma-separated list of all of this database's SQL keywords that are NOT also SQL:2003 keywords
Retrieves a comma-separated list of math functions available with this database
Retrieves a comma-separated list of string functions available with this database
Retrieves a comma-separated list of system functions available with this database
Retrieves a comma-separated list of the time and date functions available with this database
Retrieves the string that can be used to escape wildcard characters
Retrieves all the "extra" characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _)
Retrieves whether this database supports <code>ALTER TABLE</code> with add column
Retrieves whether this database supports <code>ALTER TABLE</code> with drop column
Retrieves whether this database supports column aliasing
Retrieves whether this database supports concatenations between <code>NULL</code> and non-<code>NULL</code> values being <code>NULL</code>
Retrieves whether this database supports the JDBC scalar function <code>CONVERT</code> for the conversion of one JDBC type to another
Retrieves whether this database supports the JDBC scalar function <code>CONVERT</code> for conversions between the JDBC types <i>fromType</i> and <i>toType</i>
Retrieves whether this database supports table correlation names
Retrieves whether, when table correlation names are supported, they are restricted to being different from the names of the tables
Retrieves whether this database supports expressions in <code>ORDER BY</code> lists
Retrieves whether this database supports using a column that is not in the <code>SELECT</code> statement in an <code>ORDER BY</code> clause
Retrieves whether this database supports some form of <code>GROUP BY</code> clause
Retrieves whether this database supports using a column that is not in the <code>SELECT</code> statement in a <code>GROUP BY</code> clause
Retrieves whether this database supports using columns not included in the <code>SELECT</code> statement in a <code>GROUP BY</code> clause provided that all of the columns in the <code>SELECT</code> statement are included in the <code>GROUP BY</code> clause
Retrieves whether this database supports specifying a <code>LIKE</code> escape clause
Retrieves whether this database supports getting multiple <code>ResultSet</code> objects from a single call to the method <code>execute</code>
Retrieves whether this database allows having multiple transactions open at once (on different connections)
Retrieves whether columns in this database may be defined as non-nullable
Retrieves whether this database supports the ODBC Minimum SQL grammar
Retrieves whether this database supports the ODBC Core SQL grammar
Retrieves whether this database supports the ODBC Extended SQL grammar
Retrieves whether this database supports the ANSI92 entry level SQL grammar
Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported
Retrieves whether this database supports the ANSI92 full SQL grammar supported
Retrieves whether this database supports the SQL Integrity Enhancement Facility
Retrieves whether this database supports some form of outer join
Retrieves whether this database supports full nested outer joins
Retrieves whether this database provides limited support for outer joins
Retrieves the database vendor's preferred term for "schema"
Retrieves the database vendor's preferred term for "procedure"
Retrieves the database vendor's preferred term for "catalog"
Retrieves whether a catalog appears at the start of a fully qualified table name
Retrieves the <code>String</code> that this database uses as the separator between a catalog and table name
Retrieves whether a schema name can be used in a data manipulation statement
Retrieves whether a schema name can be used in a procedure call statement
Retrieves whether a schema name can be used in a table definition statement
Retrieves whether a schema name can be used in an index definition statement
Retrieves whether a schema name can be used in a privilege definition statement
Retrieves whether a catalog name can be used in a data manipulation statement
Retrieves whether a catalog name can be used in a procedure call statement
Retrieves whether a catalog name can be used in a table definition statement
Retrieves whether a catalog name can be used in an index definition statement
Retrieves whether a catalog name can be used in a privilege definition statement
Retrieves whether this database supports positioned <code>DELETE</code> statements
Retrieves whether this database supports positioned <code>UPDATE</code> statements
Retrieves whether this database supports <code>SELECT FOR UPDATE</code> statements
Retrieves whether this database supports stored procedure calls that use the stored procedure escape syntax
Retrieves whether this database supports subqueries in comparison expressions
Retrieves whether this database supports subqueries in <code>EXISTS</code> expressions
Retrieves whether this database supports subqueries in <code>IN</code> expressions
Retrieves whether this database supports subqueries in quantified expressions
Retrieves whether this database supports correlated subqueries
Retrieves whether this database supports SQL <code>UNION</code>
Retrieves whether this database supports SQL <code>UNION ALL</code>
Retrieves whether this database supports keeping cursors open across commits
Retrieves whether this database supports keeping cursors open across rollbacks
Retrieves whether this database supports keeping statements open across commits
Retrieves whether this database supports keeping statements open across rollbacks
Retrieves the maximum number of hex characters this database allows in an inline binary literal
Retrieves the maximum number of characters this database allows for a character literal
Retrieves the maximum number of characters this database allows for a column name
Retrieves the maximum number of columns this database allows in a <code>GROUP BY</code> clause
Retrieves the maximum number of columns this database allows in an index
Retrieves the maximum number of columns this database allows in an <code>ORDER BY</code> clause
Retrieves the maximum number of columns this database allows in a <code>SELECT</code> list
Retrieves the maximum number of columns this database allows in a table
Retrieves the maximum number of concurrent connections to this database that are possible
Retrieves the maximum number of characters that this database allows in a cursor name
Retrieves the maximum number of bytes this database allows for an index, including all of the parts of the index
Retrieves the maximum number of characters that this database allows in a schema name
Retrieves the maximum number of characters that this database allows in a procedure name
Retrieves the maximum number of characters that this database allows in a catalog name
Retrieves the maximum number of bytes this database allows in a single row
Retrieves whether the return value for the method <code>getMaxRowSize</code> includes the SQL data types <code>LONGVARCHAR</code> and <code>LONGVARBINARY</code>
Retrieves the maximum number of characters this database allows in an SQL statement
Retrieves the maximum number of active statements to this database that can be open at the same time
Retrieves the maximum number of characters this database allows in a table name
Retrieves the maximum number of tables this database allows in a <code>SELECT</code> statement
Retrieves the maximum number of characters this database allows in a user name
Retrieves this database's default transaction isolation level
Retrieves whether this database supports transactions
Retrieves whether this database supports the given transaction isolation level
Retrieves whether this database supports both data definition and data manipulation statements within a transaction
Retrieves whether this database supports only data manipulation statements within a transaction
Retrieves whether a data definition statement within a transaction forces the transaction to commit
Retrieves whether this database ignores a data definition statement within a transaction
Retrieves a description of the stored procedures available in the given catalog
Retrieves a description of the given catalog's stored procedure parameter and result columns
Retrieves a description of the tables available in the given catalog
Retrieves the schema names available in this database
Retrieves the catalog names available in this database
Retrieves the table types available in this database
Retrieves a description of table columns available in the specified catalog
Retrieves a description of the access rights for a table's columns
Retrieves a description of the access rights for each table available in a catalog
Retrieves a description of a table's optimal set of columns that uniquely identifies a row
Retrieves a description of a table's columns that are automatically updated when any value in a row is updated
Retrieves a description of the given table's primary key columns
Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table)
Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table)
Retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table)
Retrieves a description of all the data types supported by this database
Retrieves a description of the given table's indices and statistics
Retrieves whether this database supports the given result set type
Retrieves whether this database supports the given concurrency type in combination with the given result set type
Retrieves whether for the given type of <code>ResultSet</code> object, the result set's own updates are visible
Retrieves whether a result set's own deletes are visible
Retrieves whether a result set's own inserts are visible
Retrieves whether updates made by others are visible
Retrieves whether deletes made by others are visible
Retrieves whether inserts made by others are visible
Retrieves whether or not a visible row update can be detected by calling the method <code>ResultSet
Retrieves whether or not a visible row delete can be detected by calling the method <code>ResultSet
Retrieves whether or not a visible row insert can be detected by calling the method <code>ResultSet
Retrieves whether this database supports batch updates
Retrieves a description of the user-defined types (UDTs) defined in a particular schema
Retrieves the connection that produced this metadata object
Retrieves whether this database supports savepoints
Retrieves whether this database supports named parameters to callable statements
Retrieves whether it is possible to have multiple <code>ResultSet</code> objects returned from a <code>CallableStatement</code> object simultaneously
Retrieves whether auto-generated keys can be retrieved after a statement has been executed
Retrieves a description of the user-defined type (UDT) hierarchies defined in a particular schema in this database
Retrieves a description of the table hierarchies defined in a particular schema in this database
Retrieves a description of the given attribute of the given type for a user-defined type (UDT) that is available in the given schema and catalog
Retrieves whether this database supports the given result set holdability
Retrieves this database's default holdability for <code>ResultSet</code> objects
Retrieves the major version number of the underlying database
Retrieves the minor version number of the underlying database
Retrieves the major JDBC version number for this driver
Retrieves the minor JDBC version number for this driver
Indicates whether the SQLSTATE returned by <code>SQLException
Indicates whether updates made to a LOB are made on a copy or directly to the LOB
Retrieves whether this database supports statement pooling
Indicates whether or not this data source supports the SQL <code>ROWID</code> type, and if so  the lifetime for which a <code>RowId</code> object remains valid
Retrieves the schema names available in this database
Retrieves whether this database supports invoking user-defined or vendor functions using the stored procedure escape syntax
Retrieves whether a <code>SQLException</code> while autoCommit is <code>true</code> indicates that all open ResultSets are closed, even ones that are holdable
Retrieves a list of the client info properties that the driver supports
Retrieves a description of the  system and user functions available in the given catalog
Retrieves a description of the given catalog's system or user function parameters and return type
Retrieves a description of the pseudo or hidden columns available in a given table within the specified catalog and schema
Retrieves whether a generated key will always be returned if the column name(s) or index(es) specified for the auto generated key column(s) are valid and the statement succeeds
Retrieves the maximum number of bytes this database allows for the logical size for a {@code LOB}
Retrieves whether this database supports REF CURSOR
Returns the size (in bits) of the data type, given a datatype tag
Returns the data type of this DataBuffer
Returns the size (in array elements) of all banks
Returns the offset of the default bank in array elements
Returns the offsets (in array elements) of all the banks
Returns the number of banks in this DataBuffer
Returns the requested data array element from the first (default) bank as an integer
Returns the requested data array element from the specified bank as an integer
Sets the requested data array element in the first (default) bank from the given integer
Sets the requested data array element in the specified bank from the given integer
Returns the requested data array element from the first (default) bank as a float
Returns the requested data array element from the specified bank as a float
Sets the requested data array element in the first (default) bank from the given float
Sets the requested data array element in the specified bank from the given float
Returns the requested data array element from the first (default) bank as a double
Returns the requested data array element from the specified bank as a double
Sets the requested data array element in the first (default) bank from the given double
Sets the requested data array element in the specified bank from the given double
Returns the default (first) byte data array
Returns the data array for the specified bank
Returns the data arrays for all banks
Returns the requested data array element from the first (default) bank
Returns the requested data array element from the specified bank
Sets the requested data array element in the first (default) bank to the specified value
Sets the requested data array element in the specified bank from the given integer
Returns the default (first) <code>double</code> data array
Returns the data array for the specified bank
Returns the data array for all banks
Returns the requested data array element from the first (default) bank as an <code>int</code>
Returns the requested data array element from the specified bank as an <code>int</code>
Sets the requested data array element in the first (default) bank to the given <code>int</code>
Sets the requested data array element in the specified bank to the given <code>int</code>
Returns the requested data array element from the first (default) bank as a <code>float</code>
Returns the requested data array element from the specified bank as a <code>float</code>
Sets the requested data array element in the first (default) bank to the given <code>float</code>
Sets the requested data array element in the specified bank to the given <code>float</code>
Returns the requested data array element from the first (default) bank as a <code>double</code>
Returns the requested data array element from the specified bank as a <code>double</code>
Sets the requested data array element in the first (default) bank to the given <code>double</code>
Sets the requested data array element in the specified bank to the given <code>double</code>
Returns the default (first) <code>float</code> data array
Returns the data array for the specified bank
Returns the data array for all banks
Returns the requested data array element from the first (default) bank as an <code>int</code>
Returns the requested data array element from the specified bank as an <code>int</code>
Sets the requested data array element in the first (default) bank to the given <code>int</code>
Sets the requested data array element in the specified bank to the given <code>int</code>
Returns the requested data array element from the first (default) bank as a <code>float</code>
Returns the requested data array element from the specified bank as a <code>float</code>
Sets the requested data array element in the first (default) bank to the given <code>float</code>
Sets the requested data array element in the specified bank to the given <code>float</code>
Returns the requested data array element from the first (default) bank as a <code>double</code>
Returns the requested data array element from the specified bank as a <code>double</code>
Sets the requested data array element in the first (default) bank to the given <code>double</code>
Sets the requested data array element in the specified bank to the given <code>double</code>
Returns the default (first) int data array in <CODE>DataBuffer</CODE>
Returns the data array for the specified bank
Returns the data arrays for all banks
Returns the requested data array element from the first (default) bank
Returns the requested data array element from the specified bank
Sets the requested data array element in the first (default) bank to the specified value
Sets the requested data array element in the specified bank to the integer value <CODE>i</CODE>
Returns the default (first) byte data array
Returns the data array for the specified bank
Returns the data arrays for all banks
Returns the requested data array element from the first (default) bank
Returns the requested data array element from the specified bank
Sets the requested data array element in the first (default) bank to the specified value
Sets the requested data array element in the specified bank from the given integer
Returns the default (first) unsigned-short data array
Returns the data array for the specified bank
Returns the data arrays for all banks
Returns the requested data array element from the first (default) bank
Returns the requested data array element from the specified bank
Sets the requested data array element in the first (default) bank to the specified value
Sets the requested data array element in the specified bank from the given integer
Return true iff this DataCollector was created from applet data
Return true iff the local host and ORB initial host are the same
Set the parser which is used to obtain property names
Return the consolidated property information to be used for ORB configuration
Tries to load a class from: the bootstrap loader, the system loader, the context loader (if one is present) and finally the loader specified
String representation of this <code>DataFlavor</code> and its parameters
Returns a <code>DataFlavor</code> representing plain text with Unicode encoding, where: <pre>     representationClass = java
Selects the best text <code>DataFlavor</code> from an array of <code> DataFlavor</code>s
Gets a Reader for a text flavor, decoded, if necessary, for the expected charset (encoding)
Returns the MIME type string for this <code>DataFlavor</code>
Returns the <code>Class</code> which objects supporting this <code>DataFlavor</code> will return when this <code>DataFlavor</code> is requested
Returns the human presentable name for the data format that this <code>DataFlavor</code> represents
Returns the primary MIME type for this <code>DataFlavor</code>
Returns the sub MIME type of this <code>DataFlavor</code>
Returns the human presentable name for this <code>DataFlavor</code> if <code>paramName</code> equals "humanPresentableName"
Sets the human presentable name for the data format that this <code>DataFlavor</code> represents
{@inheritDoc} <p> The equals comparison for the {@code DataFlavor} class is implemented as follows: Two <code>DataFlavor</code>s are considered equal if and only if their MIME primary type and subtype and representation class are equal
This method has the same behavior as {@link #equals(Object)}
Compares only the <code>mimeType</code> against the passed in <code>String</code> and <code>representationClass</code> is not considered in the comparison
Returns hash code for this <code>DataFlavor</code>
Identical to {@link #equals(DataFlavor)}
Returns whether the string representation of the MIME type passed in is equivalent to the MIME type of this <code>DataFlavor</code>
Compares the <code>mimeType</code> of two <code>DataFlavor</code> objects
Does the <code>DataFlavor</code> represent a serialized object?
Does the <code>DataFlavor</code> represent a <code>java
Returns whether the representation class for this <code>DataFlavor</code> is <code>java
Returns whether the representation class for this <code>DataFlavor</code> is <code>java
Returns whether the representation class for this <code>DataFlavor</code> is <code>java
Returns true if the representation class can be serialized
Returns true if the representation class is <code>Remote</code>
Returns true if the <code>DataFlavor</code> specified represents a serialized object
Returns true if the <code>DataFlavor</code> specified represents a remote object
Returns true if the <code>DataFlavor</code> specified represents a list of file objects
Returns whether this <code>DataFlavor</code> is a valid text flavor for this implementation of the Java platform
Serializes this <code>DataFlavor</code>
Restores this <code>DataFlavor</code> from a Serialized state
Returns a clone of this <code>DataFlavor</code>
Called on <code>DataFlavor</code> for every MIME Type parameter to allow <code>DataFlavor</code> subclasses to handle special parameters like the text/plain <code>charset</code> parameters, whose values are case insensitive
Called for each MIME type string to give <code>DataFlavor</code> subtypes the opportunity to change how the normalization of MIME types is accomplished
Opens a datagram channel
Opens a datagram channel
Returns an operation set identifying this channel's supported operations
Retrieves a datagram socket associated with this channel
Tells whether or not this channel's socket is connected
Connects this channel's socket
Disconnects this channel's socket
Returns the remote address to which this channel's socket is connected
Receives a datagram via this channel
Sends a datagram via this channel
Reads a datagram from this channel
Reads a datagram from this channel
Reads a datagram from this channel
Writes a datagram to this channel
Writes a datagram to this channel
Writes a datagram to this channel
{@inheritDoc} <p> If there is a security manager set, its {@code checkConnect} method is called with the local address and {@code -1} as its arguments to see if the operation is allowed
Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received
Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received
Returns the data buffer
Returns the offset of the data to be sent or the offset of the data received
Returns the length of the data to be sent or the length of the data received
Set the data buffer for this packet
Sets the IP address of the machine to which this datagram is being sent
Sets the port number on the remote host to which this datagram is being sent
Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent
Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from
Set the data buffer for this packet
Set the length for this packet
Binds this DatagramSocket to a specific address and port
Connects the socket to a remote address for this socket
Connects this socket to a remote socket address (IP address + port number)
Disconnects the socket
Returns the binding state of the socket
Returns the connection state of the socket
Returns the address to which this socket is connected
Returns the port number to which this socket is connected
Returns the address of the endpoint this socket is connected to, or {@code null} if it is unconnected
Returns the address of the endpoint this socket is bound to
Sends a datagram packet from this socket
Receives a datagram packet from this socket
Gets the local address to which the socket is bound
Returns the port number on the local host to which this socket is bound
Enable/disable SO_TIMEOUT with the specified timeout, in  milliseconds
Retrieve setting for SO_TIMEOUT
Sets the SO_SNDBUF option to the specified value for this {@code DatagramSocket}
Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the buffer size used by the platform for output on this {@code DatagramSocket}
Sets the SO_RCVBUF option to the specified value for this {@code DatagramSocket}
Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the buffer size used by the platform for input on this {@code DatagramSocket}
Enable/disable the SO_REUSEADDR socket option
Tests if SO_REUSEADDR is enabled
Enable/disable SO_BROADCAST
Tests if SO_BROADCAST is enabled
Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket
Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket
Closes this datagram socket
Returns whether the socket is closed or not
Returns the unique {@link java
Sets the datagram socket implementation factory for the application
Creates a datagram socket
Binds a datagram socket to a local port and address
Sends a datagram packet
Connects a datagram socket to a remote destination
Disconnects a datagram socket from its remote destination
Peek at the packet to see who it is from
Peek at the packet to see who it is from
Receive the datagram packet
Set the TTL (time-to-live) option
Retrieve the TTL (time-to-live) option
Set the TTL (time-to-live) option
Retrieve the TTL (time-to-live) option
Join the multicast group
Leave the multicast group
Join the multicast group
Leave the multicast group
Close the socket
Gets the local port
Gets the datagram socket file descriptor
Creates a new {@code DatagramSocketImpl} instance
Reads some bytes from an input stream and stores them into the buffer array {@code b}
Reads {@code len} bytes from an input stream
Makes an attempt to skip over {@code n} bytes of data from the input stream, discarding the skipped bytes
Reads one input byte and returns {@code true} if that byte is nonzero, {@code false} if that byte is zero
Reads and returns one input byte
Reads one input byte, zero-extends it to type {@code int}, and returns the result, which is therefore in the range {@code 0} through {@code 255}
Reads two input bytes and returns a {@code short} value
Reads two input bytes and returns an {@code int} value in the range {@code 0} through {@code 65535}
Reads two input bytes and returns a {@code char} value
Reads four input bytes and returns an {@code int} value
Reads eight input bytes and returns a {@code long} value
Reads four input bytes and returns a {@code float} value
Reads eight input bytes and returns a {@code double} value
Reads the next line of text from the input stream
Reads in a string that has been encoded using a <a href="#modified-utf-8">modified UTF-8</a> format
Reads an IDL <code>Any</code> value from the input stream
Reads an IDL boolean value from the input stream
Reads an IDL character value from the input stream
Reads an IDL wide character value from the input stream
Reads an IDL octet value from the input stream
Reads an IDL short from the input stream
Reads an IDL unsigned short from the input stream
Reads an IDL long from the input stream
Reads an IDL unsigned long from the input stream
Reads an IDL long long from the input stream
Reads an unsigned IDL long long from the input stream
Reads an IDL float from the input stream
Reads an IDL double from the input stream
Reads an IDL string from the input stream
Reads an IDL wide string from the input stream
Reads an IDL CORBA::Object from the input stream
Reads an IDL Abstract interface from the input stream
Reads an IDL value type from the input stream
Reads an IDL typecode from the input stream
Reads array of IDL Anys from offset for length elements from the input stream
Reads array of IDL booleans from offset for length elements from the input stream
Reads array of IDL characters from offset for length elements from the input stream
Reads array of IDL wide characters from offset for length elements from the input stream
Reads array of IDL octets from offset for length elements from the input stream
Reads array of IDL shorts from offset for length elements from the input stream
Reads array of IDL unsigned shorts from offset for length elements from the input stream
Reads array of IDL longs from offset for length elements from the input stream
Reads array of IDL unsigned longs from offset for length elements from the input stream
Reads array of IDL unsigned long longs from offset for length elements from the input stream
Reads array of IDL long longs from offset for length elements from the input stream
Reads array of IDL floats from offset for length elements from the input stream
Reads array of IDL doubles from offset for length elements from the input stream
Drains queued data from the line by continuing data I/O until the data line's internal buffer has been emptied
Flushes queued data from the line
Allows a line to engage in data I/O
Stops the line
Indicates whether the line is running
Indicates whether the line is engaging in active I/O (such as playback or capture)
Obtains the current format (encoding, sample rate, number of channels, etc
Obtains the maximum number of bytes of data that will fit in the data line's internal buffer
Obtains the number of bytes of data currently available to the application for processing in the data line's internal buffer
Obtains the current position in the audio data, in sample frames
Obtains the current position in the audio data, in sample frames
Obtains the current position in the audio data, in microseconds
Obtains the current volume level for the line
Obtains a set of audio formats supported by the data line
Indicates whether this data line supports a particular audio format
Obtains the minimum buffer size supported by the data line
Obtains the maximum buffer size supported by the data line
Determines whether the specified info object matches this one
Obtains a textual description of the data line info
Writes to the output stream the eight low-order bits of the argument <code>b</code>
Writes to the output stream all the bytes in array <code>b</code>
Writes <code>len</code> bytes from array <code>b</code>, in order,  to the output stream
Writes a <code>boolean</code> value to this output stream
Writes to the output stream the eight low- order bits of the argument <code>v</code>
Writes two bytes to the output stream to represent the value of the argument
Writes a <code>char</code> value, which is comprised of two bytes, to the output stream
Writes an <code>int</code> value, which is comprised of four bytes, to the output stream
Writes a <code>long</code> value, which is comprised of eight bytes, to the output stream
Writes a <code>float</code> value, which is comprised of four bytes, to the output stream
Writes a <code>double</code> value, which is comprised of eight bytes, to the output stream
Writes a string to the output stream
Writes every character in the string <code>s</code>, to the output stream, in order, two bytes per character
Writes two bytes of length information to the output stream, followed by the <a href="DataInput
Writes the Any value to the output stream
Writes the boolean value to the output stream
Writes the IDL character value to the output stream
Writes the IDL wide character value to the output stream
Writes the IDL octet value (represented as a Java byte) to the output stream
Writes the IDL short value to the output stream
Writes the IDL unsigned short value (represented as a Java short value) to the output stream
Writes the IDL long value (represented as a Java int) to the output stream
Writes the IDL unsigned long value (represented as a Java int) to the output stream
Writes the IDL long long value (represented as a Java long) to the output stream
Writes the IDL unsigned long long value (represented as a Java long) to the output stream
Writes the IDL float value to the output stream
Writes the IDL double value to the output stream
Writes the IDL string value to the output stream
Writes the IDL wide string value (represented as a Java String) to the output stream
Writes the IDL CORBA::Object value to the output stream
Writes the IDL Abstract interface type to the output stream
Writes the IDL value type value to the output stream
Writes the typecode to the output stream
Writes the array of IDL Anys from offset for length elements to the output stream
Writes the array of IDL booleans from offset for length elements to the output stream
Writes the array of IDL characters from offset for length elements to the output stream
Writes the array of IDL wide characters from offset for length elements to the output stream
Writes the array of IDL octets from offset for length elements to the output stream
Writes the array of IDL shorts from offset for length elements to the output stream
Writes the array of IDL unsigned shorts (represented as Java shorts) from offset for length elements to the output stream
Writes the array of IDL longs from offset for length elements to the output stream
Writes the array of IDL unsigned longs (represented as Java ints) from offset for length elements to the output stream
Writes the array of IDL unsigned long longs (represented as Java longs) from offset for length elements to the output stream
Writes the array of IDL long longs from offset for length elements to the output stream
Writes the array of IDL floats from offset for length elements to the output stream
Writes the array of IDL doubles from offset for length elements to the output stream
<p>Attempts to establish a connection with the data source that this {@code DataSource} object represents
<p>Attempts to establish a connection with the data source that this {@code DataSource} object represents
Retrieves the index of the column or parameter that was truncated
Indicates whether the value truncated was a parameter value or a column value
Indicates whether or not the value was truncated on a read
Gets the number of bytes of data that should have been transferred
Gets the number of bytes of data actually transferred
Returns a field name in English
<p>Get id of this Field
This method is for JAXB provider use only
<p> Convert the lexical XSD string argument into a String value
<p> Convert the string argument into a BigInteger value
<p> Convert the string argument into an int value
<p> Converts the string argument into a long value
<p> Converts the string argument into a short value
<p> Converts the string argument into a BigDecimal value
<p> Converts the string argument into a float value
<p> Converts the string argument into a double value
<p> Converts the string argument into a boolean value
<p> Converts the string argument into a byte value
<p> Converts the string argument into a byte value
<p> Converts the string argument into a Calendar value
<p> Converts the string argument into an array of bytes
<p> Converts the string argument into an array of bytes
<p> Converts the string argument into a long value
<p> Converts the string argument into an int value
<p> Converts the string argument into a Calendar value
<p> Converts the string argument into a Calendar value
<p> Return a string containing the lexical representation of the simple type
<p> Converts the string argument into a string
<p> Converts a BigInteger value into a string
<p> Converts an int value into a string
<p> Converts A long value into a string
<p> Converts a short value into a string
<p> Converts a BigDecimal value into a string
<p> Converts a float value into a string
<p> Converts a double value into a string
<p> Converts a boolean value into a string
<p> Converts a byte value into a string
<p> Converts a QName instance into a string
<p> Converts a Calendar value into a string
<p> Converts an array of bytes into a string
<p> Converts an array of bytes into a string
<p> Converts a long value into a string
<p> Converts an int value into a string
<p> Converts a Calendar value into a string
<p> Converts a Calendar value into a string
<p> Converts a string value into a string
<p> Convert the string argument into a string
<p> Convert the string argument into a BigInteger value
<p> Convert the string argument into an int value
<p> Converts the string argument into a long value
<p> Converts the string argument into a short value
<p> Converts the string argument into a BigDecimal value
<p> Converts the string argument into a float value
<p> Converts the string argument into a double value
<p> Converts the string argument into a boolean value
<p> Converts the string argument into a byte value
<p> Converts the string argument into a QName value
<p> Converts the string argument into a Calendar value
<p> Converts the string argument into an array of bytes
<p> Converts the string argument into an array of bytes
<p> Converts the string argument into a long value
<p> Converts the string argument into an int value
<p> Converts the string argument into a Calendar value
<p> Converts the string argument into a Calendar value
<p> Return a string containing the lexical representation of the simple type
<p> Converts the string argument into a string
<p> Converts a BigInteger value into a string
<p> Converts an int value into a string
<p> Converts a long value into a string
<p> Converts a short value into a string
<p> Converts a BigDecimal value into a string
<p> Converts a float value into a string
<p> Converts a double value into a string
<p> Converts a boolean value into a string
<p> Converts a byte value into a string
<p> Converts a QName instance into a string
<p> Converts a Calendar value into a string
<p> Converts an array of bytes into a string
<p> Converts an array of bytes into a string
<p> Converts a long value into a string
<p> Converts an int value into a string
<p> Converts a Calendar value into a string
<p> Converts a Calendar value into a string
<p> Converts a string value into a string
Return the error code
Return the list of error arguments
Overrides this method to get the formatted&localized error message
<p>Obtain a new instance of a <code>DatatypeFactory</code>
<p>Obtain a new instance of a <code>DatatypeFactory</code> from class name
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as its string representation, "PnYnMnDTnHnMnS", as defined in XML Schema 1
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as milliseconds
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation, "<em>PnDTnHnMnS</em>", <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation, "<em>PnYnM</em>", <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in <a href="http://www
<p>Create a new instance of an <code>XMLGregorianCalendar</code>
<p>Create a new XMLGregorianCalendar by parsing the String as a lexical representation
<p>Create an <code>XMLGregorianCalendar</code> from a {@link GregorianCalendar}
<p>Constructor allowing for complete value spaces allowed by W3C XML Schema 1
<p>Constructor of value spaces that a <code>java
<p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>
<p>Create a Java instance of XML Schema builtin datatype <code>time</code>
<p>Create a Java instance of XML Schema builtin datatype time
<p>Create a Java instance of XML Schema builtin datatype time
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as its string representation, "PnYnMnDTnHnMnS", as defined in XML Schema 1
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as milliseconds
<p>Obtain a new instance of a <code>Duration</code> specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified <code>year</code> and <code>month</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation, "<em>PnYnM</em>", <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation, "<em>PnDTnHnMnS</em>", <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in <a href="http://www
<p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in <a href="http://www
<p>Create a new instance of an <code>XMLGregorianCalendar</code>
<p>Create a new XMLGregorianCalendar by parsing the String as a lexical representation
<p>Create an <code>XMLGregorianCalendar</code> from a {@link GregorianCalendar}
<p>Constructor allowing for complete value spaces allowed by W3C XML Schema 1
Formats a message with the specified arguments using the given locale information
validate a given string against this DV
Return a copy of this object
Determines the date and time based on the arguments
Attempts to interpret the string <tt>s</tt> as a representation of a date and time
Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this <code>Date</code> object, as interpreted in the local time zone
Sets the year of this <tt>Date</tt> object to be the specified value plus 1900
Returns a number representing the month that contains or begins with the instant in time represented by this <tt>Date</tt> object
Sets the month of this date to the specified value
Returns the day of the month represented by this <tt>Date</tt> object
Sets the day of the month of this <tt>Date</tt> object to the specified value
Returns the day of the week represented by this date
Returns the hour represented by this <tt>Date</tt> object
Sets the hour of this <tt>Date</tt> object to the specified value
Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone
Sets the minutes of this <tt>Date</tt> object to the specified value
Returns the number of seconds past the minute represented by this date
Sets the seconds of this <tt>Date</tt> to the specified value
Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this <tt>Date</tt> object
Sets this <code>Date</code> object to represent a point in time that is <code>time</code> milliseconds after January 1, 1970 00:00:00 GMT
Tests if this date is before the specified date
Tests if this date is after the specified date
Compares two dates for equality
Compares two Dates for ordering
Returns a hash code value for this object
Converts this <code>Date</code> object to a <code>String</code> of the form: <blockquote><pre> dow mon dd hh:mm:ss zzz yyyy</pre></blockquote> where:<ul> <li><tt>dow</tt> is the day of the week (<tt>Sun, Mon, Tue, Wed,     Thu, Fri, Sat</tt>)
Creates a string representation of this <tt>Date</tt> object in an implementation-dependent form
Creates a string representation of this <tt>Date</tt> object of the form: <blockquote><pre> d mon yyyy hh:mm:ss GMT</pre></blockquote> where:<ul> <li><i>d</i> is the day of the month (<tt>1</tt> through <tt>31</tt>),     as one or two decimal digits
Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this <code>Date</code> object
Obtains an instance of {@code Date} from an {@code Instant} object
Converts this {@code Date} object to an {@code Instant}
Parses, validates and computes normalized version of dateTime object
Overrides Format
Formats a Date into a date/time string
Formats a Date into a date/time string
Parses text from the beginning of the given string to produce a date
Parse a date/time string according to the given parse position
Parses text from a string to produce a <code>Date</code>
Gets the time formatter with the default formatting style for the default {@link java
Gets the time formatter with the given formatting style for the default {@link java
Gets the time formatter with the given formatting style for the given locale
Gets the date formatter with the default formatting style for the default {@link java
Gets the date formatter with the given formatting style for the default {@link java
Gets the date formatter with the given formatting style for the given locale
Gets the date/time formatter with the default formatting style for the default {@link java
Gets the date/time formatter with the given date and time formatting styles for the default {@link java
Gets the date/time formatter with the given formatting styles for the given locale
Get a default date/time formatter that uses the SHORT style for both the date and the time
Returns an array of all locales for which the <code>get*Instance</code> methods of this class can return localized instances
Set the calendar to be used by this date format
Gets the calendar associated with this date/time formatter
Allows you to set the number formatter
Gets the number formatter which this date/time formatter uses to format and parse a time
Sets the time zone for the calendar of this {@code DateFormat} object
Gets the time zone
Specify whether or not date/time parsing is to be lenient
Tell whether date/time parsing is to be lenient
Overrides hashCode
Overrides equals
Overrides Cloneable
Returns the <code>Field</code> constant that corresponds to the <code>Calendar</code> constant <code>calendarField</code>
Returns the <code>Calendar</code> field associated with this attribute
Resolves instances being deserialized to the predefined constants
Returns a new <code>DateFormat</code> instance which formats time with the given formatting style for the specified locale
Returns a new <code>DateFormat</code> instance which formats date with the given formatting style for the specified locale
Returns a new <code>DateFormat</code> instance which formats date and time with the given formatting style for the specified locale
Returns an array of all locales for which the <code>getInstance</code> methods of this class can return localized instances
Gets the <code>DateFormatSymbols</code> instance for the default locale
Gets the <code>DateFormatSymbols</code> instance for the specified locale
Gets era strings
Sets era strings
Gets month strings
Sets month strings
Gets short month strings
Sets short month strings
Gets weekday strings
Sets weekday strings
Gets short weekday strings
Sets short weekday strings
Gets ampm strings
Sets ampm strings
Gets time zone strings
Sets time zone strings
Gets localized date-time pattern characters
Sets localized date-time pattern characters
Overrides Cloneable
Override hashCode
Override equals
Returns a new <code>DateFormatSymbols</code> instance for the specified locale
Sets the format that dictates the legal values that can be edited and displayed
Returns whether this date-time at completed attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this date-time at creation attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this date-time at processing attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Parses, validates and computes normalized version of dateTime object
Creates a formatter using the specified pattern
Creates a formatter using the specified pattern and locale
Returns a locale specific date format for the ISO chronology
Returns a locale specific time format for the ISO chronology
Returns a locale specific date-time formatter for the ISO chronology
Returns a locale specific date and time format for the ISO chronology
A query that provides access to the excess days that were parsed
A query that provides access to whether a leap-second was parsed
Gets the locale to be used during formatting
Returns a copy of this formatter with a new locale
Gets the DecimalStyle to be used during formatting
Returns a copy of this formatter with a new DecimalStyle
Gets the overriding chronology to be used during formatting
Returns a copy of this formatter with a new override chronology
Gets the overriding zone to be used during formatting
Returns a copy of this formatter with a new override zone
Gets the resolver style to use during parsing
Returns a copy of this formatter with a new resolver style
Gets the resolver fields to use during parsing
Returns a copy of this formatter with a new set of resolver fields
Returns a copy of this formatter with a new set of resolver fields
Formats a date-time object using this formatter
Formats a date-time object to an {@code Appendable} using this formatter
Fully parses the text producing a temporal object
Parses the text using this formatter, providing control over the text position
Fully parses the text producing an object of the specified type
Fully parses the text producing an object of one of the specified types
Parses the text using this formatter, without resolving the result, intended for advanced use cases
Returns this formatter as a {@code java
Returns this formatter as a {@code java
Returns a description of the underlying formatters
Gets the formatting pattern for date and time styles for a locale and chronology
Changes the parse style to be case sensitive for the remainder of the formatter
Changes the parse style to be case insensitive for the remainder of the formatter
Changes the parse style to be strict for the remainder of the formatter
Changes the parse style to be lenient for the remainder of the formatter
Appends a default value for a field to the formatter for use in parsing
Appends the value of a date-time field to the formatter using a normal output style
Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach
Appends the value of a date-time field to the formatter providing full control over formatting
Appends the reduced value of a date-time field to the formatter
Appends the reduced value of a date-time field to the formatter
Appends the fractional value of a date-time field to the formatter
Appends the text of a date-time field to the formatter using the full text style
Appends the text of a date-time field to the formatter
Appends the text of a date-time field to the formatter using the specified map to supply the text
Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three
Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits
Appends the zone offset, such as '+01:00', to the formatter
Appends the zone offset, such as '+01:00', to the formatter
Appends the localized zone offset, such as 'GMT+01:00', to the formatter
Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter
Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a {@code ZoneOffset}
Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID
Appends the time-zone name, such as 'British Summer Time', to the formatter
Appends the time-zone name, such as 'British Summer Time', to the formatter
Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter
Appends the chronology name to the formatter
Appends a localized date-time pattern to the formatter
Appends a character literal to the formatter
Appends a string literal to the formatter
Appends all the elements of a formatter to the builder
Appends a formatter to the builder which will optionally format/parse
Appends the elements defined by the specified pattern to the builder
Causes the next added printer/parser to pad to a fixed width using a space
Causes the next added printer/parser to pad to a fixed width
Mark the start of an optional section
Ends an optional section
Completes this builder by creating the {@code DateTimeFormatter} using the default locale
Completes this builder by creating the {@code DateTimeFormatter} using the specified locale
Returns the string that was being parsed
Returns the index where the error was found
Returns this date-time attribute's <code>java
Returns whether this date-time attribute is equivalent to the passed in object
Returns a hash code value for this date-time attribute
Returns a string value corresponding to this date-time attribute
Parses, validates and computes normalized version of gDay object
Converts gDay object representation to String
Obtains an instance of {@code DayOfWeek} from an {@code int} value
Obtains an instance of {@code DayOfWeek} from a temporal object
Gets the day-of-week {@code int} value
Gets the textual representation, such as 'Mon' or 'Friday'
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this day-of-week as an {@code int}
Gets the value of the specified field from this day-of-week as a {@code long}
Returns the day-of-week that is the specified number of days after this one
Returns the day-of-week that is the specified number of days before this one
Queries this day-of-week using the specified query
Adjusts the specified temporal object to have this day-of-week
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Set the debug level for future messages
Get the current debug level
Print debug message (if the debug level is high enough)
Print debug message (if the debug level is high enough)
Print debug message (if the debug level is high enough)
Overrides <code>Graphics
Overrides <code>Graphics
Sets the Color used to flash drawing operations
Returns the Color used to flash drawing operations
Sets the time delay of drawing operation flashing
Returns the time delay of drawing operation flashing
Sets the number of times that drawing operations will flash
Returns the number of times that drawing operations will flash
Sets the stream to which the DebugGraphics logs drawing operations
Returns the stream to which the DebugGraphics logs drawing operations
Sets the Font used for text drawing operations
Returns the Font used for text drawing operations
Sets the color to be used for drawing and filling lines and shapes
Returns the Color used for text drawing operations
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Overrides <code>Graphics
Returns the drawingBuffer value
Enables/disables diagnostic information about every graphics operation
Returns the current debugging options for this DebugGraphics
Formats a number and appends the resulting text to the given string buffer
Formats a double to produce a string
Format a long to produce a string
Formats an Object producing an <code>AttributedCharacterIterator</code>
Parses text from a string to produce a <code>Number</code>
Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user
Sets the decimal format symbols, which is generally not changed by the programmer or user
Get the positive prefix
Set the positive prefix
Get the negative prefix
Set the negative prefix
Get the positive suffix
Set the positive suffix
Get the negative suffix
Set the negative suffix
Gets the multiplier for use in percent, per mille, and similar formats
Sets the multiplier for use in percent, per mille, and similar formats
{@inheritDoc}
Return the grouping size
Set the grouping size
Allows you to get the behavior of the decimal separator with integers
Allows you to set the behavior of the decimal separator with integers
Returns whether the {@link #parse(java
Sets whether the {@link #parse(java
Standard override; no change in semantics
Overrides equals
Overrides hashCode
Synthesizes a pattern string that represents the current state of this Format object
Synthesizes a localized pattern string that represents the current state of this Format object
Apply the given pattern to this Format object
Apply the given pattern to this Format object
Sets the maximum number of digits allowed in the integer portion of a number
Sets the minimum number of digits allowed in the integer portion of a number
Sets the maximum number of digits allowed in the fraction portion of a number
Sets the minimum number of digits allowed in the fraction portion of a number
Gets the maximum number of digits allowed in the integer portion of a number
Gets the minimum number of digits allowed in the integer portion of a number
Gets the maximum number of digits allowed in the fraction portion of a number
Gets the minimum number of digits allowed in the fraction portion of a number
Gets the currency used by this decimal format when formatting currency values
Sets the currency used by this number format when formatting currency values
Gets the {@link java
Sets the {@link java
Returns an array of all locales for which the <code>getInstance</code> methods of this class can return localized instances
Gets the <code>DecimalFormatSymbols</code> instance for the default locale
Gets the <code>DecimalFormatSymbols</code> instance for the specified locale
Gets the character used for zero
Sets the character used for zero
Gets the character used for thousands separator
Sets the character used for thousands separator
Gets the character used for decimal sign
Sets the character used for decimal sign
Gets the character used for per mille sign
Sets the character used for per mille sign
Gets the character used for percent sign
Sets the character used for percent sign
Gets the character used for a digit in a pattern
Sets the character used for a digit in a pattern
Gets the character used to separate positive and negative subpatterns in a pattern
Sets the character used to separate positive and negative subpatterns in a pattern
Gets the string used to represent infinity
Sets the string used to represent infinity
Gets the string used to represent "not a number"
Sets the string used to represent "not a number"
Gets the character used to represent minus sign
Sets the character used to represent minus sign
Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale
Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale
Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols
Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols
Gets the currency of these DecimalFormatSymbols
Sets the currency of these DecimalFormatSymbols
Returns the monetary decimal separator
Sets the monetary decimal separator
Returns the string used to separate the mantissa from the exponent
Sets the string used to separate the mantissa from the exponent
Standard override
Override equals
Override hashCode
Returns a new <code>DecimalFormatSymbols</code> instance for the specified locale
Lists all the locales that are supported
Obtains the DecimalStyle for the default {@link java
Obtains the DecimalStyle for the specified locale
Gets the character that represents zero
Returns a copy of the info with a new character that represents zero
Gets the character that represents the positive sign
Returns a copy of the info with a new character that represents the positive sign
Gets the character that represents the negative sign
Returns a copy of the info with a new character that represents the negative sign
Gets the character that represents the decimal point
Returns a copy of the info with a new character that represents the decimal point
Checks if this DecimalStyle is equal to another DecimalStyle
A hash code for this DecimalStyle
Returns a string describing this DecimalStyle
Returns the element corresponding to this type
Returns the type of the innermost enclosing instance or a {@code NoType} of kind {@code NONE} if there is no enclosing instance
Returns the actual type arguments of this type
Report an element type declaration
Report an attribute type declaration
Report an internal entity declaration
Report a parsed external entity declaration
Returns the length of the node list
Returns the node at the specified index
Iterative tree-walker
Returns the model's current value
Returns the model's extent
Returns the model's minimum
Returns the model's maximum
Sets the current value of the model
Sets the extent to <I>n</I> after ensuring that <I>n</I> is greater than or equal to zero and falls within the model's constraints: <pre>     minimum &lt;= value &lt;= value+extent &lt;= maximum </pre>
Sets the minimum to <I>n</I> after ensuring that <I>n</I> that the other three properties obey the model's constraints: <pre>     minimum &lt;= value &lt;= value+extent &lt;= maximum </pre>
Sets the maximum to <I>n</I> after ensuring that <I>n</I> that the other three properties obey the model's constraints: <pre>     minimum &lt;= value &lt;= value+extent &lt;= maximum </pre>
Sets the <code>valueIsAdjusting</code> property
Returns true if the value is in the process of changing as a result of actions being taken by the user
Sets all of the <code>BoundedRangeModel</code> properties after forcing the arguments to obey the usual constraints: <pre>     minimum &lt;= value &lt;= value+extent &lt;= maximum </pre> <p> At most, one <code>ChangeEvent</code> is generated
Adds a <code>ChangeListener</code>
Removes a <code>ChangeListener</code>
Returns an array of all the change listeners registered on this <code>DefaultBoundedRangeModel</code>
Runs each <code>ChangeListener</code>'s <code>stateChanged</code> method
Returns a string that displays all of the <code>BoundedRangeModel</code> properties
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an array of all the change listeners registered on this <code>DefaultButtonModel</code>
Notifies all listeners that have registered interest for notification on this event type
{@inheritDoc}
{@inheritDoc}
Returns an array of all the action listeners registered on this <code>DefaultButtonModel</code>
Notifies all listeners that have registered interest for notification on this event type
{@inheritDoc}
{@inheritDoc}
Returns an array of all the item listeners registered on this <code>DefaultButtonModel</code>
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Overridden to return <code>null</code>
{@inheritDoc}
Returns the group that the button belongs to
Sets the caret movement policy on the document updates
Gets the caret movement policy on document updates
Gets the text editor component that this caret is is bound to
Cause the caret to be painted
Damages the area surrounding the caret to cause it to be repainted in a new location
Scrolls the associated view (if necessary) to make the caret visible
Gets the painter for the Highlighter
Tries to set the position of the caret from the coordinates of a mouse event, using viewToModel()
Tries to move the position of the caret from the coordinates of a mouse event, using viewToModel()
Called when the component containing the caret gains focus
Called when the component containing the caret loses focus
Called when the mouse is clicked
If button 1 is pressed, this is implemented to request focus on the associated text component, and to set the caret position
Called when the mouse is released
Called when the mouse enters a region
Called when the mouse exits a region
Moves the caret position according to the mouse pointer's current location
Called when the mouse is moved
Renders the caret as a vertical line
Called when the UI is being installed into the interface of a JTextComponent
Called when the UI is being removed from the interface of a JTextComponent
Adds a listener to track whenever the caret position has been changed
Removes a listener that was tracking caret position changes
Returns an array of all the change listeners registered on this caret
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this caret
Changes the selection visibility
Checks whether the current selection is visible
Determines if the caret is currently active
Indicates whether or not the caret is currently visible
Sets the caret visibility, and repaints the caret
Sets the caret blink rate
Gets the caret blink rate
Fetches the current position of the caret
Fetches the current position of the mark
Sets the caret position and mark to the specified position, with a forward bias
Moves the caret position to the specified position, with a forward bias
Moves the caret position to the specified position, with the specified bias
Sets the caret position and mark to the specified position, with the specified bias
Returns the bias of the caret position
Returns the bias of the mark
Saves the current caret position
Gets the saved caret position
Compares this object to the specified object
Returns a reference to the editor component
Specifies the number of clicks needed to start editing
Returns the number of clicks needed to start editing
Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>
Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>
Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>
Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>
Forwards the message from the <code>CellEditor</code> to the <code>delegate</code>
Implements the <code>TreeCellEditor</code> interface
Implements the <code>TableCellEditor</code> interface
Returns the value of this cell
Sets the value of this cell
Returns true if <code>anEvent</code> is <b>not</b> a <code>MouseEvent</code>
Returns true to indicate that the editing cell may be selected
Returns true to indicate that editing has begun
Stops editing and returns true to indicate that editing has stopped
Cancels editing
When an action is performed, editing is ended
When an item's state changes, editing is ended
Returns the selected <code>Color</code> which should be non-<code>null</code>
Sets the selected color to <code>color</code>
Adds a <code>ChangeListener</code> to the model
Removes a <code>ChangeListener</code> from the model
Returns an array of all the <code>ChangeListener</code>s added to this <code>DefaultColorSelectionModel</code> with <code>addChangeListener</code>
Runs each <code>ChangeListener</code>'s <code>stateChanged</code> method
Set the value of the selected item
Returns the index-position of the specified object in the list
Empties the list
Normally this method will not be called
Removes the frame, and, if necessary, the <code>desktopIcon</code>, from its parent
Resizes the frame to fill its parents bounds
Restores the frame back to its size and position prior to a <code>maximizeFrame</code> call
Removes the frame from its parent and adds its <code>desktopIcon</code> to the parent
Removes the desktopIcon from its parent and adds its frame to the parent
This will activate <b>f</b> moving it to the front
Moves the visible location of the frame being dragged to the location specified
Calls <code>setBoundsForFrame</code> with the new values
This moves the <code>JComponent</code> and repaints the damaged areas
Convenience method to remove the desktopIcon of <b>f</b> is necessary
The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon
Stores the bounds of the component just before a maximize call
Gets the normal bounds of the component prior to the component being maximized
Sets that the component has been iconized and the bounds of the <code>desktopIcon</code> are valid
Returns <code>true</code> if the component has been iconized and the bounds of the <code>desktopIcon</code> are valid, otherwise returns <code>false</code>
public void setInputEncoding(String actualEncoding){       throw new DOMException(DOMException
An attribute specifying, as part of the XML declaration, whether this document is standalone
An attribute specifying, as part of the XML declaration, whether this document is standalone
An attribute specifying, as part of the XML declaration, the version number of this document
An attribute specifying, as part of the XML declaration, the version number of this document
An attribute specifying whether errors checking is enforced or not
An attribute specifying whether errors checking is enforced or not
The location of the document or <code>null</code> if undefined
The location of the document or <code>null</code> if undefined
DOM Level 3
DOM Level 3
The configuration used when <code>Document
DOM Level 3
Gets the MIME type of the data that this kit represents support for
Fetches a factory that is suitable for producing views of any models that are produced by this kit
Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit
Fetches a caret that can navigate through views produced by the associated ViewFactory
Creates an uninitialized text storage model (PlainDocument) that is appropriate for this type of editor
Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler
Writes content from a document to the given stream in a format appropriate for this kind of content handler
Inserts content from the given stream, which will be treated as plain text
Writes content from a document to the given stream as plain text
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
The operation to perform when this action is triggered
Receive notification of a warning
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Receive notification of a warning
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Determines whether a Component is an acceptable choice as the new focus owner
Installs the <code>DefaultFormatter</code> onto a particular <code>JFormattedTextField</code>
Sets when edits are published back to the <code>JFormattedTextField</code>
Returns when edits are published back to the <code>JFormattedTextField</code>
Configures the behavior when inserting characters
Returns the behavior when inserting characters
Sets whether or not the value being edited is allowed to be invalid for a length of time (that is, <code>stringToValue</code> throws a <code>ParseException</code>)
Returns whether or not the value being edited is allowed to be invalid for a length of time
Sets that class that is used to create new Objects
Returns that class that is used to create new Objects
Converts the passed in String into an instance of <code>getValueClass</code> by way of the constructor that takes a String argument
Converts the passed in Object into a String by way of the <code>toString</code> method
Returns the <code>DocumentFilter</code> used to restrict the characters that can be input into the <code>JFormattedTextField</code>
Returns the <code>NavigationFilter</code> used to restrict where the cursor can be placed
Creates a copy of the DefaultFormatter
Sets the <code>JFormattedTextField
Returns the <code>JFormattedTextField
Sets the <code>JFormattedTextField
Returns the <code>JFormattedTextField
Sets the <code>JFormattedTextField
Returns the <code>JFormattedTextField
Sets the formatter to use if the value of the JFormattedTextField is null
Returns the formatter to use if the value is null
Returns either the default formatter, display formatter, editor formatter or null formatter based on the state of the JFormattedTextField
Resolve an external entity
Receive notification of a notation declaration
Receive notification of an unparsed entity declaration
Receive a Locator object for document events
Receive notification of the beginning of the document
Receive notification of the end of the document
Receive notification of the start of a Namespace mapping
Receive notification of the end of a Namespace mapping
Receive notification of the start of an element
Receive notification of the end of an element
Receive notification of character data inside an element
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Receive notification of a skipped entity
Receive notification of a parser warning
Receive notification of a recoverable parser error
Report a fatal XML parsing error
Tells the parser that if no external subset has been declared in the document text, none should be used
Tells the parser to resolve the systemId against the baseURI and read the entity text from that resulting absolute URI
Invokes {@link EntityResolver2#resolveEntity EntityResolver2
Renders the highlights
Called when the UI is being installed into the interface of a JTextComponent
Called when the UI is being removed from the interface of a JTextComponent
Adds a highlight to the view
Removes a highlight from the view
Removes all highlights
Changes a highlight
Makes a copy of the highlights
When leaf Views (such as LabelView) are rendering they should call into this method
If true, highlights are drawn as the Views draw the text
Returns the color of the highlight
Paints a highlight
Paints a portion of a highlight
This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf
Called by <code>dispatchEvent</code> if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered
This method will be called by <code>dispatchKeyEvent</code>
This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent
Delays dispatching of KeyEvents until the specified Component becomes the focus owner
Releases for normal dispatching to the current focus owner all KeyEvents which were enqueued because of a call to <code>enqueueKeyEvents</code> with the same timestamp and Component
Discards all KeyEvents which were enqueued because of one or more calls to <code>enqueueKeyEvents</code> with the specified Component, or one of its descendants
Focuses the Component before aComponent, typically based on a FocusTraversalPolicy
Focuses the Component after aComponent, typically based on a FocusTraversalPolicy
Moves the focus up one focus traversal cycle
Moves the focus down one focus traversal cycle
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Returns the number of components in this list
Returns the component at the specified index
Copies the components of this list into the specified array
Trims the capacity of this list to be the list's current size
Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument
Sets the size of this list
Returns the current capacity of this list
Returns the number of components in this list
Tests whether this list has any components
Returns an enumeration of the components of this list
Tests whether the specified object is a component in this list
Searches for the first occurrence of <code>elem</code>
Searches for the first occurrence of <code>elem</code>, beginning the search at <code>index</code>
Returns the index of the last occurrence of <code>elem</code>
Searches backwards for <code>elem</code>, starting from the specified index, and returns an index to it
Returns the component at the specified index
Returns the first component of this list
Returns the last component of the list
Sets the component at the specified <code>index</code> of this list to be the specified element
Deletes the component at the specified index
Inserts the specified element as a component in this list at the specified <code>index</code>
Adds the specified component to the end of this list
Removes the first (lowest-indexed) occurrence of the argument from this list
Removes all components from this list and sets its size to zero
Returns a string that displays and identifies this object's properties
Returns an array containing all of the elements in this list in the correct order
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Removes all of the elements from this list
Deletes the components at the specified range of indexes
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an array of all the list selection listeners registered on this <code>DefaultListSelectionModel</code>
Notifies listeners that we have ended a series of adjustments
Notifies <code>ListSelectionListeners</code> that the value of the selection, in the closed interval <code>firstIndex</code>, <code>lastIndex</code>, has changed
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Sets the value of the leadAnchorNotificationEnabled flag
Returns the value of the <code>leadAnchorNotificationEnabled</code> flag
{@inheritDoc}
Changes the selection to be between {@code index0} and {@code index1} inclusive
Changes the selection to be the set union of the current selection and the indices between {@code index0} and {@code index1} inclusive
Changes the selection to be the set difference of the current selection and the indices between {@code index0} and {@code index1} inclusive
Insert length indices beginning before/after index
Remove the indices in the interval index0,index1 (inclusive) from the selection model
{@inheritDoc}
Returns a string that displays and identifies this object's properties
Returns a clone of this selection model with the same selection
{@inheritDoc}
{@inheritDoc}
Set the anchor selection index, leaving all selection values unchanged
Set the lead selection index, leaving all selection values unchanged
Sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected
Go through the list of class loaders and try to load the requested class
Go through the list of class loaders but exclude the given class loader, then try to load the requested class
<p>Return the {@link java
<p>Return the named {@link java
Returns the name of this theme
Returns the primary 1 color
Returns the primary 2 color
Returns the primary 3 color
Returns the secondary 1 color
Returns the secondary 2 color
Returns the secondary 3 color
Returns the control text font
Returns the system text font
Returns the user text font
Returns the menu text font
Returns the window title font
Returns the sub-text font
Removes <code>newChild</code> from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index <code>childIndex</code>
Removes the child at the specified index from this node's children and sets that node's parent to null
Sets this node's parent to <code>newParent</code> but does not change the parent's child array
Returns this node's parent or null if this node has no parent
Returns the child at the specified index in this node's child array
Returns the number of children of this node
Returns the index of the specified child in this node's child array
Creates and returns a forward-order enumeration of this node's children
Determines whether or not this node is allowed to have children
Returns true if this node is allowed to have children
Sets the user object for this node to <code>userObject</code>
Returns this node's user object
Removes the subtree rooted at this node from the tree, giving this node a null parent
Removes <code>aChild</code> from this node's child array, giving it a null parent
Removes all of this node's children, setting their parents to null
Removes <code>newChild</code> from its parent and makes it a child of this node by adding it to the end of this node's child array
Returns true if <code>anotherNode</code> is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent
Returns true if <code>anotherNode</code> is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children
Returns the nearest common ancestor to this node and <code>aNode</code>
Returns true if and only if <code>aNode</code> is in the same tree as this node
Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf
Returns the number of levels above this node -- the distance from the root to this node
Returns the path from the root, to get to this node
Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
Returns the user object path, from the root, to get to this node
Returns the root of the tree that contains this node
Returns true if this node is the root of the tree
Returns the node that follows this node in a preorder traversal of this node's tree
Returns the node that precedes this node in a preorder traversal of this node's tree
Creates and returns an enumeration that traverses the subtree rooted at this node in preorder
Creates and returns an enumeration that traverses the subtree rooted at this node in postorder
Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order
Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order
Creates and returns an enumeration that follows the path from <code>ancestor</code> to this node
Returns true if <code>aNode</code> is a child of this node
Returns this node's first child
Returns this node's last child
Returns the child in this node's child array that immediately follows <code>aChild</code>, which must be a child of this node
Returns the child in this node's child array that immediately precedes <code>aChild</code>, which must be a child of this node
Returns true if <code>anotherNode</code> is a sibling of (has the same parent as) this node
Returns the number of siblings of this node
Returns the next sibling of this node in the parent's children array
Returns the previous sibling of this node in the parent's children array
Returns true if this node has no children
Finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf
Finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf
Returns the leaf after this node or null if this node is the last leaf in the tree
Returns the leaf before this node or null if this node is the first leaf in the tree
Returns the total number of leaves that are descendants of this node
Returns the result of sending <code>toString()</code> to this node's user object, or the empty string if the node has no user object
Overridden to make clone public
Get the converter for the given Java type, creating it if necessary
Utility method to take a string and convert it to normal Java variable name capitalization
DOM Level 3
Returns the installation directory for Java DMK
Returns the installation directory for Java DMK concatenated with dirname
Sets the installation directory for Java DMK
Returns the <CODE>etc</CODE> directory for Java DMK
Returns the <CODE>etc</CODE> directory for Java DMK concatenated with dirname
Sets the <CODE>etc</CODE> directory for Java DMK
Returns the <CODE>tmp</CODE> directory for the product
Returns the <CODE>tmp</CODE> directory for Java DMK concatenated with dirname
Sets the <CODE>tmp</CODE> directory for the product
If the number of arguments in the specified constructor is non-zero and the class of <code>oldInstance</code> explicitly declares an "equals" method this method returns the value of <code>oldInstance
This default implementation of the <code>instantiate</code> method returns an expression containing the predefined method name "new" which denotes a call to a constructor with the arguments as specified in the <code>DefaultPersistenceDelegate</code>'s constructor
This default implementation of the <code>initialize</code> method assumes all state held in objects of this type is exposed via the matching pairs of "setter" and "getter" methods in the order they are returned by the Introspector
Sets the model wrapper providing the data that is being sorted and filtered
Returns the model wrapper providing the data that is being sorted and filtered
Returns the underlying model
Sets whether or not the specified column is sortable
Returns true if the specified column is sortable; otherwise, false
Sets the sort keys
Returns the current sort keys
Sets the maximum number of sort keys
Returns the maximum number of sort keys
If true, specifies that a sort should happen when the underlying model is updated (<code>rowsUpdated</code> is invoked)
Returns true if  a sort should happen when the underlying model is updated; otherwise, returns false
Sets the filter that determines which rows, if any, should be hidden from the view
Returns the filter that determines which rows, if any, should be hidden from view
Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order
{@inheritDoc}
{@inheritDoc}
Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter
Returns whether or not to convert the value to a string before doing comparisons when sorting
Sets the <code>Comparator</code> to use when sorting the specified column
Returns the <code>Comparator</code> for the specified column
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the underlying model that this <code>Model</code> is wrapping
Returns the number of columns in the model
Returns the number of rows in the model
Returns the value at the specified index
Returns the value as a <code>String</code> at the specified index
Returns the identifier for the specified row
Adds a <code>ChangeListener</code> to the button
Removes a <code>ChangeListener</code> from the button
Returns an array of all the change listeners registered on this <code>DefaultSingleSelectionModel</code>
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Gets the default root element
Initialize the document to reflect the given element structure (i
Inserts new elements in bulk
Removes an element from this document
Adds a new style into the logical style hierarchy
Removes a named style previously added to the document
Fetches a named style previously added
Fetches the list of of style names
Sets the logical style to use for the paragraph at the given position
Fetches the logical style assigned to the paragraph represented by the given position
Sets attributes for some part of the document
Sets attributes for a paragraph
Gets the paragraph element at the offset <code>pos</code>
Gets a character element based on a position
Updates document structure as a result of text insertion
Updates document structure as a result of text removal
Creates the root element to be used to represent the default document structure
Gets the foreground color from an attribute set
Gets the background color from an attribute set
Gets the font from an attribute set
Called when any of this document's styles have changed
Adds a document listener for notification of any changes
Removes a document listener
Gets the name of the element
Sets the element type
Gets the element type
Sets the direction
Gets the direction
Gets the element attributes
Gets the array of characters
Gets the starting offset
Gets the length
Converts the element to a string
Gets the root element
Inserts new content
Removes content
Changes content
Inserts an update into the document
Updates the element structure in response to a removal from the associated sequence in the document
Updates the element structure in response to a change in the document
Creates a copy of this element, with a different parent
Redoes a change
Undoes a change
Overrides <code>JComponent
Overrides <code>JComponent
Notification from the <code>UIManager</code> that the look and feel [L&amp;F] has changed
Returns the default table cell renderer
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Sets the <code>String</code> object for the cell being rendered to <code>value</code>
Appends <code>aColumn</code> to the end of the  <code>tableColumns</code> array
Deletes the <code>column</code> from the  <code>tableColumns</code> array
Moves the column and heading at <code>columnIndex</code> to <code>newIndex</code>
Sets the column margin to <code>newMargin</code>
Returns the number of columns in the <code>tableColumns</code> array
Returns an <code>Enumeration</code> of all the columns in the model
Returns the index of the first column in the <code>tableColumns</code> array whose identifier is equal to <code>identifier</code>, when compared using <code>equals</code>
Returns the <code>TableColumn</code> object for the column at <code>columnIndex</code>
Returns the width margin for <code>TableColumn</code>
Returns the index of the column that lies at position <code>x</code>, or -1 if no column covers this point
Returns the total combined width of all columns
Sets the selection model for this <code>TableColumnModel</code>  to <code>newModel</code>  and registers for listener notifications from the new selection  model
Returns the <code>ListSelectionModel</code> that is used to maintain column selection state
Sets whether column selection is allowed
Returns true if column selection is allowed, otherwise false
Returns an array of selected columns
Returns the number of columns selected
Adds a listener for table column model events
Removes a listener for table column model events
Returns an array of all the column model listeners registered on this model
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Property Change Listener change method
A <code>ListSelectionListener</code> that forwards <code>ListSelectionEvents</code> when there is a column selection change
Creates a new default list selection model
Recalculates the total combined width of all columns
Returns the <code>Vector</code> of <code>Vectors</code>  that contains the table's  data values
Replaces the current <code>dataVector</code> instance variable  with the new <code>Vector</code> of rows, <code>dataVector</code>
Replaces the value in the <code>dataVector</code> instance  variable with the values in the array <code>dataVector</code>
Equivalent to <code>fireTableChanged</code>
Ensures that the new rows have the correct number of columns
Equivalent to <code>fireTableChanged</code>
Obsolete as of Java 2 platform v1
Sets the number of rows in the model
Adds a row to the end of the model
Adds a row to the end of the model
Inserts a row at <code>row</code> in the model
Inserts a row at <code>row</code> in the model
Moves one or more rows from the inclusive range <code>start</code> to  <code>end</code> to the <code>to</code> position in the model
Removes the row at <code>row</code> from the model
Replaces the column identifiers in the model
Replaces the column identifiers in the model
Sets the number of columns in the model
Adds a column to the model
Adds a column to the model
Adds a column to the model
Returns the number of rows in this data table
Returns the number of columns in this data table
Returns the column name
Returns true regardless of parameter values
Returns an attribute value for the cell at <code>row</code> and <code>column</code>
Sets the object value for the cell at <code>column</code> and <code>row</code>
Returns a vector that contains the same objects as the array
Returns a vector of vectors that contains the same objects as the array
The character data of the node that implements this interface
The character data of the node that implements this interface
The number of 16-bit units that are available through <code>data</code> and the <code>substringData</code> method below
Extracts a range of data from the node
Append the string to the end of the character data of the node
Insert a string at the specified 16-bit unit offset
Remove a range of 16-bit units from the node
Replace the characters starting at the specified 16-bit unit offset with the specified string
Breaks this node into two nodes at the specified <code>offset</code>, keeping both in the tree as siblings
DOM Level 3 CR
Sets the color to use for the border
Returns the color the border is drawn
Sets the font to edit with
Gets the font used for editing
Configures the editor
Returns the value currently being edited
If the <code>realEditor</code> returns true to this message, <code>prepareForEditing</code> is messaged and true is returned
Messages the <code>realEditor</code> for the return value
If the <code>realEditor</code> will allow editing to stop, the <code>realEditor</code> is removed and true is returned, otherwise false is returned
Messages <code>cancelCellEditing</code> to the <code>realEditor</code> and removes it from this instance
Adds the <code>CellEditorListener</code>
Removes the previously added <code>CellEditorListener</code>
Returns an array of all the <code>CellEditorListener</code>s added to this DefaultTreeCellEditor with addCellEditorListener()
Resets <code>lastPath</code>
Messaged when the timer fires, this will start the editing session
Sets the tree currently editing for
Returns true if <code>event</code> is a <code>MouseEvent</code> and the click count is 1
Starts the editing timer
Returns true if <code>event</code> is <code>null</code>, or it is a <code>MouseEvent</code> with a click count &gt; 2 and <code>inHitRegion</code> returns true
Returns true if the passed in location is a valid mouse location to start editing from
Invoked just before editing is to start
Creates the container to manage placement of <code>editingComponent</code>
This is invoked if a <code>TreeCellEditor</code> is not supplied in the constructor
Sets the border of this component
Overrides <code>JComponent
Overrides <code>JTextField
Overrides <code>Container
Lays out this <code>Container</code>
Returns the preferred size for the <code>Container</code>
{@inheritDoc}
Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded
Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded
Returns the default icon, for the current laf, that is used to represent leaf nodes
Sets the icon used to represent non-leaf nodes that are expanded
Returns the icon used to represent non-leaf nodes that are expanded
Sets the icon used to represent non-leaf nodes that are not expanded
Returns the icon used to represent non-leaf nodes that are not expanded
Sets the icon used to represent leaf nodes
Returns the icon used to represent leaf nodes
Sets the color the text is drawn with when the node is selected
Returns the color the text is drawn with when the node is selected
Sets the color the text is drawn with when the node isn't selected
Returns the color the text is drawn with when the node isn't selected
Sets the color to use for the background if node is selected
Returns the color to use for the background if node is selected
Sets the background color to be used for non selected nodes
Returns the background color to be used for non selected nodes
Sets the color to use for the border
Returns the color the border is drawn
Subclassed to map <code>FontUIResource</code>s to null
Gets the font of this component
Subclassed to map <code>ColorUIResource</code>s to null
Configures the renderer based on the passed in components
Paints the value
Overrides <code>JComponent
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Overridden for performance reasons
Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes
Tells how leaf nodes are determined
Sets the root to <code>root</code>
Returns the root of the tree
Returns the index of child in parent
Returns the child of <I>parent</I> at index <I>index</I> in the parent's child array
Returns the number of children of <I>parent</I>
Returns whether the specified node is a leaf node
Invoke this method if you've modified the {@code TreeNode}s upon which this model depends
This sets the user object of the TreeNode identified by path and posts a node changed
Invoked this to insert newChild at location index in parents children
Message this to remove node from its parent
Invoke this method after you've changed how node is to be represented in the tree
Invoke this method if you've modified the {@code TreeNode}s upon which this model depends
Invoke this method after you've inserted some TreeNodes into node
Invoke this method after you've removed some TreeNodes from node
Invoke this method after you've changed how the children identified by childIndicies are to be represented in the tree
Invoke this method if you've totally changed the children of node and its children's children
Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
Adds a listener for the TreeModelEvent posted after the tree changes
Removes a listener previously added with <B>addTreeModelListener()</B>
Returns an array of all the tree model listeners registered on this model
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Sets the RowMapper instance
Returns the RowMapper instance that is able to map a TreePath to a row
Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION
Returns the selection mode, one of <code>SINGLE_TREE_SELECTION</code>, <code>DISCONTIGUOUS_TREE_SELECTION</code> or <code>CONTIGUOUS_TREE_SELECTION</code>
Sets the selection to path
Sets the selection
Adds path to the current selection
Adds paths to the current selection
Removes path from the selection
Removes paths from the selection
Returns the first path in the selection
Returns the selection
Returns the number of paths that are selected
Returns true if the path, <code>path</code>, is in the current selection
Returns true if the selection is currently empty
Empties the current selection
Adds x to the list of listeners that are notified each time the set of selected TreePaths changes
Removes x from the list of listeners that are notified each time the set of selected TreePaths changes
Returns an array of all the tree selection listeners registered on this model
Notifies all listeners that are registered for tree selection events on this object
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model
Returns the selection in terms of rows
Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths
Returns the largest value obtained from the RowMapper for the current set of selected TreePaths
Returns true if the row identified by <code>row</code> is selected
Updates this object's mapping from TreePath to rows
Returns the lead selection index
Returns the last path that was added
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Returns an array of all the property change listeners registered on this <code>DefaultTreeSelectionModel</code>
Makes sure the currently selected <code>TreePath</code>s are valid for the current selection mode
Returns true if the paths are contiguous, or this object has no RowMapper
Used to test if a particular set of <code>TreePath</code>s can be added
Returns true if the paths can be removed without breaking the continuity of the model
Notifies listeners of a change in path
Updates the leadIndex instance variable
This method is obsolete and its implementation is now a noop
Returns a string that displays and identifies this object's properties
Returns a clone of this object with the same selection
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
A comment
A processing instruction
The start of a namespace prefix mapping
The start of an element
An empty element
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of a general entity
Character content
Ignorable whitespace
The end of an element
The end of a namespace prefix mapping
The start of a CDATA section
The end of a CDATA section
The end of the document
The start of the DTD
This method notifies of the start of a parameter entity
This method notifies the end of a parameter entity
The start of the DTD external subset
The end of the DTD external subset
An element declaration
The start of an attribute list
An attribute declaration
The end of an attribute list
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The start of a conditional section
Characters within an IGNORE conditional section
The end of a conditional section
The end of the DTD
The start of a content model
A content model of ANY
A content model of EMPTY
A start of either a mixed or children content model
The appearance of "#PCDATA" within a group signifying a mixed content model
A referenced element in a mixed or children content model
The separator between choices or sequences of a mixed or children content model
The occurrence count for a child in a children content model or for the mixed content model group
The end of a group for mixed or children content models
The end of a content model
Sets the document source
Returns the document source
Returns the node index
Synchronizes the data (name and value) for fast nodes
Synchronizes the node's children with the internal structure
Returns the node index
Synchronizes the data (name and value) for fast nodes
Synchronizes the node's children with the internal structure
Returns the node index
Synchronizes the data (name and value) for fast nodes
Returns the node index
Synchronizes the data (name and value) for fast nodes
Retrieve information describing the abilities of this particular DOM implementation
Creates a document node in the table
Creates a doctype
Creates a notation in the table
Creates an entity in the table
DOM Internal An attribute specifying the actual encoding of this document
Creates an entity reference node in the table
Creates an element node with a URI in the table and type information
Creates an element node in the table
Creates an element node with a URI in the table
This method is used by the DOMParser to create attributes
Sets an attribute on an element node
Creates an attribute in the table
Creates an attribute with a URI in the table
Creates an element definition in the table
Creates a text node in the table
Creates a CDATA section node in the table
Creates a processing instruction node in the table
Creates a comment node in the table
Creates a clone of the specified node
Appends a child to the specified parent in the table
Adds an attribute node to the specified element
Adds an attribute node to the specified element
Sets type of attribute
Inserts a child before the specified node in the table
Sets the last child of the parentIndex to childIndex
Returns the parent node of the given node
Returns the parent node of the given node
Returns the last child of the given node
Returns the last child of the given node
Returns the prev sibling of the given node
Returns the prev sibling of the given node
Returns the <i>real</i> prev sibling of the given node, directly from the data structures
Returns the <i>real</i> prev sibling of the given node
Returns the index of the element definition in the table with the specified name index, or -1 if no such definition exists
Instantiates the requested node object
Returns the name of the given node
Returns the name of the given node
Returns the real value of the given node
Returns the real value of the given node
Returns the value of the given node
Clears the type info that is stored in the fNodeValue array
Returns the value of the given node
Returns the extra info of the given node
Returns the extra info of the given node
Returns the type of the given node
Returns the type of the given node
Returns the attribute value of the given name
Returns the URI of the given node
Returns the URI of the given node
Registers an identifier name with a specified element node
Prints out the tables
Returns the node index
Synchronizes the node's data
Synchronizes the node's children with the internal structure
Synchronizes the node's children with the internal structure
Synchronizes the node's children with the internal structure
Ensures that the internal tables are large enough
Creates a node of the specified type
Performs a binary search for a target value in an array of values
Returns the node index
Synchronizes the data (name and value) for fast nodes
Synchronizes the entities, notations, and elements
NON-DOM: Obtain and return the single shared object
Returns the node index
Synchronizes the data (name and value) for fast nodes
Synchronizes the default attribute values
Returns the node index
Synchronizes the data (name and value) for fast nodes
Returns the node index
Synchronizes the data (name and value) for fast nodes
Synchronizes the node's children with the internal structure
Returns the node index
Synchronize the entity data
Synchronize the children
Returns the node index
Synchronize the entity data
Synchronize the children
Returns the node index
Returns the node index
Synchronizes the data
Returns the node index
Synchronizes the data
Returns the node index
Synchronizes the underlying data
Returns the <code>int</code> constant identifying the type of an IR object
Creates a <code>DefinitionKind</code> instance corresponding to the given code
Sets input data for compression
Sets input data for compression
Sets preset dictionary for compression
Sets preset dictionary for compression
Sets the compression strategy to the specified value
Sets the compression level to the specified value
Returns true if the input data buffer is empty and setInput() should be called in order to provide more input
When called, indicates that compression should end with the current contents of the input buffer
Returns true if the end of the compressed data output stream has been reached
Compresses the input data and fills specified buffer with compressed data
Compresses the input data and fills specified buffer with compressed data
Compresses the input data and fills the specified buffer with compressed data
Returns the ADLER-32 value of the uncompressed data
Returns the total number of uncompressed bytes input so far
Returns the total number of uncompressed bytes input so far
Returns the total number of compressed bytes output so far
Returns the total number of compressed bytes output so far
Resets deflater so that a new set of input data can be processed
Closes the compressor and discards any unprocessed input
Closes the compressor when garbage is collected
Closes this input stream and its underlying input stream, discarding any pending uncompressed data
Reads a single byte of compressed data from the input stream
Reads compressed data into a byte array
Skips over and discards data from the input stream
Returns 0 after EOF has been reached, otherwise always return 1
Always returns {@code false} because this input stream does not support the {@link #mark mark()} and {@link #reset reset()} methods
<i>This operation is not supported</i>
<i>This operation is not supported</i>
Writes a byte to the compressed output stream
Writes an array of bytes to the compressed output stream
Finishes writing compressed data to the output stream without closing the underlying stream
Writes remaining compressed data to the output stream and closes the underlying stream
Writes next block of compressed data to the output stream
Flushes the compressed output stream
Returns the remaining delay associated with this object, in the given time unit
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Retrieves and removes the head of this queue, or returns {@code null} if this queue has no elements with an expired delay
Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue
Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires
Retrieves, but does not remove, the head of this queue, or returns {@code null} if this queue is empty
Atomically removes all of the elements from this delay queue
Always returns {@code Integer
Returns an array containing all of the elements in this queue
Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired
Returns an iterator over all the elements (both expired and unexpired) in this queue
Convenience method that returns the instance of the ORB currently associated with the Servant
This allows the servant to obtain the object reference for the target CORBA Object it is incarnating for that request
The method _poa() is equivalent to calling PortableServer::Current:get_POA
The method _object_id() is equivalent to calling PortableServer::Current::get_object_id
The default behavior of this function is to return the root POA from the ORB instance associated with the servant
This method checks to see if the specified repid is present on the list returned by _all_interfaces() or is the repository id for the generic CORBA Object
This operation is used to check for the existence of the Object
This operation returns an object in the Interface Repository which provides type information that may be useful to a program
Checks if this Kerberos delegation permission object "implies" the specified permission
Checks two DelegationPermission objects for equality
Returns the hash code value for this object
Returns a PermissionCollection object for storing DelegationPermission objects
If key >= 0, return the value bound to key, or null if none
If key >= 0, bind value to the key
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element at the front of this deque unless it would violate capacity restrictions
Inserts the specified element at the end of this deque unless it would violate capacity restrictions
Retrieves and removes the first element of this deque
Retrieves and removes the last element of this deque
Retrieves and removes the first element of this deque, or returns {@code null} if this deque is empty
Retrieves and removes the last element of this deque, or returns {@code null} if this deque is empty
Retrieves, but does not remove, the first element of this deque
Retrieves, but does not remove, the last element of this deque
Retrieves, but does not remove, the first element of this deque, or returns {@code null} if this deque is empty
Retrieves, but does not remove, the last element of this deque, or returns {@code null} if this deque is empty
Removes the first occurrence of the specified element from this deque
Removes the last occurrence of the specified element from this deque
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and {@code false} if no space is currently available
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns {@code null} if this deque is empty
Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns {@code null} if this deque is empty
Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an {@code IllegalStateException} if no space is currently available
Pops an element from the stack represented by this deque
Removes the first occurrence of the specified element from this deque
Returns {@code true} if this deque contains the specified element
Returns the number of elements in this deque
Returns an iterator over the elements in this deque in proper sequence
Returns an iterator over the elements in this deque in reverse sequential order
Sets the <code>Id</code> attribute
Returns the <code>Id</code> attribute
Method getPublicKey
Method getEncodedDER
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Get a cloned Iterator that is reset to the beginning  of the query
Returns the next node in the set and advances the position of the iterator in the set
Initialize the context values for this expression after it is cloned
Return the first node out of the nodeset, if this expression is a nodeset expression
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Returns the axis being iterated, if it is known
Start traversal
Returns the value for a specific field name, or null if no value is present for that name
<p>Sets the value for a specific field name
Returns all of the fields contained in this descriptor as a string array
Returns all the field names in the descriptor
Returns all the field values in the descriptor as an array of Objects
Removes a field from the descriptor
<p>Sets all fields in the field names array to the new value with the same index in the field values array
<p>Returns a descriptor which is equal to this descriptor
Returns true if all of the fields have legal values given their names
<p>Compares this descriptor to the given object
<p>Returns the hash code value for this descriptor
Sets Descriptor (full replace)
Returns a copy of Descriptor
Returns a new Descriptor which is a duplicate of the Descriptor
Compares this descriptor to the given object
<p>Returns the hash code value for this descriptor
Returns true if all of the fields have legal values given their names
<p>Returns an XML String representing the descriptor
Returns a human readable string representing the descriptor
Sets the "value" of the "designTime" property
A value of true denotes that JavaBeans should behave in design time mode, a value of false denotes runtime behavior
Returns the <code>Desktop</code> instance of the current browser context
Tests whether this class is supported on the current platform
Tests whether an action is supported on the current platform
Launches the associated application to open the file
Launches the associated editor application and opens a file for editing
Prints a file with the native desktop printing facility, using the associated application's print command
Launches the default browser to display a {@code URI}
Launches the mail composing window of the user default mail client
Launches the mail composing window of the user default mail client, filling the message fields specified by a {@code mailto:} URI
If possible, display this frame in an appropriate location
Generally, this call should remove the frame from it's parent
Generally, the frame should be resized to match it's parents bounds
Generally, this indicates that the frame should be restored to it's size and position prior to a maximizeFrame() call
Generally, remove this frame from it's parent and add an iconic representation
Generally, remove any iconic representation that is present and restore the frame to it's original size and location
Generally, indicate that this frame has focus
Generally, indicate that this frame has lost focus
This method is normally called when the user has indicated that they will begin dragging a component around
The user has moved the frame
This method signals the end of the dragging session
This methods is normally called when the user has indicated that they will begin resizing the frame
The user has resized the component
This method signals the end of the resize session
This is a primitive reshape method
Returns whether the given action is supported on the current platform
Launches the associated application to open the given file
Launches the associated editor and opens the given file for editing
Prints the given file with the native desktop printing facility, using the associated application's print command
Launches the mail composing window of the user default mail client, filling the message fields including to, cc, etc, with the values specified by the given mailto URL
Launches the user default browser to display the given URI
UIManager
Returns the value from the desktop
Returns the value to use if the desktop property is null
Invalidates the current value
Invalides the current value so that the next invocation of <code>createValue</code> will ask for the property again
Requests that all components in the GUI hierarchy be updated to reflect dynamic changes in this look&feel
Configures the value as appropriate for a defaults property in the UIDefaults table
Returns the key used to lookup the desktop properties value
Returns whether this destination attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Destroy this {@code Object}
Determine if this {@code Object} has been destroyed
Creates a new <code>DetailEntry</code> object with the given name and adds it to this <code>Detail</code> object
Creates a new <code>DetailEntry</code> object with the given QName and adds it to this <code>Detail</code> object
Gets an Iterator over all of the <code>DetailEntry</code>s in this <code>Detail</code> object
Check that the specified content is valid according to this content model
The dirty call requests leases for the remote object references associated with the object identifiers contained in the array 'ids'
The clean call removes the 'vmid' from the reference list of each remote object indicated in 'id's
Gets the kind of this diagnostic, for example, error or warning
Gets the source object associated with this diagnostic
Gets a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem
Gets the character offset from the beginning of the file associated with this diagnostic that indicates the start of the problem
Gets the character offset from the beginning of the file associated with this diagnostic that indicates the end of the problem
Gets the line number of the character offset returned by {@linkplain #getPosition()}
Gets the column number of the character offset returned by {@linkplain #getPosition()}
Gets a diagnostic code indicating the type of diagnostic
Gets a localized message for the given locale
Gets a list view of diagnostics collected by this object
Invoked when a problem is found
Makes this Dialog displayable by connecting it to a native screen resource
Indicates whether the dialog is modal
Specifies whether this dialog should be modal
Returns the modality type of this dialog
Sets the modality type for this dialog
Gets the title of the dialog
Sets the title of the Dialog
Shows or hides this {@code Dialog} depending on the value of parameter {@code b}
Makes the {@code Dialog} visible
Hides the Dialog and then causes {@code show} to return if it is currently blocked
{@inheritDoc} <p> If this dialog is modal and blocks some windows, then all of them are also sent to the back to keep them below the blocking dialog
Indicates whether this dialog is resizable by the user
Sets whether this dialog is resizable by the user
Disables or enables decorations for this dialog
Indicates whether this dialog is undecorated
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a string representing the state of this dialog
Gets the AccessibleContext associated with this Dialog
Get the role of this object
Get the state of this object
Handles the specified set of callbacks
Sets the title on the dialog window
Sets if the dialog should be resizable or not
Block the specified windows
Returns the string table for class DialogTypeSelection
Returns the enumeration value table for class DialogTypeSelection
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the number of entries (distinct keys) in this dictionary
Tests if this dictionary maps no keys to value
Returns an enumeration of the keys in this dictionary
Returns an enumeration of the values in this dictionary
Returns the value to which the key is mapped in this dictionary
Maps the specified <code>key</code> to the specified <code>value</code> in this dictionary
Removes the <code>key</code> (and its corresponding <code>value</code>) from this dictionary
Returns the message digest associated with this stream
Associates the specified message digest with this stream
Reads a byte, and updates the message digest (if the digest function is on)
Reads into a byte array, and updates the message digest (if the digest function is on)
Turns the digest function on or off
Prints a string representation of this digest input stream and its associated message digest object
Returns the algorithm-specific input parameters associated with this <code>DigestMethod</code>
Returns the message digest associated with this stream
Associates the specified message digest with this stream
Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream
Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream
Turns the digest function on or off
Prints a string representation of this digest output stream and its associated message digest object
{@inheritDoc}
{@inheritDoc}
Sets the size of this <code>Dimension</code> object to the specified width and height in double precision
Gets the size of this <code>Dimension</code> object
Sets the size of this <code>Dimension</code> object to the specified size
Sets the size of this <code>Dimension</code> object to the specified width and height
Checks whether two dimension objects have equal values
Returns the hash code for this <code>Dimension</code>
Returns a string representation of the values of this <code>Dimension</code> object's <code>height</code> and <code>width</code> fields
Returns the width of this <code>Dimension</code> in double precision
Returns the height of this <code>Dimension</code> in double precision
Sets the size of this <code>Dimension</code> object to the specified width and height
Sets the size of this <code>Dimension2D</code> object to match the specified size
Creates a new object of the same class as this object
Retrieves all of the attributes associated with a named object
Retrieves all of the attributes associated with a named object
Retrieves selected attributes associated with a named object
Retrieves selected attributes associated with a named object
Modifies the attributes associated with a named object
Modifies the attributes associated with a named object
Modifies the attributes associated with a named object using an ordered list of modifications
Modifies the attributes associated with a named object using an ordered list of modifications
Binds a name to an object, along with associated attributes
Binds a name to an object, along with associated attributes
Binds a name to an object, along with associated attributes, overwriting any existing binding
Binds a name to an object, along with associated attributes, overwriting any existing binding
Creates and binds a new context, along with associated attributes
Creates and binds a new context, along with associated attributes
Retrieves the schema associated with the named object
Retrieves the schema associated with the named object
Retrieves a context containing the schema objects of the named object's class definitions
Retrieves a context containing the schema objects of the named object's class definitions
Searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes
Searches in a single context for objects that contain a specified set of attributes, and retrieves selected attributes
Searches in a single context for objects that contain a specified set of attributes
Searches in a single context for objects that contain a specified set of attributes
Searches in the named context or object for entries that satisfy the given search filter
Searches in the named context or object for entries that satisfy the given search filter
Searches in the named context or object for entries that satisfy the given search filter
Searches in the named context or object for entries that satisfy the given search filter
Returns the mask indicating which bits in an <code>int</code> pixel representation contain the red color component
Returns the mask indicating which bits in an <code>int</code> pixel representation contain the green color component
Returns the mask indicating which bits in an <code>int</code> pixel representation contain the blue color component
Returns the mask indicating which bits in an <code>int</code> pixel representation contain the alpha component
Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the alpha component for the specified pixel, scaled from 0 to 255
Returns the color/alpha components of the pixel in the default RGB color model format
Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB
Returns the alpha component for the specified pixel, scaled from 0 to 255
Returns the color/alpha components for the specified pixel in the default RGB color model format
Returns a data element array representation of a pixel in this <code>ColorModel</code>, given an integer pixel representation in the default RGB color model
Returns an array of unnormalized color/alpha components given a pixel in this <code>ColorModel</code>
Returns an array of unnormalized color/alpha components given a pixel in this <code>ColorModel</code>
Creates a <code>WritableRaster</code> with the specified width and height that has a data layout (<code>SampleModel</code>) compatible with this <code>ColorModel</code>
Returns a pixel value represented as an <code>int</code> in this <code>ColorModel</code>, given an array of unnormalized color/alpha components
Returns a data element array representation of a pixel in this <code>ColorModel</code>, given an array of unnormalized color/alpha components
Forces the raster data to match the state specified in the <code>isAlphaPremultiplied</code> variable, assuming the data is currently correctly described by this <code>ColorModel</code>
Returns <code>true</code> if <code>raster</code> is compatible with this <code>ColorModel</code> and <code>false</code> if it is not
Returns a <code>String</code> that represents this <code>DirectColorModel</code>
Returns the cause of this exception
Creates a context in which to continue a <tt>DirContext</tt> operation
Creates an instance of an object for the specified object, attributes, and environment
Retrieves the state of an object for binding when given the original object and its attributes
Returns the iterator associated with this {@code DirectoryStream}
Decides if the given directory entry should be accepted or filtered
Creates an object using the location or reference information, and attributes specified
Retrieves the state of an object for binding given the object and attributes to be transformed
Retrieves the object to be bound
Retrieves the attributes to be bound
Invoke a service operation synchronously
Invoke a service operation asynchronously
Invoke a service operation asynchronously
Invokes a service operation using the one-way  interaction mode
Returns the height of the display, in pixels
Returns the width of the display, in pixels
Returns the bit depth of the display, in bits per pixel
Returns the refresh rate of the display, in hertz
Returns whether the two display modes are equal
{@inheritDoc}
{@inheritDoc}
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Determines the doc flavor in which this doc object will supply its piece of print data
Obtains the print data representation object that contains this doc object's piece of print data in the format corresponding to the supported doc flavor
Obtains the set of printing attributes for this doc object
Obtains a reader for extracting character print data from this doc
Obtains an input stream for extracting byte print data from this doc
Adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)
Adds all of the elements in the specified set to this attribute
Print error message and increment error count
Print an error message and increment error count
Print warning message and increment warning count
Print warning message and increment warning count
Print a message
Print a message
Returns this doc flavor object's MIME type string based on the canonical form
Returns this doc flavor object's media type (from the MIME type)
Returns this doc flavor object's media subtype (from the MIME type)
Returns a <code>String</code> representing a MIME parameter
Returns the name of this doc flavor object's representation class
Converts this <code>DocFlavor</code> to a string
Returns a hash code for this doc flavor object
Determines if this doc flavor object is equal to the given object
Generate documentation here
Check for doclet-added options
Check that options have the correct arguments
Return the version of the Java Programming Language supported by this doclet
Determines the {@link PrintService} object to which this print job object is bound
Obtains this Print Job's set of printing attributes
Registers a listener for event occurring during this print job
Removes a listener from this print job
Registers a listener for changes in the specified attributes
Removes an attribute listener from this print job
Prints a document with the specified job attributes
Gets the starting position of the tree within the comment within the file
Gets the ending position of the tree within the comment within the file
Gets the kind of this tree
Accept method used to implement the visitor pattern
Gets a documentation tree path for a tree node within a compilation unit
Gets a documentation tree path for a tree node within a subtree identified by a DocTreePath object
Get the TreePath associated with this path
Get the DocCommentTree associated with this path
Get the leaf node for this path
Get the path for the enclosing node, or null if there is no enclosing node
Scan a tree from a position identified by a TreePath
Scan a single node
Get the current path for the node, as built up by the currently active set of scan calls
Gets a DocTrees object for a given CompilationTask
Gets a DocTrees object for a given ProcessingEnvironment
Gets the doc comment tree, if any, for the Tree node identified by a given TreePath
Gets the language model element referred to by the leaf node of the given {@link DocTreePath}, or null if unknown
Prints a message of the specified kind at the location of the tree within the provided compilation unit
Scan a single node
Scan a list of nodes
Reduces two results into a combined result
The Document Type Declaration (see <code>DocumentType</code>) associated with this document
The <code>DOMImplementation</code> object that handles this document
This is a convenience attribute that allows direct access to the child node that is the document element of the document
Creates an element of the type specified
Creates an empty <code>DocumentFragment</code> object
Creates a <code>Text</code> node given the specified string
Creates a <code>Comment</code> node given the specified string
Creates a <code>CDATASection</code> node whose value is the specified string
Creates a <code>ProcessingInstruction</code> node given the specified name and data strings
Creates an <code>Attr</code> of the given name
Creates an <code>EntityReference</code> object
Returns a <code>NodeList</code> of all the <code>Elements</code> in document order with a given tag name and are contained in the document
Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node
Creates an element of the given qualified name and namespace URI
Creates an attribute of the given qualified name and namespace URI
Returns a <code>NodeList</code> of all the <code>Elements</code> with a given local name and namespace URI in document order
Returns the <code>Element</code> that has an ID attribute with the given value
An attribute specifying the encoding used for this document at the time of the parsing
An attribute specifying, as part of the <a href='http://www
An attribute specifying, as part of the <a href='http://www
An attribute specifying, as part of the <a href='http://www
An attribute specifying, as part of the <a href='http://www
An attribute specifying, as part of the <a href='http://www
An attribute specifying whether error checking is enforced or not
An attribute specifying whether error checking is enforced or not
The location of the document or <code>null</code> if undefined or if the <code>Document</code> was created using <code>DOMImplementation
The location of the document or <code>null</code> if undefined or if the <code>Document</code> was created using <code>DOMImplementation
Attempts to adopt a node from another document to this document
The configuration used when <code>Document
This method acts as if the document was going through a save and load cycle, putting the document in a "normal" form
Rename an existing node of type <code>ELEMENT_NODE</code> or <code>ATTRIBUTE_NODE</code>
Creates a future for a documentation task with the given components and arguments
Gets a new instance of the standard file manager implementation for this tool
Set the locale to be applied when formatting diagnostics and other localized data
Performs this documentation task
<p>Reset this <code>DocumentBuilder</code> to its original configuration
Parse the content of the given <code>InputStream</code> as an XML document and return a new DOM {@link Document} object
Parse the content of the given <code>InputStream</code> as an XML document and return a new DOM {@link Document} object
Parse the content of the given URI as an XML document and return a new DOM {@link Document} object
Parse the content of the given file as an XML document and return a new DOM {@link Document} object
Parse the content of the given input source as an XML document and return a new DOM {@link Document} object
Indicates whether or not this parser is configured to understand namespaces
Indicates whether or not this parser is configured to validate XML documents
Specify the {@link EntityResolver} to be used to resolve entities present in the XML document to be parsed
Specify the {@link ErrorHandler} to be used by the parser
Obtain a new instance of a DOM {@link Document} object to build a DOM tree with
Obtain an instance of a {@link DOMImplementation} object
<p>Get a reference to the the {@link Schema} being used by the XML processor
<p>Get the XInclude processing mode for this parser
Obtain a new instance of a <code>DocumentBuilderFactory</code>
<p>Obtain a new instance of a <code>DocumentBuilderFactory</code> from class name
Creates a new instance of a {@link javax
Specifies that the parser produced by this code will provide support for XML namespaces
Specifies that the parser produced by this code will validate documents as they are parsed
Specifies that the parsers created by this  factory must eliminate whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing XML documents (see XML Rec 2
Specifies that the parser produced by this code will expand entity reference nodes
<p>Specifies that the parser produced by this code will ignore comments
Specifies that the parser produced by this code will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node
Indicates whether or not the factory is configured to produce parsers which are namespace aware
Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse
Indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content
Indicates whether or not the factory is configured to produce parsers which expand entity reference nodes
Indicates whether or not the factory is configured to produce parsers which ignores comments
Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node
Allows the user to set specific attributes on the underlying implementation
Allows the user to retrieve specific attributes on the underlying implementation
<p>Set a feature for this <code>DocumentBuilderFactory</code> and <code>DocumentBuilder</code>s created by this factory
<p>Get the state of the named feature
Gets the {@link Schema} object specified through the {@link #setSchema(Schema schema)} method
<p>Set the {@link Schema} to be used by parsers created from this factory
<p>Set state of XInclude processing
<p>Get state of XInclude processing
Creates a new instance of a {@link javax
Allows the user to set specific attributes on the underlying implementation
Allows the user to retrieve specific attributes on the underlying implementation
Non-preferred: use the getDOMImplementation() method instead of this one to get a DOM Level 2 DOMImplementation object and then use DOM Level 2 methods to create a DOM Document object
Gets the XInclude processing mode for this parser
Returns a document either by finding it in the cache or downloading it and putting it in the cache
Outputs the cache statistics
Loads the document and updates build-time (latency) statistics
This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element
Invoked prior to removal of the specified region in the specified Document
Invoked prior to insertion of text into the specified Document
Invoked prior to replacing a region of text in the specified Document
Returns the Document the mutation is occurring on
Removes the specified region of text, bypassing the DocumentFilter
Inserts the specified text, bypassing the DocumentFilter
Deletes the region of text from <code>offset</code> to <code>offset + length</code>, and replaces it with  <code>text</code>
A short integer indicating what type of node this is
Returns the node name
Override default behavior to call normalize() on this Node's children
Receive an object for locating the origin of SAX document events
Receive notification of the beginning of a document
Receive notification of the end of a document
Receive notification of the beginning of an element
Receive notification of the end of an element
Receive notification of character data
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Deep-clone a document, including fixing ownerDoc for the cloned children
Retrieve information describing the abilities of this particular DOM implementation
NON-DOM extension: Create and return a NodeIterator
Create and return a NodeIterator
NON-DOM extension: Create and return a TreeWalker
Create and return a TreeWalker
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
NON-DOM INTERNAL: DOMNodeInsertedIntoDocument and 
Dispatches event to the target node's descendents recursively
NON-DOM INTERNAL: Convenience wrapper for calling dispatchAggregateEvents when the context was established by <code>savedEnclosingAttr</code>
NON-DOM INTERNAL: Generate the "aggregated" post-mutation events DOMAttrModified and DOMSubtreeModified
NON-DOM INTERNAL: Pre-mutation context check, in preparation for later generating DOMAttrModified events
Gives notification that there was an insert into the document
Gives notification that a portion of the document has been removed
Gives notification that an attribute or set of attributes changed
Returns whether this document name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Handle Start Tag
Handle Empty Tag
Handle End Tag
Handle Text
This interface can be obtained from the object implementing the <code>Document</code> interface using binding-specific casting methods
A list containing all the style sheets explicitly linked into or embedded in a document
Create a new <code>NodeIterator</code> over the subtree rooted at the specified node
Create a new <code>TreeWalker</code> over the subtree rooted at the specified node
The name of DTD; i
A <code>NamedNodeMap</code> containing the general entities, both external and internal, declared in the DTD
A <code>NamedNodeMap</code> containing the notations declared in the DTD
The public identifier of the external subset
The system identifier of the external subset
The internal subset as a string, or <code>null</code> if there is none
Introduced in DOM Level 2
Introduced in DOM Level 2
NON-DOM
Introduced in DOM Level 2
A short integer indicating what type of node this is
Returns the document type name
Clones the node
DOM Level 3 WD- Experimental
NON-DOM        Get the number associated with this doctype
Name of this document type
Access the collection of general Entities, both external and internal, defined in the DTD
Access the collection of Notations defined in the DTD
NON-DOM: Subclassed to flip the entities' and notations' readonly switch as well
NON-DOM: Access the collection of ElementDefinitions
The default <code>AbstractView</code> for this <code>Document</code>, or <code>null</code> if none available
returns singleton iterator containg the document root
Construct the node map from the node
Get the number of nodes that have been added
This method iterates to the next node that will be added to the table
Return an DOM node for the given node
Get a Node from an identity index
Get the next node identity value in the list, and call the iterator if it hasn't been added yet
Get the handle from a Node
Retrieves an attribute node by by qualified name and namespace URI
Get the string-value of a node as a String object (see http://www
Determine if the string-value of a node is whitespace
Retrieve the text content of a DOM subtree, appending it into a user-supplied FastStringBuffer object
Given a node handle, return its DOM-style node name
Given a node handle, return the XPath node name
Given a node handle, return its XPath-style localname
Given a namespace handle, return the prefix that the namespace decl is mapping
Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to
Given a node handle, return its node value
A document type declaration information item has the following properties:     1
Return the public identifier of the external subset, normalized as described in 4
Returns the <code>Element</code> whose <code>ID</code> is given by <code>elementId</code>
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
5
Bind an IncrementalSAXSource to this DTM
getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model
Return this DTM's lexical handler
Return this DTM's EntityResolver
Return this DTM's DTDHandler
Return this DTM's ErrorHandler
Return this DTM's DeclHandler
Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www
Retrieve the text content of a DOM subtree, appending it into a user-supplied FastStringBuffer object
Directly create SAX parser events from a subtree
For the moment all the run time properties are ignored by this class
No source information is available for DOM2DTM, so return <code>null</code> here
Non-DOM method, part of the temporary kluge %REVIEW% This would be a pruning problem, but since it will always be added to the root element and we prune on elements, we shouldn't have to worry
Associate an object to a key on this node
Retrieves the object associated to a key on a this node
This method returns a specialized object which implements the specialized APIs of the specified feature and version
Tests whether two nodes are equal
DOM Level 3 - Experimental: Look up the namespace URI associated to the given prefix, starting from this node
DOM Level 3: Experimental  This method checks if the specified <code>namespaceURI</code> is the  default namespace or not
DOM Level 3 - Experimental: Look up the prefix associated to the given namespace URI, starting from this node
Returns whether this node is the same node as the given one
This attribute returns the text content of this node and its descendants
This attribute returns the text content of this node and its descendants
Compares a node with this node with regard to their position in the document
The absolute base URI of this node or <code>null</code> if undefined
Returns the local name of the given node, as defined by the XML Namespaces specification
Returns the Namespace Name (Namespace URI) for the given node
Figure out whether node2 should be considered as being later in the document than node1, in Document Order as defined by the XPath model
Use DTMNodeProxy to determine whether two nodes are the same
Get the XPath-model parent of a node
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
Returns singleton iterator containg the document root
Return a instance of a DOM class to be used as an RTF
Return a instance of a DOM class to be used as an RTF
Returns a SerializationHandler class wrapped in a SAX adapter
Modify or update the provided ProtectionDomains
Gets the identifier for the domain configuration data
Gets the keystore protection parameters for keystores in this domain
Gets the keystore protection parameters for this domain
This returns the policy of the specified type for objects in  this domain
Get the root document or DocumentFragment of the DOM being created
Get the root node of the DOM tree
Get the node currently being processed
Set the next sibling node, which is where the result nodes should be inserted before
Return the next sibling node
Return null since there is no Writer for this class
Append a node to the current container
Receive an object for locating the origin of SAX document events
Receive notification of the beginning of a document
Receive notification of the end of a document
Receive notification of the beginning of an element
Receive notification of the end of an element
Set an ID string to node association in the ID table
Receive notification of character data
If available, when the disable-output-escaping attribute is used, output raw text without escaping
Report the beginning of an entity
Report the end of an entity
Receive notivication of a entityReference
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Report an XML comment anywhere in the document
Report the start of a CDATA section
Report the end of a CDATA section
Receive notification of cdata
Report the start of DTD declarations, if any
Report the end of DTD declarations
Begin the scope of a prefix-URI Namespace mapping
End the scope of a prefix-URI mapping
Receive notification of a skipped entity
This method is responsible for: (1) building the DOMImpl tree      Parser  _parser = new Parser();      DOMImpl _dom = new DOMImpl();      _parser
Parse a DOM node as a catalog entry
Add a new parser to the reader
Get the name of the parser class for a given catalog type
Read a catalog from an input stream
Read the catalog behind the specified URL
Set the value of a parameter
Return the value of a parameter if known
Check if setting a parameter to a specific value is supported
The list of the parameters supported by this <code>DOMConfiguration</code> object and for which at least one value can be set by the application
Parse an XML document
Sets the document handler on the last component in the pipeline to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
Set the state of a feature
setProperty
Set the locale to use for messages
Returns the locale
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 CR - Experimental
reset all components before parsing
Check a property
This implementation uses an internal {@link HashMap} to get the prefix that the specified URI maps to
This implementation uses an internal {@link HashMap} to map the URI to the specified prefix
This implementation uses an internal {@link HashMap} to get the object that the specified name maps to
This implementation uses an internal {@link HashMap} to map the name to the specified object
Returns the <code>Element</code> with the specified ID attribute value
Registers the element's attribute specified by the namespace URI and local name to be of type ID
Returns a read-only iterator over the set of Id/Element mappings of this <code>DOMCryptoContext</code>
This implementation uses an internal {@link HashMap} to get the object that the specified key maps to
This implementation uses an internal {@link HashMap} to map the key to the specified object
Sets the DOM entity resolver
Returns the DOM entity resolver
Resolves an external parsed entity
The severity of the error, either <code>SEVERITY_WARNING</code>, <code>SEVERITY_ERROR</code>, or <code>SEVERITY_FATAL_ERROR</code>
An implementation specific string describing the error that occurred
A <code>DOMString</code> indicating which related data is expected in <code>relatedData</code>
The related platform dependent exception if any
The related <code>DOMError
The location of the error
This method is called on the error handler when an error occurs
Sets the DOM error handler
Reports a warning
Reports an error
Report a fatal error
The severity of the error, either <code>SEVERITY_WARNING</code>, <code>SEVERITY_ERROR</code>, or <code>SEVERITY_FATAL_ERROR</code>
An implementation specific string describing the error that occured
The location of the error
The related platform dependent exception if any
When a JAXB provider needs to unmarshal a part of a document into an infoset representation, it first calls this method to create a {@link Result} object
Once the portion is sent to the {@link Result}
This method is called when a JAXB provider needs to marshal an element to XML
Test if the DOM implementation implements a specific feature and version, as specified in <a href="http://www
Creates an empty <code>DocumentType</code> node
Creates a DOM Document object of the specified type with its document element
This method returns a specialized object which implements the specialized APIs of the specified feature and version, as specified in <a href="http://www
Creates a new <code>CSSStyleSheet</code>
NON-DOM: Obtain and return the single shared object
Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof
Introduced in DOM Level 2
Returns the <code>index</code>th item in the collection
The number of <code>DOMImplementation</code>s in the list
Returns the indexth item in the collection
Returns the number of DOMImplementations in the list
Create a new <code>LSParser</code>
Create a new <code>LSSerializer</code> object
Create a new empty input source object where <code>LSInput
Create a new empty output destination object where <code>LSOutput
Obtain a new instance of a <code>DOMImplementationRegistry</code>
Return the first implementation that has the desired features, or <code>null</code> if none is found
Return a list of implementations that support the desired features
Register an implementation
A method to request the first DOM implementation that supports the specified features
A method to request a list of DOM implementations that support the specified features and versions, as specified in 
A method to request a DOM implementation
A method to request a list of DOM implementations that support the specified features and versions, as specified in 
An attribute of a language-binding dependent type that represents a stream of bytes
An attribute of a language-binding dependent type that represents a stream of bytes
An attribute of a language-binding dependent type that represents a stream of 16-bit units
An attribute of a language-binding dependent type that represents a stream of 16-bit units
A string attribute that represents a sequence of 16 bit units (utf-16 encoded characters)
A string attribute that represents a sequence of 16 bit units (utf-16 encoded characters)
The character encoding, if known
The character encoding, if known
The public identifier for this input source
The public identifier for this input source
The system identifier, a URI reference , for this input source
The system identifier, a URI reference , for this input source
The base URI to be used (see section 5
The base URI to be used (see section 5
If set to true, assume that the input is certified (see section 2
If set to true, assume that the input is certified (see section 2
The line number this locator is pointing to, or <code>-1</code> if there is no column number available
The column number this locator is pointing to, or <code>-1</code> if there is no column number available
The byte offset into the input source this locator is pointing to or <code>-1</code> if there is no byte offset available
The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or <code>-1</code> if there is no UTF-16 offset available
The node this locator is pointing to, or <code>null</code> if no node is available
The URI this locator is pointing to, or <code>null</code> if no URI is available
The line number where the error occured, or -1 if there is no line number available
The column number where the error occured, or -1 if there is no column number available
The URI where the error occured, or null if there is no URI available
The byte offset into the input source this locator is pointing to or -1 if there is no byte offset available
The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or -1 if there is no UTF-16 offset available
Formats a message with the specified arguments using the given locale information
Initialize Message Formatter
setLocale to be used by the formatter
Normalizes document
This method acts as if the document was going through a save and load cycle, putting the document in a "normal" form
Adds a namespace attribute or replaces the value of existing namespace attribute with the given prefix and value for URI
Check if CDATA section is well-formed
NON-DOM: check for valid XML characters as per the XML version
NON-DOM: check if value of the comment is well-formed
NON-DOM: check if attribute value is well-formed
Reports a DOM error to the user handler
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
A comment
A processing instruction
The start of an element
An empty element
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of a general entity
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
Sets the document source
Returns the document source
This method adds default declarations
Sets the augmentations of the attribute at the specified index
An attribute of a language and binding dependent type that represents a writable stream of bytes
An attribute of a language and binding dependent type that represents a writable stream of bytes
Depending on the language binding in use, this attribute may not be available
Depending on the language binding in use, this attribute may not be available
The system identifier, a URI reference [IETF RFC 2396], for this output  destination
The system identifier, a URI reference [IETF RFC 2396], for this output  destination
The character encoding, if known
The character encoding, if known
Parses the input source specified by the given system identifier
parse
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
Set the state of any feature in a SAX2 parser
Query the state of a feature
Set the value of any property in a SAX2 parser
Query the value of a property
Returns this parser's XMLParserConfiguration
Resets the parser state
When the application provides a filter, the parser will call out to the filter at the completion of the construction of each <code>Element</code> node
When the application provides a filter, the parser will call out to the filter at the completion of the construction of each <code>Element</code> node
Set parameters and properties
Look up the value of a feature or a property
DOM Level 3 CR - Experimental
Parse an XML document from a location identified by an URI reference
Parse an XML document from a resource identified by an <code>LSInput</code>
Parse an XML document or fragment from a resource identified by an <code>LSInput</code> and insert the content into an existing document at the position epcified with the <code>contextNode</code> and <code>action</code> arguments
The start of an element
<p>Set the node that will contain the result DOM tree
<p>Get the node that will contain the result DOM tree
<p>Set the child node before which the result nodes will be inserted
<p>Get the child node before which the result nodes will be inserted
<p>Set the systemId that may be used in association with the node
<p>Get the System Identifier
Serializes the DOM node
DOM L3-EXPERIMENTAL: Setter for boolean and object parameters
DOM L3-EXPERIMENTAL: Check if parameter can be set
DOM Level 3 Core CR - Experimental
DOM L3-EXPERIMENTAL: Getter for boolean and object parameters
DOM L3 EXPERIMENTAL:  Serialize the specified node as described above in the description of <code>LSSerializer</code>
DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out
DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out
When the application provides a filter, the serializer will call out to the filter before serializing each Node
When the application provides a filter, the serializer will call out to the filter before serializing each Node
Serialize the specified node as described above in the general description of the <code>LSSerializer</code> interface
Serialize the specified node as described above in the general description of the <code>LSSerializer</code> interface
Sets the parent node
Sets the next sibling node
Returns the parent node
Returns the nextSibling node
Set the node that will represents a Source DOM tree
Get the node that represents a Source DOM tree
Set the base ID (URL or system ID) from where URLs will be resolved
Get the base ID (URL or system ID) from where URLs will be resolved
Returns the <code>index</code>th item in the collection
The number of <code>DOMString</code>s in the list
Test if a string is part of this <code>DOMStringList</code>
DOM Internal: Add a <code>DOMString</code> to the list
Returns the node contained in this <code>DOMStructure</code>
Returns the here node
Copies the source tree into the specified place in a destination tree
Finds and returns the first child element node
Finds and returns the first visible child element node
Finds and returns the first visible child element node
Finds and returns the last child element node
Finds and returns the last visible child element node
Finds and returns the last visible child element node
Finds and returns the next sibling element node
Finds and returns the first child node with the given name
Finds and returns the last child node with the given name
Finds and returns the next sibling node with the given name
Finds and returns the first child node with the given qualified name
Finds and returns the last child node with the given qualified name
Finds and returns the next sibling node with the given qualified name
Finds and returns the first child node with the given name
Finds and returns the last child node with the given name
Finds and returns the next sibling node with the given name
Finds and returns the first child node with the given qualified name
Finds and returns the last child node with the given qualified name
Finds and returns the next sibling node with the given qualified name
Finds and returns the first child node with the given name and attribute name, value pair
Finds and returns the last child node with the given name and attribute name, value pair
Finds and returns the next sibling node with the given name and attribute name, value pair
Returns the concatenated child text of the specified node
returns local name of this element if not null, otherwise     returns the name of the node
Creates a DOMException
Creates an LSException
Sets the node
Returns the node
Test whether whitespace-only text nodes are visible in the logical view of <code>DTM</code>
A method to request a DOM implementation
A method to request a list of DOM implementations that support the specified features and versions, as specified in 
Returns the value of the read-only attribute
Returns the value of the hidden attribute
Returns the value of the archive attribute
Returns the value of the system attribute
Returns the name of the attribute view
Updates the value of the read-only attribute
Updates the value of the hidden attribute
Updates the value of the system attribute
Updates the value of the archive attribute
Returns a string representation of the {@code double} argument
Returns a hexadecimal string representation of the {@code double} argument
Returns a {@code Double} object holding the {@code double} value represented by the argument string {@code s}
Returns a {@code Double} instance representing the specified {@code double} value
Returns a new {@code double} initialized to the value represented by the specified {@code String}, as performed by the {@code valueOf} method of class {@code Double}
Returns {@code true} if the specified number is a Not-a-Number (NaN) value, {@code false} otherwise
Returns {@code true} if the specified number is infinitely large in magnitude, {@code false} otherwise
Returns {@code true} if the argument is a finite floating-point value; returns {@code false} otherwise (for NaN and infinity arguments)
Returns {@code true} if this {@code Double} value is a Not-a-Number (NaN), {@code false} otherwise
Returns {@code true} if this {@code Double} value is infinitely large in magnitude, {@code false} otherwise
Returns a string representation of this {@code Double} object
Returns the value of this {@code Double} as a {@code byte} after a narrowing primitive conversion
Returns the value of this {@code Double} as a {@code short} after a narrowing primitive conversion
Returns the value of this {@code Double} as an {@code int} after a narrowing primitive conversion
Returns the value of this {@code Double} as a {@code long} after a narrowing primitive conversion
Returns the value of this {@code Double} as a {@code float} after a narrowing primitive conversion
Returns the {@code double} value of this {@code Double} object
Returns a hash code for this {@code Double} object
Returns a hash code for a {@code double} value; compatible with {@code Double
Compares this object against the specified object
Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout
Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values
Returns the {@code double} value corresponding to a given bit representation
Compares two {@code Double} objects numerically
Compares the two specified {@code double} values
Adds two {@code double} values together as per the + operator
Returns the greater of two {@code double} values as if by calling {@link Math#max(double, double) Math
Returns the smaller of two {@code double} values as if by calling {@link Math#min(double, double) Math
Updates with the given value
Returns the current value
Resets variables maintaining updates to the identity value
Equivalent in effect to {@link #get} followed by {@link #reset}
Returns the String representation of the current value
Equivalent to {@link #get}
Returns the {@linkplain #get current value} as a {@code long} after a narrowing primitive conversion
Returns the {@linkplain #get current value} as an {@code int} after a narrowing primitive conversion
Returns the {@linkplain #get current value} as a {@code float} after a narrowing primitive conversion
Adds the given value
Returns the current sum
Resets variables maintaining the sum to zero
Equivalent in effect to {@link #sum} followed by {@link #reset}
Returns the String representation of the {@link #sum}
Equivalent to {@link #sum}
Returns the {@link #sum} as a {@code long} after a narrowing primitive conversion
Returns the {@link #sum} as an {@code int} after a narrowing primitive conversion
Returns the {@link #sum} as a {@code float} after a narrowing primitive conversion
Applies this operator to the given operands
Allocates a new double buffer
Wraps a double array into a buffer
Wraps a double array into a buffer
Creates a new double buffer whose content is a shared subsequence of this buffer's content
Creates a new double buffer that shares this buffer's content
Creates a new, read-only double buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible double array
Returns the double array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this double buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Performs this operation on the given argument
Returns a composed {@code DoubleConsumer} that performs, in sequence, this operation followed by the {@code after} operation
Applies this function to the given argument
Read a double value from the input stream and store it in the value member
Write the double value stored in this holder to an <code>OutputStream</code>
Return the <code>TypeCode</code> of this holder object
Evaluates this predicate on the given argument
Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Returns a predicate that represents the logical negation of this predicate
Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Returns a stream consisting of the elements of this stream that match the given predicate
Returns a stream consisting of the results of applying the given function to the elements of this stream
Returns an object-valued {@code Stream} consisting of the results of applying the given function to the elements of this stream
Returns an {@code IntStream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code LongStream} consisting of the results of applying the given function to the elements of this stream
Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns a stream consisting of the distinct elements of this stream
Returns a stream consisting of the elements of this stream in sorted order
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Returns a stream consisting of the elements of this stream, truncated to be no longer than {@code maxSize} in length
Returns a stream consisting of the remaining elements of this stream after discarding the first {@code n} elements of the stream
Performs an action for each element of this stream
Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
Returns an array containing the elements of this stream
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Returns the sum of elements in this stream
Returns an {@code OptionalDouble} describing the minimum element of this stream, or an empty OptionalDouble if this stream is empty
Returns an {@code OptionalDouble} describing the maximum element of this stream, or an empty OptionalDouble if this stream is empty
Returns the count of elements in this stream
Returns an {@code OptionalDouble} describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
Returns a {@code DoubleSummaryStatistics} describing various summary data about the elements of this stream
Returns whether any elements of this stream match the provided predicate
Returns whether all elements of this stream match the provided predicate
Returns whether no elements of this stream match the provided predicate
Returns an {@link OptionalDouble} describing the first element of this stream, or an empty {@code OptionalDouble} if the stream is empty
Returns an {@link OptionalDouble} describing some element of the stream, or an empty {@code OptionalDouble} if the stream is empty
Returns a {@code Stream} consisting of the elements of this stream, boxed to {@code Double}
Returns a builder for a {@code DoubleStream}
Returns an empty sequential {@code DoubleStream}
Returns a sequential {@code DoubleStream} containing a single element
Returns a sequential ordered stream whose elements are the specified values
Returns an infinite sequential ordered {@code DoubleStream} produced by iterative application of a function {@code f} to an initial element {@code seed}, producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, {@code f(f(seed))}, etc
Returns an infinite sequential unordered stream where each element is generated by the provided {@code DoubleSupplier}
Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Adds an element to the stream being built
Adds an element to the stream being built
Builds the stream, transitioning this builder to the built state
Records another value into the summary information
Combines the state of another {@code DoubleSummaryStatistics} into this one
Return the count of values recorded
Returns the sum of values recorded, or zero if no values have been recorded
Returns the minimum recorded value, {@code Double
Returns the maximum recorded value, {@code Double
Returns the arithmetic mean of values recorded, or zero if no values have been recorded
{@inheritDoc} Returns a non-empty string representation of this object suitable for debugging
Gets a result
Applies this function to the given argument
Applies this function to the given argument
Applies this operator to the given operand
Returns a composed operator that first applies the {@code before} operator to its input, and then applies this operator to the result
Returns a composed operator that first applies this operator to its input, and then applies the {@code after} operator to the result
Returns a unary operator that always returns its input argument
Returns the source as a <code>DragGestureRecognizer</code>
Returns the <code>Component</code> associated with this <code>DragGestureEvent</code>
Returns the <code>DragSource</code>
Returns a <code>Point</code> in the coordinates of the <code>Component</code> over which the drag originated
Returns an <code>Iterator</code> for the events comprising the gesture
Returns an <code>Object</code> array of the events comprising the drag gesture
Returns an array of the events comprising the drag gesture
Returns an <code>int</code> representing the action selected by the user
Returns the initial event that triggered the gesture
Starts the drag operation given the <code>Cursor</code> for this drag operation and the <code>Transferable</code> representing the source data for this drag operation
Starts the drag given the initial <code>Cursor</code> to display, the <code>Transferable</code> object, and the <code>DragSourceListener</code> to use
Start the drag given the initial <code>Cursor</code> to display, a drag <code>Image</code>, the offset of the <code>Image</code>, the <code>Transferable</code> object, and the <code>DragSourceListener</code> to use
This method is invoked by the {@code DragGestureRecognizer} when the {@code DragGestureRecognizer} detects a platform-dependent drag initiating gesture
register this DragGestureRecognizer's Listeners with the Component subclasses must override this method
unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method
This method returns the <code>DragSource</code> this <code>DragGestureRecognizer</code> will use in order to process the Drag and Drop operation
This method returns the <code>Component</code> that is to be "observed" by the <code>DragGestureRecognizer</code> for drag initiating gestures
set the Component that the DragGestureRecognizer is associated with registerListeners() and unregisterListeners() are called as a side effect as appropriate
This method returns an int representing the type of action(s) this Drag and Drop operation will support
This method sets the permitted source drag action(s) for this Drag and Drop operation
This method returns the first event in the series of events that initiated the Drag and Drop operation
Reset the Recognizer, if its currently recognizing a gesture, ignore it
Register a new <code>DragGestureListener</code>
unregister the current DragGestureListener <P>
Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred
Listeners registered on the Component by this Recognizer shall record all Events that are recognized as part of the series of Events that go to comprise a Drag and Drop initiating gesture via this API
Gets the <code>DragSource</code> object associated with the underlying platform
Reports whether or not drag <code>Image</code> support is available on the underlying platform
Start a drag, given the <code>DragGestureEvent</code> that initiated the drag, the initial <code>Cursor</code> to use, the <code>Image</code> to drag, the offset of the <code>Image</code> origin from the hotspot of the <code>Cursor</code> at the instant of the trigger, the <code>Transferable</code> subject data of the drag, the <code>DragSourceListener</code>, and the <code>FlavorMap</code>
Start a drag, given the <code>DragGestureEvent</code> that initiated the drag, the initial <code>Cursor</code> to use, the <code>Transferable</code> subject data of the drag, the <code>DragSourceListener</code>, and the <code>FlavorMap</code>
Start a drag, given the <code>DragGestureEvent</code> that initiated the drag, the initial <code>Cursor</code> to use, the <code>Image</code> to drag, the offset of the <code>Image</code> origin from the hotspot of the <code>Cursor</code> at the instant of the trigger, the subject data of the drag, and the <code>DragSourceListener</code>
Start a drag, given the <code>DragGestureEvent</code> that initiated the drag, the initial <code>Cursor</code> to use, the <code>Transferable</code> subject data of the drag, and the <code>DragSourceListener</code>
Creates the {@code DragSourceContext} to handle the current drag operation
This method returns the <code>FlavorMap</code> for this <code>DragSource</code>
Creates a new <code>DragGestureRecognizer</code> that implements the specified abstract subclass of <code>DragGestureRecognizer</code>, and sets the specified <code>Component</code> and <code>DragGestureListener</code> on the newly created object
Creates a new <code>DragGestureRecognizer</code> that implements the default abstract subclass of <code>DragGestureRecognizer</code> for this <code>DragSource</code>, and sets the specified <code>Component</code> and <code>DragGestureListener</code> on the newly created object
Adds the specified <code>DragSourceListener</code> to this <code>DragSource</code> to receive drag source events during drag operations intiated with this <code>DragSource</code>
Removes the specified <code>DragSourceListener</code> from this <code>DragSource</code>
Gets all the <code>DragSourceListener</code>s registered with this <code>DragSource</code>
Adds the specified <code>DragSourceMotionListener</code> to this <code>DragSource</code> to receive drag motion events during drag operations intiated with this <code>DragSource</code>
Removes the specified <code>DragSourceMotionListener</code> from this <code>DragSource</code>
Gets all of the  <code>DragSourceMotionListener</code>s registered with this <code>DragSource</code>
Gets all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>DragSource</code>
Returns the drag gesture motion threshold
Called as the cursor's hotspot enters a platform-dependent drop site
Called as the cursor's hotspot moves over a platform-dependent drop site
Called whenever the mouse is moved during a drag operation
Called when the user has modified the drop gesture
Called as the cursor's hotspot exits a platform-dependent drop site
This method is invoked to signify that the Drag and Drop operation is complete
Returns the <code>DragSource</code> that instantiated this <code>DragSourceContext</code>
Returns the <code>Component</code> associated with this <code>DragSourceContext</code>
Returns the <code>DragGestureEvent</code> that initially triggered the drag
Returns a bitwise mask of <code>DnDConstants</code> that represent the set of drop actions supported by the drag source for the drag operation associated with this <code>DragSourceContext</code>
Sets the cursor for this drag operation to the specified <code>Cursor</code>
Returns the current drag <code>Cursor</code>
Add a <code>DragSourceListener</code> to this <code>DragSourceContext</code> if one has not already been added
Removes the specified <code>DragSourceListener</code> from  this <code>DragSourceContext</code>
Notifies the peer that the <code>Transferable</code>'s <code>DataFlavor</code>s have changed
Calls <code>dragEnter</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceDragEvent</code>
Calls <code>dragOver</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceDragEvent</code>
Calls <code>dragExit</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceEvent</code>
Calls <code>dropActionChanged</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceDragEvent</code>
Calls <code>dragDropEnd</code> on the <code>DragSourceListener</code>s registered with this <code>DragSourceContext</code> and with the associated <code>DragSource</code>, and passes them the specified <code>DragSourceDropEvent</code>
Calls <code>dragMouseMoved</code> on the <code>DragSourceMotionListener</code>s registered with the <code>DragSource</code> associated with this <code>DragSourceContext</code>, and them passes the specified <code>DragSourceDragEvent</code>
Returns the <code>Transferable</code> associated with this <code>DragSourceContext</code>
If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing
start a drag
return the current drag cursor
set the current drag cursor
notify the peer that the Transferables DataFlavors have changed
This method returns the target drop action
This method returns an <code>int</code> representing the current state of the input device modifiers associated with the user's gesture
This method returns an <code>int</code> representing the current state of the input device extended modifiers associated with the user's gesture
This method returns the user drop action
This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source
This method returns a <code>boolean</code> indicating if the drop was successful
This method returns an <code>int</code> representing the action performed by the target on the subject of the drop
This method returns the <code>DragSourceContext</code> that originated the event
This method returns a <code>Point</code> indicating the cursor location in screen coordinates at the moment this event occurred, or <code>null</code> if the cursor location is not specified for this event
This method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event
This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event
Called as the cursor's hotspot enters a platform-dependent drop site
Called as the cursor's hotspot moves over a platform-dependent drop site
Called when the user has modified the drop gesture
Called as the cursor's hotspot exits a platform-dependent drop site
This method is invoked to signify that the Drag and Drop operation is complete
Called whenever the mouse is moved during a drag operation
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Attempts to make a database connection to the given URL
Retrieves whether the driver thinks that it can open a connection to the given URL
Gets information about the possible properties for this driver
Retrieves the driver's major version number
Gets the driver's minor version number
Reports whether this driver is a genuine JDBC Compliant&trade; driver
Return the parent Logger of all the Loggers used by this driver
Method called by {@linkplain DriverManager#deregisterDriver(Driver) }  to notify the JDBC driver that it was de-registered
Retrieves the log writer
Sets the logging/tracing <code>PrintWriter</code> object that is used by the <code>DriverManager</code> and all drivers
Attempts to establish a connection to the given database URL
Attempts to establish a connection to the given database URL
Attempts to establish a connection to the given database URL
Attempts to locate a driver that understands the given URL
Registers the given driver with the {@code DriverManager}
Registers the given driver with the {@code DriverManager}
Removes the specified driver from the {@code DriverManager}'s list of registered drivers
Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access
Sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified
Gets the maximum time in seconds that a driver can wait when attempting to log in to a database
Sets the logging/tracing PrintStream that is used by the <code>DriverManager</code> and all drivers
Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code> and all drivers
Prints a message to the current JDBC log stream
Note: this interface is required to permit the safe association of a DropTarget with a Component in one of two ways, either: <code> component
Gets the <code>Component</code> associated with this <code>DropTarget</code>
Sets the default acceptable actions for this <code>DropTarget</code> <P>
Gets an <code>int</code> representing the current action(s) supported by this <code>DropTarget</code>
Sets the DropTarget active if <code>true</code>, inactive if <code>false</code>
Reports whether or not this <code>DropTarget</code> is currently active (ready to accept drops)
Adds a new <code>DropTargetListener</code> (UNICAST SOURCE)
Removes the current <code>DropTargetListener</code> (UNICAST SOURCE)
Calls <code>dragEnter</code> on the registered <code>DropTargetListener</code> and passes it the specified <code>DropTargetDragEvent</code>
Calls <code>dragOver</code> on the registered <code>DropTargetListener</code> and passes it the specified <code>DropTargetDragEvent</code>
Calls <code>dropActionChanged</code> on the registered <code>DropTargetListener</code> and passes it the specified <code>DropTargetDragEvent</code>
Calls <code>dragExit</code> on the registered <code>DropTargetListener</code> and passes it the specified <code>DropTargetEvent</code>
Calls <code>drop</code> on the registered <code>DropTargetListener</code> and passes it the specified <code>DropTargetDropEvent</code> if this <code>DropTarget</code> is active
Gets the <code>FlavorMap</code> associated with this <code>DropTarget</code>
Sets the <code>FlavorMap</code> associated with this <code>DropTarget</code>
Notify the DropTarget that it has been associated with a Component This method is usually called from java
Notify the DropTarget that it has been disassociated from a Component This method is usually called from java
Gets the <code>DropTargetContext</code> associated with this <code>DropTarget</code>
Creates the DropTargetContext associated with this DropTarget
create an embedded autoscroller <P>
initialize autoscrolling <P>
update autoscrolling with current cursor location <P>
clear autoscrolling
cause autoscroll to occur <P>
cause autoscrolling to stop
cause autoscroll to occur <P>
Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Called if the user has modified the current drop gesture
Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the <code>DropTarget</code> registered with this listener
This method returns the <code>DropTarget</code> associated with this <code>DropTargetContext</code>
This method returns the <code>Component</code> associated with this <code>DropTargetContext</code>
Called when associated with the <code>DropTargetContextPeer</code>
Called when disassociated with the <code>DropTargetContextPeer</code>
This method sets the current actions acceptable to this <code>DropTarget</code>
This method returns an <code>int</code> representing the current actions this <code>DropTarget</code> will accept
This method signals that the drop is completed and if it was successful or not
accept the Drag
reject the Drag
called to signal that the drop is acceptable using the specified operation
called to signal that the drop is unacceptable
get the available DataFlavors of the <code>Transferable</code> operand of this operation
This method returns a the currently available DataFlavors of the <code>Transferable</code> operand as a <code>java
This method returns a <code>boolean</code> indicating if the given <code>DataFlavor</code> is supported by this <code>DropTargetContext</code>
get the Transferable (proxy) operand of this operation <P>
Creates a TransferableProxy to proxy for the specified Transferable
Returns an array of DataFlavor objects indicating the flavors the data can be provided in by the encapsulated transferable
Returns whether or not the specified data flavor is supported by the encapsulated transferable
Returns an object which represents the data provided by the encapsulated transferable for the requested data flavor
update the peer's notion of the Target's actions
get the current Target actions
get the DropTarget associated with this peer
get the (remote) DataFlavors from the peer
get an input stream to the remote data
accept the Drag
reject the Drag
accept the Drop
reject the Drop
signal complete
This method returns a <code>Point</code> indicating the <code>Cursor</code>'s current location within the <code>Component'</code>s coordinates
This method returns the current <code>DataFlavor</code>s from the <code>DropTargetContext</code>
This method returns the current <code>DataFlavor</code>s as a <code>java
This method returns a <code>boolean</code> indicating if the specified <code>DataFlavor</code> is supported
This method returns the source drop actions
This method returns the user drop action
This method returns the Transferable object that represents the data associated with the current drag operation
Accepts the drag
Rejects the drag as a result of examining either the <code>dropAction</code> or the available <code>DataFlavor</code> types
This method returns a <code>Point</code> indicating the <code>Cursor</code>'s current location in the <code>Component</code>'s coordinates
This method returns the current DataFlavors
This method returns the currently available <code>DataFlavor</code>s as a <code>java
This method returns a <code>boolean</code> indicating if the specified <code>DataFlavor</code> is available from the source
This method returns the source drop actions
This method returns the user drop action
This method returns the <code>Transferable</code> object associated with the drop
accept the drop, using the specified action
reject the Drop
This method notifies the <code>DragSource</code> that the drop transfer(s) are completed
This method returns an <code>int</code> indicating if the source is in the same JVM as the target
This method returns the <code>DropTargetContext</code> associated with this <code>DropTargetEvent</code>
Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Called if the user has modified the current drop gesture
Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Called when the drag operation has terminated with a drop on the operable part of the drop site for the <code>DropTarget</code> registered with this listener
Add the DropTarget to the System
Remove the DropTarget from the system
Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits
Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits
Returns the desired length of the domain parameter seed in bits
Returns the DSA-specific key parameters
Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source
Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source
Method engineResolvePublicKey
Returns the prime {@code p}
Returns the sub-prime {@code q}
Returns the base {@code g}
Returns the prime, {@code p}
Returns the subprime, {@code q}
Returns the base, {@code g}
Returns the value of the private key, {@code x}
Returns the private key {@code x}
Returns the prime {@code p}
Returns the sub-prime {@code q}
Returns the base {@code g}
Returns the value of the public key, {@code y}
Returns the public key {@code y}
Returns the prime {@code p}
Returns the sub-prime {@code q}
Returns the base {@code g}
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the entire Document Type Declaration as a string, including the internal DTD subset
Returns an implementation defined representation of the DTD
Return a List containing the notations declared in the DTD
Return a List containing the general entities, both external and internal, declared in the DTD
Set the locale to use for messages
Sets the input source for the document to parse
Parses the document in a pull parsing fashion
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Reset all components before parsing
Configures the pipeline
Check a feature
Check a property
Creates an entity manager
Creates an error reporter
Create a document scanner
Create a DTD scanner
Create a DTD loader 
Create a DTD validator
Create a namespace binder
Create a datatype validator factory
Get an instance of the default DTDDVFactory implementation
Get an instance of DTDDVFactory implementation
return a dtd type of the given name
get all built-in DVs, which are stored in a map keyed by the name
return a dtd type of the given name
get all built-in DVs, which are stored in a Map keyed by the name
Returns true if the specified element declaration is external
Returns true if the specified attribute declaration is external
The start of the DTD
This method notifies of the start of an entity
The start of the DTD external subset
This method notifies the end of an entity
The end of the DTD external subset
An element declaration
An attribute declaration
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The end of the DTD
Notifies of the presence of a TextDecl line in an entity
A comment
A processing instruction
The start of an attribute list
The end of an attribute list
The start of a conditional section
Characters within an IGNORE conditional section
The end of a conditional section
The start of a content model
A start of either a mixed or children content model
The appearance of "#PCDATA" within a group signifying a mixed content model
A referenced element in a mixed or children content model
The separator between choices or sequences of a mixed or children content model
The occurrence count for a child in a children content model or for the mixed content model group
The end of a group for mixed or children content models
A content model of ANY
A content model of EMPTY
The end of a content model
Returns true if this grammar is namespace aware
Returns the symbol table
Returns the index of the first element declaration
Returns the next index of the element declaration following the specified element declaration
getElementDeclIndex
Returns the element decl index
make separate function for getting contentSpecType of element
getElementDecl
getFirstAttributeDeclIndex
getNextAttributeDeclIndex
getAttributeDecl
Returns whether the given attribute is of type CDATA or not
getEntityDeclIndex
getEntityDecl
getNotationDeclIndex
getNotationDecl
getContentSpec
Returns the index to the content spec for the given element declaration, or <code>-1</code> if the element declaration index was invalid
getContentSpecAsString
Adds the content spec to the given element declaration
getElementContentModelValidator
Create an XMLContentSpec for a single non-leaf
create an XMLContentSpec for a leaf
Create an XMLContentSpec for a two child leaf
Initialize content model stack
Puts the specified grammar into the grammar pool and associate it to a root element name (this being internal, the lack of generality is irrelevant)
Receive notification of a notation declaration event
Receive notification of an unparsed entity declaration event
getDTDGrammar
This method notifies of the start of an entity
Notifies of the presence of a TextDecl line in an entity
The start of the DTD
A comment
A processing instruction
The start of the external subset
The end of the external subset
An element declaration
The start of an attribute list
An attribute declaration
The end of an attribute list
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The start of a conditional section
The end of a conditional section
The end of the DTD
This method notifies the end of an entity
The start of a content model
A referenced element in a mixed content model
The start of a children group
A referenced element in a children content model
The separator between choices or sequences of a children content model
The occurrence count for a child in a children content model
The end of a children group
The end of a content model
Set an implementation dependent feature
Set a run time property for this DTM instance
This returns a stateless "traverser", that can navigate over an XPath axis, though not in document order
This is a shortcut to the iterators that implement XPath axes
Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID
Given a node handle, test if it has child nodes
Given a node handle, get the handle of the node's first child
Given a node handle, get the handle of the node's last child
Retrieves an attribute node by local name and namespace URI %TBD% Note that we currently have no way to support the DOM's old getAttribute() call, which accesses only the qname
Given a node handle, get the index of the node's first attribute
Given a node handle, get the index of the node's first namespace node
Given a node handle, advance to its next sibling
Given a node handle, find its preceeding sibling
Given a node handle, advance to the next attribute
Given a namespace handle, advance to the next namespace in the same scope (local or local-plus-inherited, as selected by getFirstNamespaceNode)
Given a node handle, find its parent node
Given a DTM which contains only a single document, find the Node Handle of the  Document node
Given a node handle, find the owning document node
Given a node handle, find the owning document node
Get the string-value of a node as a String object (see http://www
Get number of character array chunks in the string-value of a node
Get a character array chunk in the string-value of a node
Given a node handle, return an ID that represents the node's expanded name
Given an expanded name, return an ID
Given an expanded-name ID, return the local name part
Given an expanded-name ID, return the namespace URI part
Given a node handle, return its DOM-style node name
Given a node handle, return the XPath node name
Given a node handle, return its DOM-style localname
Given a namespace handle, return the prefix that the namespace decl is mapping
Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to
Given a node handle, return its node value
Given a node handle, return its DOM-style node type
Get the depth level of this node in the tree (equals 1 for a parentless node)
Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node
Return the base URI of the document entity
Set the base URI of the document entity
Return the system identifier of the document entity
Return the name of the character encoding scheme        in which the document entity is expressed
Return an indication of the standalone status of the document,        either "yes" or "no"
Return a string representing the XML version of the document
Return an indication of whether the processor has read the complete DTD
A document type declaration information item has the following properties:     1
Return the public identifier of the external subset, normalized as described in 4
Returns the <code>Element</code> whose <code>ID</code> is given by <code>elementId</code>
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the document contained in this DTM
Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
2
10
5
Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www
Directly create SAX parser events representing the XML content of a DTM subtree
Return an DOM node for the given node
Return this DTM's content handler, if it has one
Return this DTM's lexical handler, if it has one
Return this DTM's EntityResolver, if it has one
Return this DTM's DTDHandler, if it has one
Return this DTM's ErrorHandler, if it has one
Return this DTM's DeclHandler, if it has one
Append a child to "the end of the document"
Append a text node child that will be constructed from a string, to the end of the document
Get the location of a node in the source document
As the DTM is registered with the DTMManager, this method will be called
As documents are released from the DTMManager, the DTM implementation will be notified of the event
Migrate a DTM built with an old DTMManager to a new DTMManager
Get the next node in the iteration
Resets the iterator to the last start node
Remembers the current node for the next call to gotoMark()
Restores the current node remembered by setMark()
Set start to END should 'close' the iterator, i
Get start to END should 'close' the iterator, i
Set if restartable
Return the node at the given position
Get start to END should 'close' the iterator, i
Set the flag to include the start node in the iteration
Returns the position of the last node within the iteration, as defined by XPath
Returns a deep copy of this iterator
Do any final cleanup that is required before returning the node that was passed in, and then return it
Reset the position to zero
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
Return the node at the given position
Access the wrapped DTMIterator
Returns the <code>index</code>th item in the collection
The number of nodes in the list
By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop
By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop
Traverse to the next node after the current node
Traverse to the next node after the current node that is matched by the extended type ID
Returns the <code>index</code>th item in the collection
The number of nodes in the list
Ensure that the size of the element indexes can hold the information
Add a node to the element indexes
Find the first index that occurs in the list that is greater than or equal to the given value
Get the next node identity value in the list, and call the iterator if it hasn't been added yet
This method should try and build one or more nodes in the table
Get the number of nodes that have been added
Get the simple type ID for the given node identity
Get the expanded type ID for the given node identity
Get the level in the tree for the given node identity
Get the first child for the given node identity
Get the next sibling for the given node identity
Get the previous sibling for the given node identity
Get the parent for the given node identity
Diagnostics function to dump the DTM
Diagnostics function to dump a single node
Set an implementation dependent feature
Given a node handle, test if it has child nodes
Given a node identity, return a node handle
Given a node handle, return a node identity
Given a node handle, get the handle of the node's first child
Given a node handle, get the handle of the node's first child
Given a node handle, advance to its last child
Retrieves an attribute node by by qualified name and namespace URI
Given a node handle, get the index of the node's first attribute
Given a node identity, get the index of the node's first attribute
Given a node handle and an expanded type ID, get the index of the node's attribute of that type, if any
Given a node handle, advance to its next sibling
Given a node handle, advance to its next sibling
Given a node handle, find its preceeding sibling
Given a node handle, advance to the next attribute
Given a node identity for an attribute, advance to the next attribute
Build table of namespace declaration locations during DTM construction
Retrieve list of namespace declaration locations active at this node
Subroutine: Locate the specified node within m_namespaceDeclSetElements, or the last element which preceeds it in document order %REVIEW% Inlne this into findNamespaceContext? Create SortedSuballocatedIntVector type?
Given a node handle, get the index of the node's first child
Given a namespace handle, advance to the next namespace
Given a node handle, find its parent node
Find the Document node handle for the document currently under construction
Given a node handle, find the owning document node
Given a node handle, find the owning document node
Get the string-value of a node as a String object (see http://www
Get number of character array chunks in the string-value of a node
Get a character array chunk in the string-value of a node
Given a node handle, return an ID that represents the node's expanded name
Given an expanded name, return an ID
Given an expanded-name ID, return the local name part
Given an expanded-name ID, return the namespace URI part
Returns the namespace type of a specific node
Given a node handle, return its DOM-style node name
Given a node handle, return the XPath node name
Given a node handle, return its XPath-style localname
Given a namespace handle, return the prefix that the namespace decl is mapping
Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to
Given a node handle, return its node value
Given a node handle, return its DOM-style node type
Get the depth level of this node in the tree (equals 1 for a parentless node)
Get the identity of this node in the tree
Get the handle of this node in the tree
Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node
Return the base URI of the document entity
Set the base URI of the document entity
Return the system identifier of the document entity
Return the name of the character encoding scheme        in which the document entity is expressed
Return an indication of the standalone status of the document,        either "yes" or "no"
Return a string representing the XML version of the document
Return an indication of whether the processor has read the complete DTD
A document type declaration information item has the following properties:     1
Return the public identifier of the external subset, normalized as described in 4
Returns the <code>Element</code> whose <code>ID</code> is given by <code>elementId</code>
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document
Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
2
10
5
Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www
Directly create SAX parser events from a subtree
Return an DOM node for the given node
Append a child to the end of the document
Append a text node child that will be constructed from a string, to the end of the document
Simple error for asserts and the like
Find out whether or not to strip whispace nodes
Set whether to strip whitespaces and push in current value of m_shouldStripWS in m_shouldStripWhitespaceStack
Set whether to strip whitespaces at this point by popping out m_shouldStripWhitespaceStack
Set whether to strip whitespaces and set the top of the stack to the current value of m_shouldStripWS
A dummy routine to satisify the abstract interface
A dummy routine to satisify the abstract interface
Migrate a DTM built with an old DTMManager to a new DTMManager
Query which DTMManager this DTM is currently being handled by
Query which DTMIDs this DTM is currently using within the DTMManager
Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID
This is a shortcut to the iterators that implement the XPath axes
Remembers the current node for the next call to gotoMark()
Restores the current node remembered by setMark()
Setting start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Set the node type of the parent that we're looking for
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
True if this iterator has a reversed axis
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
True if this iterator has a reversed axis
Returns a deep copy of this iterator
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Resets the iterator to the last start node
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Get start to END should 'close' the iterator, i
True if this iterator has a reversed axis
Returns a deep copy of this iterator
Set start to END should 'close' the iterator, i
Resets the iterator to the last start node
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Set start to END should 'close' the iterator, i
Tell if this node identity is a descendant
Get the next node in the iteration
Reset
Get the next node in the iteration
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Resets the iterator to the last start node
Get the next node in the iteration
Get the next node in the iteration
This returns a stateless "traverser", that can navigate over an XPath axis, though perhaps not in document order
Bind a IncrementalSAXSource to this DTM
Set an implementation dependent feature
Set a reference pointer to the element name symbol table
Get a reference pointer to the element name symbol table
Set a reference pointer to the namespace URI symbol table
Get a reference pointer to the namespace URI symbol table
Set a reference pointer to the prefix name symbol table
Get a reference pointer to the prefix name symbol table
getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model
Return this DTM's lexical handler
Return this DTM's EntityResolver
Return this DTM's DTDHandler
Return this DTM's ErrorHandler
Return this DTM's DeclHandler
Given a node handle, test if it has child nodes
Given a node handle, get the handle of the node's first child
Given a node handle, advance to its last child
Retrieves an attribute node by by qualified name and namespace URI
Given a node handle, get the index of the node's first attribute
Given a node handle, get the index of the node's first child
Given a node handle, advance to its next sibling
Given a node handle, find its preceeding sibling
Given a node handle, advance to the next attribute
Given a namespace handle, advance to the next namespace
Given a node handle, advance to its next descendant
Given a node handle, advance to the next node on the following axis
Given a node handle, advance to the next node on the preceding axis
Given a node handle, find its parent node
Returns the root element of the document
Given a node handle, find the owning document node
Given a node handle, find the owning document node
Given a node handle, find the owning document node
Get the string-value of a node as a String object (see http://www
Get number of character array chunks in the string-value of a node
Get a character array chunk in the string-value of a node
Given a node handle, return an ID that represents the node's expanded name
Given an expanded name, return an ID
Given an expanded-name ID, return the local name part
Given an expanded-name ID, return the namespace URI part
Given a node handle, return its DOM-style node name
Given a node handle, return the XPath node name
Given a node handle, return its DOM-style localname
Given a namespace handle, return the prefix that the namespace decl is mapping
Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to
Given a node handle, return its node value
Given a node handle, return its DOM-style node type
Get the depth level of this node in the tree (equals 1 for a parentless node)
Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node
Return the base URI of the document entity
Set the base URI of the document entity
Return the system identifier of the document entity
Return the name of the character encoding scheme        in which the document entity is expressed
Return an indication of the standalone status of the document,        either "yes" or "no"
Return a string representing the XML version of the document
Return an indication of whether the processor has read the complete DTD
A document type declaration information item has the following properties:     1
Return the public identifier of the external subset, normalized as described in 4
Returns the <code>Element</code> whose <code>ID</code> is given by <code>elementId</code>
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document
Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
2
10
5
Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www
Directly create SAX parser events from a subtree
Return an DOM node for the given node
Append a child to the end of the child list of the current node
Append a text node child that will be constructed from a string, to the end of the document
This returns a stateless "traverser", that can navigate over an XPath axis, though not in document order
This is a shortcut to the iterators that implement the supported XPath axes (only namespace::) is not supported
Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID
For the moment all the run time properties are ignored by this class
Source information is not handled yet, so return <code>null</code> here
A dummy routine to satisify the abstract interface
A dummy routine to satisify the abstract interface
Migrate a DTM built with an old DTMManager to a new DTMManager
Test whether a specified node is visible in the logical view of a <code>DTMIterator</code>
Test whether a specified node is visible in the logical view of a <code>DTMIterator</code>
Get an instance of a DTM that "owns" a node handle
Get an instance of the DTMManager
The root node of the <code>DTMIterator</code>, as specified when it was created
Reset the root node of the <code>DTMIterator</code>, overriding the value specified when it was created
Reset the iterator to the start
This attribute determines which node types are presented via the iterator
<p>The value of this flag determines whether the children of entity reference nodes are visible to the iterator
Returns the next node in the set and advances the position of the iterator in the set
Returns the previous node in the set and moves the position of the <code>DTMIterator</code> backwards in the set
Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Specify if it's OK for detach to release the iterator for reuse
Get the current node in the iterator
Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set
If setShouldCacheNodes(true) is called, then nodes will be cached, enabling random access, and giving the ability to do sorts and the like
Tells if this iterator can have nodes added to it or set via the <code>setItem(int node, int index)</code> method
Get the current position within the cached list, which is one less than the next nextNode() call will retrieve
If an index is requested, NodeSetDTM will call this method to run the iterator to the index
Set the current position in the node set
Returns the <code>node handle</code> of an item in the collection
Sets the node at the specified index of this vector to be the specified node
The number of nodes in the list
Get a cloned Iterator that is reset to the start of the iteration
Get a clone of this iterator, but don't reset the iteration in the process, so that it may be used from the current position
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
Get the XMLStringFactory used for the DTMs
Set the XMLStringFactory used for the DTMs
Obtain a new instance of a <code>DTMManager</code>
Get an instance of a DTM, loaded with the content from the specified source
Get the instance of DTM that "owns" a node handle
Given a W3C DOM node, try and return a DTM handle
Creates a DTM representing an empty <code>DocumentFragment</code> object
Release a DTM either to a lru pool, or completely remove reference
Create a new <code>DTMIterator</code> based on an XPath <a href="http://www
Create a new <code>DTMIterator</code> based on an XPath <a href="http://www
Create a new <code>DTMIterator</code> based only on a whatToShow and a DTMFilter
Create a new <code>DTMIterator</code> that holds exactly one node
Get a flag indicating whether an incremental transform is desired
Set a flag indicating whether an incremental transform is desired This flag should have the same value as the FEATURE_INCREMENTAL feature which is set by the TransformerFactory
Get a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document
Set a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document
Return the state of the services mechanism feature
Set the state of the services mechanism feature
%TBD% Doc NEEDSDOC @param dtm NEEDSDOC ($objectName$) @return
%TBD% Doc NEEDSDOC ($objectName$) @return
%TBD% Doc NEEDSDOC ($objectName$) @return
Add a DTM to the DTM table
Add a DTM to the DTM table
Get the first free DTM ID available
Get an instance of a DTM, loaded with the content from the specified source
Given a W3C DOM node, try and return a DTM handle
This method returns the SAX2 parser to use with the InputSource obtained from this URI
Indicates that the XMLReader object is no longer in use for the transform
Return the DTM object containing a representation of this node
Given a DTM, find the ID number in the DTM tables which addresses the start of the document
Release the DTMManager's reference(s) to a DTM, making it unmanaged
Method createDocumentFragment NEEDSDOC (createDocumentFragment) @return
NEEDSDOC Method createDTMIterator NEEDSDOC @param whatToShow NEEDSDOC @param filter NEEDSDOC @param entityReferenceExpansion NEEDSDOC (createDTMIterator) @return
NEEDSDOC Method createDTMIterator NEEDSDOC @param xpathString NEEDSDOC @param presolver NEEDSDOC (createDTMIterator) @return
NEEDSDOC Method createDTMIterator NEEDSDOC @param node NEEDSDOC (createDTMIterator) @return
NEEDSDOC Method createDTMIterator NEEDSDOC @param xpathCompiler NEEDSDOC @param pos NEEDSDOC (createDTMIterator) @return
return the expanded name table
Return the number of Attributes on this Element
Retrieves a node specified by name
Returns the <code>index</code>th item in the map
Adds a node using its <code>nodeName</code> attribute
Removes a node specified by name
Retrieves a node specified by local name and namespace URI
Adds a node using its <code>namespaceURI</code> and <code>localName</code>
Removes a node specified by local name and namespace URI
Access the wrapped DTMIterator
Detaches the NodeIterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
The value of this flag determines whether the children of entity reference nodes are visible to the iterator
Return a handle to the filter used to screen nodes
Return a mask describing which node types are presented via the iterator
Access the wrapped DTMIterator
Returns the <code>index</code>th item in the collection
The number of nodes in the list
Returns the <code>index</code>th item in the collection
The number of nodes in the list
NON-DOM: Return the DTM model
NON-DOM: Return the DTM node number
Test for equality based on node number
Test for equality based on node number
FUTURE DOM: Test node identity, in lieu of Node==Node
A PI's "target" states what processor channel the PI's data should be directed to
Ask whether we support a given DOM feature
Ask whether we support a given DOM feature
Method hasAttribute
Method hasAttributeNS
This is a bit of a problem in DTM, since a DTM may be a Document Fragment and hence not have a clear-cut Document Element
Introduced in DOM Level 2
Get the owner element of an attribute
NEEDSDOC Method adoptNode NEEDSDOC @param source NEEDSDOC (adoptNode) @return
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
Retrieves the object associated to a key on a this node
This method returns a specialized object which implements the specialized APIs of the specified feature and version
Tests whether two nodes are equal
DOM Level 3 Look up the namespace URI associated to the given prefix, starting from this node
DOM Level 3  This method checks if the specified <code>namespaceURI</code> is the  default namespace or not
DOM Level 3 Look up the prefix associated to the given namespace URI, starting from this node
Returns whether this node is the same node as the given one
This attribute returns the text content of this node and its descendants
This attribute returns the text content of this node and its descendants
Compares a node with this node with regard to their position in the document
The absolute base URI of this node or <code>null</code> if undefined
DOM Level 3 Renaming node
DOM Level 3  Normalize document
The configuration used when <code>Document
DOM Level 3
DOM Level 3 The location of the document or <code>null</code> if undefined
DOM Level 3 An attribute specifying the actual encoding of this document
DOM Level 3 An attribute specifying the actual encoding of this document
DOM Level 3
DOM Level 3 Returns all text of <code>Text</code> nodes logically-adjacent text nodes to this node, concatenated in document order
DOM Level 3 Returns whether this text node contains whitespace in element content, often abusively called "ignorable whitespace"
NON-DOM: set the type of this attribute to be ID type
DOM Level 3: register the given attribute node as an ID attribute
DOM Level 3: register the given attribute node as an ID attribute
DOM Level 3: register the given attribute node as an ID attribute
Method getSchemaTypeInfo
Command-line unit test driver
Command-line unit test driver
Set the DTM to be traversed
Get the ContentHandler used for the tree walk
Set the ContentHandler used for the tree walk
Perform a non-recursive pre-order/post-order traversal, operating as a Visitor
Perform a non-recursive pre-order/post-order traversal, operating as a Visitor
Start processing given node
End processing of given node
Test whether whitespace-only text nodes are visible in the logical view of <code>DTM</code>
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Set the start node for this iterator
Returns the set of flags which contains a duplicate flag
Call corresponding visitor method(s)
Call corresponding visitor method(s)
<p>Return the name of the XML Schema date/time type that this instance maps to
Returns the sign of this duration in -1,0, or 1
<p>Get the years value of this <code>Duration</code> as an <code>int</code> or <code>0</code> if not present
Obtains the value of the MONTHS field as an integer value, or 0 if not present
Obtains the value of the DAYS field as an integer value, or 0 if not present
Obtains the value of the HOURS field as an integer value, or 0 if not present
Obtains the value of the MINUTES field as an integer value, or 0 if not present
Obtains the value of the SECONDS field as an integer value, or 0 if not present
<p>Returns the length of the duration in milli-seconds
<p>Returns the length of the duration in milli-seconds
Gets the value of a field
Checks if a field is set
<p>Computes a new duration whose value is <code>this+rhs</code>
Adds this duration to a {@link Calendar} object
Adds this duration to a {@link Date} object
<p>Computes a new duration whose value is <code>this-rhs</code>
<p>Computes a new duration whose value is <code>factor</code> times longer than the value of this duration
Computes a new duration whose value is <code>factor</code> times longer than the value of this duration
Returns a new <code>Duration</code> object whose value is <code>-this</code>
<p>Converts the years and months fields into the days field by using a specific time instant as the reference point
<p>Partial order relation comparison with this <code>Duration</code> instance
<p>Checks if this duration object is strictly longer than another <code>Duration</code> object
<p>Checks if this duration object is strictly shorter than another <code>Duration</code> object
<p>Checks if this duration object has the same duration as another <code>Duration</code> object
Returns a hash code consistent with the definition of the equals method
<p>Returns a <code>String</code> representation of this <code>Duration</code> <code>Object</code>
Parses, validates and computes normalized version of duration object
Compares 2 given durations
Receives requests issued to any CORBA object incarnated by the DSI servant and performs the processing necessary to execute the request
Obtain the value of a specific attribute of the Dynamic MBean
Set the value of a specific attribute of the Dynamic MBean
Get the values of several attributes of the Dynamic MBean
Sets the values of several attributes of the Dynamic MBean
Allows an action to be invoked on the Dynamic MBean
Provides the exposed attributes and actions of the Dynamic MBean using an MBeanInfo object
The resource corresponding to this MBean
The name of this MBean's class, as used by permission checks
Additional registration hook
Additional registration hook
Returns the method used to create this DynamicMethodMarshaller
Copy the arguments as needed for this particular method
Read the arguments for this method from the InputStream
Write arguments for this method to the OutputStream
Copy the result as needed for this particular method
Read the result from the InputStream
Write the result to the OutputStream
Returns true iff thr's class is a declared exception (or a subclass of a declared exception) for this DynamicMethodMarshaller's method
Write the repository ID of the exception and the value of the exception to the OutputStream
Reads an exception ID and the corresponding exception from the input stream
Similar to ObjectImpl
Similar to ObjectImpl
Similar to ObjectImpl
Similar to ObjectImpl
Connect this dynamic stub to an ORB
Creates a new DynAny object from an any value
Creates a DynAny from a TypeCode
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the elements of the DynArray
Sets the DynArray to contain the passed elements
Returns the elements of the DynArray as DynAnys
Sets the DynArray to contain the passed elements
Returns the value of the DynEnum as an IDL identifier
Sets the value of the DynEnum to the enumerated value whose IDL identifier is passed in the value parameter
Returns the value of the DynEnum as the enumerated value's ordinal value
Sets the value of the DynEnum as the enumerated value's ordinal value
Returns the value of a DynFixed
Sets the value of the DynFixed
Returns the current length of the sequence
Sets the length of the sequence
Returns the elements of the sequence
Sets the elements of a sequence
Returns the DynAnys representing the elements of the sequence
Sets the elements of a sequence using DynAnys
Returns the name of the member at the current position
Returns the TCKind associated with the member at the current position
Returns a sequence of NameValuePairs describing the name and the value of each member in the struct associated with a DynStruct object
Initializes the struct data value associated with a DynStruct object from a sequence of NameValuePairs
Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the struct associated with a DynStruct object
Initializes the struct data value associated with a DynStruct object from a sequence of NameDynAnyPairs
Returns the current discriminator value
Returns the current discriminator value
Sets the discriminator of the DynUnion to the specified value
Sets the discriminator to a value that is consistent with the value of the default case of a union
Sets the discriminator to a value that does not correspond to any of the unions case labels
Returns true if the union has no active member, that is, the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label
Returns the TCKind value of the discriminators TypeCode
Returns the TCKind value of the currently active members TypeCode
Returns the currently active member
Returns the name of the currently active member
Returns the boxed value as an Any
Replaces the boxed value with the specified value
Returns the boxed value as a DynAny
Replaces the boxed value with the value contained in the parameter
Returns true if the DynValueCommon represents a null value type
Changes the representation of a DynValueCommon to a null value type
Replaces a null value type with a newly constructed value
Returns the name of the member at the current position
Returns the TCKind associated with the member at the current position
Returns a sequence of NameValuePairs describing the name and the value of each member in the value type
Initializes the value type's members from a sequence of NameValuePairs
Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the value type
Initializes the value type's members from a sequence of NameDynAnyPairs
Returns the field size in bits
Returns the field size in bits which is {@code m} for this characteristic 2 finite field
Returns the value {@code m} of this characteristic 2 finite field
Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis
Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis
Compares this finite field for equality with the specified object
Returns a hash code value for this characteristic 2 finite field
Returns the field size in bits which is size of prime p for this prime finite field
Returns the prime {@code p} of this prime finite field
Compares this prime finite field for equality with the specified object
Returns a hash code value for this prime finite field
Returns the standard or predefined name of the to-be-generated EC domain parameters
Returns the domain parameters associated with this key
Returns the elliptic curve that this parameter defines
Returns the generator which is also known as the base point
Returns the order of the generator
Returns the cofactor
Returns the affine x-coordinate {@code x}
Returns the affine y-coordinate {@code y}
Compares this elliptic curve point for equality with the specified object
Returns a hash code value for this elliptic curve point
Returns the private value S
Returns the private value S
Returns the associated elliptic curve domain parameters
Returns the public point W
Returns the public point W
Returns the associated elliptic curve domain parameters
Creates a copy of the editor kit
Called when the kit is being installed into the a JEditorPane
Called when the kit is being removed from the JEditorPane
Gets the MIME type of the data that this kit represents support for
Fetches a factory that is suitable for producing views of any models that are produced by this kit
Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit
Fetches a caret that can navigate through views produced by the associated ViewFactory
Creates an uninitialized text storage model that is appropriate for this type of editor
Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler
Writes content from a document to the given stream in a format appropriate for this kind of content handler
Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler
Writes content from a document to the given stream in a format appropriate for this kind of content handler
Get the name of the element
Return true if the start tag can be omitted
Return true if the end tag can be omitted
Get type
Get content model
Get the attributes
Get index
Check if empty
Convert to a string
Get an attribute by name
Get an attribute by value
Check that the element is the one expect
The style attribute
A short integer indicating what type of node this is
Returns the element definition name
Replicate this object
Query the attributes defined on this Element
Returns a list of fields in {@code elements}
Returns a set of fields in {@code elements}
Returns a list of constructors in {@code elements}
Returns a set of constructors in {@code elements}
Returns a list of methods in {@code elements}
Returns a set of methods in {@code elements}
Returns a list of types in {@code elements}
Returns a set of types in {@code elements}
Returns a list of packages in {@code elements}
Returns a set of packages in {@code elements}
Returns the line number
Returns the column number
Returns the character offset
Clones the ElementIterator
Fetches the first element
Fetches the current depth of element tree
Fetches the current Element
Fetches the next Element
Fetches the previous Element
Returns {@code true} if this is a kind of class: either {@code CLASS} or {@code ENUM}
Returns {@code true} if this is a kind of interface: either {@code INTERFACE} or {@code ANNOTATION_TYPE}
Returns {@code true} if this is a kind of field: either {@code FIELD} or {@code ENUM_CONSTANT}
{@inheritDoc} The element argument has kind {@code PACKAGE}
Visits a type element, dispatching to the visit method for the specific {@linkplain ElementKind kind} of type, {@code ANNOTATION_TYPE}, {@code CLASS}, {@code ENUM}, or {@code INTERFACE}
Visits an {@code ANNOTATION_TYPE} type element by calling {@code defaultAction}
Visits a {@code CLASS} type element by calling {@code defaultAction}
Visits an {@code ENUM} type element by calling {@code defaultAction}
Visits an {@code INTERFACE} type element by calling {@code defaultAction}
Visits a variable element, dispatching to the visit method for the specific {@linkplain ElementKind kind} of variable, {@code ENUM_CONSTANT}, {@code EXCEPTION_PARAMETER}, {@code FIELD}, {@code LOCAL_VARIABLE}, {@code PARAMETER}, or {@code RESOURCE_VARIABLE}
Visits an {@code ENUM_CONSTANT} variable element by calling {@code defaultAction}
Visits an {@code EXCEPTION_PARAMETER} variable element by calling {@code defaultAction}
Visits a {@code FIELD} variable element by calling {@code defaultAction}
Visits a {@code LOCAL_VARIABLE} variable element by calling {@code defaultAction}
Visits a {@code PARAMETER} variable element by calling {@code defaultAction}
Visits a {@code RESOURCE_VARIABLE} variable element by calling {@code visitUnknown}
Visits an executable element, dispatching to the visit method for the specific {@linkplain ElementKind kind} of executable, {@code CONSTRUCTOR}, {@code INSTANCE_INIT}, {@code METHOD}, or {@code STATIC_INIT}
Visits a {@code CONSTRUCTOR} executable element by calling {@code defaultAction}
Visits an {@code INSTANCE_INIT} executable element by calling {@code defaultAction}
Visits a {@code METHOD} executable element by calling {@code defaultAction}
Visits a {@code STATIC_INIT} executable element by calling {@code defaultAction}
{@inheritDoc} The element argument has kind {@code TYPE_PARAMETER}
Visits a {@code RESOURCE_VARIABLE} variable element by calling {@code defaultAction}
NON-DOM: resets this node and sets specified values for the node
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
Introduced in DOM Level 2
DOM Level 3 WD - Experimental
Introduced in DOM Level 2
NON-DOM: setting type used by the DOM parser
Returns the namespace of the Elements of the sub-class
Returns the localname of the Elements of the sub-class
This method creates an Element in a given namespace with a given localname
Method setElement
Returns the Element which was constructed by the Object
Returns the Element plus a leading and a trailing CarriageReturn Text node
Method getDocument
Method getBaseURI
Method addBigIntegerElement
Method addBase64Element
Method addTextElement
Method addBase64Text
Method addText
Method getVal
Method getBytesFromChildElement
Method getTextFromChildElement
Method getBytesFromTextChild
Method getTextFromTextChild
Method length
Adds an xmlns: definition to the Element
Method setDefaultPrefix
This method registers the default prefixes
Method getDefaultPrefix
[element declaration]: an item isomorphic to the element declaration used to validate this element
[notation]: the notation declaration
[nil]: true if clause 3
schema information: the schema information property if it is the validation root, <code>null</code> otherwise
[schema default]
[schema normalized value]
[schema specified]
Determines the extent to which the document has been validated
Determine the validity of the node with respect to the validation being attempted
A list of error codes generated from validation attempts
[nil]
[notation]
An item isomorphic to the type definition used to validate this element
If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple thype definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value
An item isomorphic to the element declaration used to validate this element
[schema information]
Reset() should be called in validator startElement(
Returns a package given its fully qualified name
Returns a type element given its canonical name
Returns the values of an annotation's elements, including defaults
Returns the text of the documentation (&quot;Javadoc&quot;) comment of an element
Returns {@code true} if the element is deprecated, {@code false} otherwise
Returns the <i>binary name</i> of a type element
Returns the package of an element
Returns all members of a type element, whether inherited or declared directly
Returns all annotations <i>present</i> on an element, whether directly present or present via inheritance
Tests whether one type, method, or field hides another
Tests whether one method, as a member of a given type, overrides another method
Returns the text of a <i>constant expression</i> representing a primitive value or a string
Prints a representation of the elements to the given writer in the specified order
Return a name with the same sequence of characters as the argument
Returns {@code true} if the type element is a functional interface, {@code false} otherwise
Iterates over the given elements and calls {@link #scan(Element, Object) scan(Element, P)} on each one
Processes an element by calling {@code e
Convenience method equivalent to {@code v
{@inheritDoc} This implementation scans the enclosed elements
{@inheritDoc} This implementation scans the enclosed elements
{@inheritDoc} This implementation scans the enclosed elements, unless the element is a {@code RESOURCE_VARIABLE} in which case {@code visitUnknown} is called
{@inheritDoc} This implementation scans the parameters
{@inheritDoc} This implementation scans the enclosed elements
This implementation scans the enclosed elements
Visits an element
A convenience method equivalent to {@code v
Visits a package element
Visits a type element
Visits a variable element
Visits an executable element
Visits a type parameter element
Visits an unknown kind of element
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iteration object that defines the boundary of this <code>Ellipse2D</code>
Returns the hashcode for this <code>Ellipse2D</code>
Determines whether or not the specified <code>Object</code> is equal to this <code>Ellipse2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location and size of the framing rectangle of this <code>Shape</code> to the specified rectangular values
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the finite field {@code field} that this elliptic curve is over
Returns the first coefficient {@code a} of the elliptic curve
Returns the second coefficient {@code b} of the elliptic curve
Returns the seeding bytes {@code seed} used during curve generation
Compares this elliptic curve for equality with the specified object
Returns a hash code value for this elliptic curve
Does no drawing by default
Reinitialize the insets parameter with this Border's current Insets
Returns the insets of the border
Returns whether or not the border is opaque
Read the count from is, then read count Identifiables from is using the factory
Write all Identifiables that we contain to os
Helper method that is used to extract data from an output stream and write the data to another output stream
Helper method to read the octet array from is, deencapsulate it, and return as another InputStream
Helper method that reads an octet array from an input stream
Returns the encoded key
Returns the name of the encoding format associated with this key specification
Write the specified object to the output stream
Sets the exception handler for this stream to <code>exceptionListener</code>
Gets the exception handler for this stream
Returns the persistence delegate for the given type
Associates the specified persistence delegate with the given type
Removes the entry for this instance, returning the old entry
Returns a tentative value for <code>oldInstance</code> in the environment created by this stream
Writes statement <code>oldStm</code> to the stream
The implementation first checks to see if an expression with this value has already been written
This is not a public API
This is not a public API
Returns the Java encoding name for the specified IANA encoding name
Returns the IANA encoding name for the specified Java encoding name
Returns the last printable character for an unspecified encoding
Try the best we can to convert a Java encoding to a XML-style encoding
Returns a hint as to which recipient this encrypted key value is intended for
Sets the recipient for this <code>EncryptedKey</code>
Returns pointers to data and keys encrypted using this key
Sets the <code>ReferenceList</code> to the <code>EncryptedKey</code>
Returns a user readable name with the key value
Sets the carried name
This method is used to add a custom {@link KeyResolverSpi} to help resolve the KEK
Returns a <code>String</code> providing for the standard method of assigning an id to the element within the document context
Sets the id
Returns an <code>URI</code> identifying type information about the plaintext form of the encrypted content
Sets the type
Returns a <code>String</code> which describes the media type of the data which has been encrypted
Sets the mime type
Return an <code>URI</code> representing the encoding of the <code>EncryptedType</code>
Sets the <code>URI</code> representing the encoding of the <code>EncryptedType</code>
Returns an <code>EncryptionMethod</code> that describes the encryption algorithm applied to the cipher data
Sets the <code>EncryptionMethod</code> used to encrypt the cipher data
Returns the <code>ds:KeyInfo</code>, that carries information about the key used to encrypt the data
Sets the encryption key information
Returns the <code>CipherReference</code> that contains the <code>CipherValue</code> or <code>CipherReference</code> with the encrypted data
Returns additional information concerning the generation of the <code>EncryptedType</code>
Sets the <code>EncryptionProperties</code> that supplies additional information about the generation of the <code>EncryptedType</code>
Returns the algorithm applied to the cipher data
Returns the key size of the key of the algorithm applied to the cipher data
Sets the size of the key of the algorithm applied to the cipher data
Returns the OAEP parameters of the algorithm applied applied to the cipher data
Sets the OAEP parameters
Set the Digest Algorithm to use
Get the Digest Algorithm to use
Set the MGF Algorithm to use
Get the MGF Algorithm to use
Returns an iterator over all the additional elements contained in the <code>EncryptionMethod</code>
Adds encryption method information
Removes encryption method information
Returns the <code>EncryptionProperties</code>' id
Sets the id
Returns an <code>Iterator</code> over all the <code>EncryptionPropterty</code> elements contained in this <code>EncryptionProperties</code>
Adds an <code>EncryptionProperty</code>
Removes the specified <code>EncryptionProperty</code>
Returns the <code>EncryptedType</code> being described
Sets the target
Returns the id of the <CODE>EncryptionProperty</CODE>
Sets the id
Returns the attribute's value in the <code>xml</code> namespace
Set the attribute value
Returns the properties of the <CODE>EncryptionProperty</CODE>
Adds encryption information
Removes encryption information
Get the name of this event
Returns an Iterator of namespaces that have gone out of scope
Creates an endpoint with the specified implementor object
Creates an endpoint with the specified implementor object and web service features
Creates an endpoint with the specified binding type and implementor object
Creates an endpoint with the specified binding type, implementor object, and web service features
Returns the binding for this endpoint
Returns the implementation object for this endpoint
Publishes this endpoint at the given address
Creates and publishes an endpoint for the specified implementor object at the given address
Creates and publishes an endpoint for the specified implementor object at the given address
Publishes this endpoint at the provided server context
Publishes this endpoint at the provided server context
Stops publishing this endpoint
Returns true if the endpoint is in the published state
Returns a list of metadata documents for the service
Sets the metadata for this endpoint
Returns the executor for this <code>Endpoint</code>instance
Sets the executor for this <code>Endpoint</code> instance
Returns the property bag for this <code>Endpoint</code> instance
Sets the property bag for this <code>Endpoint</code> instance
Returns the <code>EndpointReference</code> associated with this <code>Endpoint</code> instance
Returns the <code>EndpointReference</code> associated with this <code>Endpoint</code> instance
By settng a <code>EndpointContext</code>, JAX-WS runtime knows about addresses of other endpoints in an application
This gives list of endpoints in an application
Factory method to read an EndpointReference from the infoset contained in <code>eprInfoset</code>
write this <code>EndpointReference</code> to the specified infoset format
The <code>getPort</code> method returns a proxy
Displays EPR infoset for debugging convenience
The public identifier associated with the entity if specified, and <code>null</code> otherwise
The system identifier associated with the entity if specified, and <code>null</code> otherwise
For unparsed entities, the name of the notation for the entity
An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity
An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity
An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity
Checks that "content" string is valid ID value
The entity's public identifier, or null if none was given
The entity's system identifier
The entity's name
The name of the associated notation
The replacement text of the entity
Get the base URI for this reference or null if this information is not available
A short integer indicating what type of node this is
Returns the entity name
Sets the node value
The namespace prefix of this node
Clone node
The public identifier associated with the entity
The system identifier associated with the entity
DOM Level 3 WD - experimental the version number of this entity, when it is an external parsed entity
DOM Level 3 WD - experimental the encoding of this entity, when it is an external parsed entity
Unparsed entities -- which contain non-XML data -- have a "notation name" which tells applications how to deal with them
DOM Level 2: The public identifier associated with the entity
NON-DOM encoding - An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity
An attribute specifying the encoding used for this entity at the tiome of parsing, when it is an external parsed entity
NON-DOM, used to set the input encoding
NON-DOM version - An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity
DOM Level 2: The system identifier associated with the entity
DOM Level 2: Unparsed entities -- which contain non-XML data -- have a "notation name" which tells applications how to deal with them
Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI
NON-DOM: set base uri
A short integer indicating what type of node this is
Returns the name of the entity referenced
Clone node
Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI
NON-DOM: set base uri
NON-DOM: compute string representation of the entity reference
EntityReference's children are a reflection of those defined in the named Entity
NON-DOM: sets the node and its children value
Allow the application to resolve external entities
Allows applications to provide an external subset for documents that don't explicitly define one
Allows applications to map references to external entities into input sources, or tell the parser it should use conventional URI resolution
<p>Sets the SAX entity resolver wrapped by this object
<p>Returns the SAX entity resolver wrapped by this object
<p>Locates an external subset for documents which do not explicitly provide one
Resolves an external parsed entity
Sets the SAX entity resolver
Returns the SAX entity resolver
Resolves an external parsed entity
Query method to check if entity with this name was declared
Query method to check if entity is unparsed
Returns the name of this enum constant, exactly as declared in its enum declaration
Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)
Returns the name of this enum constant, as contained in the declaration
Returns true if the specified object is equal to this enum constant
Returns a hash code for this enum constant
Throws CloneNotSupportedException
Compares this enum with the specified object for order
Returns the Class object corresponding to this enum constant's enum type
Returns the enum constant of the specified enum type with the specified name
enum classes cannot have finalize methods
Returns the type of the missing enum constant
Returns the name of the missing enum constant
Sets the current value for the control
Obtains this control's current value
Returns the set of possible values for this control
Provides a string representation of the control
Return the integer form of the enumerated
Returns an Java enumeration of the permitted integers
Returns an Java enumeration of the permitted strings
Compares this enumerated to the specified enumerated
Returns the hash code for this enumerated
Returns the string form of this enumerated
Returns the hashtable of the integer forms
Returns the hashtable of the string forms
Tests if this enumeration contains more elements
Returns the next element of this enumeration if this enumeration object has at least one more element to provide
Returns the number of key-value mappings in this map
Returns <tt>true</tt> if this map maps one or more keys to the specified value
Returns <tt>true</tt> if this map contains a mapping for the specified key
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Associates the specified value with the specified key in this map
Removes the mapping for this key from this map if present
Copies all of the mappings from the specified map to this map
Removes all mappings from this map
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns a shallow copy of this enum map
Build an SnmpValue from this object
Check that the given <code>value</code> is valid
Creates an empty enum set with the specified element type
Creates an enum set containing all of the elements in the specified element type
Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any)
Creates an enum set initialized from the specified collection
Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are <i>not</i> contained in the specified set
Creates an enum set initially containing the specified element
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints
Returns a copy of this set
Returns this enumeration value's integer value
Returns a clone of this enumeration value, which to preserve the semantics of enumeration values is the same object as this enumeration value
Returns a hash code value for this enumeration value
Returns a string value corresponding to this enumeration value
During object input, convert this deserialized enumeration instance to the proper enumeration value defined in the enumeration attribute class
Returns the string table for this enumeration value's enumeration class
Returns the enumeration value table for this enumeration value's enumeration class
Returns the lowest integer value used by this enumeration value's enumeration class
Get the Connector Server default class loader
Get the Connector Client default class loader
Initialize the cause field of a {@code Throwable} object
Returns the cause field of a {@code Throwable} object
Returns the size of a notification buffer for a connector server
Returns the maximum notification number which a client will fetch every time
Returns the timeout for a client to fetch notifications
Get an integer-valued attribute with name <code>name</code> from <code>env</code>
Returns the server side connection timeout
Returns the client connection check period
Computes a boolean value from a string value retrieved from a property in the given map
Computes a boolean value from a string value retrieved from a property in the given map
Converts a map into a valid hash table, i
Returns true if {@value SERVER_DAEMON} is specified in the {@code env} as a key and its value is a String and it is equal to true ignoring case
Retrieves the exception in this <code>Environment</code> object
Inserts the given exception into this <code>Environment</code> object
Clears this <code>Environment</code> object of its exception
Command line runnability: checks for [-out outFilename] arg
Programmatic entrypoint: Report on basic Java environment and CLASSPATH settings that affect Xalan
Fill a hash with basic environment settings that affect Xalan
Dump a basic Xalan environment report to outWriter
Print out report of 
Stylesheet extension entrypoint: Dump a basic Xalan environment report from getEnvironmentHash() to a Node
Print out report of 
Fillin hash with info about SystemProperties
Cheap-o listing of specified 
Cheap-o method to determine the product version of a 
Report version information about JAXP interfaces
Report product version information from Xalan-J
Report product version information from common parsers
Report product version information from Ant
Report version info from DOM interfaces
Report version info from DOM interfaces
Report version info from SAX interfaces
Bottleneck output: calls outWriter
Apply the operation to two operands, and return the result
Execute a binary operation by calling execute on each of the operands, and then calling the operate method on the derived class
Gets the numeric value associated with the era as defined by the chronology
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this era as an {@code int}
Gets the value of the specified field from this era as a {@code long}
Queries this era using the specified query
Adjusts the specified temporal object to have the same era as this object
Gets the textual representation of this era
Receive notification of a warning
Receive notification of a recoverable error
Receive notification of a non-recoverable error
returns if there was an error since the last invocation of the resetError method
resets the error flag
Implemented by the derived class to return the actual {@link ErrorHandler} to which errors are sent
Sets the SAX error handler
Returns the SAX error handler
Reports a warning
Reports an error
Report a fatal error
Creates a SAXParseException from an XMLParseException
Creates an XMLParseException from a SAXParseException
Creates an XNIException from a SAXException
Receive notification of a warning
Receive notification of a recoverable error
<p>Receive notification of a non-recoverable error
The error method is called when a Handler failure occurs
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
This version of toString() uses the _params instance variable to format the message
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
Returns whether or not the border is opaque
Returns which etch-type is set on the etched border
Returns the highlight color of the etched border when rendered on the specified component
Returns the highlight color of the etched border
Returns the shadow color of the etched border when rendered on the specified component
Returns the shadow color of the etched border
The name of the event (case-insensitive)
Used to indicate the <code>EventTarget</code> to which the event was originally dispatched
Used to indicate the <code>EventTarget</code> whose <code>EventListeners</code> are currently being processed
Used to indicate which phase of event flow is currently being evaluated
Used to indicate whether or not an event is a bubbling event
Used to indicate whether or not an event can have its default action prevented
Used to specify the time (in milliseconds relative to the epoch) at which the event was created
The <code>stopPropagation</code> method is used prevent further propagation of an event during event flow
If an event is cancelable, the <code>preventDefault</code> method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur
The <code>initEvent</code> method is used to initialize the value of an <code>Event</code> created through the <code>DocumentEvent</code> interface
Adds a listener for receiving naming events fired when the object(s) identified by a target and scope changes
Adds a listener for receiving naming events fired when the object named by the string target name and scope changes
Removes a listener from receiving naming events fired by this <tt>EventContext</tt>
Determines whether a listener can register interest in a target that does not exist
Adds a listener for receiving naming events fired when objects identified by the search filter <tt>filter</tt> at the object named by target are modified
Adds a listener for receiving naming events fired when objects identified by the search filter <tt>filter</tt> at the object named by the string target name are modified
Adds a listener for receiving naming events fired when objects identified by the search filter <tt>filter</tt> and filter arguments at the object named by the target are modified
Adds a listener for receiving naming events fired when objects identified by the search filter <tt>filter</tt> and filter arguments at the object named by the string target name are modified
Tests whether this event is part of this stream
Returns the object to which this event handler will send a message
Returns the name of the target's writable property that this event handler will set, or the name of the method that this event handler will invoke on the target
Returns the property of the event that should be used in the action applied to the target
Returns the name of the method that will trigger the action
Extract the appropriate property value from the event and pass it to the action associated with this <code>EventHandler</code>
Creates an implementation of <code>listenerInterface</code> in which <em>all</em> of the methods in the listener interface apply the handler's <code>action</code> to the <code>target</code>
/** Creates an implementation of <code>listenerInterface</code> in which <em>all</em> of the methods pass the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>
Creates an implementation of <code>listenerInterface</code> in which the method named <code>listenerMethodName</code> passes the value of the event expression, <code>eventPropertyName</code>, to the final method in the statement, <code>action</code>, which is applied to the <code>target</code>
The DOM doesn't deal with constructors, so instead we have an        initializer call to set most of the read-only fields
Causes exit from in-progress event dispatch before the next        currentTarget is selected
Prevents any default processing built into the target node from        occurring
This method is called whenever an event occurs of the type for which the <code> EventListener</code> interface was registered
Passes back the event listener list as an array of ListenerType-listener pairs
Return an array of all the listeners of the given type
Returns the total number of listeners for this listener list
Returns the total number of listeners of the supplied type for this listener list
Adds the listener as a listener of the specified type
Removes the listener as a listener of the specified type
Returns a string representation of the EventListenerList
Returns the listener associated with the proxy
The object on which the Event initially occurred
Returns a String representation of this EventObject
Posts a 1
Removes an event from the <code>EventQueue</code> and returns it
Returns the first event on the <code>EventQueue</code> without removing it
Returns the first event with the specified id, if any
Dispatches an event
Returns the timestamp of the most recent event that had a timestamp, and that was dispatched from the <code>EventQueue</code> associated with the calling thread
Returns the the event currently being dispatched by the <code>EventQueue</code> associated with the calling thread
Replaces the existing <code>EventQueue</code> with the specified one
Stops dispatching events using this <code>EventQueue</code>
Creates a new {@code secondary loop} associated with this event queue
Returns true if the calling thread is {@link Toolkit#getSystemEventQueue the current AWT EventQueue}'s dispatch thread
Causes <code>runnable</code> to have its <code>run</code> method called in the {@link #isDispatchThread dispatch thread} of {@link Toolkit#getSystemEventQueue the system EventQueue}
Causes <code>runnable</code> to have its <code>run</code> method called in the {@link #isDispatchThread dispatch thread} of {@link Toolkit#getSystemEventQueue the system EventQueue}
Set the parent of this instance
Get the parent of this instance
Gets the <TT>Class</TT> object for the target interface
Gets the methods of the target listener interface
Gets the <code>MethodDescriptor</code>s of the target listener interface
Gets the method used to add event listeners
Gets the method used to remove event listeners
Gets the method used to access the registered event listeners
Mark an event set as unicast (or not)
Normally event sources are multicast
Marks an event set as being in the &quot;default&quot; set (or not)
Reports if an event set is in the &quot;default&quot; set
This method allows the registration of event listeners on the event target
This method allows the removal of event listeners from the event target
This method allows the dispatch of events into the implementations event model
Returns the inclusive namespace prefix list
Return true iff cls is an exception class that is assignment compatible with an exception declared on the method used to create this ExceptionHandler
Write the exception ex to os
Read the exception contained in the InputStream in the ApplicationException
Returns the exception that occurred during a static initialization that caused this error to be created
Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created)
Retrieves the number of <code>TypeCode</code> objects in this <code>ExceptionList</code> object
Adds a <code>TypeCode</code> object describing an exception to this <code>ExceptionList</code> object
Returns the <code>TypeCode</code> object at the given index
Removes the <code>TypeCode</code> object at the given index
This method is called when a recoverable exception has been caught
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump exceptions attribute to file stream in binary format
Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted}), and then transfers the given object to it, receiving its object in return
Waits for another thread to arrive at this exchange point (unless the current thread is {@linkplain Thread#interrupt interrupted} or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return
Returns the {@code Class} object representing the class or interface that declares the executable represented by this object
Returns the name of the executable represented by this object
Returns the Java language {@linkplain Modifier modifiers} for the executable represented by this object
Returns an array of {@code TypeVariable} objects that represent the type variables declared by the generic declaration represented by this {@code GenericDeclaration} object, in declaration order
Returns an array of {@code Class} objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object
Returns an array of {@code Type} objects that represent the formal parameter types, in declaration order, of the executable represented by this object
Returns an array of {@code Parameter} objects that represent all the parameters to the underlying executable represented by this object
Returns an array of {@code Class} objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object
Returns an array of {@code Type} objects that represent the exceptions declared to be thrown by this executable object
Returns a string describing this {@code Executable}, including any type parameters
Returns {@code true} if this executable was declared to take a variable number of arguments; returns {@code false} otherwise
Returns {@code true} if this executable is a synthetic construct; returns {@code false} otherwise
Returns an array of arrays of {@code Annotation}s that represent the annotations on the formal parameters, in declaration order, of the {@code Executable} represented by this object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an {@code AnnotatedType} object that represents the use of a type to specify the return type of the method/constructor represented by this Executable
Returns an {@code AnnotatedType} object that represents the use of a type to specify the receiver type of the method/constructor represented by this Executable object
Returns an array of {@code AnnotatedType} objects that represent the use of types to specify formal parameter types of the method/constructor represented by this Executable
Returns an array of {@code AnnotatedType} objects that represent the use of types to specify the declared exceptions of the method/constructor represented by this Executable
Returns the formal type parameters of this executable in declaration order
Returns the return type of this executable
Returns the formal parameters of this executable
Returns the receiver type of this executable, or {@link javax
Returns {@code true} if this method or constructor accepts a variable number of arguments and returns {@code false} otherwise
Returns {@code true} if this method is a default method and returns {@code false} otherwise
Returns the exceptions and other throwables listed in this method or constructor's {@code throws} clause in declaration order
Returns the default value if this executable is an annotation type element
Returns the simple name of a constructor, method, or initializer
Return exceptions this method or constructor throws
Return exceptions this method or constructor throws
Return true if this method is native
Return true if this method is synchronized
Return true if this method was declared to take a variable number of arguments
Get argument information
Get the receiver type of this executable element
Return the throws tags in this method
Return the param tags in this method, excluding the type parameter tags
Return the type parameter tags in this method
Get the signature
get flat signature
Return the formal type parameters of this method or constructor
Returns the type variables declared by the formal type parameters of this executable
Returns the return type of this executable
Returns the types of this executable's formal parameters
Returns the receiver type of this executable, or {@link javax
Returns the exceptions and other throwables listed in this executable's {@code throws} clause
Executes the given command at some time in the future
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue
Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention
Creates a work-stealing thread pool using all {@link Runtime#availableProcessors available processors} as its target parallelism level
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed
Creates an Executor that uses a single worker thread operating off an unbounded queue
Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed
Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically
Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically
Returns an object that delegates all defined {@link ExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts
Returns an object that delegates all defined {@link ScheduledExecutorService} methods to the given executor, but not any other methods that might otherwise be accessible using casts
Returns a default thread factory used to create new threads
Returns a thread factory used to create new threads that have the same permissions as the current thread
Returns a {@link Callable} object that, when called, runs the given task and returns the given result
Returns a {@link Callable} object that, when called, runs the given task and returns {@code null}
Returns a {@link Callable} object that, when called, runs the given privileged action and returns its result
Returns a {@link Callable} object that, when called, runs the given privileged exception action and returns its result
Returns a {@link Callable} object that will, when called, execute the given {@code callable} under the current access control context
Returns a {@link Callable} object that will, when called, execute the given {@code callable} under the current access control context, with the current context class loader as the context class loader
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
Returns {@code true} if this executor has been shut down
Returns {@code true} if all tasks have completed following shut down
Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first
Submits a value-returning task for execution and returns a Future representing the pending results of the task
Submits a Runnable task for execution and returns a Future representing that task
Submits a Runnable task for execution and returns a Future representing that task
Executes the given tasks, returning a list of Futures holding their status and results when all complete
Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first
Executes the given tasks, returning the result of one that has completed successfully (i
Executes the given tasks, returning the result of one that has completed successfully (i
Given an expanded name represented by namespace, local name and node type, return an ID
Given an expanded name represented by namespace, local name and node type, return an ID
Given a type, return an expanded name ID
Given an expanded-name ID, return the local name part
Given an expanded-name ID, return the local name ID
Given an expanded-name ID, return the namespace URI part
Given an expanded-name ID, return the namespace URI ID
Given an expanded-name ID, return the local name ID
Return the size of the ExpandedNameTable
Return the array of extended types
{@inheritDoc} <p> If the invoked method completes normally, the value it returns is copied in the {@code value} property
If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it
Sets the value of this expression to <code>value</code>
Prints the value of this expression using a Java-style syntax
Get the current context node
Get the current context node list
Get the error listener
Get the value of a node as a number
Get the value of a node as a string
Get a variable based on it's qualified name
Get the XPathContext that owns this ExpressionContext
This pair of methods are used to inform the node of its    parent
This method tells the node to add its argument to the node's    list of children
This method returns a child node
Return the number of children the node has
Get the raw Expression object that this class wraps
Set the raw expression object for this object
Return the string value of a Node
Convert the string value of a Node to a number
The exsl:object-type function returns a string giving the type of the object passed as the argument
The exsl:node-set function converts a result tree fragment (which is what you get when you use the content of xsl:variable rather than its select attribute to give a variable value) into a node set
The date:date-time function returns the current date and time as a date/time string
The date:date function returns the date specified in the date/time string given as the argument
See above
The date:time function returns the time specified in the date/time string given as the argument
See above
The date:year function returns the year of a date as a number
See above
The date:month-in-year function returns the month of a date as a number
See above
The date:week-in-year function returns the week of the year as a number
See above
The date:day-in-year function returns the day of a date in a year as a number
See above
The date:day-in-month function returns the day of a date as a number
See above
The date:day-of-week-in-month function returns the day-of-the-week in a month of a date as a number (e
See above
The date:day-in-week function returns the day of the week given in a date as a number
See above
The date:hour-in-day function returns the hour of the day as a number
See above
The date:minute-in-hour function returns the minute of the hour as a number
See above
The date:second-in-minute function returns the second of the minute as a number
See above
The date:leap-year function returns true if the year given in a date is a leap year
See above
The date:month-name function returns the full name of the month of a date
See above
The date:month-abbreviation function returns the abbreviation of the month of a date
See above
The date:day-name function returns the full name of the day of the week of a date
See above
The date:day-abbreviation function returns the abbreviation of the day of the week of a date
See above
The date:format-date function formats a date/time according to a pattern
The dyn:max function calculates the maximum value for the nodes passed as the first argument, where the value of each node is calculated dynamically using an XPath expression passed as a string as the second argument
The dyn:min function calculates the minimum value for the nodes passed as the first argument, where the value of each node is calculated dynamically using an XPath expression passed as a string as the second argument
The dyn:sum function calculates the sum for the nodes passed as the first argument, where the value of each node is calculated dynamically using an XPath expression passed as a string as the second argument
The dyn:map function evaluates the expression passed as the second argument for each of the nodes passed as the first argument, and returns a node set of those values
The dyn:evaluate function evaluates a string as an XPath expression and returns the resulting value, which might be a boolean, number, string, node set, result tree fragment or external object
The dyn:closure function creates a node set resulting from transitive closure of evaluating the expression passed as the second argument on each of the nodes passed as the first argument, then on the node set resulting from that and so on until no more nodes are found
The math:max function returns the maximum value of the nodes passed as the argument
The math:min function returns the minimum value of the nodes passed as the argument
The math:highest function returns the nodes in the node set whose value is the maximum value for the node set
The math:lowest function returns the nodes in the node set whose value is the minimum value for the node set
The math:abs function returns the absolute value of a number
The math:acos function returns the arccosine value of a number
The math:asin function returns the arcsine value of a number
The math:atan function returns the arctangent value of a number
The math:atan2 function returns the angle ( in radians ) from the X axis to a point (y,x)
The math:cos function returns cosine of the passed argument
The math:exp function returns e (the base of natural logarithms) raised to a power
The math:log function returns the natural logarithm of a number
The math:power function returns the value of a base expression taken to a specified power
The math:random function returns a random number from 0 to 1
The math:sin function returns the sine of the number
The math:sqrt function returns the square root of a number
The math:tan function returns the tangent of the number passed as an argument
The math:constant function returns the specified constant to a set precision
The set:leading function returns the nodes in the node set passed as the first argument that precede, in document order, the first node in the node set passed as the second argument
The set:trailing function returns the nodes in the node set passed as the first argument that follow, in document order, the first node in the node set passed as the second argument
The set:intersection function returns a node set comprising the nodes that are within both the node sets passed as arguments to it
The set:difference function returns the difference between two node sets - those nodes that are in the node set passed as the first argument that are not in the node set passed as the second argument
The set:distinct function returns a subset of the nodes contained in the node-set NS passed as the first argument
The set:has-same-node function returns true if the node set passed as the first argument shares any nodes with the node set passed as the second argument
The str:align function aligns a string within another string
See above
The str:concat function takes a node set and returns the concatenation of the string values of the nodes in that node set
The str:padding function creates a padding string of a certain length
See above
The str:split function splits up a string and returns a node set of token elements, each containing one token from the string
See above
The str:tokenize function splits up a string and returns a node set of token elements, each containing one token from the string
See above
Return the mechanism-specific attribute associated with {@code type}
Requests that the delegation policy be respected
Returns the delegation policy response
Impersonates a principal
Retrieves the object identifier of the request
Retrieves the ASN
Creates the response object that corresponds to this request
Retrieves the object identifier of the response
Retrieves the ASN
Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType
get all built-in simple types, which are stored in a hashtable keyed by the name
Redefine this ExtendedType object to represent a different extended type
Redefine this ExtendedType object to represent a different extended type
Override the hashCode() method in the Object class
Test if this ExtendedType object is equal to the given ExtendedType
Return the node type
Return the local name
Return the namespace
The SAX <code>startElement</code> method recognizes elements from the plain catalog format and instantiates CatalogEntry objects for them
The SAX <code>endElement</code> method does nothing
Gets the extensions's object identifier
Gets the extension's criticality setting
Gets the extensions's DER-encoded value
Generates the extension's DER encoding and writes it to the output stream
This method is an extension that implements as a Xalan extension the node-set function also found in xt and saxon
Returns the intersection of two node-sets
Returns the difference between two node-sets
Returns node-set containing distinct string values
Returns true if both node-sets contain the same set of nodes
Returns the result of evaluating the argument as a string containing an XPath expression
Returns a NodeSet containing one text node for each token in the first argument
Returns a NodeSet containing one text node for each token in the first argument
Is the extension function available?
Is the extension element available?
Execute the extension function
Execute the extension function
The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays
The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays
<p>Locates an external subset for documents which do not explicitly provide one
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Return the nested exception (if any)
use the exception chaining mechanism of JDK1
Report the message associated with this error
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Get the length of the list
Get the length of the list
Discard the content of the FastStringBuffer, and most of the memory that was allocated by it, restoring the initial state
Directly set how much of the FastStringBuffer's storage is to be considered part of its content
Note that this operation has been somewhat deoptimized by the shift to a chunked array, as there is no factory method to produce a String object directly from an array of arrays and hence a double copy is needed
Append a single character onto the FastStringBuffer, growing the storage if necessary
Append the contents of a String onto the FastStringBuffer, growing the storage if necessary
Append the contents of a StringBuffer onto the FastStringBuffer, growing the storage if necessary
Append part of the contents of a Character Array onto the FastStringBuffer,  growing the storage if necessary
Append the contents of another FastStringBuffer onto this FastStringBuffer, growing the storage if necessary
Get a single character from the string buffer
Sends the specified range of characters as one or more SAX characters() events
Sends the specified range of characters as one or more SAX characters() events, normalizing the characters according to XSLT rules
Directly normalize and dispatch the character array
Sends the specified range of characters as sax Comment
Name of the exception class
Value of WS-Addressing <code>Action</code> message addressing property for the exception
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Gets the programmatic name of this feature
Sets the programmatic name of this feature
Gets the localized display name of this feature
Sets the localized display name of this feature
The "expert" flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users
The "expert" flag is used to distinguish between features that are intended for expert users from those that are intended for normal users
The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans
The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans
The "preferred" flag is used to identify features that are particularly important for presenting to humans
The "preferred" flag is used to identify features that are particularly important for presenting to humans
Gets the short description of this feature
You can associate a short descriptive string with a feature
Associate a named attribute with this feature
Retrieve a named attribute with this feature
Gets an enumeration of the locale-independent names of this feature
Returns a string representation of the object
Set the value for a specific property
Set the value of a property by its index
Set value by property name and state
Set value by property name and state
Return the value of the specified property
Return the value of the specified property
Return the value of the specified property
Return the value of a property by its ordinal
Get the index by property name
Returns the string table for class Fidelity
Returns the enumeration value table for class Fidelity
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the {@code Class} object representing the class or interface that declares the field represented by this {@code Field} object
Returns the name of the field represented by this {@code Field} object
Returns the Java language modifiers for the field represented by this {@code Field} object, as an integer
Returns {@code true} if this field represents an element of an enumerated type; returns {@code false} otherwise
Returns {@code true} if this field is a synthetic field; returns {@code false} otherwise
Returns a {@code Class} object that identifies the declared type for the field represented by this {@code Field} object
Returns a {@code Type} object that represents the declared type for the field represented by this {@code Field} object
Compares this {@code Field} against the specified object
Returns a hashcode for this {@code Field}
Returns a string describing this {@code Field}
Returns a string describing this {@code Field}, including its generic type
Returns the value of the field represented by this {@code Field}, on the specified object
Gets the value of a static or instance {@code boolean} field
Gets the value of a static or instance {@code byte} field
Gets the value of a static or instance field of type {@code char} or of another primitive type convertible to type {@code char} via a widening conversion
Gets the value of a static or instance field of type {@code short} or of another primitive type convertible to type {@code short} via a widening conversion
Gets the value of a static or instance field of type {@code int} or of another primitive type convertible to type {@code int} via a widening conversion
Gets the value of a static or instance field of type {@code long} or of another primitive type convertible to type {@code long} via a widening conversion
Gets the value of a static or instance field of type {@code float} or of another primitive type convertible to type {@code float} via a widening conversion
Gets the value of a static or instance field of type {@code double} or of another primitive type convertible to type {@code double} via a widening conversion
Sets the field represented by this {@code Field} object on the specified object argument to the specified new value
Sets the value of a field as a {@code boolean} on the specified object
Sets the value of a field as a {@code byte} on the specified object
Sets the value of a field as a {@code char} on the specified object
Sets the value of a field as a {@code short} on the specified object
Sets the value of a field as an {@code int} on the specified object
Sets the value of a field as a {@code long} on the specified object
Sets the value of a field as a {@code float} on the specified object
Sets the value of a field as a {@code double} on the specified object
{@inheritDoc}
{@inheritDoc}
Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field
Start the value scope for the specified identity constraint
Request to activate the specified field
Sets whether the given field is permitted to match a value
Returns whether the given field is permitted to match a value
Ends the value scope for the specified identity constraint
Get type of this field
Return true if this field is transient
Return true if this field is volatile
Return the serialField tags in this FieldDoc item
Get the value of a constant field
Get the value of a constant field
Set (optional) initial value of field, otherwise it will be set to null/0/false by the JVM automatically
Remove any initial value
Get field object after having set up all necessary values
Add observer for this object
Remove observer for this object
Call notify() method on all observers
Return string representation close to declaration format, `public static final short MAX = 100', e
Add an attribute to this method
Remove an attribute
Remove all attributes
Returns the field identifier as an attribute constant from one of the <code>Field</code> subclasses
Retrieves the field identifier
Retrieves the index of the first character in the requested field
Retrieves the index of the character following the last character in the requested field
Sets the begin index
Sets the end index
Overrides equals
Returns a hash code for this FieldPosition
Return a string representation of this FieldPosition
Fetches the font metrics associated with the component hosting this view
Adjusts the allocation given to the view to be a suitable allocation for a text field
Renders using the given rendering surface and area on that surface
Determines the preferred span for this view along an axis
Determines the resizability of the view along the given axis
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Returns the name of the file or directory denoted by this abstract pathname
Returns the pathname string of this abstract pathname's parent, or <code>null</code> if this pathname does not name a parent directory
Returns the abstract pathname of this abstract pathname's parent, or <code>null</code> if this pathname does not name a parent directory
Converts this abstract pathname into a pathname string
Tests whether this abstract pathname is absolute
Returns the absolute pathname string of this abstract pathname
Returns the absolute form of this abstract pathname
Returns the canonical pathname string of this abstract pathname
Returns the canonical form of this abstract pathname
Converts this abstract pathname into a <code>file:</code> URL
Constructs a <tt>file:</tt> URI that represents this abstract pathname
Tests whether the application can read the file denoted by this abstract pathname
Tests whether the application can modify the file denoted by this abstract pathname
Tests whether the file or directory denoted by this abstract pathname exists
Tests whether the file denoted by this abstract pathname is a directory
Tests whether the file denoted by this abstract pathname is a normal file
Tests whether the file named by this abstract pathname is a hidden file
Returns the time that the file denoted by this abstract pathname was last modified
Returns the length of the file denoted by this abstract pathname
Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist
Deletes the file or directory denoted by this abstract pathname
Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates
Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname
Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname
Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Creates the directory named by this abstract pathname
Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories
Renames the file denoted by this abstract pathname
Sets the last-modified time of the file or directory named by this abstract pathname
Marks the file or directory named by this abstract pathname so that only read operations are allowed
Sets the owner's or everybody's write permission for this abstract pathname
A convenience method to set the owner's write permission for this abstract pathname
Sets the owner's or everybody's read permission for this abstract pathname
A convenience method to set the owner's read permission for this abstract pathname
Sets the owner's or everybody's execute permission for this abstract pathname
A convenience method to set the owner's execute permission for this abstract pathname
Tests whether the application can execute the file denoted by this abstract pathname
List the available filesystem roots
Returns the size of the partition <a href="#partName">named</a> by this abstract pathname
Returns the number of unallocated bytes in the partition <a href="#partName">named</a> by this abstract path name
Returns the number of bytes available to this virtual machine on the partition <a href="#partName">named</a> by this abstract pathname
<p> Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
Compares two abstract pathnames lexicographically
Tests this abstract pathname for equality with the given object
Computes a hash code for this abstract pathname
Returns the pathname string of this abstract pathname
Returns a {@link Path java
Returns the attribute name
Returns the attribute value
Returns <code>true</code> since this <code>ImageInputStream</code> caches data in order to allow seeking backwards
Returns <code>true</code> since this <code>ImageInputStream</code> maintains a file cache
Returns <code>false</code> since this <code>ImageInputStream</code> does not maintain a main memory cache
Closes this <code>FileCacheImageInputStream</code>, closing and removing the cache file
{@inheritDoc}
Sets the current stream position and resets the bit offset to 0
Returns <code>true</code> since this <code>ImageOutputStream</code> caches data in order to allow seeking backwards
Returns <code>true</code> since this <code>ImageOutputStream</code> maintains a file cache
Returns <code>false</code> since this <code>ImageOutputStream</code> does not maintain a main memory cache
Closes this <code>FileCacheImageOutputStream</code>
Opens or creates a file, returning a file channel to access the file
Opens or creates a file, returning a file channel to access the file
Reads a sequence of bytes from this channel into the given buffer
Reads a sequence of bytes from this channel into a subsequence of the given buffers
Reads a sequence of bytes from this channel into the given buffers
Writes a sequence of bytes to this channel from the given buffer
Writes a sequence of bytes to this channel from a subsequence of the given buffers
Writes a sequence of bytes to this channel from the given buffers
Returns this channel's file position
Sets this channel's file position
Returns the current size of this channel's file
Truncates this channel's file to the given size
Forces any updates to this channel's file to be written to the storage device that contains it
Transfers bytes from this channel's file to the given writable byte channel
Transfers bytes into this channel's file from the given readable byte channel
Reads a sequence of bytes from this channel into the given buffer, starting at the given file position
Writes a sequence of bytes to this channel from the given buffer, starting at the given file position
Maps a region of this channel's file directly into memory
Acquires a lock on the given region of this channel's file
Acquires an exclusive lock on this channel's file
Attempts to acquire a lock on the given region of this channel's file
Attempts to acquire an exclusive lock on this channel's file
Returns a string describing this file-mapping mode
Returns default button for current <code>LookAndFeel</code>
Tests if this file descriptor object is valid
Force all system buffers to synchronize with the underlying device
Creates the file dialog's peer
Indicates whether this file dialog box is for loading from a file or for saving to a file
Sets the mode of the file dialog
Gets the directory of this file dialog
Sets the directory of this file dialog window to be the specified directory
Gets the selected file of this file dialog
Returns files that the user selects
Sets the selected file for this file dialog window to be the specified file
Enables or disables multiple file selection for the file dialog
Returns whether the file dialog allows the multiple file selection
Determines this file dialog's filename filter
Sets the filename filter for this file dialog window to the specified filter
Returns a string representing the state of this <code>FileDialog</code> window
Sets the selected file for this file dialog
Sets the current directory for this file dialog
Sets the filename filter for filtering the displayed files
Whether the given file is accepted by this filter
The description of this filter
Format and publish a <tt>LogRecord</tt>
Close all the files
Returns the length of the underlying file, or <code>-1</code> if it is unknown
{@inheritDoc}
Sets the current stream position and resets the bit offset to 0
{@inheritDoc}
Reads a byte of data from this input stream
Reads up to <code>b
Reads up to <code>len</code> bytes of data from this input stream into an array of bytes
Skips over and discards <code>n</code> bytes of data from the input stream
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
Closes this file input stream and releases any system resources associated with the stream
Returns the <code>FileDescriptor</code> object  that represents the connection to the actual file in the file system being used by this <code>FileInputStream</code>
Returns the unique {@link java
Ensures that the <code>close</code> method of this file input stream is called when there are no more references to it
Returns the file channel upon whose file this lock was acquired
Returns the channel upon whose file this lock was acquired
Returns the position within the file of the first byte of the locked region
Returns the size of the locked region in bytes
Tells whether this lock is shared
Tells whether or not this lock overlaps the given lock range
Tells whether or not this lock is valid
Releases this lock
This method invokes the {@link #release} method
Returns a string describing the range, type, and validity of this lock
Initialize this <code>LoginModule</code>
Begin user authentication (Authentication Phase 1)
Complete user authentication (Authentication Phase 2)
Abort user authentication (Authentication Phase 2)
Logout a user
Tests the specified file, returning true if the file is accepted, false otherwise
The description of this filter
Returns the set of file name extensions files are tested against
Returns a string representation of the {@code FileNameExtensionFilter}
Tests if a specified file should be included in a file list
Gets the MIME type for the specified file name
Returns a URI identifying this file object
Gets a user-friendly name for this file object
Gets an InputStream for this file object
Gets an OutputStream for this file object
Gets a reader for this object
Gets the character content of this file object, if available
Gets a Writer for this file object
Gets the time this file object was last modified
Deletes this file object
Writes the specified byte to this file output stream
Writes <code>b
Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this file output stream
Closes this file output stream and releases any system resources associated with this stream
Returns the file descriptor associated with this stream
Returns the unique {@link java
Cleans up the connection to the file, and ensures that the <code>close</code> method of this file output stream is called when there are no more references to this stream
Returns the name of the attribute view
Read the file owner
Updates the file owner
Checks if this FilePermission object "implies" the specified permission
Checks two FilePermission objects for equality
Returns the hash code value for this object
Returns the "canonical string representation" of the actions
Returns a new PermissionCollection object for storing FilePermission objects
Creates a new source file and returns an object to allow writing to it
Creates a new class file, and returns an object to allow writing to it
Creates a new auxiliary resource file for writing and returns a file object for it
Returns an object for reading an existing resource
Opens a file, returning an input stream to read from the file
Opens or creates a file, returning an output stream that may be used to write bytes to the file
Opens or creates a file, returning a seekable byte channel to access the file
Opens or creates a file, returning a seekable byte channel to access the file
Opens a directory, returning a {@link DirectoryStream} to iterate over all entries in the directory
Opens a directory, returning a {@link DirectoryStream} to iterate over the entries in the directory
Opens a directory, returning a {@link DirectoryStream} to iterate over the entries in the directory
Creates a new and empty file, failing if the file already exists
Creates a new directory
Creates a directory by creating all nonexistent parent directories first
Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
Creates a new directory in the specified directory, using the given prefix to generate its name
Creates a new directory in the default temporary-file directory, using the given prefix to generate its name
Creates a symbolic link to a target <i>(optional operation)</i>
Creates a new link (directory entry) for an existing file <i>(optional operation)</i>
Deletes a file
Deletes a file if it exists
Copy a file to a target file
Move or rename a file to a target file
Reads the target of a symbolic link <i>(optional operation)</i>
Returns the {@link FileStore} representing the file store where a file is located
Tests if two paths locate the same file
Tells whether or not a file is considered <em>hidden</em>
Probes the content type of a file
Returns a file attribute view of a given type
Reads a file's attributes as a bulk operation
Sets the value of a file attribute
Reads the value of a file attribute
Reads a set of file attributes as a bulk operation
Returns a file's POSIX file permissions
Sets a file's POSIX permissions
Returns the owner of a file
Updates the file owner
Tests whether a file is a symbolic link
Tests whether a file is a directory
Tests whether a file is a regular file with opaque content
Returns a file's last modified time
Updates a file's last modified time attribute
Returns the size of a file (in bytes)
Tests whether a file exists
Tests whether the file located by this path does not exist
Tests whether a file is readable
Tests whether a file is writable
Tests whether a file is executable
Walks a file tree
Walks a file tree
Opens a file for reading, returning a {@code BufferedReader} that may be used to read text from the file in an efficient manner
Opens a file for reading, returning a {@code BufferedReader} to read text from the file in an efficient manner
Opens or creates a file for writing, returning a {@code BufferedWriter} that may be used to write text to the file in an efficient manner
Opens or creates a file for writing, returning a {@code BufferedWriter} to write text to the file in an efficient manner
Copies all bytes from an input stream to a file
Copies all bytes from a file to an output stream
Reads all the bytes from a file
Read all lines from a file
Read all lines from a file
Writes bytes to a file
Write lines of text to a file
Write lines of text to a file
Return a lazily populated {@code Stream}, the elements of which are the entries in the directory
Return a {@code Stream} that is lazily populated with {@code Path} by walking the file tree rooted at a given starting file
Return a {@code Stream} that is lazily populated with {@code Path} by walking the file tree rooted at a given starting file
Return a {@code Stream} that is lazily populated with {@code Path} by searching for files in a file tree rooted at a given starting file
Read all lines from a file as a {@code Stream}
Read all lines from a file as a {@code Stream}
Returns the name of this file store
Returns the <em>type</em> of this file store
Tells whether this file store is read-only
Returns the size, in bytes, of the file store
Returns the number of bytes available to this Java virtual machine on the file store
Returns the number of unallocated bytes in the file store
Tells whether or not this file store supports the file attributes identified by the given file attribute view
Tells whether or not this file store supports the file attributes identified by the given file attribute view
Returns a {@code FileStoreAttributeView} of the given type
Reads the value of a file store attribute
Returns the provider that created this file system
Closes this file system
Tells whether or not this file system is open
Tells whether or not this file system allows only read-only access to its file stores
Returns the name separator, represented as a string
Returns an object to iterate over the paths of the root directories
Returns an object to iterate over the underlying file stores
Returns the set of the {@link FileAttributeView#name names} of the file attribute views supported by this {@code FileSystem}
Converts a path string, or a sequence of strings that when joined form a path string, to a {@code Path}
Returns a {@code PathMatcher} that performs match operations on the {@code String} representation of {@link Path} objects by interpreting a given pattern
Returns the {@code UserPrincipalLookupService} for this file system <i>(optional operation)</i>
Constructs a new {@link WatchService} <i>(optional operation)</i>
Returns the file used to create this exception
Returns the other file used to create this exception
Returns the string explaining why the file system operation failed
Returns the detail message string
Returns a list of the installed file system providers
Returns the URI scheme that identifies this provider
Constructs a new {@code FileSystem} object identified by a URI
Returns an existing {@code FileSystem} created by this provider
Return a {@code Path} object by converting the given {@link URI}
Constructs a new {@code FileSystem} to access the contents of a file as a file system
Opens a file, returning an input stream to read from the file
Opens or creates a file, returning an output stream that may be used to write bytes to the file
Opens or creates a file for reading and/or writing, returning a file channel to access the file
Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file
Opens or creates a file, returning a seekable byte channel to access the file
Opens a directory, returning a {@code DirectoryStream} to iterate over the entries in the directory
Creates a new directory
Creates a symbolic link to a target
Creates a new link (directory entry) for an existing file
Deletes a file
Deletes a file if it exists
Reads the target of a symbolic link
Copy a file to a target file
Move or rename a file to a target file
Tests if two paths locate the same file
Tells whether or not a file is considered <em>hidden</em>
Returns the {@link FileStore} representing the file store where a file is located
Checks the existence, and optionally the accessibility, of a file
Returns a file attribute view of a given type
Reads a file's attributes as a bulk operation
Reads a set of file attributes as a bulk operation
Sets the value of a file attribute
Returns the default {@code FileSystem}
Returns a reference to an existing {@code FileSystem}
Constructs a new file system that is identified by a {@link URI} <p> This method iterates over the {@link FileSystemProvider#installedProviders() installed} providers to locate the provider that is identified by the URI {@link URI#getScheme scheme} of the given URI
Constructs a new file system that is identified by a {@link URI} <p> This method first attempts to locate an installed provider in exactly the same manner as the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)} method
Constructs a new {@code FileSystem} to access the contents of a file as a file system
Determines if the given file is a root in the navigable tree(s)
Returns true if the file (directory) can be visited
Name of a file, directory, or folder as it would be displayed in a system file browser
Type description for a file, directory, or folder as it would be displayed in a system file browser
Icon for a file, directory, or folder as it would be displayed in a system file browser
On Windows, a file can appear in multiple folders, other than its parent directory in the filesystem
Checks if <code>f</code> represents a real directory or file as opposed to a special folder such as <code>"Desktop"</code>
Creates a new folder with a default folder name
Returns whether a file is hidden or not
Is dir the root of a tree in the file system, such as a drive or partition
Used by UI classes to decide whether to display a special icon for drives or partitions, e
Used by UI classes to decide whether to display a special icon for a floppy disk
Used by UI classes to decide whether to display a special icon for a computer node, e
Returns all root partitions on this system
Return the user's default starting directory for the file chooser
Returns a File object constructed in dir from the given filename
Returns a File object constructed from the given path string
Gets the list of shown (i
Returns the parent directory of <code>dir</code>
Creates a new <code>File</code> object for <code>f</code> with correct behavior for a file system root directory
Returns a {@code FileTime} representing a value at the given unit of granularity
Returns a {@code FileTime} representing the given value in milliseconds
Returns a {@code FileTime} representing the same point of time value on the time-line as the provided {@code Instant} object
Returns the value at the given unit of granularity
Returns the value in milliseconds
Converts this {@code FileTime} object to an {@code Instant}
Tests this {@code FileTime} for equality with the given object
Computes a hash code for this file time
Compares the value of two {@code FileTime} objects for order
Returns the string representation of this {@code FileTime}
Probes the given file to guess its content type
Construct a file: URL for a path name
The name of the file
A human readable description of the file
A human readable description of the type of the file
The icon that represents this file in the <code>JFileChooser</code>
Whether the directory is traversable or not
Invoked for a directory before entries in the directory are visited
Invoked for a file in a directory
Invoked for a file that could not be visited
Invoked for a directory after entries in the directory, and all of their descendants, have been visited
Check if a given log record should be published
Adds the specified <code>ImageConsumer</code> to the list of consumers interested in data for the filtered image
Determines whether an ImageConsumer is on the list of consumers currently interested in data for this image
Removes an ImageConsumer from the list of consumers interested in data for this image
Starts production of the filtered image
Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order
Applies the given <code>Predicate</code> object to this <code>FilteredRowSet</code> object
Retrieves the active filter for this <code>FilteredRowSet</code> object
Initialize the context values for this expression after it is cloned
Get the next node via getNextXXX
Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Get the inner contained expression of this filter
Set the inner contained expression of this filter
Get the analysis bits for this walker, as defined in the WalkerFactory
Returns true if all the nodes in the iteration well be returned in document order
This will traverse the heararchy, calling the visitor for each member
Initialize the context values for this expression after it is cloned
Execute the expression
Returns the next node in the set and advances the position of the iterator in the set
Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Get the inner contained expression of this filter
Set the inner contained expression of this filter
Get the analysis bits for this walker, as defined in the WalkerFactory
Returns true if all the nodes in the iteration well be returned in document order
This will traverse the heararchy, calling the visitor for each member
Returns the axis being iterated, if it is known
Init a FilterExprWalker
Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Set the root node of the TreeWalker
Get a cloned FilterExprWalker
This method needs to override AxesWalker
Moves the <code>TreeWalker</code> to the next visible node in document order relative to the current node, and returns the new node
Get the index of the last node that can be itterated to
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Get the inner contained expression of this filter
Set the inner contained expression of this filter
Get the analysis bits for this walker, as defined in the WalkerFactory
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
This will traverse the heararchy, calling the visitor for each member
The index of the translet pointer within the execution of the test method
Returns <tt>true</tt> since this class is external to the translet
Reads the next byte of data from this input stream
Reads up to <code>byte
Reads up to <code>len</code> bytes of data from this input stream into an array of bytes
Skips over and discards <code>n</code> bytes of data from the input stream
Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream
Closes this input stream and releases any system resources associated with the stream
Marks the current position in this input stream
Repositions this stream to the position at the time the <code>mark</code> method was last called on this input stream
Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods
Writes the specified <code>byte</code> to this output stream
Writes <code>b
Writes <code>len</code> bytes from the specified <code>byte</code> array starting at offset <code>off</code> to this output stream
Flushes this output stream and forces any buffered output bytes to be written out to the stream
Closes this output stream and releases any system resources associated with the stream
Reads a single character
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark() operation
Marks the present position in the stream
Resets the stream
Writes a single character
Writes a portion of an array of characters
Writes a portion of a string
Flushes the stream
Returns the string table for class Finishings
Returns the enumeration value table for class Finishings
Returns the lowest integer value used by class Finishings
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Sets the TreeModel that will provide the data
Determines whether or not the root node from the TreeModel is visible
Sets the height of each cell
Returns the number of visible rows
Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change
Informs the TreeState that it needs to recalculate all the sizes it is referencing
Returns true if the value identified by row is currently expanded
Returns a rectangle giving the bounds needed to draw path
Returns the path for passed in row
Returns the row that the last item identified in path is visible at
Returns the path to the node that is closest to x,y
Returns the number of visible children for row
Returns an Enumerator that increments over the visible paths starting at the passed in location
Marks the path <code>path</code> expanded state to <code>isExpanded</code>
Returns true if the path is expanded, and visible
<p>Invoked after a node (or a set of siblings) has changed in some way
<p>Invoked after nodes have been inserted into the tree
<p>Invoked after nodes have been removed from the tree
<p>Invoked after the tree has drastically changed structure from a given node down
Read a fixed point value from the input stream and store it in the value member
Write the fixed point value stored in this holder to an <code>OutputStream</code>
Return the <code>TypeCode</code> of this holder object
Returns the flatness of this iterator
Returns the recursion limit of this iterator
Returns the winding rule for determining the interior of the path
Tests if the iteration is complete
Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction
Returns the coordinates and type of the current path segment in the iteration
Returns the coordinates and type of the current path segment in the iteration
Returns the unsupported flavors
Invoked when the target {@link Clipboard} of the listener has changed its available {@link DataFlavor}s
Returns a <code>Map</code> of the specified <code>DataFlavor</code>s to their corresponding <code>String</code> native
Returns a <code>Map</code> of the specified <code>String</code> natives to their corresponding <code>DataFlavor</code>
Returns a <code>List</code> of <code>String</code> natives to which the specified <code>DataFlavor</code> corresponds
Returns a <code>List</code> of <code>DataFlavor</code>s to which the specified <code>String</code> corresponds
Call corresponding visitor method(s)
Returns a string representation of the {@code float} argument
Returns a hexadecimal string representation of the {@code float} argument
Returns a {@code Float} object holding the {@code float} value represented by the argument string {@code s}
Returns a {@code Float} instance representing the specified {@code float} value
Returns a new {@code float} initialized to the value represented by the specified {@code String}, as performed by the {@code valueOf} method of class {@code Float}
Returns {@code true} if the specified number is a Not-a-Number (NaN) value, {@code false} otherwise
Returns {@code true} if the specified number is infinitely large in magnitude, {@code false} otherwise
Returns {@code true} if the argument is a finite floating-point value; returns {@code false} otherwise (for NaN and infinity arguments)
Returns {@code true} if this {@code Float} value is a Not-a-Number (NaN), {@code false} otherwise
Returns {@code true} if this {@code Float} value is infinitely large in magnitude, {@code false} otherwise
Returns a string representation of this {@code Float} object
Returns the value of this {@code Float} as a {@code byte} after a narrowing primitive conversion
Returns the value of this {@code Float} as a {@code short} after a narrowing primitive conversion
Returns the value of this {@code Float} as an {@code int} after a narrowing primitive conversion
Returns value of this {@code Float} as a {@code long} after a narrowing primitive conversion
Returns the {@code float} value of this {@code Float} object
Returns the value of this {@code Float} as a {@code double} after a widening primitive conversion
Returns a hash code for this {@code Float} object
Returns a hash code for a {@code float} value; compatible with {@code Float
Compares this object against the specified object
Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout
Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values
Returns the {@code float} value corresponding to a given bit representation
Compares two {@code Float} objects numerically
Compares the two specified {@code float} values
Adds two {@code float} values together as per the + operator
Returns the greater of two {@code float} values as if by calling {@link Math#max(float, float) Math
Returns the smaller of two {@code float} values as if by calling {@link Math#min(float, float) Math
Allocates a new float buffer
Wraps a float array into a buffer
Wraps a float array into a buffer
Creates a new float buffer whose content is a shared subsequence of this buffer's content
Creates a new float buffer that shares this buffer's content
Creates a new, read-only float buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible float array
Returns the float array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this float buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Sets the current value for the control
Obtains this control's current value
Obtains the maximum value permitted
Obtains the minimum value permitted
Obtains the label for the units in which the control's values are expressed, such as "dB" or "frames per second
Obtains the label for the minimum value, such as "Left" or "Off
Obtains the label for the mid-point value, such as "Center" or "Default
Obtains the label for the maximum value, such as "Right" or "Full
Obtains the resolution or granularity of the control, in the units that the control measures
Obtains the smallest time interval, in microseconds, over which the control's value can change during a shift
Changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds
Provides a string representation of the control
Read a float from an input stream and initialize the value member with the float value
Write the float value into an output stream
Return the <code>TypeCode</code> of this Streamable
Gets the alignment for this layout
Sets the alignment for this layout
Gets the horizontal gap between components and between the components and the borders of the <code>Container</code>
Sets the horizontal gap between components and between the components and the borders of the <code>Container</code>
Gets the vertical gap between components and between the components and the borders of the <code>Container</code>
Sets the vertical gap between components and between the components and the borders of the <code>Container</code>
Sets whether or not components should be vertically aligned along their baseline
Returns true if components are to be vertically aligned along their baseline
Adds the specified component to the layout
Removes the specified component from the layout
Returns the preferred dimensions for this layout given the <i>visible</i> components in the specified target container
Returns the minimum dimensions needed to layout the <i>visible</i> components contained in the specified target container
Lays out the container
Returns a string representation of this <code>FlowLayout</code> object and its values
Back patch a flow list
Redirect the handles from oldList to newList
Fetches the axis along which views should be flowed
Fetch the constraining span to flow against for the given child index
Fetch the location along the flow axis that the flow span will start at
Create a View that should be used to hold a a rows worth of children in a flow
Loads all of the children to initialize the view
Fetches the child view index representing the given position in the model
Lays out the children
Calculate requirements along the minor axis
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
{@inheritDoc}
Gives notification that something was inserted into the document in a location that the given flow view is responsible for
Gives notification that something was removed from the document in a location that the given flow view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
This method gives flow strategies access to the logical view of the FlowView
Update the flow on the given FlowView
Creates a row of views that will fit within the layout span of the row
Adjusts the given row if possible to fit within the layout span
Creates a view that can be used to represent the current piece of the flow
Flushes this stream by writing any buffered output to the underlying stream
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Invoked when a component gains the keyboard focus
Invoked when a component loses the keyboard focus
Identifies the focus change event as temporary or permanent
Returns the other Component involved in this focus change
Returns a parameter string identifying this event
Invoked when a component gains the keyboard focus
Invoked when a component loses the keyboard focus
Returns the current <code>KeyboardFocusManager</code> instance for the calling thread's context
Sets the current <code>KeyboardFocusManager</code> instance for the calling thread's context
Changes the current <code>KeyboardFocusManager</code>'s default <code>FocusTraversalPolicy</code> to <code>DefaultFocusTraversalPolicy</code>
Returns whether the application has invoked <code>disableSwingFocusManager()</code>
Returns the Component that should receive the focus after aComponent
Returns the Component that should receive the focus before aComponent
Returns the first Component in the traversal cycle
Returns the last Component in the traversal cycle
Returns the default Component to focus
Returns the Component that should receive the focus when a Window is made visible for the first time
Gets the peer of this <code>Font</code>
Returns a <code>Font</code> appropriate to the attributes
Returns a new <code>Font</code> using the specified font type and input data
Returns a new <code>Font</code> using the specified font type and the specified font file
Returns a copy of the transform associated with this <code>Font</code>
Returns the family name of this <code>Font</code>
Returns the family name of this <code>Font</code>, localized for the specified locale
Returns the postscript name of this <code>Font</code>
Returns the logical name of this <code>Font</code>
Returns the font face name of this <code>Font</code>
Returns the font face name of the <code>Font</code>, localized for the specified locale
Returns the style of this <code>Font</code>
Returns the point size of this <code>Font</code>, rounded to an integer
Returns the point size of this <code>Font</code> in <code>float</code> value
Indicates whether or not this <code>Font</code> object's style is PLAIN
Indicates whether or not this <code>Font</code> object's style is BOLD
Indicates whether or not this <code>Font</code> object's style is ITALIC
Indicates whether or not this <code>Font</code> object has a transform that affects its size in addition to the Size attribute
Return true if this Font contains attributes that require extra layout processing
Returns a <code>Font</code> object from the system properties list
Returns the <code>Font</code> that the <code>str</code> argument describes
Gets the specified <code>Font</code> from the system properties list
Returns a hashcode for this <code>Font</code>
Compares this <code>Font</code> object to the specified <code>Object</code>
Converts this <code>Font</code> object to a <code>String</code> representation
Returns the number of glyphs in this <code>Font</code>
Returns the glyphCode which is used when this <code>Font</code> does not have a glyph for a specified unicode code point
Returns the baseline appropriate for displaying this character
Returns a map of font attributes available in this <code>Font</code>
Returns the keys of all the attributes supported by this <code>Font</code>
Creates a new <code>Font</code> object by replicating this <code>Font</code> object and applying a new style and size
Creates a new <code>Font</code> object by replicating this <code>Font</code> object and applying a new style and transform
Creates a new <code>Font</code> object by replicating the current <code>Font</code> object and applying a new size to it
Creates a new <code>Font</code> object by replicating the current <code>Font</code> object and applying a new transform to it
Creates a new <code>Font</code> object by replicating the current <code>Font</code> object and applying a new style to it
Creates a new <code>Font</code> object by replicating the current <code>Font</code> object and applying a new set of font attributes to it
Checks if this <code>Font</code> has a glyph for the specified character
Checks if this <code>Font</code> has a glyph for the specified character
Indicates whether or not this <code>Font</code> can display a specified <code>String</code>
Indicates whether or not this <code>Font</code> can display the characters in the specified <code>text</code> starting at <code>start</code> and ending at <code>limit</code>
Indicates whether or not this <code>Font</code> can display the text specified by the <code>iter</code> starting at <code>start</code> and ending at <code>limit</code>
Returns the italic angle of this <code>Font</code>
Checks whether or not this <code>Font</code> has uniform line metrics
Returns a {@link LineMetrics} object created with the specified <code>String</code> and {@link FontRenderContext}
Returns a <code>LineMetrics</code> object created with the specified arguments
Returns a <code>LineMetrics</code> object created with the specified arguments
Returns a <code>LineMetrics</code> object created with the specified arguments
Returns the logical bounds of the specified <code>String</code> in the specified <code>FontRenderContext</code>
Returns the logical bounds of the specified <code>String</code> in the specified <code>FontRenderContext</code>
Returns the logical bounds of the specified array of characters in the specified <code>FontRenderContext</code>
Returns the logical bounds of the characters indexed in the specified {@link CharacterIterator} in the specified <code>FontRenderContext</code>
Returns the bounds for the character with the maximum bounds as defined in the specified <code>FontRenderContext</code>
Creates a {@link java
Creates a {@link java
Creates a {@link java
Creates a {@link java
Returns a new <code>GlyphVector</code> object, performing full layout of the text if possible
Gets the <code>Font</code> described by this <code>FontMetrics</code> object
Gets the <code>FontRenderContext</code> used by this <code>FontMetrics</code> object to measure text
Determines the <em>standard leading</em> of the <code>Font</code> described by this <code>FontMetrics</code> object
Determines the <em>font ascent</em> of the <code>Font</code> described by this <code>FontMetrics</code> object
Determines the <em>font descent</em> of the <code>Font</code> described by this <code>FontMetrics</code> object
Gets the standard height of a line of text in this font
Determines the maximum ascent of the <code>Font</code> described by this <code>FontMetrics</code> object
Determines the maximum descent of the <code>Font</code> described by this <code>FontMetrics</code> object
For backward compatibility only
Gets the maximum advance width of any character in this <code>Font</code>
Returns the advance width of the specified character in this <code>Font</code>
Returns the advance width of the specified character in this <code>Font</code>
Returns the total advance width for showing the specified <code>String</code> in this <code>Font</code>
Returns the total advance width for showing the specified array of characters in this <code>Font</code>
Returns the total advance width for showing the specified array of bytes in this <code>Font</code>
Gets the advance widths of the first 256 characters in the <code>Font</code>
Checks to see if the <code>Font</code> has uniform line metrics
Returns the {@link LineMetrics} object for the specified <code>String</code> in the specified {@link Graphics} context
Returns the {@link LineMetrics} object for the specified <code>String</code> in the specified {@link Graphics} context
Returns the {@link LineMetrics} object for the specified character array in the specified {@link Graphics} context
Returns the {@link LineMetrics} object for the specified {@link CharacterIterator} in the specified {@link Graphics} context
Returns the bounds of the specified <code>String</code> in the specified <code>Graphics</code> context
Returns the bounds of the specified <code>String</code> in the specified <code>Graphics</code> context
Returns the bounds of the specified array of characters in the specified <code>Graphics</code> context
Returns the bounds of the characters indexed in the specified <code>CharacterIterator</code> in the specified <code>Graphics</code> context
Returns the bounds for the character with the maximum bounds in the specified <code>Graphics</code> context
Returns a representation of this <code>FontMetrics</code> object's values as a <code>String</code>
Indicates whether or not this <code>FontRenderContext</code> object measures text in a transformed render context
Returns the integer type of the affine transform for this <code>FontRenderContext</code> as specified by {@link java
Gets the transform that is used to scale typographical points   to pixels in this <code>FontRenderContext</code>
Returns a boolean which indicates whether or not some form of antialiasing is specified by this <code>FontRenderContext</code>
Returns a boolean which whether text fractional metrics mode is used in this <code>FontRenderContext</code>
Return the text anti-aliasing rendering mode hint used in this <code>FontRenderContext</code>
Return the text fractional metrics rendering mode hint used in this <code>FontRenderContext</code>
Return true if obj is an instance of FontRenderContext and has the same transform, antialiasing, and fractional metrics values as this
Return true if rhs has the same transform, antialiasing, and fractional metrics values as this
Return a hashcode for this FontRenderContext
Returns the common pool instance
Performs the given task, returning its result upon completion
Arranges for (asynchronous) execution of the given task
Submits a ForkJoinTask for execution
Returns the factory used for constructing new workers
Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks
Returns the targeted parallelism level of this pool
Returns the targeted parallelism level of the common pool
Returns the number of worker threads that have started but not yet terminated
Returns {@code true} if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined
Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization
Returns an estimate of the number of threads that are currently stealing or executing tasks
Returns {@code true} if all worker threads are currently idle
Returns an estimate of the total number of tasks stolen from one thread's work queue by another
Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing)
Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing
Returns {@code true} if there are any tasks submitted to this pool that have not yet begun executing
Removes and returns the next unexecuted submission if one is available
Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status
Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts
Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks
Returns {@code true} if all tasks have completed following shut down
Returns {@code true} if the process of termination has commenced but not yet completed
Returns {@code true} if this pool has been shut down
Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first
If called by a ForkJoinTask operating in this pool, equivalent in effect to {@link ForkJoinTask#helpQuiesce}
Runs the given possibly blocking task
Returns a new worker thread operating in the given pool
Possibly blocks the current thread, for example waiting for a lock or condition
Returns {@code true} if blocking is unnecessary
Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the {@link ForkJoinPool#commonPool()} if not {@link #inForkJoinPool}
Returns the result of the computation when it {@link #isDone is done}
Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) {@code RuntimeException} or {@code Error} if the underlying computation did so
Forks the given tasks, returning when {@code isDone} holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
Forks the given tasks, returning when {@code isDone} holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
Forks all tasks in the specified collection, returning when {@code isDone} holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
Attempts to cancel execution of this task
Returns {@code true} if this task threw an exception or was cancelled
Returns {@code true} if this task completed without throwing an exception and was not cancelled
Returns the exception thrown by the base computation, or a {@code CancellationException} if cancelled, or {@code null} if none or if the method has not yet completed
Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon {@code join} and related operations
Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of {@code join} and related operations
Completes this task normally without setting a value
Waits if necessary for the computation to complete, and then retrieves its result
Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available
Joins this task, without returning its result or throwing its exception
Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception
Possibly executes tasks until the pool hosting the current task {@link ForkJoinPool#isQuiescent is quiescent}
Resets the internal bookkeeping state of this task, allowing a subsequent {@code fork}
Returns the pool hosting the current task execution, or null if this task is executing outside of any ForkJoinPool
Returns {@code true} if the current thread is a {@link ForkJoinWorkerThread} executing as a ForkJoinPool computation
Tries to unschedule this task for execution
Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed
Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool
Returns the result that would be returned by {@link #join}, even if this task completed abnormally, or {@code null} if this task is not known to have been completed
Forces the given value to be returned as a result
Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally
Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available
Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool
If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available
Returns the tag for this task
Atomically sets the tag value for this task
Atomically conditionally sets the tag value for this task
Returns a new {@code ForkJoinTask} that performs the {@code run} method of the given {@code Runnable} as its action, and returns a null result upon {@link #join}
Returns a new {@code ForkJoinTask} that performs the {@code run} method of the given {@code Runnable} as its action, and returns the given result upon {@link #join}
Returns a new {@code ForkJoinTask} that performs the {@code call} method of the given {@code Callable} as its action, and returns its result upon {@link #join}, translating any checked exceptions encountered into {@code RuntimeException}
Returns the pool hosting this thread
Returns the unique index number of this thread in its pool
Initializes internal state after construction but before processing any tasks
Performs cleanup associated with termination of this worker thread
This method is required to be public, but should never be called explicitly
Formats an object to produce a string
Formats an object and appends the resulting text to a given string buffer
Formats an Object producing an <code>AttributedCharacterIterator</code>
Parses text from a string to produce an object
Parses text from the beginning of the given string to produce an object
Creates and returns a copy of this object
Obtains the set of source format encodings from which format conversion services are provided by this provider
Obtains the set of target format encodings to which format conversion services are provided by this provider
Indicates whether the format converter supports conversion from the specified source format encoding
Indicates whether the format converter supports conversion to the specified target format encoding
Obtains the set of target format encodings supported by the format converter given a particular source format
Indicates whether the format converter supports conversion to a particular encoding from a particular format
Obtains the set of target formats with the encoding specified supported by the format converter If no target formats with the specified encoding are supported for this source format, an array of length 0 is returned
Indicates whether the format converter supports conversion to one particular format from another
Obtains an audio input stream with the specified encoding from the given audio input stream
Obtains an audio input stream with the specified format from the given audio input stream
Returns the incompatible flag
Returns the incompatible conversion
Formats the object using the provided {@link Formatter formatter}
Format the given log record and return the formatted string
Return the header string for a set of formatted records
Return the tail string for a set of formatted records
Localize and format the message string from a log record
Gets the form method type
Gets the form submission data
Create the component
Determines the maximum span for this view along an axis
Responsible for processing the ActionEvent
This method is responsible for submitting the form data
This method is called to submit a form in response to a click on an image -- an &lt;INPUT&gt; form element of type "image"
Makes this Frame displayable by connecting it to a native screen resource
Gets the title of the frame
Sets the title for this frame to the specified string
Returns the image to be displayed as the icon for this frame
{@inheritDoc}
Gets the menu bar for this frame
Sets the menu bar for this frame to the specified menu bar
Indicates whether this frame is resizable by the user
Sets whether this frame is resizable by the user
Sets the state of this frame (obsolete)
Sets the state of this frame
Gets the state of this frame (obsolete)
Gets the state of this frame
Sets the maximized bounds for this frame
Gets maximized bounds for this frame
Disables or enables decorations for this frame
Indicates whether this frame is undecorated
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Removes the specified menu bar from this frame
Makes this Frame undisplayable by removing its connection to its native screen resource
Returns a string representing the state of this <code>Frame</code>
Returns an array of all {@code Frame}s created by this application
Gets the AccessibleContext associated with this Frame
Get the role of this object
Get the state of this object
Sets the title on the frame
Sets the menu bar for the frame
Sets if the frame should be resizable or not
Changes the state of the frame
Returns the current state of the frame
Sets the bounds of the frame when it becomes maximized
Sets the size and location for embedded frames
Returns the size and location for embedded frames
Requests the peer to emulate window activation
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Get the current state of this FSM
Perform the action and transition to the next state based on the current state of the FSM and the input
Return the current state
Perform the transition for the given input in the current state
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType
get all built-in simple types, which are stored in a hashtable keyed by the name
Execute the function
Execute the function
Execute the function
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Execute the function
Execute the function
Execute the function
No arguments to process, so this does nothing
Execute the function
Execute the function
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Return the namespace of the extension function
Return the name of the extension function
Return the method key of the extension function
Return the nth argument passed to the extension function
Return the number of arguments that were passed into this extension function
Execute the function
Set an argument expression for a function
Check that the number of arguments passed to this function is correct
Call the visitors for the function arguments
Set the parent node
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Return the name of the extesion function in string format
Execute the function
The function table is an instance field
Execute the function
No arguments to process, so this does nothing
Execute the function
Execute the function
The here function returns a node-set containing the attribute or processing instruction node or the parent element of the text node that directly bears the XPath expression
No arguments to process, so this does nothing
Execute the function
Execute the function
Figure out if we're executing a toplevel expression
Get the position in the current context node list
Execute the function
No arguments to process, so this does nothing
Get the local class name of the function class
Execute the function
Execute the function
Execute the function
Execute an expression in the XPath runtime context, and return the result of the expression
Execute the function
Execute the function
Figure out if we're executing a toplevel expression
Get the position in the current context node list
Execute the function
No arguments to process, so this does nothing
Execute the function
Execute the function
Execute the function
Execute the function
Execute the function
Execute the function
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Execute the function
Execute the function
Execute the function
Execute the function
Retrieve a propery bundle from a specified file
Applies this function to the given argument
Returns a composed function that first applies the {@code before} function to its input, and then applies this function to the result
Returns a composed function that first applies this function to its input, and then applies the {@code after} function to the result
Returns a function that always returns its input argument
Return the second argument passed to the function (at index 1)
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Set an argument expression for a function
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Tell if this expression or it's subexpressions can traverse outside the current subtree
Return the third argument passed to the function (at index 2)
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Set an argument expression for a function
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Tell if this expression or it's subexpressions can traverse outside the current subtree
Execute the first argument expression that is expected to return a nodeset
Tell if the expression is a nodeset expression
Execute the first argument expression that is expected to return a string
Execute the first argument expression that is expected to return a number
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Tell if this expression or it's subexpressions can traverse outside the current subtree
Return an expression array containing arguments at index 3 or greater
Set an argument expression for a function
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Tell if this expression or it's subexpressions can traverse outside the current subtree
Return the first argument passed to the function (at index 0)
Set an argument expression for a function
Check that the number of arguments passed to this function is correct
Constructs and throws a WrongNumberArgException with the appropriate message for this function object
Tell if this expression or it's subexpressions can traverse outside the current subtree
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Static calc of match score
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Test a node to see if it matches the given node test
Test a node to see if it matches the given node test
Test a node to see if it matches the given node test
Call the visitor for the function
Install a built-in function
Tell if a built-in, non-namespaced function is available
Execute the function
Execute the function
No arguments to process, so this does nothing
Execute the function
Attempts to cancel execution of this task
Returns {@code true} if this task was cancelled before it completed normally
Returns {@code true} if this task completed
Waits if necessary for the computation to complete, and then retrieves its result
Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available
Protected method invoked when this task transitions to state {@code isDone} (whether normally or via cancellation)
Sets the result of this future to the given value unless this future has already been set or has been cancelled
Causes this future to report an {@link ExecutionException} with the given throwable as its cause, unless this future has already been set or has been cancelled
Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled
Allocate an array to store items of the type appropriate (which is determined by the subclass)
Get the length of the allocated array
Returns the length of the content
Inserts a string into the content
Removes part of the content
Retrieves a portion of the content
Retrieves a portion of the content
Creates a position within the content that will track change as the content is mutated
Make the gap bigger, moving any necessary data and updating the appropriate marks
Move the start of the gap to a new location, without changing the size of the gap
Resets all the marks that have an offset of 0 to have an index of zero as well
Adjust the gap end downward
Adjust the gap end upward
Returns a Vector containing instances of UndoPosRef for the Positions in the range <code>offset</code> to <code>offset</code> + <code>length</code>
Resets the location for all the UndoPosRef instances in <code>positions</code>
Returns the total number of collections that have occurred
Returns the approximate accumulated collection elapsed time in milliseconds
Writes a sequence of bytes to this channel from a subsequence of the given buffers
Writes a sequence of bytes to this channel from the given buffers
Starts the gauge monitor
Stops the gauge monitor
Gets the derived gauge of the specified object, if this object is contained in the set of observed MBeans, or <code>null</code> otherwise
Gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed MBeans, or <code>0</code> otherwise
Returns the derived gauge of the first object in the set of observed MBeans
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Gets the high threshold value common to all observed MBeans
Gets the low threshold value common to all observed MBeans
Sets the high and the low threshold values common to all observed MBeans
Gets the high notification's on/off switch value common to all observed MBeans
Sets the high notification's on/off switch value common to all observed MBeans
Gets the low notification's on/off switch value common to all observed MBeans
Sets the low notification's on/off switch value common to all observed MBeans
Gets the difference mode flag value common to all observed MBeans
Sets the difference mode flag value common to all observed MBeans
Returns a <CODE>NotificationInfo</CODE> object containing the name of the Java class of the notification and the notification types sent by the gauge monitor
Gets the derived gauge
Gets the derived gauge timestamp
Gets the derived gauge for the specified MBean
Gets the derived gauge timestamp for the specified MBean
Gets the high threshold value
Gets the low threshold value
Sets the high and the low threshold values
Gets the high notification's on/off switch value
Sets the high notification's on/off switch value
Gets the low notification's on/off switch value
Sets the low notification's on/off switch value
Gets the difference mode flag value
Sets the difference mode flag value
The value element MUST have the name of the code generator
Date when the source was generated
A place holder for any comments that the code generator may want to include in the generated code
Returns a {@code Type} object representing the component type of this array
Returns an array of {@code TypeVariable} objects that represent the type variables declared by the generic declaration represented by this {@code GenericDeclaration} object, in declaration order
Call corresponding visitor method(s)
debugging routine to print out all options collected
gets the next option found in the commandline
gets the argument for the current parsed option
gets list of the commandline arguments
Call corresponding visitor method(s)
Remove all settings including global settings such as <code>Locale</code>s and listeners, as well as stream settings
Creates a default stream metadata object and merges in the supplied metadata
Creates a default image metadata object and merges in the supplied metadata
This chooses the appropriate GIOP version
Returns the advance of the glyph along the baseline (either horizontal or vertical)
Returns the x-component of the advance of the glyph
Returns the y-component of the advance of the glyph
Returns the bounds of the glyph
Returns the left (top) side bearing of the glyph
Returns the right (bottom) side bearing of the glyph
Returns the raw glyph type code
Returns <code>true</code> if this is a standard glyph
Returns <code>true</code> if this is a ligature glyph
Returns <code>true</code> if this is a combining glyph
Returns <code>true</code> if this is a component glyph
Returns <code>true</code> if this is a whitespace glyph
Returns the <code>Font</code> associated with this <code>GlyphVector</code>
Returns the {@link FontRenderContext} associated with this <code>GlyphVector</code>
Assigns default positions to each glyph in this <code>GlyphVector</code>
Returns the number of glyphs in this <code>GlyphVector</code>
Returns the glyphcode of the specified glyph
Returns an array of glyphcodes for the specified glyphs
Returns the character index of the specified glyph
Returns the character indices of the specified glyphs
Returns the logical bounds of this <code>GlyphVector</code>
Returns the visual bounds of this <code>GlyphVector</code> The visual bounds is the bounding box of the outline of this <code>GlyphVector</code>
Returns the pixel bounds of this <code>GlyphVector</code> when rendered in a graphics with the given <code>FontRenderContext</code> at the given location
Returns a <code>Shape</code> whose interior corresponds to the visual representation of this <code>GlyphVector</code>
Returns a <code>Shape</code> whose interior corresponds to the visual representation of this <code>GlyphVector</code> when rendered at x,&nbsp;y
Returns a <code>Shape</code> whose interior corresponds to the visual representation of the specified glyph within this <code>GlyphVector</code>
Returns a <code>Shape</code> whose interior corresponds to the visual representation of the specified glyph within this <code>GlyphVector</code>, offset to x,&nbsp;y
Returns the position of the specified glyph relative to the origin of this <code>GlyphVector</code>
Sets the position of the specified glyph within this <code>GlyphVector</code>
Returns the transform of the specified glyph within this <code>GlyphVector</code>
Sets the transform of the specified glyph within this <code>GlyphVector</code>
Returns flags describing the global state of the GlyphVector
Returns an array of glyph positions for the specified glyphs
Returns the logical bounds of the specified glyph within this <code>GlyphVector</code>
Returns the visual bounds of the specified glyph within the <code>GlyphVector</code>
Returns the pixel bounds of the glyph at index when this <code>GlyphVector</code> is rendered in a <code>Graphics</code> with the given <code>FontRenderContext</code> at the given location
Returns the metrics of the glyph at the specified index into this <code>GlyphVector</code>
Returns the justification information for the glyph at the specified index into this <code>GlyphVector</code>
Tests if the specified <code>GlyphVector</code> exactly equals this <code>GlyphVector</code>
Creates a shallow copy
Fetch the currently installed glyph painter
Sets the painter to use for rendering glyphs
Fetch a reference to the text that occupies the given range
Fetch the background color to use to render the glyphs
Fetch the foreground color to use to render the glyphs
Fetch the font that the glyphs should be based upon
Determine if the glyphs should be underlined
Determine if the glyphs should have a strikethrough line
Determine if the glyphs should be rendered as superscript
Determine if the glyphs should be rendered as subscript
Fetch the TabExpander to use if tabs are present in this view
Check to see that a glyph painter exists
Determines the desired span when using the given tab expansion implementation
Determines the span along the same axis as tab expansion for a portion of the view
Fetches the portion of the model that this view is responsible for
Fetches the portion of the model that this view is responsible for
Renders a portion of a text style run
Determines the minimum span for this view along an axis
Determines the preferred span for this view along an axis
Determines the desired alignment for this view along an axis
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Determines how attractive a break opportunity in this view is
Breaks this view on the given axis at the given length
Creates a view that represents a portion of the element
Provides a way to determine the next visually represented model location that one might place a caret
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
Determine the span the glyphs given a start location (for tab expansion)
Paint the glyphs representing the given range
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Determines the model location that represents the maximum advance that fits within the given span
Create a painter to use for the given GlyphView
Provides a way to determine the next visually represented model location that one might place a caret
Dump instruction as byte code to stream out
Called in pass 2 of InstructionList
Call corresponding visitor method(s)
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Returns a copy of the point P1 that anchors the first color
Returns the color C1 anchored by the point P1
Returns a copy of the point P2 which anchors the second color
Returns the color C2 anchored by the point P2
Returns <code>true</code> if the gradient cycles repeatedly between the two colors C1 and C2
Creates and returns a {@link PaintContext} used to generate a linear color gradient pattern
Returns the transparency mode for this <code>GradientPaint</code>
get the <code>XMLGrammarDescription</code> associated with this object
Returns the ascent of this <code>GraphicAttribute</code>
Returns the descent of this <code>GraphicAttribute</code>
Returns the advance of this <code>GraphicAttribute</code>
Returns a {@link Rectangle2D} that encloses all of the bits drawn by this <code>GraphicAttribute</code> relative to the rendering position
Return a {@link java
Renders this <code>GraphicAttribute</code> at the specified location
Returns the alignment of this <code>GraphicAttribute</code>
Returns the justification information for this <code>GraphicAttribute</code>
Creates a new <code>Graphics</code> object that is a copy of this <code>Graphics</code> object
Creates a new <code>Graphics</code> object based on this <code>Graphics</code> object, but with a new translation and clip area
Translates the origin of the graphics context to the point (<i>x</i>,&nbsp;<i>y</i>) in the current coordinate system
Gets this graphics context's current color
Sets this graphics context's current color to the specified color
Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color
Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color
Gets the current font
Sets this graphics context's font to the specified font
Gets the font metrics of the current font
Gets the font metrics for the specified font
Returns the bounding rectangle of the current clipping area
Intersects the current clip with the specified rectangle
Sets the current clip to the rectangle specified by the given coordinates
Gets the current clipping area
Sets the current clipping area to an arbitrary clip shape
Copies an area of the component by a distance specified by <code>dx</code> and <code>dy</code>
Draws a line, using the current color, between the points <code>(x1,&nbsp;y1)</code> and <code>(x2,&nbsp;y2)</code> in this graphics context's coordinate system
Fills the specified rectangle
Draws the outline of the specified rectangle
Clears the specified rectangle by filling it with the background color of the current drawing surface
Draws an outlined round-cornered rectangle using this graphics context's current color
Fills the specified rounded corner rectangle with the current color
Draws a 3-D highlighted outline of the specified rectangle
Paints a 3-D highlighted rectangle filled with the current color
Draws the outline of an oval
Fills an oval bounded by the specified rectangle with the current color
Draws the outline of a circular or elliptical arc covering the specified rectangle
Fills a circular or elliptical arc covering the specified rectangle
Draws a sequence of connected lines defined by arrays of <i>x</i> and <i>y</i> coordinates
Draws a closed polygon defined by arrays of <i>x</i> and <i>y</i> coordinates
Draws the outline of a polygon defined by the specified <code>Polygon</code> object
Fills a closed polygon defined by arrays of <i>x</i> and <i>y</i> coordinates
Fills the polygon defined by the specified Polygon object with the graphics context's current color
Draws the text given by the specified string, using this graphics context's current font and color
Renders the text of the specified iterator applying its attributes in accordance with the specification of the {@link java
Draws the text given by the specified character array, using this graphics context's current font and color
Draws the text given by the specified byte array, using this graphics context's current font and color
Draws as much of the specified image as is currently available
Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
Draws as much of the specified image as is currently available
Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
Disposes of this graphics context and releases any system resources that it is using
Disposes of this graphics context once it is no longer referenced
Returns a <code>String</code> object representing this                        <code>Graphics</code> object's value
Returns the bounding rectangle of the current clipping area
Returns true if the specified rectangular area might intersect the current clipping area
Returns the bounding rectangle of the current clipping area
Draws a 3-D highlighted outline of the specified rectangle
Paints a 3-D highlighted rectangle filled with the current color
Strokes the outline of a <code>Shape</code> using the settings of the current <code>Graphics2D</code> context
Renders an image, applying a transform from image space into user space before drawing
Renders a <code>BufferedImage</code> that is filtered with a {@link BufferedImageOp}
Renders a {@link RenderedImage}, applying a transform from image space into user space before drawing
Renders a {@link RenderableImage}, applying a transform from image space into user space before drawing
Renders the text of the specified <code>String</code>, using the current text attribute state in the <code>Graphics2D</code> context
Renders the text specified by the specified <code>String</code>, using the current text attribute state in the <code>Graphics2D</code> context
Renders the text of the specified iterator applying its attributes in accordance with the specification of the {@link TextAttribute} class
Renders the text of the specified iterator applying its attributes in accordance with the specification of the {@link TextAttribute} class
Renders the text of the specified {@link GlyphVector} using the <code>Graphics2D</code> context's rendering attributes
Fills the interior of a <code>Shape</code> using the settings of the <code>Graphics2D</code> context
Checks whether or not the specified <code>Shape</code> intersects the specified {@link Rectangle}, which is in device space
Returns the device configuration associated with this <code>Graphics2D</code>
Sets the <code>Composite</code> for the <code>Graphics2D</code> context
Sets the <code>Paint</code> attribute for the <code>Graphics2D</code> context
Sets the <code>Stroke</code> for the <code>Graphics2D</code> context
Sets the value of a single preference for the rendering algorithms
Returns the value of a single preference for the rendering algorithms
Replaces the values of all preferences for the rendering algorithms with the specified <code>hints</code>
Sets the values of an arbitrary number of preferences for the rendering algorithms
Gets the preferences for the rendering algorithms
Translates the origin of the <code>Graphics2D</code> context to the point (<i>x</i>,&nbsp;<i>y</i>) in the current coordinate system
Concatenates the current <code>Graphics2D</code> <code>Transform</code> with a translation transform
Concatenates the current <code>Graphics2D</code> <code>Transform</code> with a rotation transform
Concatenates the current <code>Graphics2D</code> <code>Transform</code> with a translated rotation transform
Concatenates the current <code>Graphics2D</code> <code>Transform</code> with a scaling transformation Subsequent rendering is resized according to the specified scaling factors relative to the previous scaling
Concatenates the current <code>Graphics2D</code> <code>Transform</code> with a shearing transform
Composes an <code>AffineTransform</code> object with the <code>Transform</code> in this <code>Graphics2D</code> according to the rule last-specified-first-applied
Overwrites the Transform in the <code>Graphics2D</code> context
Returns a copy of the current <code>Transform</code> in the <code>Graphics2D</code> context
Returns the current <code>Paint</code> of the <code>Graphics2D</code> context
Returns the current <code>Composite</code> in the <code>Graphics2D</code> context
Sets the background color for the <code>Graphics2D</code> context
Returns the background color used for clearing a region
Returns the current <code>Stroke</code> in the <code>Graphics2D</code> context
Intersects the current <code>Clip</code> with the interior of the specified <code>Shape</code> and sets the <code>Clip</code> to the resulting intersection
Get the rendering context of the <code>Font</code> within this <code>Graphics2D</code> context
Returns the "best" configuration possible that passes the criteria defined in the <code>GraphicsConfigTemplate</code>
Returns a <code>boolean</code> indicating whether or not the specified <code>GraphicsConfiguration</code> can be used to create a drawing surface that supports the indicated features
Returns the {@link GraphicsDevice} associated with this <code>GraphicsConfiguration</code>
Returns a {@link BufferedImage} with a data layout and color model compatible with this <code>GraphicsConfiguration</code>
Returns a <code>BufferedImage</code> that supports the specified transparency and has a data layout and color model compatible with this <code>GraphicsConfiguration</code>
Returns a {@link VolatileImage} with a data layout and color model compatible with this <code>GraphicsConfiguration</code>
Returns a {@link VolatileImage} with a data layout and color model compatible with this <code>GraphicsConfiguration</code>
Returns a {@link VolatileImage} with a data layout and color model compatible with this <code>GraphicsConfiguration</code>, using the specified image capabilities
Returns a {@link VolatileImage} with a data layout and color model compatible with this <code>GraphicsConfiguration</code>, using the specified image capabilities and transparency value
Returns the {@link ColorModel} associated with this <code>GraphicsConfiguration</code>
Returns the <code>ColorModel</code> associated with this <code>GraphicsConfiguration</code> that supports the specified transparency
Returns the default {@link AffineTransform} for this <code>GraphicsConfiguration</code>
Returns a <code>AffineTransform</code> that can be concatenated with the default <code>AffineTransform</code> of a <code>GraphicsConfiguration</code> so that 72 units in user space equals 1 inch in device space
Returns the bounds of the <code>GraphicsConfiguration</code> in the device coordinates
Returns the buffering capabilities of this <code>GraphicsConfiguration</code>
Returns the image capabilities of this <code>GraphicsConfiguration</code>
Returns whether this {@code GraphicsConfiguration} supports the {@link GraphicsDevice
Returns the type of this <code>GraphicsDevice</code>
Returns the identification string associated with this <code>GraphicsDevice</code>
Returns all of the <code>GraphicsConfiguration</code> objects associated with this <code>GraphicsDevice</code>
Returns the default <code>GraphicsConfiguration</code> associated with this <code>GraphicsDevice</code>
Returns the "best" configuration possible that passes the criteria defined in the {@link GraphicsConfigTemplate}
Returns <code>true</code> if this <code>GraphicsDevice</code> supports full-screen exclusive mode
Enter full-screen mode, or return to windowed mode
Returns the <code>Window</code> object representing the full-screen window if the device is in full-screen mode
Returns <code>true</code> if this <code>GraphicsDevice</code> supports low-level display changes
Sets the display mode of this graphics device
Returns the current display mode of this <code>GraphicsDevice</code>
Returns all display modes available for this <code>GraphicsDevice</code>
This method returns the number of bytes available in accelerated memory on this device
Returns whether the given level of translucency is supported by this graphics device
Returns the local <code>GraphicsEnvironment</code>
Tests whether or not a display, keyboard, and mouse can be supported in this environment
Returns whether or not a display, keyboard, and mouse can be supported in this graphics environment
Returns an array of all of the screen <code>GraphicsDevice</code> objects
Returns the default screen <code>GraphicsDevice</code>
Returns a <code>Graphics2D</code> object for rendering into the specified {@link BufferedImage}
Returns an array containing a one-point size instance of all fonts available in this <code>GraphicsEnvironment</code>
Returns an array containing the names of all font families in this <code>GraphicsEnvironment</code> localized for the default locale, as returned by <code>Locale
Returns an array containing the names of all font families in this <code>GraphicsEnvironment</code> localized for the specified locale
Registers a <i>created</i> <code>Font</code>in this <code>GraphicsEnvironment</code>
Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts
Indicates a preference for proportional over non-proportional (e
Returns the Point where Windows should be centered
Returns the maximum bounds for centered Windows
Creates a disabled image
Overrides <code>RGBImageFilter
Sets the <code>GregorianCalendar</code> change date
Gets the Gregorian Calendar change date
Determines if the given year is a leap year
Returns {@code "gregory"} as the calendar type
Compares this <code>GregorianCalendar</code> to the specified <code>Object</code>
Generates the hash code for this <code>GregorianCalendar</code> object
Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
Adds a signed amount to the specified calendar field without changing larger fields
Returns the minimum value for the given calendar field of this <code>GregorianCalendar</code> instance
Returns the maximum value for the given calendar field of this <code>GregorianCalendar</code> instance
Returns the highest minimum value for the given calendar field of this <code>GregorianCalendar</code> instance
Returns the lowest maximum value for the given calendar field of this <code>GregorianCalendar</code> instance
Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}, {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}, {@link #getGregorianChange() getGregorianChange} and {@link Calendar#getTimeZone() getTimeZone} methods
Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the {@link Calendar#getFirstDayOfWeek() getFirstDayOfWeek}, {@link Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek}, {@link #getGregorianChange() getGregorianChange} and {@link Calendar#getTimeZone() getTimeZone} methods
Returns {@code true} indicating this {@code GregorianCalendar} supports week dates
Returns the <a href="#week_year">week year</a> represented by this {@code GregorianCalendar}
Sets this {@code GregorianCalendar} to the date given by the date specifiers - <a href="#week_year">{@code weekYear}</a>, {@code weekOfYear}, and {@code dayOfWeek}
Returns the number of weeks in the <a href="#week_year">week year</a> represented by this {@code GregorianCalendar}
Converts the time value (millisecond offset from the <a href="Calendar
Converts calendar field values to the time value (millisecond offset from the <a href="Calendar
Converts this object to a {@code ZonedDateTime} that represents the same point on the time-line as this {@code GregorianCalendar}
Obtains an instance of {@code GregorianCalendar} with the default locale from a {@code ZonedDateTime} object
Creates a copy of this grid bag constraint
Sets the constraints for the specified component in this layout
Gets the constraints for the specified component
Retrieves the constraints for the specified component
Determines the origin of the layout area, in the graphics coordinate space of the target container
Determines column widths and row heights for the layout grid
Determines the weights of the layout grid's columns and rows
Determines which cell in the layout grid contains the point specified by <code>(x,&nbsp;y)</code>
Has no effect, since this layout manager does not use a per-component string
Adds the specified component to the layout, using the specified <code>constraints</code> object
Removes the specified component from this layout
Determines the preferred size of the <code>parent</code> container using this grid bag layout
Determines the minimum size of the <code>parent</code> container using this grid bag layout
Returns the maximum dimensions for this layout given the components in the specified target container
Returns the alignment along the x axis
Returns the alignment along the y axis
Invalidates the layout, indicating that if the layout manager has cached information it should be discarded
Lays out the specified container using this grid bag layout
Returns a string representation of this grid bag layout's values
Fills in an instance of <code>GridBagLayoutInfo</code> for the current set of managed children
This method is obsolete and supplied for backwards compatibility only; new code should call {@link #getLayoutInfo(java
Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads
This method is obsolete and supplied for backwards compatibility only; new code should call {@link #adjustForGravity(java
Figures out the minimum size of the master based on the information from <code>getLayoutInfo</code>
This method is obsolete and supplied for backwards compatibility only; new code should call {@link #getMinSize(java
Lays out the grid
This method is obsolete and supplied for backwards compatibility only; new code should call {@link #arrangeGrid(Container) arrangeGrid} instead
Gets the number of rows in this layout
Sets the number of rows in this layout to the specified value
Gets the number of columns in this layout
Sets the number of columns in this layout to the specified value
Gets the horizontal gap between components
Sets the horizontal gap between components to the specified value
Gets the vertical gap between components
Sets the vertical gap between components to the specified value
Adds the specified component with the specified name to the layout
Removes the specified component from the layout
Determines the preferred size of the container argument using this grid layout
Determines the minimum size of the container argument using this grid layout
Lays out the specified container using this layout
Returns the string representation of this grid layout's values
Adds the specified member to the group
Removes the specified member from the group
Returns true if the passed principal is a member of the group
Returns an enumeration of the members in the group
Sets whether component visibility is considered when sizing and positioning components
Returns whether component visibility is considered when sizing and positioning components
Sets whether the component's visibility is considered for sizing and positioning
Sets whether a gap between components should automatically be created
Returns {@code true} if gaps between components are automatically created
Sets whether a gap between the container and components that touch the border of the container should automatically be created
Returns {@code true} if gaps between the container and components that border the container are automatically created
Sets the {@code Group} that positions and sizes components along the horizontal axis
Sets the {@code Group} that positions and sizes components along the vertical axis
Creates and returns a {@code SequentialGroup}
Creates and returns a {@code ParallelGroup} with an alignment of {@code Alignment
Creates and returns a {@code ParallelGroup} with the specified alignment
Creates and returns a {@code ParallelGroup} with the specified alignment and resize behavior
Creates and returns a {@code ParallelGroup} that aligns it's elements along the baseline
Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes
Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes
Replaces an existing component with a new one
Sets the {@code LayoutStyle} used to calculate the preferred gaps between components
Returns the {@code LayoutStyle} used for calculating the preferred gap between components
Notification that a {@code Component} has been added to the parent container
Notification that a {@code Component} has been removed from the parent container
Returns the preferred size for the specified container
Returns the minimum size for the specified container
Lays out the specified container
Notification that a {@code Component} has been added to the parent container
Returns the maximum size for the specified container
Returns the alignment along the x axis
Returns the alignment along the y axis
Invalidates the layout, indicating that if the layout manager has cached information it should be discarded
Returns a string representation of this {@code GroupLayout}
Adds a {@code Group} to this {@code Group}
Adds a {@code Component} to this {@code Group}
Adds a {@code Component} to this {@code Group} with the specified size
Adds a rigid gap to this {@code Group}
Adds a gap to this {@code Group} with the specified size
{@inheritDoc}
Adds a {@code Group} to this {@code Group}
{@inheritDoc}
Adds a {@code Component} to this {@code Group}
{@inheritDoc}
Adds a {@code Component} to this {@code Group} with the specified size
{@inheritDoc}
{@inheritDoc}
Adds an element representing the preferred gap between two components
Adds an element representing the preferred gap between two components
Adds an element representing the preferred gap between the nearest components
Adds an element representing the preferred gap between the nearest components
Adds an element representing the preferred gap between an edge the container and components that touch the border of the container
Adds an element representing the preferred gap between one edge of the container and the next or previous {@code Component} with the specified size
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Adds a {@code Group} to this {@code ParallelGroup} with the specified alignment
Adds a {@code Component} to this {@code ParallelGroup} with the specified alignment
Adds a {@code Component} to this {@code ParallelGroup} with the specified alignment and size
Called by the context initiator to start the context creation phase and process any tokens generated by the peer's <code>acceptSecContext</code> method
Called by the context initiator to start the context creation phase and process any tokens generated by the peer's <code>acceptSecContext</code> method using streams
Called by the context acceptor upon receiving a token from the peer
Called by the context acceptor to process a token from the peer using streams
Used during context establishment to determine the state of the context
Releases any system resources and cryptographic information stored in the context object and invalidates the context
Used to determine limits on the size of the message that can be passed to <code>wrap</code>
Applies per-message security services over the established security context
Applies per-message security services over the established security context using streams
Used to process tokens generated by the <code>wrap</code> method on the other side of the context
Uses streams to process tokens generated by the <code>wrap</code> method on the other side of the context
Returns a token containing a cryptographic Message Integrity Code (MIC) for the supplied message,  for transfer to the peer application
Uses streams to produce a token containing a cryptographic MIC for the supplied message, for transfer to the peer application
Verifies the cryptographic MIC, contained in the token parameter, over the supplied message
Uses streams to verify the cryptographic MIC, contained in the token parameter, over the supplied message
Exports this context so that another process may import it
Requests that mutual authentication be done during context establishment
Requests that replay detection be enabled for the per-message security services after context establishment
Requests that sequence checking be enabled for the per-message security services after context establishment
Requests that the initiator's credentials be delegated to the acceptor during context establishment
Requests that the initiator's identity not be disclosed to the acceptor
Requests that data confidentiality be enabled for the <code>wrap</code> method
Requests that data integrity be enabled for the <code>wrap</code> and <code>getMIC</code>methods
Requests a lifetime in seconds for the context
Sets the channel bindings to be used during context establishment
Determines if credential delegation is enabled on this context
Determines if mutual authentication is enabled on this context
Determines if replay detection is enabled for the per-message security services from this context
Determines if sequence checking is enabled for the per-message security services from this context
Determines if the context initiator is anonymously authenticated to the context acceptor
Determines if the context is transferable to other processes through the use of the {@link #export() export} method
Determines if the context is ready for per message operations to be used over it
Determines if data confidentiality is available over the context
Determines if data integrity is available over the context
Determines what the remaining lifetime for this context is
Returns the name of the context initiator
Returns the name of the context acceptor
Determines what mechanism is being used for this context
Obtains the credentials delegated by the context initiator to the context acceptor
Determines if this is the context initiator
Releases any sensitive information that the GSSCredential object may be containing
Retrieves the name of the entity that the credential asserts
Retrieves a Mechanism Name of the entity that the credential asserts
Returns the remaining lifetime in seconds for a credential
Returns the lifetime in seconds for the credential to remain capable of initiating security contexts using the specified mechanism
Returns the lifetime in seconds for the credential to remain capable of accepting security contexts using the specified mechanism
Returns the credential usage mode
Returns the credential usage mode for a specific mechanism
Returns a list of mechanisms supported by this credential
Adds a mechanism specific credential-element to an existing credential
Tests if this GSSCredential asserts the same entity as the supplied object
Returns a hashcode value for this GSSCredential
Returns the GSS-API level major error code for the problem causing this exception to be thrown
Returns the mechanism level error code for the problem causing this exception to be thrown
Returns a string explaining the GSS-API level major error code in this exception
Returns a string explaining the mechanism specific error code
Used by the exception thrower to set the mechanism level minor error code and its string explanation
Returns a textual representation of both the major and the minor status codes
Returns a textual representation of both the major and the minor status codes
Returns the default GSSManager implementation
Returns a list of mechanisms that are available to GSS-API callers through this GSSManager
Returns then name types supported by the indicated mechanism
Returns a list of mechanisms that support the indicated name type
Factory method to convert a string name from the specified namespace to a GSSName object
Factory method to convert a byte array containing a name from the specified namespace to a GSSName object
Factory method to convert a string name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism
Factory method to convert a byte array containing a name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism
Factory method for acquiring default credentials
Factory method for acquiring a single mechanism credential
Factory method for acquiring credentials over a set of mechanisms
Factory method for creating a context on the initiator's side
Factory method for creating a context on the acceptor' side
Factory method for creating a previously exported context
This method is used to indicate to the GSSManager that the application would like a particular provider to be used ahead of all others when support is desired for the given mechanism
This method is used to indicate to the GSSManager that the application would like a particular provider to be used if no other provider can be found that supports the given mechanism
Compares two <code>GSSName</code> objects to determine if they refer to the same entity
Compares this <code>GSSName</code> object to another Object that might be a <code>GSSName</code>
Returns a hashcode value for this GSSName
Creates a name that is canonicalized for some mechanism
Returns a canonical contiguous byte representation of a mechanism name (MN), suitable for direct, byte by byte comparison by authorization functions
Returns a textual representation of the <code>GSSName</code> object
Returns the name type of the printable representation of this name that can be obtained from the <code> toString</code> method
Tests if this name object represents an anonymous entity
Tests if this name object represents a Mechanism Name (MN)
Use this method to convert a GSSName and GSSCredential into a Subject
Apply the operation to two operands, and return the result
Apply the operation to two operands, and return the result
Creates the GTK look and feel class for the passed in Component
Returns whether or not the UIs should update their <code>SynthStyles</code> from the <code>SynthStyleFactory</code> when the ancestor of the Component changes
{@inheritDoc}
Determines whether or not to allow access to the guarded object {@code object}
Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard
Reads uncompressed data into an array of bytes
Closes this input stream and releases any system resources associated with the stream
Writes array of bytes to the compressed output stream
Finishes writing compressed data to the output stream without closing the underlying stream
The <code>handleMessage</code> method is invoked for normal processing  of inbound and outbound messages
The <code>handleFault</code> method is invoked for fault message  processing
Called at the conclusion of a message exchange pattern just prior to the JAX-WS runtime dispatching a message, fault or exception
Resolve an external entity
Receive notification of a notation declaration
Receive notification of an unparsed entity declaration
Receive a Locator object for document events
Receive notification of the beginning of the document
Receive notification of the end of the document
Receive notification of the start of an element
Receive notification of the end of an element
Receive notification of character data inside an element
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Receive notification of a parser warning
Receive notification of a recoverable parser error
Report a fatal XML parsing error
Gets the handler chain for the specified port
Retrieves an array of <tt>Control</tt>s from the object that implements this interface
Returns the attribute value which this attribute set contains in the given attribute category
Adds the specified attribute to this attribute set if it is not already present, first removing any existing in the same attribute category as the specified attribute value
Removes any attribute for this category from this attribute set if present
Removes the specified attribute from this attribute set if present
Returns <tt>true</tt> if this attribute set contains an attribute for the specified category
Returns <tt>true</tt> if this attribute set contains the given attribute
Adds all of the elements in the specified set to this attribute
Returns the number of attributes in this attribute set
Removes all attributes from this attribute set
Returns true if this attribute set contains no attributes
Compares the specified object with this attribute set for equality
Returns the hash code value for this attribute set
Returns the number of key-value mappings in this map
Returns <tt>true</tt> if this map contains no key-value mappings
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Returns <tt>true</tt> if this map contains a mapping for the specified key
Associates the specified value with the specified key in this map
Copies all of the mappings from the specified map to this map
Removes the mapping for the specified key from this map if present
Removes all of the mappings from this map
Returns <tt>true</tt> if this map maps one or more keys to the specified value
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and values themselves are not cloned
Returns an iterator over the elements in this set
Returns the number of elements in this set (its cardinality)
Returns <tt>true</tt> if this set contains no elements
Returns <tt>true</tt> if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Returns a shallow copy of this <tt>HashSet</tt> instance: the elements themselves are not cloned
Creates a <em><a href="Spliterator
Returns the number of keys in this hashtable
Tests if this hashtable maps no keys to values
Returns an enumeration of the keys in this hashtable
Returns an enumeration of the values in this hashtable
Tests if some key maps into the specified value in this hashtable
Returns true if this hashtable maps one or more keys to this value
Tests if the specified object is a key in this hashtable
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently
Maps the specified <code>key</code> to the specified <code>value</code> in this hashtable
Removes the key (and its corresponding value) from this hashtable
Copies all of the mappings from the specified map to this hashtable
Clears this hashtable so that it contains no keys
Creates a shallow copy of this hashtable
Returns a string representation of this <tt>Hashtable</tt> object in the form of a set of entries, enclosed in braces and separated by the ASCII characters "<tt>,&nbsp;</tt>" (comma and space)
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns a {@link Collection} view of the values contained in this map
Compares the specified Object with this Map for equality, as per the definition in the Map interface
Returns the hash code value for this Map as per the definition in the Map interface
Convert a Hashtable into a Node tree
Process the LocPathIterator to see if it contains variables or functions that may make it context dependent
Visit a function
Visit a predicate within a location path
Method item
Method getLength
Method appendChild
Encode a byte array to hex string
Decode hex string to a byte array
Writes a byte
Called when an ancestor of the source is moved
Called when an ancestor of the source is resized
Called when an ancestor of the source is moved
Called when an ancestor of the source is resized
Returns the originator of the event
Returns the Component at the top of the hierarchy which was changed
Returns the parent of the Component returned by <code> getChanged()</code>
Returns a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object
Returns a parameter string identifying this event
Called when the hierarchy has been changed
Called when the UI is being installed into the interface of a JTextComponent
Called when the UI is being removed from the interface of a JTextComponent
Renders the highlights
Adds a highlight to the view
Removes a highlight from the view
Removes all highlights this highlighter is responsible for
Changes the given highlight to span a different portion of the document
Fetches the current list of highlights
Renders the highlight
Gets the starting model offset for the highlight
Gets the ending model offset for the highlight
Gets the painter for the highlighter
Gets the ID of the chronology
Gets the calendar type of the Islamic calendar
Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields
Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields
Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields
Obtains a local date in the Hijrah calendar system from the epoch-day
Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar in the default time-zone
Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar in the specified time-zone
Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar from the specified clock
Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields
Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar from a temporal object
Gets the chronology of this date, which is the Hijrah calendar system
Gets the era applicable at this date
Returns the length of the month represented by this date
Returns the length of the year represented by this date
{@inheritDoc}
Returns a {@code HijrahDate} with the Chronology requested
{@inheritDoc}
{@inheritDoc}
Checks if the year is a leap year, according to the Hijrah calendar system rules
Compares this date to another date, including the chronology
A hash code for this date
Obtains an instance of {@code HijrahEra} from an {@code int} value
Gets the numeric era {@code int} value
Gets the range of valid values for the specified field
Returns the truncation length
Returns the set of actual HTML tags that are recognized by the default HTML reader
Fetches a tag constant for a well-known tag name (i
Fetches an integer attribute value
Returns the set of HTML attributes recognized
Fetches an attribute constant for a well-known attribute name (i
Returns <code>true</code> if this tag is a block tag, which is a tag used to add structure to a document
Returns <code>true</code> if this tag causes a line break to the flow of data, otherwise returns <code>false</code>
Returns <code>true</code> if this tag is pre-formatted, which is true if the tag is either <code>PRE</code> or <code>TEXTAREA</code>
Returns the string representation of the tag
Returns the hash code which corresponds to the string for this tag
Compares this object to the specified object
Returns the string representation of this attribute
A single character access key to give access to the form control
The character encoding of the linked resource
Comma-separated list of lengths, defining an active region geometry
The URI of the linked resource
Language code of the linked resource
Anchor name
Forward link type
Reverse link type
The shape of the active area
Index that represents the element's position in the tabbing order
Frame to render the resource in
Advisory content type
Removes keyboard focus from this element
Gives keyboard focus to this element
Aligns this object (vertically or horizontally)  with respect to its surrounding text
Alternate text for user agents not rendering the normal content of this element
Comma-separated archive list
Applet class file
Optional base URI for applet
Override height
Horizontal space to the left and right of this image, applet, or object
The name of the applet
Serialized applet file
Vertical space above and below this image, applet, or object
Override width
A single character access key to give access to the form control
Alternate text for user agents not rendering the normal content of this element
Comma-separated list of lengths, defining an active region geometry
The URI of the linked resource
Specifies that this area is inactive, i
The shape of the active area
Index that represents the element's position in the tabbing order
Frame to render the resource in
The base URI
The default target frame
Font color
Font face identifier
Font size
Color of active links (after mouse-button down, but before mouse-button up)
URI of the background texture tile image
Document background color
Color of links that are not active and unvisited
Document text color
Color of links that have been visited by the user
Control flow of text around floats
Returns the <code>FORM</code> element containing this control
A single character access key to give access to the form control
The control is unavailable in this context
Form control or object name when submitted with a form
Index that represents the element's position in the tabbing order
The type of button
The current form control value
This attribute specifies the length or  size of the list
This method retrieves a node specified by ordinal index
This method retrieves a <code>Node</code> using a name
Reduce spacing between list items
Horizontal text alignment
Reduce spacing between list items
The title of a document as specified by the <code>TITLE</code> element in the head of the document
Returns the URI  of the page that linked to this page
The domain name of the server that served the document, or <code>null</code> if the server cannot be identified by a domain name
The complete URI  of the document
The element that contains the content for the document
A collection of all the <code>IMG</code> elements in a document
A collection of all the <code>OBJECT</code> elements that include applets and <code>APPLET</code> ( deprecated ) elements in a document
A collection of all <code>AREA</code> elements and anchor ( <code>A</code> ) elements in a document with a value for the <code>href</code> attribute
A collection of all the forms of a document
A collection of all the anchor (<code>A</code> ) elements in a document  with a value for the <code>name</code> attribute
The cookies associated with this document
Note
Closes a document stream opened by <code>open()</code> and forces rendering
Write a string of text to a document stream opened by <code>open()</code> 
Write a string of text followed by a newline character to a document stream opened by <code>open()</code> 
Returns the (possibly empty) collection of elements whose <code>name</code> value is given by <code>elementName</code> 
Creates an <code>HTMLDocument</code> object with the minimal tree made of the following elements: <code>HTML</code> , <code>HEAD</code> , <code>TITLE</code> , and <code>BODY</code> 
Returns true if element is declared to be empty
Returns true if element is declared to have element content
Returns true if element's textual contents preserves spaces
Returns true if element's closing tag is optional and need not exist
Returns true if element's closing tag is generally not printed
Returns true if the opening of one element (<tt>tagName</tt>) implies the closing of another open element (<tt>openTag</tt>)
Returns true if the specified attribute it a URI and should be escaped appropriately
Returns true if the specified attribute is a boolean and should be printed without the value
Returns the value of an HTML character reference by its name
Returns the name of an HTML character reference based on its character value
Get the MIME type of the data that this kit represents support for
Fetch a factory that is suitable for producing views of any models that are produced by this kit
Create an uninitialized text storage model that is appropriate for this type of editor
Inserts content from the given stream
Inserts HTML into an existing document
Write content from a document to the given stream in a format appropriate for this kind of content handler
Called when the kit is being installed into the a JEditorPane
Called when the kit is being removed from the JEditorPane
Set the set of styles to be used to render the various HTML elements
Get the set of styles currently being used to render the HTML elements
Fetches the command list for the editor
Copies the key/values in <code>element</code>s AttributeSet into <code>set</code>
Gets the input attributes used for the styled editing actions
Sets the default cursor
Returns the default cursor
Sets the cursor to use over links
Returns the cursor to use over hyper links
Indicates whether an html form submission is processed automatically or only <code>FormSubmitEvent</code> is fired
Specifies if an html form submission is processed automatically or only <code>FormSubmitEvent</code> is fired
Creates a copy of the editor kit
Fetch the parser to use for reading HTML streams
returns the AccessibleContext associated with this editor kit
Called for a mouse click event
Calls linkActivated on the associated JEditorPane if the given position represents a link
Parse the given stream and drive the given callback with the results of the parse
This is invoked after the stream has been parsed, but before <code>flush</code>
Creates a view from an element
Returns an array of the Elements that contain <code>offset</code>
Returns number of elements, starting at the deepest leaf, needed to get to an element representing <code>tag</code>
Returns the deepest element at <code>offset</code> matching <code>tag</code>
A cover for HTMLEditorKit
This is invoked when inserting at a boundary
This is invoked when inserting at a boundary
Inserts the HTML into the document
The element's identifier
The element's advisory title
Language code defined in RFC 1766
Specifies the base direction of directionally neutral text and the directionality of tables
The class attribute of the element
Returns the <code>FORM</code> element containing this control
Font color
Font face identifier
Font size
Returns a collection of all control elements in the form
The number of form controls in the form
Names the form
List of character sets supported by the server
Server-side form handler
The content type of the submitted form,  generally "application/x-www-form-urlencoded"
HTTP method used to submit form
Frame to render the resource in
Submits the form
Restores a form element's default values
Request frame borders
URI designating a long description of this image or frame
Frame margin height, in pixels
Frame margin width, in pixels
The frame name (object of the <code>target</code> attribute)
When true, forbid user from resizing frame
Specify whether or not the frame should have scrollbars
A URI designating the initial frame contents
The document this frame contains, if there is any and it is available, or <code>null</code> otherwise
returns the target for the link
The number of columns of frames in the frameset
The number of rows of frames in the frameset
URI designating a metadata profile
Horizontal text alignment
Align the rule on the page
Indicates to the user agent that there should be no shading in the rendering of this element
The height of the rule
The width of the rule
Version information about the document's DTD
Aligns this object (vertically or horizontally)  with respect to its surrounding text
Request frame borders
Frame height
URI designating a long description of this image or frame
Frame margin height, in pixels
Frame margin width, in pixels
The frame name (object of the <code>target</code> attribute)
Specify whether or not the frame should have scrollbars
A URI designating the initial frame contents
Frame width
The document this frame contains, if there is any and it is available, or <code>null</code> otherwise
URI designating the source of this image, for low-resolution output
The name of the element (for backwards compatibility)
Aligns this object (vertically or horizontally)  with respect to its surrounding text
Alternate text for user agents not rendering the normal content of this element
Width of border around image
Override height
Horizontal space to the left and right of this image
Use server-side image map
URI designating a long description of this image or frame
URI designating the source of this image
Use client-side image map
Vertical space above and below this image
Override width
When the <code>type</code> attribute of the element has the value "Text", "File" or "Password", this represents the HTML value attribute of the element
When <code>type</code> has the value "Radio" or "Checkbox", this represents the HTML checked attribute of the element
Returns the <code>FORM</code> element containing this control
A comma-separated list of content types that a server processing this form will handle correctly
A single character access key to give access to the form control
Aligns this object (vertically or horizontally)  with respect to its surrounding text
Alternate text for user agents not rendering the normal content of this element
When the <code>type</code> attribute of the element has the value "Radio" or "Checkbox", this represents the current state of the form control, in an interactive user agent
The control is unavailable in this context
Maximum number of characters for text fields, when <code>type</code> has the value "Text" or "Password"
Form control or object name when submitted with a form
This control is read-only
Size information
When the <code>type</code> attribute has the value "Image", this attribute specifies the location of the image to be used to decorate the graphical submit button
Index that represents the element's position in the tabbing order
The type of control created
Use client-side image map
When the <code>type</code> attribute of the element has the value "Text", "File" or "Password", this represents the current contents of the corresponding form control, in an interactive user agent
Removes keyboard focus from this element
Gives keyboard focus to this element
Select the contents of the text area
Simulate a mouse-click
Returns the <code>FORM</code> element containing this control
The prompt message
Returns the <code>FORM</code> element containing this control
A single character access key to give access to the form control
This attribute links this label with another form control by <code>id</code> attribute
Returns the <code>FORM</code> element containing this control
A single character access key to give access to the form control
Text alignment relative to <code>FIELDSET</code> 
List item bullet style
Reset sequence number when used in <code>OL</code> 
Enables/disables the link
The character encoding of the resource being linked to
The URI of the linked resource
Language code of the linked resource
Designed for use with one or more target media
Forward link type
Reverse link type
Frame to render the resource in
Advisory content type
The list of areas defined for the image map
Names the map (for use with <code>usemap</code> )
Reduce spacing between list items
Associated information
HTTP response header name
Meta information name
Select form of content
A URI designating a document that describes the reason for the change
The date and time of the change
Returns the <code>FORM</code> element containing this control
Applet class file
Aligns this object (vertically or horizontally)  with respect to its surrounding text
Space-separated list of archives
Width of border around the object
Base URI for <code>classid</code> , <code>data</code> , and <code>archive</code> attributes
Content type for data downloaded via <code>classid</code> attribute
A URI specifying the location of the object's data
Declare (for future reference), but do not instantiate, this object
Override height
Horizontal space to the left and right of this image, applet, or object
Form control or object name when submitted with a form
Message to render while loading the object
Index that represents the element's position in the tabbing order
Content type for data downloaded via <code>data</code> attribute
Use client-side image map
Vertical space above and below this image, applet, or object
Override width
The document this object contains, if there is any and it is available, or <code>null</code> otherwise
Reduce spacing between list items
Starting sequence number
Numbering style
The control is unavailable in this context
Assigns a label to this option group
Returns the <code>FORM</code> element containing this control
Represents the value of the HTML selected attribute
The text contained within the option element
The index of this <code>OPTION</code> in its parent <code>SELECT</code>  , starting from 0
The control is unavailable in this context
Option label for use in hierarchical menus
Represents the current state of the corresponding form control, in an interactive user agent
The current form control value
Horizontal text alignment
The name of a run-time parameter
Content type for the <code>value</code> attribute when <code>valuetype</code> has the value "ref"
The value of a run-time parameter
Information about the meaning of the <code>value</code> attribute value
Fixed width for content
A URI designating a source document or message
The script content of the element
Reserved for future use
Reserved for future use
The character encoding of the linked resource
Indicates that the user agent can defer processing of the script
URI designating an external script
The content type of the script language
The type of this form control
The ordinal index of the selected option, starting from 0
The current form control value
The number of options in this <code>SELECT</code> 
Returns the <code>FORM</code> element containing this control
The collection of <code>OPTION</code> elements contained by this element
The control is unavailable in this context
If true, multiple <code>OPTION</code> elements may  be selected in this <code>SELECT</code> 
Form control or object name when submitted with a form
Number of visible rows
Index that represents the element's position in the tabbing order
Add a new element to the collection of <code>OPTION</code> elements for this <code>SELECT</code> 
Remove an element from the collection of <code>OPTION</code> elements for this <code>SELECT</code> 
Removes keyboard focus from this element
Gives keyboard focus to this element
Called to serialize the document's DOCTYPE by the root element
Called to serialize a DOM element
Enables/disables the style sheet
Designed for use with one or more target media
The content type pf the style sheet language
Caption alignment with respect to the table
The index of this cell in the row, starting from 0
Abbreviation for header cells
Horizontal alignment of data in cell
Names group of related headers
Cell background color
Alignment character for cells in a column
Offset of alignment character
Number of columns spanned by cell
List of <code>id</code> attribute values for header cells
Cell height
Suppress word wrapping
Number of rows spanned by cell
Scope covered by header cells
Vertical alignment of data in cell
Cell width
Horizontal alignment of cell data in column
Alignment character for cells in a column
Offset of alignment character
Indicates the number of columns in a group or affected by a grouping
Vertical alignment of cell data in column
Default column width
Returns the table's <code>CAPTION</code> , or void if none exists
Returns the table's <code>THEAD</code> , or <code>null</code> if none exists
Returns the table's <code>TFOOT</code> , or <code>null</code> if none exists
Returns a collection of all the rows in the table, including all in <code>THEAD</code> , <code>TFOOT</code> , all <code>TBODY</code> elements
Returns a collection of the defined table bodies
Specifies the table's position with respect to the rest of the document
Cell background color
The width of the border around the table
Specifies the horizontal and vertical space between cell content and cell borders
Specifies the horizontal and vertical separation between cells
Specifies which external table borders to render
Specifies which internal table borders to render
Description about the purpose or structure of a table
Specifies the desired table width
Create a table header row or return an existing one
Delete the header from the table, if one exists
Create a table footer row or return an existing one
Delete the footer from the table, if one exists
Create a new table caption object or return an existing one
Delete the table caption, if one exists
Insert a new empty row in the table
Delete a table row
The index of this row, relative to the entire table, starting from 0
The index of this row, relative to the current section ( <code>THEAD</code> , <code>TFOOT</code> , or <code>TBODY</code> ), starting from 0
The collection of cells in this row
Horizontal alignment of data within cells of this row
Background color for rows
Alignment character for cells in a column
Offset of alignment character
Vertical alignment of data within cells of this row
Insert an empty <code>TD</code> cell into this row
Delete a cell from the current row
Horizontal alignment of data in cells
Alignment character for cells in a column
Offset of alignment character
Vertical alignment of data in cells
The collection of rows in this table section
Insert a row into this section
Delete a row from this section
Represents the contents of the element
Returns the <code>FORM</code> element containing this control
A single character access key to give access to the form control
Width of control (in characters)
The control is unavailable in this context
Form control or object name when submitted with a form
This control is read-only
Number of text rows
Index that represents the element's position in the tabbing order
The type of this form control
Represents the current contents of the corresponding form control, in an interactive user agent
Removes keyboard focus from this element
Gives keyboard focus to this element
Select the contents of the <code>TEXTAREA</code> 
The specified title as a string
Reduce spacing between list items
Bullet style
Iterates over the Element tree and controls the writing out of all the tags and its attributes
Writes out the attribute set
Writes out all empty elements (all tags that have no corresponding end tag)
Determines if the HTML
Writes out a start tag for the element
Writes out text that is contained in a TEXTAREA form element
Writes out text
Writes out the content of the SELECT form element
Writes out the content of the Option form element
Writes out an end tag for the element
Writes out comments
Returns true if the element is a synthesized element
Returns true if the StyleConstants
Searches for embedded tags in the AttributeSet and writes them out
Searches the attribute set and for each tag that is stored in the tag vector
Writes the line separator
This method is overriden to map any character entities, such as &lt; to &amp;lt;
JAX-WS runtime sets its handler during {@link Endpoint#publish(HttpContext)} to handle HTTP requests for this context
Returns the path for this context
Returns an attribute value for container's configuration and other data that can be used by jax-ws runtime
Returns all attribute names for container's configuration and other data that can be used by jax-ws runtime
Constructs cookies from set-cookie or set-cookie2 header string
Reports whether this HTTP cookie has expired or not
Specifies a comment that describes a cookie's purpose
Returns the comment describing the purpose of this cookie, or {@code null} if the cookie has no comment
Specifies a comment URL that describes a cookie's purpose
Returns the comment URL describing the purpose of this cookie, or {@code null} if the cookie has no comment URL
Specify whether user agent should discard the cookie unconditionally
Returns the discard attribute of the cookie
Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header
Returns the port list attribute of the cookie
Specifies the domain within which this cookie should be presented
Returns the domain name set for this cookie
Sets the maximum age of the cookie in seconds
Returns the maximum age of the cookie, specified in seconds
Specifies a path for the cookie to which the client should return the cookie
Returns the path on the server to which the browser returns this cookie
Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL
Returns {@code true} if sending this cookie should be restricted to a secure protocol, or {@code false} if the it can be sent using any protocol
Returns the name of the cookie
Assigns a new value to a cookie after the cookie is created
Returns the value of the cookie
Returns the version of the protocol this cookie complies with
Sets the version of the cookie protocol this cookie complies with
Returns {@code true} if this cookie contains the <i>HttpOnly</i> attribute
Indicates whether the cookie should be considered HTTP Only
The utility method to check whether a host name is in a domain or not
Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading "Cookie:" token
Test the equality of two HTTP cookies
Returns the hash code of this HTTP cookie
Create and return a copy of this object
Gets the HTTP status code
Returns an immutable Map containing the HTTP headers that were included with this request
Returns the value of the specified request header
Returns a mutable Map into which the HTTP response headers can be stored and which will be transmitted as part of this response
Adds a response header with the given name and value
Returns the part of the request's URI from the protocol name up to the query string in the first line of the HTTP request
Returns the context path of all the endpoints in an application
Get the HTTP request method
Returns a {@link HttpContext} for this exchange
This must be called to end an exchange
Returns a stream from which the request body can be read
Returns a stream to which the response body must be written
Sets the HTTP status code for the response
Returns the unresolved address of the remote entity invoking this request
Returns the unresolved local address on which the request was received
Returns the protocol string from the request in the form <i>protocol/majorVersion
Returns the name of the scheme used to make this request, for example: http, or https
Returns the extra path information that follows the web service path but precedes the query string in the request URI and will start with a "/" character
Returns the query string that is contained in the request URI after the path
Returns an attribute that is associated with this <code>HttpExchange</code>
Gives all the attribute names that are associated with this <code>HttpExchange</code>
Returns the {@link Principal} that represents the authenticated user for this <code>HttpExchange</code>
Indicates whether an authenticated user is included in the specified logical "role"
Handles a given request and generates an appropriate response
Returns the preference whether HTTP redirects should be followed
Sets the preference whether HTTP redirects should be followed
Returns the value of the request property associated with the given property name
Returns an iterator for the request properties this input source contains
Sets the value of the request property associated with the given property name
Returns the http response code
Returns a string explaining why the http request could not be retried
Returns the value of the Location header field if the error resulted from redirection
Returns the key for the {@code n}<sup>th</sup> header field
This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is <b>not</b> known in advance
Returns the value for the {@code n}<sup>th</sup> header field
Sets whether HTTP redirects  (requests with response code 3xx) should be automatically followed by this class
Returns a {@code boolean} indicating whether or not HTTP redirects (3xx) should be automatically followed
Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this {@code HttpURLConnection} instance
Returns the value of this {@code HttpURLConnection}'s {@code instanceFollowRedirects} field
Set the method for the URL request, one of: <UL>  <LI>GET  <LI>POST  <LI>HEAD  <LI>OPTIONS  <LI>PUT  <LI>DELETE  <LI>TRACE </UL> are legal, subject to protocol restrictions
Get the request method
Gets the status code from an HTTP response message
Gets the HTTP response message, if any, returned along with the response code from a server
Indicates that other requests to the server are unlikely in the near future
Indicates if the connection is going through a proxy
Returns a {@link SocketPermission} object representing the permission necessary to connect to the destination host and port
Returns the error stream if the connection failed but the server sent useful data nonetheless
Gets the type of event
Get the description of the link as a string
Gets the URL that the link refers to
Returns the <code>Element</code> that corresponds to the source of the event
Returns the {@code InputEvent} that triggered the hyperlink event
Converts the type to a string
Called when a hypertext link is updated
Method translate translates a message ID into an internationalized String, see alse <CODE>XMLSecurityException
Method translate translates a message ID into an internationalized String, see also <CODE>XMLSecurityException
Method getExceptionMessage
Method getExceptionMessage
Method getExceptionMessage
Method init
Returns the message string with the specified key from the "properties" file in the package containing the class with the specified name
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the ICC_Profile for this ICC_ColorSpace
Transforms a color value assumed to be in this ColorSpace into a value in the default CS_sRGB color space
Transforms a color value assumed to be in the default CS_sRGB color space into this ColorSpace
Transforms a color value assumed to be in this ColorSpace into the CS_CIEXYZ conversion color space
Transforms a color value assumed to be in the CS_CIEXYZ conversion color space into this ColorSpace
Returns the minimum normalized color component value for the specified component
Returns the maximum normalized color component value for the specified component
Frees the resources associated with an ICC_Profile object
Constructs an ICC_Profile object corresponding to the data in a byte array
Constructs an ICC_Profile corresponding to one of the specific color spaces defined by the ColorSpace class (for example CS_sRGB)
Constructs an ICC_Profile corresponding to the data in a file
Constructs an ICC_Profile corresponding to the data in an InputStream
Returns profile major version
Returns profile minor version
Returns the profile class
Returns the color space type
Returns the color space type of the Profile Connection Space (PCS)
Write this ICC_Profile to a file
Write this ICC_Profile to an OutputStream
Returns a byte array corresponding to the data of this ICC_Profile
Returns a particular tagged data element from the profile as a byte array
Sets a particular tagged data element in the profile from a byte array
Returns the number of color components in the "input" color space of this profile
Resolves instances being deserialized into instances registered with CMM
Returns a float array of length 3 containing the X, Y, and Z components of the mediaWhitePointTag in the ICC profile
Returns a gamma value representing the tone reproduction curve (TRC)
Returns the TRC as an array of shorts
Returns an array that contains the components of the profile's <CODE>mediaWhitePointTag</CODE>
Returns a 3x3 <CODE>float</CODE> matrix constructed from the X, Y, and Z components of the profile's <CODE>redColorantTag</CODE>, <CODE>greenColorantTag</CODE>, and <CODE>blueColorantTag</CODE>
Returns a gamma value representing the tone reproduction curve (TRC) for a particular component
Returns the TRC for a particular component as an array
Draw the icon at the specified location
Returns the icon's width
Returns the icon's height
Call corresponding visitor method(s)
Paints the icon
Determines the preferred span for this view along an axis
Determines the desired alignment for this view along an axis
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
specifies the policy value
Checks that "content" string is valid ID value
Return the (type) identity of this entity
Write the data for this object as a CDR encapsulation
Return an iterator which iterates over all contained Identifiables with type given by id
Return the id of this factory, which is the id of the result of any create call
Construct the appropriate Identifiable object with the given id from the InputStream is
If there is a registered factory for id, use it to read an Identifiable from is
Register a factory for the given id
Returns this identity's name
Returns this identity's scope
Returns this identity's public key
Sets this identity's public key
Specifies a general information string for this identity
Returns general information previously specified for this identity
Adds a certificate for this identity
Removes a certificate from this identity
Returns a copy of all the certificates for this identity
Tests for equality between the specified object and this identity
Tests for equality between the specified identity and this identity
Returns a short string describing this identity, telling its name and its scope (if any)
Returns a string representation of this identity, with optionally more details than that provided by the {@code toString} method without any arguments
Returns a hashcode for this identity
Returns the identity constraint name
Sets the selector
Returns the selector
Adds a field
Returns the field count
Returns the field at the specified index
Returns a string representation of this object
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{identity-constraint category} One of key, keyref or unique
{selector} A restricted XPath ([XPath]) expression
{fields} A non-empty list of restricted XPath ([XPath]) expressions
{referenced key} Required if {identity-constraint category} is keyref, forbidden otherwise
Optional
Returns the number of key-value mappings in this identity hash map
Returns <tt>true</tt> if this identity hash map contains no key-value mappings
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Tests whether the specified object reference is a key in this identity hash map
Tests whether the specified object reference is a value in this identity hash map
Associates the specified value with the specified key in this identity hash map
Copies all of the mappings from the specified map to this map
Removes the mapping for this key from this map if present
Removes all of the mappings from this map
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned
Returns an identity-based set view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns the number of keys in this hashtable
Tests if this hashtable maps no keys to values
Returns an enumeration of the keys in this hashtable
Returns an enumeration of the values in this hashtable
Tests if some key maps into the specified value in this hashtable
Tests if the specified object is a key in this hashtable
Returns the value to which the specified key is mapped in this hashtable
Rehashes the contents of the hashtable into a hashtable with a larger capacity
Maps the specified <code>key</code> to the specified <code>value</code> in this hashtable
Removes the key (and its corresponding value) from this hashtable
Clears this hashtable so that it contains no keys
Returns a rather long string representation of this hashtable
Returns the system's identity scope
Sets the system's identity scope
Returns the number of identities within this identity scope
Returns the identity in this scope with the specified name (if any)
Retrieves the identity whose name is the same as that of the specified principal
Retrieves the identity with the specified public key
Adds an identity to this identity scope
Removes an identity from this identity scope
Returns an enumeration of all identities in this identity scope
Returns a string representation of this identity scope, including its name, its scope name, and the number of identities in this identity scope
Call corresponding visitor method(s)
Get the interfaces that this IDLNameTranslator describes
Get all methods for this remote interface
Get the method from this IDLNameTranslator's interfaces that corresponds to the mangled name idlName
Get the mangled name that corresponds to the given method on this IDLNameTranslator's interface
Return an IDLNameTranslator for the given interface
Return an IDLNameTranslator for the given interfacex
Returns Unicode mangling as defined in Section 1
The type attribute describes the type defined by an object derived from <code>IDLType</code>
Validate a class to ensure it conforms to the rules for a Java RMI/IIOP interface
Section 1
Section 1
Section 1
Section 1
Section 1
Section 1
Return true if given method is legal property accessor as defined in Section 1
Return IDL Type name for primitive types as defined in Section 1
Return IDL Type name for special case type mappings as defined in Table 1-1 of Java2IDL spec or null if given class is not a special type
Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of <a href="http://www
Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of <a href="http://www
Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of <a href="http://www
Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of <a href="http://www
Checks that "content" string is valid IDREF value
Method registerElementById
Method getElementById
specifies the policy value
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Dump instruction as byte code to stream out
Read needed data (e
Set index of local variable
Set increment factor
Call corresponding visitor method(s)
Returns a reference to the byte array
Updates the array reference that will be returned by subsequent calls to the <code>getData</code> method
Returns the offset within the byte array returned by <code>getData</code> at which the data of interest start
Updates the value that will be returned by subsequent calls to the <code>getOffset</code> method
Returns the length of the data of interest within the byte array returned by <code>getData</code>
Updates the value that will be returned by subsequent calls to the <code>getLength</code> method
Returns the currently set <code>RenderedImage</code>, or <code>null</code> if only a <code>Raster</code> is available
Sets the current <code>RenderedImage</code>
Returns <code>true</code> if this <code>IIOImage</code> stores a <code>Raster</code> rather than a <code>RenderedImage</code>
Returns the currently set <code>Raster</code>, or <code>null</code> if only a <code>RenderedImage</code> is available
Sets the current <code>Raster</code>
Returns the number of thumbnails stored in this <code>IIOImage</code>
Returns a thumbnail associated with the main image
Returns the current <code>List</code> of thumbnail <code>BufferedImage</code>s, or <code>null</code> if none is set
Sets the list of thumbnails to a new <code>List</code> of <code>BufferedImage</code>s, or to <code>null</code>
Returns a reference to the current <code>IIOMetadata</code> object, or <code>null</code> is none is set
Sets the <code>IIOMetadata</code> to a new object, or <code>null</code>
Returns the <code>Node</code> that caused the error in parsing
Returns <code>true</code> if the standard metadata format is supported by <code>getMetadataFormat</code>, <code>getAsTree</code>, <code>setFromTree</code>, and <code>mergeTree</code>
Returns <code>true</code> if this object does not support the <code>mergeTree</code>, <code>setFromTree</code>, and <code>reset</code> methods
Returns the name of the "native" metadata format for this plug-in, which typically allows for lossless encoding and transmission of the metadata stored in the format handled by this plug-in
Returns an array of <code>String</code>s containing the names of additional metadata formats, other than the native and standard formats, recognized by this plug-in's <code>getAsTree</code>, <code>setFromTree</code>, and <code>mergeTree</code> methods
Returns an array of <code>String</code>s containing the names of all metadata formats, including the native and standard formats, recognized by this plug-in's <code>getAsTree</code>, <code>setFromTree</code>, and <code>mergeTree</code> methods
Returns an <code>IIOMetadataFormat</code> object describing the given metadata format, or <code>null</code> if no description is available
Returns an XML DOM <code>Node</code> object that represents the root of a tree of metadata contained within this object according to the conventions defined by a given metadata format
Alters the internal state of this <code>IIOMetadata</code> object from a tree of XML DOM <code>Node</code>s whose syntax is defined by the given metadata format
Returns an <code>IIOMetadataNode</code> representing the chroma information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the compression information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the data format information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the dimension information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the document information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the textual information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the tiling information of the standard <code>javax_imageio_1
Returns an <code>IIOMetadataNode</code> representing the transparency information of the standard <code>javax_imageio_1
A utility method to return a tree of <code>IIOMetadataNode</code>s representing the metadata contained within this object according to the conventions of the standard <code>javax_imageio_1
Sets the internal state of this <code>IIOMetadata</code> object from a tree of XML DOM <code>Node</code>s whose syntax is defined by the given metadata format
Resets all the data stored in this object to default values, usually to the state this object was in immediately after construction, though the precise semantics are plug-in specific
Sets the <code>IIOMetadataController</code> to be used to provide settings for this <code>IIOMetadata</code> object when the <code>activateController</code> method is called, overriding any default controller
Returns whatever <code>IIOMetadataController</code> is currently installed
Returns the default <code>IIOMetadataController</code>, if there is one, regardless of the currently installed controller
Returns <code>true</code> if there is a controller installed for this <code>IIOMetadata</code> object
Activates the installed <code>IIOMetadataController</code> for this <code>IIOMetadata</code> object and returns the resulting value
Activates the controller
Returns the name of the root element of the format
Returns <code>true</code> if the element (and the subtree below it) is allowed to appear in a metadata document for an image of the given type, defined by an <code>ImageTypeSpecifier</code>
Returns the minimum number of children of the named element with child policy <code>CHILD_POLICY_REPEAT</code>
Returns the maximum number of children of the named element with child policy <code>CHILD_POLICY_REPEAT</code>
Returns a <code>String</code> containing a description of the named element, or <code>null</code>
Returns one of the constants starting with <code>CHILD_POLICY_</code>, indicating the legal pattern of children for the named element
Returns an array of <code>String</code>s indicating the names of the element which are allowed to be children of the named element, in the order in which they should appear
Returns an array of <code>String</code>s listing the names of the attributes that may be associated with the named element
Returns one of the constants starting with <code>VALUE_</code>, indicating whether the values of the given attribute within the named element are arbitrary, constrained to lie within a specified range, constrained to be one of a set of enumerated values, or are a whitespace-separated list of arbitrary values
Returns one of the constants starting with <code>DATATYPE_</code>, indicating the format and interpretation of the value of the given attribute within the named element
Returns <code>true</code> if the named attribute must be present within the named element
Returns the default value of the named attribute, if it is not explicitly present within the named element, as a <code>String</code>, or <code>null</code> if no default value is available
Returns an array of <code>String</code>s containing the legal enumerated values for the given attribute within the named element
Returns the minimum legal value for the attribute
Returns the maximum legal value for the attribute
Returns the minimum number of list items that may be used to define this attribute
Returns the maximum number of list items that may be used to define this attribute
Returns a <code>String</code> containing a description of the named attribute, or <code>null</code>
Returns one of the enumerated values starting with <code>VALUE_</code>, indicating the type of values (enumeration, range, or array) that are allowed for the <code>Object</code> reference
Returns the <code>Class</code> type of the <code>Object</code> reference stored within the element
Returns an <code>Object</code>s containing the default value for the <code>Object</code> reference within the named element
Returns an array of <code>Object</code>s containing the legal enumerated values for the <code>Object</code> reference within the named element
Returns the minimum legal value for the <code>Object</code> reference within the named element
Returns the maximum legal value for the <code>Object</code> reference within the named element
Returns the minimum number of array elements that may be used to define the <code>Object</code> reference within the named element
Returns the maximum number of array elements that may be used to define the <code>Object</code> reference within the named element
Sets a new base name for locating <code>ResourceBundle</code>s containing descriptions of elements and attributes for this format
Returns the currently set base name for locating <code>ResourceBundle</code>s
Adds a new element type to this metadata document format with a child policy other than <code>CHILD_POLICY_REPEAT</code>
Adds a new element type to this metadata document format with a child policy of <code>CHILD_POLICY_REPEAT</code>
Adds an existing element to the list of legal children for a given parent node type
Removes an element from the format
Adds a new attribute to a previously defined element that may be set to an arbitrary value
Adds a new attribute to a previously defined element that will be defined by a set of enumerated values
Adds a new attribute to a previously defined element that will be defined by a range of values
Adds a new attribute to a previously defined element that will be defined by a list of values
Adds a new attribute to a previously defined element that will be defined by the enumerated values <code>TRUE</code> and <code>FALSE</code>, with a datatype of <code>DATATYPE_BOOLEAN</code>
Removes an attribute from a previously defined element
Allows an <code>Object</code> reference of a given class type to be stored in nodes implementing the named element
Allows an <code>Object</code> reference of a given class type to be stored in nodes implementing the named element
Allows an <code>Object</code> reference of a given class type to be stored in nodes implementing the named element
Allows an <code>Object</code> reference of a given class type to be stored in nodes implementing the named element
Disallows an <code>Object</code> reference from being stored in nodes implementing the named element
Returns a <code>String</code> containing a description of the named element, or <code>null</code>
Returns a <code>String</code> containing a description of the named attribute, or <code>null</code>
Returns an <code>IIOMetadataFormat</code> object describing the standard, plug-in neutral <code>javax
Returns the node name associated with this node
Returns the value associated with this node
Sets the <code>String</code> value associated with this node
Returns the node type, which is always <code>ELEMENT_NODE</code>
Returns the parent of this node
Returns a <code>NodeList</code> that contains all children of this node
Returns the first child of this node, or <code>null</code> if the node has no children
Returns the last child of this node, or <code>null</code> if the node has no children
Returns the previous sibling of this node, or <code>null</code> if this node has no previous sibling
Returns the next sibling of this node, or <code>null</code> if the node has no next sibling
Returns a <code>NamedNodeMap</code> containing the attributes of this node
Returns <code>null</code>, since <code>IIOMetadataNode</code>s do not belong to any <code>Document</code>
Inserts the node <code>newChild</code> before the existing child node <code>refChild</code>
Replaces the child node <code>oldChild</code> with <code>newChild</code> in the list of children, and returns the <code>oldChild</code> node
Removes the child node indicated by <code>oldChild</code> from the list of children, and returns it
Adds the node <code>newChild</code> to the end of the list of children of this node
Returns <code>true</code> if this node has child nodes
Returns a duplicate of this node
Does nothing, since <code>IIOMetadataNode</code>s do not contain <code>Text</code> children
Returns <code>false</code> since DOM features are not supported
Returns <code>null</code>, since namespaces are not supported
Returns <code>null</code>, since namespaces are not supported
Does nothing, since namespaces are not supported
Equivalent to <code>getNodeName</code>
Equivalent to <code>getNodeName</code>
Retrieves an attribute value by name
Equivalent to <code>getAttribute(localName)</code>
Equivalent to <code>setAttribute(qualifiedName, value)</code>
Equivalent to <code>removeAttribute(localName)</code>
Equivalent to <code>getAttributeNode(localName)</code>
Equivalent to <code>setAttributeNode(newAttr)</code>
Equivalent to <code>getElementsByTagName(localName)</code>
Equivalent to <code>hasAttribute(localName)</code>
Returns the <code>Object</code> value associated with this node
Sets the value associated with this node
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
This DOM Level 3 method is not supported for {@code IIOMetadataNode} and will throw a {@code DOMException}
Sets the source region of interest
Returns the source region to be used
Specifies a decimation subsampling to apply on I/O
Returns the number of source columns to advance for each pixel
Returns the number of rows to advance for each pixel
Returns the horizontal offset of the subsampling grid
Returns the vertical offset of the subsampling grid
Sets the indices of the source bands to be used
Returns the set of of source bands to be used
Sets the desired image type for the destination image, using an <code>ImageTypeSpecifier</code>
Returns the type of image to be returned by the read, if one was set by a call to <code>setDestination(ImageTypeSpecifier)</code>, as an <code>ImageTypeSpecifier</code>
Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing
Returns the offset in the destination image at which pixels are to be placed
Sets the <code>IIOParamController</code> to be used to provide settings for this <code>IIOParam</code> object when the <code>activateController</code> method is called, overriding any default controller
Returns whatever <code>IIOParamController</code> is currently installed
Returns the default <code>IIOParamController</code>, if there is one, regardless of the currently installed controller
Returns <code>true</code> if there is a controller installed for this <code>IIOParam</code> object
Activates the installed <code>IIOParamController</code> for this <code>IIOParam</code> object and returns the resulting value
Activates the controller
Internal Debug Method
Returns true if RMI-IIOP and CORBA is available
Returns true if the given object is a Stub
Returns the Delegate to which the given Stub delegates
Sets the Delegate for a given Stub
Returns the ORB associated with the given stub
Connects the Stub to the given ORB
Returns true if the given object is an ORB
Creates, and returns, a new ORB instance
Converts a string, produced by the object_to_string method, back to a CORBA object reference
Converts the given CORBA object reference to a string
Checks to ensure that an object of a remote or abstract interface type can be cast to a desired type
Makes a server object ready to receive remote calls
Deregisters a server object from the runtime
Returns a stub for the given server object
Override the actions of the final method "readObject()" in ObjectInputStream
This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor
Override the actions of the final method "enableResolveObject()" in ObjectInputStream
Helper method for correcting the Kestrel bug 4367783 (dealing with larger than 8-bit chars)
Override the actions of the final method "writeObject()" in ObjectOutputStream
Override the actions of the final method "writeObject()" in ObjectOutputStream
Override the actions of the final method "defaultWriteObject()" in ObjectOutputStream
Override the actions of the final method "enableReplaceObject()" in ObjectOutputStream
Reset will disregard the state of any objects already written to the stream
Helper method for correcting the Kestrel bug 4367783 (dealing with larger than 8-bit chars)
Return the servant for this profile, if it is local AND if the OA that implements this objref supports direct access to servants outside of an invocation
Return the GIOPVersion of this profile
Return the Codebase of this profile
Return the servant for this IOR, if it is local AND if the OA that implements this objref supports direct access to servants outside of an invocation
Return GIOPVersion for this IOR
Return the GIOP version of this profile
Return the IIOP address from the IIOP profile
Write out this IIOPProfileTemplateImpl only
Returns true if the given object is a Stub
Returns the Delegate to which the given Stub delegates
Sets the Delegate for a given Stub
Returns the ORB associated with the given stub
Connects the Stub to the given ORB
Returns true if the given object is an ORB
Creates, and returns, a new ORB instance
Converts a string, produced by the object_to_string method, back to a CORBA object reference
Converts the given CORBA object reference to a string
Checks to ensure that an object of a remote or abstract interface type can be cast to a desired type
Makes a server object ready to receive remote calls
Deregisters a server object from the runtime
Returns a stub for the given server object
Reports that a sequence of read operations is beginning
Reports that a sequence of read operations has completed
Reports that an image read operation is beginning
Reports the approximate degree of completion of the current <code>read</code> call of the associated <code>ImageReader</code>
Reports that the current image read operation has completed
Reports that a thumbnail read operation is beginning
Reports the approximate degree of completion of the current <code>getThumbnail</code> call within the associated <code>ImageReader</code>
Reports that a thumbnail read operation has completed
Reports that a read has been aborted via the reader's <code>abort</code> method
Reports that the current read operation is about to begin a progressive pass
Reports that a given region of the image has been updated
Reports that the current read operation has completed a progressive pass
Reports that the current thumbnail read operation is about to begin a progressive pass
Reports that a given region of a thumbnail image has been updated
Reports that the current thumbnail read operation has completed a progressive pass
Reports the occurrence of a non-fatal error in decoding
Returns the default <code>IIORegistry</code> instance used by the Image I/O API
Registers all available service providers found on the application class path, using the default <code>ClassLoader</code>
A callback that will be called exactly once after the Spi class has been instantiated and registered in a <code>ServiceRegistry</code>
A callback that will be whenever the Spi class has been deregistered from a <code>ServiceRegistry</code>
Returns the name of the vendor responsible for creating this service provider and its associated implementation
Returns a string describing the version number of this service provider and its associated implementation
Returns a brief, human-readable description of this service provider and its associated implementation
Reports that an image write operation is beginning
Reports the approximate degree of completion of the current <code>write</code> call within the associated <code>ImageWriter</code>
Reports that the image write operation has completed
Reports that a thumbnail write operation is beginning
Reports the approximate degree of completion of the current thumbnail write within the associated <code>ImageWriter</code>
Reports that a thumbnail write operation has completed
Reports that a write has been aborted via the writer's <code>abort</code> method
Reports the occurrence of a non-fatal error in encoding
Retrieves the illegal charset name
Returns the illegal code point as defined by {@link Character#isValidCodePoint}
Returns the inapplicable conversion
Returns the class of the mismatched argument
Returns the set of flags which contains an illegal combination
Returns the precision
Returns the width
Returns the index where the error was found
Call corresponding visitor method(s)
Determines the width of the image
Determines the height of the image
Gets the object that produces the pixels for the image
Creates a graphics context for drawing to an off-screen image
Gets a property of this image by name
Creates a scaled version of this image
Flushes all reconstructable resources being used by this Image object
Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration
Sets a hint for this image about how important acceleration is
Returns the current value of the acceleration priority hint
Returns <code>true</code> if the object whose capabilities are encapsulated in this <code>ImageCapabilities</code> can be or is accelerated
Returns <code>true</code> if the <code>VolatileImage</code> described by this <code>ImageCapabilities</code> can lose its surfaces
The dimensions of the source image are reported using the setDimensions method call
Sets the extensible list of properties associated with this image
Sets the ColorModel object used for the majority of the pixels reported using the setPixels method calls
Sets the hints that the ImageConsumer uses to process the pixels delivered by the ImageProducer
Delivers the pixels of the image with one or more calls to this method
The pixels of the image are delivered using one or more calls to the setPixels method
The imageComplete method is called when the ImageProducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred
Returns a unique instance of an ImageFilter object which will actually perform the filtering for the specified ImageConsumer
Filters the information provided in the setDimensions method of the ImageConsumer interface
Passes the properties from the source object along after adding a property indicating the stream of filters it has been run through
Filter the information provided in the setColorModel method of the ImageConsumer interface
Filters the information provided in the setHints method of the ImageConsumer interface
Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes
Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers
Filters the information provided in the imageComplete method of the ImageConsumer interface
Responds to a request for a TopDownLeftRight (TDLR) ordered resend of the pixel data from an <code>ImageConsumer</code>
Clones this object
Returns the ascent of this <code>ImageGraphicAttribute</code>
Returns the descent of this <code>ImageGraphicAttribute</code>
Returns the advance of this <code>ImageGraphicAttribute</code>
Returns a {@link Rectangle2D} that encloses all of the bits rendered by this <code>ImageGraphicAttribute</code>, relative to the rendering position
{@inheritDoc}
Returns a hashcode for this <code>ImageGraphicAttribute</code>
Compares this <code>ImageGraphicAttribute</code> to the specified {@link Object}
Compares this <code>ImageGraphicAttribute</code> to the specified <code>ImageGraphicAttribute</code>
Loads the image, returning only when the image is loaded
Returns the status of the image loading operation
Returns this icon's <code>Image</code>
Sets the image displayed by this icon
Gets the description of the image
Sets the description of the image
Paints the icon
Gets the width of the icon
Gets the height of the icon
Sets the image observer for the image
Returns the image observer for the image
Returns a string representation of this image
Gets the AccessibleContext associated with this ImageIcon
Gets the role of this object
Gets the state of this object
Gets the Accessible parent of this object
Gets the index of this object in its accessible parent
Returns the number of accessible children in the object
Returns the nth Accessible child of the object
Returns the locale of this object
Gets the description of the icon
Sets the description of the icon
Gets the height of the icon
Gets the width of the icon
Sets the desired byte order for future reads of data values from this stream
Returns the byte order with which data values will be read from this stream as an instance of the <code>java
Reads a single byte from the stream and returns it as an integer between 0 and 255
Reads up to <code>b
Reads up to <code>len</code> bytes from the stream, and stores them into <code>b</code> starting at index <code>off</code>
Reads up to <code>len</code> bytes from the stream, and modifies the supplied <code>IIOByteBuffer</code> to indicate the byte array, offset, and length where the data may be found
Reads a byte from the stream and returns a <code>boolean</code> value of <code>true</code> if it is nonzero, <code>false</code> if it is zero
Reads a byte from the stream and returns it as a <code>byte</code> value
Reads a byte from the stream, and (conceptually) converts it to an int, masks it with <code>0xff</code> in order to strip off any sign-extension bits, and returns it as a <code>byte</code> value
Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, and returns the result as a <code>short</code> value
Reads two bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the resulting value to an <code>int</code>, masks it with <code>0xffff</code> in order to strip off any sign-extension buts, and returns the result as an unsigned <code>int</code> value
Equivalent to <code>readUnsignedShort</code>, except that the result is returned using the <code>char</code> datatype
Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as an <code>int</code>
Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order, converts the result to a long, masks it with <code>0xffffffffL</code> in order to strip off any sign-extension bits, and returns the result as an unsigned <code>long</code> value
Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a <code>long</code>
Reads 4 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a <code>float</code>
Reads 8 bytes from the stream, and (conceptually) concatenates them according to the current byte order and returns the result as a <code>double</code>
Reads the next line of text from the input stream
Reads in a string that has been encoded using a <a href="
Reads <code>len</code> bytes from the stream, and stores them into <code>b</code> starting at index <code>off</code>
Reads <code>b
Reads <code>len</code> shorts (signed 16-bit integers) from the stream according to the current byte order, and stores them into <code>s</code> starting at index <code>off</code>
Reads <code>len</code> chars (unsigned 16-bit integers) from the stream according to the current byte order, and stores them into <code>c</code> starting at index <code>off</code>
Reads <code>len</code> ints (signed 32-bit integers) from the stream according to the current byte order, and stores them into <code>i</code> starting at index <code>off</code>
Reads <code>len</code> longs (signed 64-bit integers) from the stream according to the current byte order, and stores them into <code>l</code> starting at index <code>off</code>
Reads <code>len</code> floats (32-bit IEEE single-precision floats) from the stream according to the current byte order, and stores them into <code>f</code> starting at index <code>off</code>
Reads <code>len</code> doubles (64-bit IEEE double-precision floats) from the stream according to the current byte order, and stores them into <code>d</code> starting at index <code>off</code>
Returns the current byte position of the stream
Returns the current bit offset, as an integer between 0 and 7, inclusive
Sets the bit offset to an integer between 0 and 7, inclusive
Reads a single bit from the stream and returns it as an <code>int</code> with the value <code>0</code> or <code>1</code>
Reads a bitstring from the stream and returns it as a <code>long</code>, with the first bit read becoming the most significant bit of the output
Returns the total length of the stream, if known
Moves the stream position forward by a given number of bytes
Moves the stream position forward by a given number of bytes
Sets the current stream position to the desired location
Marks a position in the stream to be returned to by a subsequent call to <code>reset</code>
Returns the stream pointer to its previous position, including the bit offset, at the time of the most recent unmatched call to <code>mark</code>
Discards the initial portion of the stream prior to the indicated position
Discards the initial position of the stream prior to the current stream position
Returns the earliest position in the stream to which seeking may be performed
Returns <code>true</code> if this <code>ImageInputStream</code> caches data itself in order to allow seeking backwards
Returns <code>true</code> if this <code>ImageInputStream</code> caches data itself in order to allow seeking backwards, and the cache is kept in main memory
Returns <code>true</code> if this <code>ImageInputStream</code> caches data itself in order to allow seeking backwards, and the cache is kept in a temporary file
Closes the stream
Throws an <code>IOException</code> if the stream has been closed
Reads a single byte from the stream and returns it as an <code>int</code> between 0 and 255
A convenience method that calls <code>read(b, 0, b
Reads up to <code>len</code> bytes from the stream, and stores them into <code>b</code> starting at index <code>off</code>
Returns <code>-1L</code> to indicate that the stream has unknown length
Advances the current stream position by calling <code>seek(getStreamPosition() + n)</code>
Advances the current stream position by calling <code>seek(getStreamPosition() + n)</code>
Pushes the current stream position onto a stack of marked positions
Resets the current stream byte and bit positions from the stack of marked positions
Default implementation returns false
Default implementation returns false
Default implementation returns false
Finalizes this object prior to garbage collection
Returns a <code>Class</code> object representing the class or interface type that must be implemented by an input source in order to be "wrapped" in an <code>ImageInputStream</code> via the <code>createInputStreamInstance</code> method
Returns <code>true</code> if the <code>ImageInputStream</code> implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint
Returns <code>true</code> if the <code>ImageInputStream</code> implementation associated with this service provider requires the use of a cache <code>File</code>
Returns an instance of the <code>ImageInputStream</code> implementation associated with this service provider
Returns an instance of the <code>ImageInputStream</code> implementation associated with this service provider
Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the <code>IIORegistry</code>
Sets a flag indicating whether a disk-based cache file should be used when creating <code>ImageInputStream</code>s and <code>ImageOutputStream</code>s
Returns the current value set by <code>setUseCache</code>, or <code>true</code> if no explicit setting has been made
Sets the directory where cache files are to be created
Returns the current value set by <code>setCacheDirectory</code>, or <code>null</code> if no explicit setting has been made
Returns an <code>ImageInputStream</code> that will take its input from the given <code>Object</code>
Returns an <code>ImageOutputStream</code> that will send its output to the given <code>Object</code>
Returns an array of <code>String</code>s listing all of the informal format names understood by the current set of registered readers
Returns an array of <code>String</code>s listing all of the MIME types understood by the current set of registered readers
Returns an array of <code>String</code>s listing all of the file suffixes associated with the formats understood by the current set of registered readers
Returns an <code>Iterator</code> containing all currently registered <code>ImageReader</code>s that claim to be able to decode the supplied <code>Object</code>, typically an <code>ImageInputStream</code>
Returns an <code>Iterator</code> containing all currently registered <code>ImageReader</code>s that claim to be able to decode the named format
Returns an <code>Iterator</code> containing all currently registered <code>ImageReader</code>s that claim to be able to decode files with the given suffix
Returns an <code>Iterator</code> containing all currently registered <code>ImageReader</code>s that claim to be able to decode files with the given MIME type
Returns an array of <code>String</code>s listing all of the informal format names understood by the current set of registered writers
Returns an array of <code>String</code>s listing all of the MIME types understood by the current set of registered writers
Returns an array of <code>String</code>s listing all of the file suffixes associated with the formats understood by the current set of registered writers
Returns an <code>Iterator</code> containing all currently registered <code>ImageWriter</code>s that claim to be able to encode the named format
Returns an <code>Iterator</code> containing all currently registered <code>ImageWriter</code>s that claim to be able to encode files with the given suffix
Returns an <code>Iterator</code> containing all currently registered <code>ImageWriter</code>s that claim to be able to encode files with the given MIME type
Returns an <code>ImageWriter</code>corresponding to the given <code>ImageReader</code>, if there is one, or <code>null</code> if the plug-in for this <code>ImageReader</code> does not specify a corresponding <code>ImageWriter</code>, or if the given <code>ImageReader</code> is not registered
Returns an <code>ImageReader</code>corresponding to the given <code>ImageWriter</code>, if there is one, or <code>null</code> if the plug-in for this <code>ImageWriter</code> does not specify a corresponding <code>ImageReader</code>, or if the given <code>ImageWriter</code> is not registered
Returns an <code>Iterator</code> containing all currently registered <code>ImageWriter</code>s that claim to be able to encode images of the given layout (specified using an <code>ImageTypeSpecifier</code>) in the given format
Returns an <code>Iterator</code> containing all currently registered <code>ImageTranscoder</code>s that claim to be able to transcode between the metadata of the given <code>ImageReader</code> and <code>ImageWriter</code>
Returns a <code>BufferedImage</code> as the result of decoding a supplied <code>File</code> with an <code>ImageReader</code> chosen automatically from among those currently registered
Returns a <code>BufferedImage</code> as the result of decoding a supplied <code>InputStream</code> with an <code>ImageReader</code> chosen automatically from among those currently registered
Returns a <code>BufferedImage</code> as the result of decoding a supplied <code>URL</code> with an <code>ImageReader</code> chosen automatically from among those currently registered
Returns a <code>BufferedImage</code> as the result of decoding a supplied <code>ImageInputStream</code> with an <code>ImageReader</code> chosen automatically from among those currently registered
Writes an image using the an arbitrary <code>ImageWriter</code> that supports the given format to an <code>ImageOutputStream</code>
Writes an image using an arbitrary <code>ImageWriter</code> that supports the given format to a <code>File</code>
Writes an image using an arbitrary <code>ImageWriter</code> that supports the given format to an <code>OutputStream</code>
This method is called when information about an image which was previously requested using an asynchronous interface becomes available
Writes a single byte to the stream at the current position
Writes a sequence of bytes to the stream at the current position
Writes a sequence of bytes to the stream at the current position
Writes a <code>boolean</code> value to the stream
Writes the 8 low-order bits of <code>v</code> to the stream
Writes the 16 low-order bits of <code>v</code> to the stream
This method is a synonym for {@link #writeShort writeShort}
Writes the 32 bits of <code>v</code> to the stream
Writes the 64 bits of <code>v</code> to the stream
Writes a <code>float</code> value, which is comprised of four bytes, to the output stream
Writes a <code>double</code> value, which is comprised of four bytes, to the output stream
Writes a string to the output stream
Writes a string to the output stream
Writes two bytes of length information to the output stream in network byte order, followed by the <a href="
Writes a sequence of shorts to the stream at the current position
Writes a sequence of chars to the stream at the current position
Writes a sequence of ints to the stream at the current position
Writes a sequence of longs to the stream at the current position
Writes a sequence of floats to the stream at the current position
Writes a sequence of doubles to the stream at the current position
Writes a single bit, given by the least significant bit of the argument, to the stream at the current bit offset within the current byte position
Writes a sequence of bits, given by the <code>numBits</code> least significant bits of the <code>bits</code> argument in left-to-right order, to the stream at the current bit offset within the current byte position
Flushes all data prior to the given position to the underlying destination, such as an <code>OutputStream</code> or <code>File</code>
If the bit offset is non-zero, forces the remaining bits in the current byte to 0 and advances the stream position by one
Returns a <code>Class</code> object representing the class or interface type that must be implemented by an output destination in order to be "wrapped" in an <code>ImageOutputStream</code> via the <code>createOutputStreamInstance</code> method
Returns <code>true</code> if the <code>ImageOutputStream</code> implementation associated with this service provider can optionally make use of a cache <code>File</code> for improved performance and/or memory footrprint
Returns <code>true</code> if the <code>ImageOutputStream</code> implementation associated with this service provider requires the use of a cache <code>File</code>
Returns an instance of the <code>ImageOutputStream</code> implementation associated with this service provider
Returns an instance of the <code>ImageOutputStream</code> implementation associated with this service provider
Registers an <code>ImageConsumer</code> with the <code>ImageProducer</code> for access to the image data during a later reconstruction of the <code>Image</code>
Determines if a specified <code>ImageConsumer</code> object is currently registered with this <code>ImageProducer</code> as one of its consumers
Removes the specified <code>ImageConsumer</code> object from the list of consumers currently registered to receive image data
Registers the specified <code>ImageConsumer</code> object as a consumer and starts an immediate reconstruction of the image data which will then be delivered to this consumer and any other consumer which might have already been registered with the producer
Requests, on behalf of the <code>ImageConsumer</code>, that the <code>ImageProducer</code> attempt to resend the image data one more time in TOPDOWNLEFTRIGHT order so that higher quality conversion algorithms which depend on receiving pixels in order can be used to produce a better output version of the image
Returns a <code>String</code> identifying the format of the input source
Returns the <code>ImageReaderSpi</code> that was passed in on the constructor
Sets the input source to use to the given <code>ImageInputStream</code> or other <code>Object</code>
Sets the input source to use to the given <code>ImageInputStream</code> or other <code>Object</code>
Sets the input source to use to the given <code>ImageInputStream</code> or other <code>Object</code>
Returns the <code>ImageInputStream</code> or other <code>Object</code> previously set as the input source
Returns <code>true</code> if the current input source has been marked as seek forward only by passing <code>true</code> as the <code>seekForwardOnly</code> argument to the <code>setInput</code> method
Returns <code>true</code> if the current input source has been marked as allowing metadata to be ignored by passing <code>true</code> as the <code>ignoreMetadata</code> argument to the <code>setInput</code> method
Returns the lowest valid index for reading an image, thumbnail, or image metadata
Returns an array of <code>Locale</code>s that may be used to localize warning listeners and compression settings
Sets the current <code>Locale</code> of this <code>ImageReader</code> to the given value
Returns the currently set <code>Locale</code>, or <code>null</code> if none has been set
Returns the number of images, not including thumbnails, available from the current input source
Returns the width in pixels of the given image within the input source
Returns the height in pixels of the given image within the input source
Returns <code>true</code> if the storage format of the given image places no inherent impediment on random access to pixels
Returns the aspect ratio of the given image (that is, its width divided by its height) as a <code>float</code>
Returns an <code>ImageTypeSpecifier</code> indicating the <code>SampleModel</code> and <code>ColorModel</code> which most closely represents the "raw" internal format of the image
Returns an <code>Iterator</code> containing possible image types to which the given image may be decoded, in the form of <code>ImageTypeSpecifiers</code>s
Returns a default <code>ImageReadParam</code> object appropriate for this format
Returns an <code>IIOMetadata</code> object representing the metadata associated with the input source as a whole (i
Returns an <code>IIOMetadata</code> object representing the metadata associated with the input source as a whole (i
Returns an <code>IIOMetadata</code> object containing metadata associated with the given image, or <code>null</code> if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available
Returns an <code>IIOMetadata</code> object representing the metadata associated with the given image, or <code>null</code> if the reader does not support reading metadata or none is available
Reads the image indexed by <code>imageIndex</code> and returns it as a complete <code>BufferedImage</code>, using a default <code>ImageReadParam</code>
Reads the image indexed by <code>imageIndex</code> and returns it as a complete <code>BufferedImage</code>, using a supplied <code>ImageReadParam</code>
Reads the image indexed by <code>imageIndex</code> and returns an <code>IIOImage</code> containing the image, thumbnails, and associated image metadata, using a supplied <code>ImageReadParam</code>
Returns an <code>Iterator</code> containing all the images, thumbnails, and metadata, starting at the index given by <code>getMinIndex</code>, from the input source in the form of <code>IIOImage</code> objects
Returns <code>true</code> if this plug-in supports reading just a {@link java
Returns a new <code>Raster</code> object containing the raw pixel data from the image stream, without any color conversion applied
Returns <code>true</code> if the image is organized into <i>tiles</i>, that is, equal-sized non-overlapping rectangles
Returns the width of a tile in the given image
Returns the height of a tile in the given image
Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image
Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image
Reads the tile indicated by the <code>tileX</code> and <code>tileY</code> arguments, returning it as a <code>BufferedImage</code>
Returns a new <code>Raster</code> object containing the raw pixel data from the tile, without any color conversion applied
Returns a <code>RenderedImage</code> object that contains the contents of the image indexed by <code>imageIndex</code>
Returns <code>true</code> if the image format understood by this reader supports thumbnail preview images associated with it
Returns <code>true</code> if the given image has thumbnail preview images associated with it
Returns the number of thumbnail preview images associated with the given image
Returns the width of the thumbnail preview image indexed by <code>thumbnailIndex</code>, associated with the image indexed by <code>ImageIndex</code>
Returns the height of the thumbnail preview image indexed by <code>thumbnailIndex</code>, associated with the image indexed by <code>ImageIndex</code>
Returns the thumbnail preview image indexed by <code>thumbnailIndex</code>, associated with the image indexed by <code>ImageIndex</code> as a <code>BufferedImage</code>
Requests that any current read operation be aborted
Returns <code>true</code> if a request to abort the current read operation has been made since the reader was instantiated or <code>clearAbortRequest</code> was called
Clears any previous abort request
Adds an <code>IIOReadWarningListener</code> to the list of registered warning listeners
Removes an <code>IIOReadWarningListener</code> from the list of registered error listeners
Removes all currently registered <code>IIOReadWarningListener</code> objects
Adds an <code>IIOReadProgressListener</code> to the list of registered progress listeners
Removes an <code>IIOReadProgressListener</code> from the list of registered progress listeners
Removes all currently registered <code>IIOReadProgressListener</code> objects
Adds an <code>IIOReadUpdateListener</code> to the list of registered update listeners
Removes an <code>IIOReadUpdateListener</code> from the list of registered update listeners
Removes all currently registered <code>IIOReadUpdateListener</code> objects
Broadcasts the start of an sequence of image reads to all registered <code>IIOReadProgressListener</code>s by calling their <code>sequenceStarted</code> method
Broadcasts the completion of an sequence of image reads to all registered <code>IIOReadProgressListener</code>s by calling their <code>sequenceComplete</code> method
Broadcasts the start of an image read to all registered <code>IIOReadProgressListener</code>s by calling their <code>imageStarted</code> method
Broadcasts the current percentage of image completion to all registered <code>IIOReadProgressListener</code>s by calling their <code>imageProgress</code> method
Broadcasts the completion of an image read to all registered <code>IIOReadProgressListener</code>s by calling their <code>imageComplete</code> method
Broadcasts the start of a thumbnail read to all registered <code>IIOReadProgressListener</code>s by calling their <code>thumbnailStarted</code> method
Broadcasts the current percentage of thumbnail completion to all registered <code>IIOReadProgressListener</code>s by calling their <code>thumbnailProgress</code> method
Broadcasts the completion of a thumbnail read to all registered <code>IIOReadProgressListener</code>s by calling their <code>thumbnailComplete</code> method
Broadcasts that the read has been aborted to all registered <code>IIOReadProgressListener</code>s by calling their <code>readAborted</code> method
Broadcasts the beginning of a progressive pass to all registered <code>IIOReadUpdateListener</code>s by calling their <code>passStarted</code> method
Broadcasts the update of a set of samples to all registered <code>IIOReadUpdateListener</code>s by calling their <code>imageUpdate</code> method
Broadcasts the end of a progressive pass to all registered <code>IIOReadUpdateListener</code>s by calling their <code>passComplete</code> method
Broadcasts the beginning of a thumbnail progressive pass to all registered <code>IIOReadUpdateListener</code>s by calling their <code>thumbnailPassStarted</code> method
Broadcasts the update of a set of samples in a thumbnail image to all registered <code>IIOReadUpdateListener</code>s by calling their <code>thumbnailUpdate</code> method
Broadcasts the end of a thumbnail progressive pass to all registered <code>IIOReadUpdateListener</code>s by calling their <code>thumbnailPassComplete</code> method
Broadcasts a warning message to all registered <code>IIOReadWarningListener</code>s by calling their <code>warningOccurred</code> method
Broadcasts a localized warning message to all registered <code>IIOReadWarningListener</code>s by calling their <code>warningOccurred</code> method with a string taken from a <code>ResourceBundle</code>
Restores the <code>ImageReader</code> to its initial state
Allows any resources held by this object to be released
A utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied <code>ImageReadParam</code>
Computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional <code>ImageReadParam</code> into account
A utility method that may be used by readers to test the validity of the source and destination band settings of an <code>ImageReadParam</code>
Returns the <code>BufferedImage</code> to which decoded pixel data should be written
Returns an array of <code>Class</code> objects indicating what types of objects may be used as arguments to the reader's <code>setInput</code> method
Returns <code>true</code> if the supplied source object appears to be of the format supported by this reader
Returns an instance of the <code>ImageReader</code> implementation associated with this service provider
Returns an instance of the <code>ImageReader</code> implementation associated with this service provider
Returns <code>true</code> if the <code>ImageReader</code> object passed in is an instance of the <code>ImageReader</code> associated with this service provider
Returns an array of <code>String</code>s containing the fully qualified names of all the <code>ImageWriterSpi</code> classes that can understand the internal metadata representation used by the <code>ImageReader</code> associated with this service provider, or <code>null</code> if there are no such <code>ImageWriter</code>s specified
Returns an array of <code>String</code>s containing human-readable names for the formats that are generally usable by the <code>ImageReader</code> or <code>ImageWriter</code> implementation associated with this service provider
Returns an array of <code>String</code>s containing a list of file suffixes associated with the formats that are generally usable by the <code>ImageReader</code> or <code>ImageWriter</code> implementation associated with this service provider
Returns an array of <code>String</code>s containing a list of MIME types associated with the formats that are generally usable by the <code>ImageReader</code> or <code>ImageWriter</code> implementation associated with this service provider
Returns the fully-qualified class name of the <code>ImageReader</code> or <code>ImageWriter</code> plug-in associated with this service provider
Returns <code>true</code> if the standard metadata format is among the document formats recognized by the <code>getAsTree</code> and <code>setFromTree</code> methods on the stream metadata objects produced or consumed by this plug-in
Returns the name of the "native" stream metadata format for this plug-in, which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug-in
Returns an array of <code>String</code>s containing the names of additional document formats, other than the native and standard formats, recognized by the <code>getAsTree</code> and <code>setFromTree</code> methods on the stream metadata objects produced or consumed by this plug-in
Returns <code>true</code> if the standard metadata format is among the document formats recognized by the <code>getAsTree</code> and <code>setFromTree</code> methods on the image metadata objects produced or consumed by this plug-in
Returns the name of the "native" image metadata format for this plug-in, which typically allows for lossless encoding and transmission of the image metadata stored in the format handled by this plug-in
Returns an array of <code>String</code>s containing the names of additional document formats, other than the native and standard formats, recognized by the <code>getAsTree</code> and <code>setFromTree</code> methods on the image metadata objects produced or consumed by this plug-in
Returns an <code>IIOMetadataFormat</code> object describing the given stream metadata format, or <code>null</code> if no description is available
Returns an <code>IIOMetadataFormat</code> object describing the given image metadata format, or <code>null</code> if no description is available
Supplies a <code>BufferedImage</code> to be used as the destination for decoded pixel data
Returns the <code>BufferedImage</code> currently set by the <code>setDestination</code> method, or <code>null</code> if none is set
Sets the indices of the destination bands where data will be placed
Returns the set of band indices where data will be placed
Returns <code>true</code> if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the <code>setSourceRenderSize</code> method
If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values
Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the <code>setSourceRenderSize</code> method
Sets the range of progressive passes that will be decoded
Returns the index of the first progressive pass that will be decoded
If <code>getSourceNumProgressivePasses</code> is equal to <code>Integer
Returns the number of the progressive passes that will be decoded
Returns an <code>IIOMetadata</code> object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding
Returns an <code>IIOMetadata</code> object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding
Returns the fully qualified class name of an <code>ImageReaderSpi</code> class that generates <code>IIOMetadata</code> objects that may be used as input to this transcoder
Returns the fully qualified class name of an <code>ImageWriterSpi</code> class that generates <code>IIOMetadata</code> objects that may be used as input to this transcoder
Returns an instance of the <code>ImageTranscoder</code> implementation associated with this service provider
Returns a specifier for a packed image format that will use a <code>DirectColorModel</code> and a packed <code>SampleModel</code> to store each pixel packed into in a single byte, short, or int
Returns a specifier for an interleaved image format that will use a <code>ComponentColorModel</code> and a <code>PixelInterleavedSampleModel</code> to store each pixel component in a separate byte, short, or int
Returns a specifier for a banded image format that will use a <code>ComponentColorModel</code> and a <code>BandedSampleModel</code> to store each channel in a separate array
Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type
Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type
Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type
Returns an <code>ImageTypeSpecifier</code> that encodes one of the standard <code>BufferedImage</code> types (other than <code>TYPE_CUSTOM</code>)
Returns an <code>ImageTypeSpecifier</code> that encodes the layout of a <code>RenderedImage</code> (which may be a <code>BufferedImage</code>)
Returns an int containing one of the enumerated constant values describing image formats from <code>BufferedImage</code>
Return the number of color components specified by this object
Return the number of bands specified by this object
Return the number of bits used to represent samples of the given band
Returns a <code>SampleModel</code> based on the settings encapsulated within this object
Returns a <code>SampleModel</code> based on the settings encapsulated within this object
Returns the <code>ColorModel</code> specified by this object
Creates a <code>BufferedImage</code> with a given width and height according to the specification embodied in this object
Returns <code>true</code> if the given <code>Object</code> is an <code>ImageTypeSpecifier</code> and has a <code>SampleModel</code> and <code>ColorModel</code> that are equal to those of this object
Returns the hash code for this ImageTypeSpecifier
Creates a <code>ColorModel</code> that may be used with the specified <code>SampleModel</code>
For the case of binary data (<code>isBinary()</code> returns <code>true</code>), return the binary data as a packed byte array
Returns the binary data unpacked into an array of bytes
Sets the supplied <code>Raster</code>'s data from an array of packed binary data of the form returned by <code>getPackedBinaryData()</code>
Copies data into the packed array of the <code>Raster</code> from an array of unpacked data of the form returned by <code>getUnpackedBinaryData()</code>
Tests whether the color indices represent a gray-scale image
Converts the provided object to <code>String</code>
Checks that the provided <code>ImageWriter</code> can encode the provided <code>ImageTypeSpecifier</code> or not
Checks that the provided <code>ImageWriter</code> can encode the provided <code>ColorModel</code> and <code>SampleModel</code>
Returns whether the image has contiguous data across rows
Returns the text to display if the image can't be loaded
Return a URL for the image source, or null if it could not be determined
Returns the icon to use if the image couldn't be found
Returns the icon to use while in the process of loading the image
Returns the image to render
Sets how the image is loaded
Returns true if the image should be loaded when first asked for
Convenience method to get the StyleSheet
Fetches the attributes to use when rendering
For images the tooltip text comes from text specified with the <code>ALT</code> attribute
Update any cached values that come from attributes
Establishes the parent view for this view
Invoked when the Elements attributes have changed
Paints the View
Determines the preferred span for this view along an axis
Determines the desired alignment for this view along an axis
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Sets the size of the view
Returns the currently set <code>Locale</code>, or <code>null</code> if only a default <code>Locale</code> is supported
Returns <code>true</code> if the writer can perform tiling while writing
Returns <code>true</code> if the writer can perform tiling with non-zero grid offsets while writing
Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined
Returns the current tiling mode, if tiling is supported
Returns an array of <code>Dimension</code>s indicating the legal size ranges for tiles as they will be encoded in the output file or stream
Specifies that the image should be tiled in the output stream
Removes any previous tile grid parameters specified by calls to <code>setTiling</code>
Returns the width of each tile in an image as it will be written to the output stream
Returns the height of each tile in an image as it will be written to the output stream
Returns the horizontal tile grid offset of an image as it will be written to the output stream
Returns the vertical tile grid offset of an image as it will be written to the output stream
Returns <code>true</code> if the writer can write out images as a series of passes of progressively increasing quality
Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality
Returns the current mode for writing the stream in a progressive manner
Returns <code>true</code> if this writer supports compression
Specifies whether compression is to be performed, and if so how compression parameters are to be determined
Returns the current compression mode, if compression is supported
Returns a list of available compression types, as an array or <code>String</code>s, or <code>null</code> if a compression type may not be chosen using these interfaces
Sets the compression type to one of the values indicated by <code>getCompressionTypes</code>
Returns the currently set compression type, or <code>null</code> if none has been set
Removes any previous compression type and quality settings
Returns a localized version of the name of the current compression type, using the <code>Locale</code> returned by <code>getLocale</code>
Returns <code>true</code> if the current compression type provides lossless compression
Sets the compression quality to a value between <code>0</code> and <code>1</code>
Returns the current compression quality setting
Returns a <code>float</code> indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level
Returns an array of <code>String</code>s that may be used along with <code>getCompressionQualityValues</code> as part of a user interface for setting or displaying the compression quality level
Returns an array of <code>float</code>s that may be used along with <code>getCompressionQualityDescriptions</code> as part of a user interface for setting or displaying the compression quality level
Returns the <code>ImageWriterSpi</code> object that created this <code>ImageWriter</code>, or <code>null</code> if this object was not created through the <code>IIORegistry</code>
Sets the destination to the given <code>ImageOutputStream</code> or other <code>Object</code>
Returns the <code>ImageOutputStream</code> or other <code>Object</code> set by the most recent call to the <code>setOutput</code> method
Returns an array of <code>Locale</code>s that may be used to localize warning listeners and compression settings
Sets the current <code>Locale</code> of this <code>ImageWriter</code> to the given value
Returns the currently set <code>Locale</code>, or <code>null</code> if none has been set
Returns a new <code>ImageWriteParam</code> object of the appropriate type for this file format containing default values, that is, those values that would be used if no <code>ImageWriteParam</code> object were specified
Returns an <code>IIOMetadata</code> object containing default values for encoding a stream of images
Returns an <code>IIOMetadata</code> object containing default values for encoding an image of the given type
Returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding
Returns an array of <code>Dimension</code>s indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream
Returns <code>true</code> if the methods that take an <code>IIOImage</code> parameter are capable of dealing with a <code>Raster</code> (as opposed to <code>RenderedImage</code>) source image
Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output
Appends a complete image stream containing a single image with default metadata and thumbnails to the output
Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output
Returns <code>true</code> if the writer is able to append an image to an image stream that already contains header information and possibly prior images
Prepares a stream to accept a series of subsequent <code>writeToSequence</code> calls, using the provided stream metadata object
Appends a single image and possibly associated metadata and thumbnails, to the output
Completes the writing of a sequence of images begun with <code>prepareWriteSequence</code>
Returns <code>true</code> if it is possible to replace the stream metadata already present in the output
Replaces the stream metadata in the output with new information
Returns <code>true</code> if it is possible to replace the image metadata associated with an existing image with index <code>imageIndex</code>
Replaces the image metadata associated with an existing image
Returns <code>true</code> if the writer supports the insertion of a new image at the given index
Inserts a new image into an existing image stream
Returns <code>true</code> if the writer supports the removal of an existing image at the given index
Removes an image from the stream
Returns <code>true</code> if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output
Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output
Completes the writing of a new image that was begun with a prior call to <code>prepareWriteEmpty</code>
Returns <code>true</code> if the writer supports the insertion of a new, empty image at the given index
Begins the insertion of a new image with undefined pixel values into an existing image stream
Completes the insertion of a new image that was begun with a prior call to <code>prepareInsertEmpty</code>
Returns <code>true</code> if the writer allows pixels of the given image to be replaced using the <code>replacePixels</code> methods
Prepares the writer to handle a series of calls to the <code>replacePixels</code> methods
Replaces a portion of an image already present in the output with a portion of the given image
Replaces a portion of an image already present in the output with a portion of the given <code>Raster</code>
Terminates a sequence of calls to <code>replacePixels</code>
Requests that any current write operation be aborted
Returns <code>true</code> if a request to abort the current write operation has been made since the writer was instantiated or <code>clearAbortRequest</code> was called
Clears any previous abort request
Adds an <code>IIOWriteWarningListener</code> to the list of registered warning listeners
Removes an <code>IIOWriteWarningListener</code> from the list of registered warning listeners
Removes all currently registered <code>IIOWriteWarningListener</code> objects
Adds an <code>IIOWriteProgressListener</code> to the list of registered progress listeners
Removes an <code>IIOWriteProgressListener</code> from the list of registered progress listeners
Removes all currently registered <code>IIOWriteProgressListener</code> objects
Broadcasts the start of an image write to all registered <code>IIOWriteProgressListener</code>s by calling their <code>imageStarted</code> method
Broadcasts the current percentage of image completion to all registered <code>IIOWriteProgressListener</code>s by calling their <code>imageProgress</code> method
Broadcasts the completion of an image write to all registered <code>IIOWriteProgressListener</code>s by calling their <code>imageComplete</code> method
Broadcasts the start of a thumbnail write to all registered <code>IIOWriteProgressListener</code>s by calling their <code>thumbnailStarted</code> method
Broadcasts the current percentage of thumbnail completion to all registered <code>IIOWriteProgressListener</code>s by calling their <code>thumbnailProgress</code> method
Broadcasts the completion of a thumbnail write to all registered <code>IIOWriteProgressListener</code>s by calling their <code>thumbnailComplete</code> method
Broadcasts that the write has been aborted to all registered <code>IIOWriteProgressListener</code>s by calling their <code>writeAborted</code> method
Broadcasts a warning message to all registered <code>IIOWriteWarningListener</code>s by calling their <code>warningOccurred</code> method
Broadcasts a localized warning message to all registered <code>IIOWriteWarningListener</code>s by calling their <code>warningOccurred</code> method with a string taken from a <code>ResourceBundle</code>
Restores the <code>ImageWriter</code> to its initial state
Allows any resources held by this object to be released
Returns <code>true</code> if the format that this writer outputs preserves pixel data bit-accurately
Returns an array of <code>Class</code> objects indicating what types of objects may be used as arguments to the writer's <code>setOutput</code> method
Returns <code>true</code> if the <code>ImageWriter</code> implementation associated with this service provider is able to encode an image with the given layout
Returns <code>true</code> if the <code>ImageWriter</code> implementation associated with this service provider is able to encode the given <code>RenderedImage</code> instance
Returns an instance of the <code>ImageWriter</code> implementation associated with this service provider
Returns an instance of the <code>ImageWriter</code> implementation associated with this service provider
Returns <code>true</code> if the <code>ImageWriter</code> object passed in is an instance of the <code>ImageWriter</code> associated with this service provider
Returns an array of <code>String</code>s containing all the fully qualified names of all the <code>ImageReaderSpi</code> classes that can understand the internal metadata representation used by the <code>ImageWriter</code> associated with this service provider, or <code>null</code> if there are no such <code>ImageReaders</code> specified
<p>Return an {@code ImmutableDescriptor} whose contents are the union of the given descriptors
Compares this descriptor to the given object
<p>Returns the hash code value for this descriptor
Returns true if all of the fields have legal values given their names
<p>Returns a descriptor which is equal to this descriptor
This operation is unsupported since this class is immutable
This operation is unsupported since this class is immutable
Removes a field from the descriptor
Call corresponding visitor method(s)
Call corresponding visitor method(s)
specifies the policy value
Call corresponding visitor method(s)
Method getInclusiveNamespaces
Decodes the <code>inclusiveNamespaces</code> String and returns all selected namespace prefixes as a Set
Method getBaseNamespace
Method getBaseLocalName
Returns the Class object for the annotation type with the missing element
Returns the name of the missing element
Register a SAX-style content handler for us to output to
Register a SAX-style lexical handler for us to output to
Register a SAX-style DTD handler for us to output to
deliverMoreNodes() is a simple API which tells the thread in which the IncrementalSAXSource is running to deliver more events (true), or stop delivering events and close out its input (false)
Launch an XMLReader's parsing operation, feeding events to this IncrementalSAXSource
startParse() is a simple API which tells the IncrementalSAXSource to begin reading a document
deliverMoreNodes() is a simple API which tells the coroutine parser that we need more nodes
Simple unit test
Called by any of the DTD handlers to enter DTD mode
Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content
Called to print additional text
Called to print a single space between text parts that may be broken into separate lines
Called to print a line consisting of the text accumulated so far
Flushes the line accumulated so far to the writer and get ready to accumulate the next line
Flush the output stream
Increment the indentation for the next line
Decrement the indentation for the next line
Returns the transparency
Returns an array of the number of bits for each color/alpha component
Returns the size of the color/alpha component arrays in this <code>IndexColorModel</code>
Returns the index of a transparent pixel in this <code>IndexColorModel</code> or -1 if there is no pixel with an alpha value of 0
Copies the array of red color components into the specified array
Copies the array of green color components into the specified array
Copies the array of blue color components into the specified array
Copies the array of alpha transparency components into the specified array
Converts data for each index from the color and alpha component arrays to an int in the default RGB ColorModel format and copies the resulting 32-bit ARGB values into the specified array
Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB
Returns the alpha component for the specified pixel, scaled from 0 to 255
Returns the color/alpha components of the pixel in the default RGB color model format
Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model
Returns an array of unnormalized color/alpha components for a specified pixel in this <code>ColorModel</code>
Returns an array of unnormalized color/alpha components for a specified pixel in this <code>ColorModel</code>
Returns a pixel value represented as an int in this <code>ColorModel</code> given an array of unnormalized color/alpha components
Returns a data element array representation of a pixel in this <code>ColorModel</code> given an array of unnormalized color/alpha components
Creates a <code>WritableRaster</code> with the specified width and height that has a data layout (<code>SampleModel</code>) compatible with this <code>ColorModel</code>
Returns <code>true</code> if <code>raster</code> is compatible with this <code>ColorModel</code> or <code>false</code> if it is not compatible with this <code>ColorModel</code>
Creates a <code>SampleModel</code> with the specified width and height that has a data layout compatible with this <code>ColorModel</code>
Checks if the specified <code>SampleModel</code> is compatible with this <code>ColorModel</code>
Returns a new <code>BufferedImage</code> of TYPE_INT_ARGB or TYPE_INT_RGB that has a <code>Raster</code> with pixel data computed by expanding the indices in the source <code>Raster</code> using the color/alpha component arrays of this <code>ColorModel</code>
Returns whether or not the pixel is valid
Returns whether or not all of the pixels are valid
Returns a <code>BigInteger</code> that indicates the valid/invalid pixels in the colormap
Disposes of system resources associated with this <code>ColorModel</code> once this <code>ColorModel</code> is no longer referenced
Returns the <code>String</code> representation of the contents of this <code>ColorModel</code>object
Gets the index of the property that was changed
Gets the method that should be used to read an indexed property value
Sets the method that should be used to read an indexed property value
Gets the method that should be used to write an indexed property value
Sets the method that should be used to write an indexed property value
Returns the Java type info for the indexed property
Compares this <code>PropertyDescriptor</code> against the specified object
Returns a hash code value for the object
Call corresponding visitor method(s)
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is a loopback address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Returns the raw IP address of this {@code InetAddress} object
Returns the IP address string in textual presentation form
Returns a hashcode for this IP address
Compares this object against the specified object
Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in {@code addr}
Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is set to the given numeric value
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is a loopback address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Returns the raw IP address of this {@code InetAddress} object
Returns the numeric scopeId, if this instance is associated with an interface
Returns the scoped interface, if this instance was created with with a scoped interface
Returns the IP address string in textual presentation
Returns a hashcode for this IP address
Compares this object against the specified object
Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is a loopback address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Test whether that address is reachable
Test whether that address is reachable
Gets the host name for this IP address
Gets the fully qualified domain name for this IP address
Returns the raw IP address of this {@code InetAddress} object
Returns the IP address string in textual presentation
Returns a hashcode for this IP address
Compares this object against the specified object
Converts this IP address to a {@code String}
Creates an InetAddress based on the provided host name and IP address
Determines the IP address of a host, given the host's name
Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system
Returns the loopback address
Returns an {@code InetAddress} object given the raw IP address 
Returns the address of the local host
Returns the name of the ACL
Checks whether or not the specified host has <CODE>READ</CODE> access
Checks whether or not the specified host and community have <CODE>READ</CODE> access
Checks whether or not a community string is defined
Checks whether or not the specified host has <CODE>WRITE</CODE> access
Checks whether or not the specified host and community have <CODE>WRITE</CODE> access
Returns an enumeration of trap destinations
Returns an enumeration of trap communities for a given host
Returns an enumeration of inform destinations
Returns an enumeration of inform communities for a given host
Creates an unresolved socket address from a hostname and a port number
Gets the port number
Gets the {@code InetAddress}
Gets the {@code hostname}
Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal)
Checks whether the address has been resolved or not
Constructs a string representation of this InetSocketAddress
Compares this object against the specified object
Returns a hashcode for this socket address
Sets input data for decompression
Sets input data for decompression
Sets the preset dictionary to the given array of bytes
Sets the preset dictionary to the given array of bytes
Returns the total number of bytes remaining in the input buffer
Returns true if no data remains in the input buffer
Returns true if a preset dictionary is needed for decompression
Returns true if the end of the compressed data stream has been reached
Uncompresses bytes into specified buffer
Uncompresses bytes into specified buffer
Returns the ADLER-32 value of the uncompressed data
Returns the total number of compressed bytes input so far
Returns the total number of compressed bytes input so far
Returns the total number of uncompressed bytes output so far
Returns the total number of uncompressed bytes output so far
Resets inflater so that a new set of input data can be processed
Closes the decompressor and discards any unprocessed input
Closes the decompressor when garbage is collected
Reads a byte of uncompressed data
Reads uncompressed data into an array of bytes
Returns 0 after EOF has been reached, otherwise always return 1
Skips specified number of bytes of uncompressed data
Closes this input stream and releases any system resources associated with the stream
Fills input buffer with more data to decompress
Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods
Marks the current position in this input stream
Repositions this stream to the position at the time the <code>mark</code> method was last called on this input stream
Writes any remaining uncompressed data to the output stream and closes the underlying output stream
Flushes this output stream, forcing any pending buffered output bytes to be written
Finishes writing uncompressed data to the output stream without closing the underlying stream
Writes a byte to the uncompressed output stream
Writes an array of bytes to the uncompressed output stream
Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created
Method isInitialized
Method init
Initializes the initial context using the supplied environment
A static method to retrieve the named object
A static method to retrieve the named object
Retrieves the initial context by calling <code>NamingManager
Retrieves a context for resolving the string name <code>name</code>
Retrieves a context for resolving <code>name</code>
Composes the name of this context with a name relative to this context
Composes the name of this context with a name relative to this context
Creates an Initial Context for beginning name resolution
Creates an initial context factory using the specified environment
Plug in the resolver that this InitialServerRequestDispatcher should use in order to lookup or list initial name to object reference bindings
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
Fetches the attributes to use when rendering
Determines how attractive a break opportunity in this view is
Tries to break this view on the given axis
Set the cached properties from the attributes
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump inner class attribute to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump source file attribute to file stream in binary format
Returns a new InputContext instance
Attempts to select an input method or keyboard layout that supports the given locale, and returns a value indicating whether such an input method or keyboard layout has been successfully selected
Returns the current locale of the current input method or keyboard layout
Sets the subsets of the Unicode character set that input methods of this input context should be allowed to input
Enables or disables the current input method for composition, depending on the value of the parameter <code>enable</code>
Determines whether the current input method is enabled for composition
Asks the current input method to reconvert text from the current client component
Dispatches an event to the active input method
Notifies the input context that a client component has been removed from its containment hierarchy, or that input method support has been disabled for the component
Ends any input composition that may currently be going on in this context
Releases the resources used by this input context
Returns a control object from the current input method, or null
A method to obtain a mask for any existing mouse button
Returns whether or not the Shift modifier is down on this event
Returns whether or not the Control modifier is down on this event
Returns whether or not the Meta modifier is down on this event
Returns whether or not the Alt modifier is down on this event
Returns whether or not the AltGraph modifier is down on this event
Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC
Returns the modifier mask for this event
Returns the extended modifier mask for this event
Consumes this event so that it will not be processed in the default manner by the source which originated it
Returns whether or not this event has been consumed
Returns a String describing the extended modifier keys and mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift"
Sets this <code>InputMap</code>'s parent
Gets this <code>InputMap</code>'s parent
Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>
Returns the binding for <code>keyStroke</code>, messaging the parent <code>InputMap</code> if the binding is not locally defined
Removes the binding for <code>key</code> from this <code>InputMap</code>
Removes all the mappings from this <code>InputMap</code>
Returns the <code>KeyStroke</code>s that are bound in this <code>InputMap</code>
Returns the number of <code>KeyStroke</code> bindings
Returns an array of the <code>KeyStroke</code>s defined in this <code>InputMap</code> and its parent
Sets the input method context, which is used to dispatch input method events to the client component and to request information from the client component
Attempts to set the input locale
Returns the current input locale
Sets the subsets of the Unicode character set that this input method is allowed to input
Enables or disables this input method for composition, depending on the value of the parameter <code>enable</code>
Determines whether this input method is enabled
Starts the reconversion operation
Dispatches the event to the input method
Notifies this input method of changes in the client window location or state
Activates the input method for immediate input processing
Deactivates the input method
Closes or hides all windows opened by this input method instance or its class
Notifies the input method that a client component has been removed from its containment hierarchy, or that input method support has been disabled for the component
Ends any input composition that may currently be going on in this context
Releases the resources used by this input method
Returns a control object from this input method, or null
Creates an input method event from the arguments given and dispatches it to the client component
Creates a top-level window for use by the input method
Creates a top-level Swing JFrame for use by the input method
Enables or disables notification of the current client window's location and state for the specified input method
Returns the locales supported by the corresponding input method
Returns whether the list of available locales can change at runtime
Returns the user-visible name of the corresponding input method for the given input locale in the language in which the name will be displayed
Returns an icon for the corresponding input method
Creates a new instance of the corresponding input method
Gets the combined committed and composed text
Gets the number of committed characters in the text
Gets the caret
Gets the position that's most important to be visible
Consumes this event so that it will not be processed in the default manner by the source which originated it
Returns whether or not this event has been consumed
Returns the time stamp of when this event occurred
Returns a parameter string identifying this event
Returns whether the text range is selected
Returns the conversion state of the text range
Returns the variation of the text range
Returns the rendering style attributes for the text range, or null
Invoked when the text entered through an input method has changed
Invoked when the caret within composed text has changed
Gets the location of a specified offset in the current composed text, or of the selection in committed text
Gets the offset within the composed text for the specified absolute x and y coordinates on the screen
Gets the offset of the insert position in the committed text contained in the text editing component
Gets an iterator providing access to the entire text and attributes contained in the text editing component except for uncommitted text
Gets the length of the entire text contained in the text editing component except for uncommitted (composed) text
Gets the latest committed text from the text editing component and removes it from the component's text body
Gets the currently selected text from the text editing component
Set the public identifier for this input source
Get the public identifier for this input source
Set the system identifier for this input source
Get the system identifier for this input source
Set the byte stream for this input source
Get the byte stream for this input source
Set the character encoding, if known
Get the character encoding for a byte stream or URI
Set the character stream for this input source
Get the character stream for this input source
Unmarshalls a value type from the input stream
Unmarshalls a value type from the input stream
Unmarshalls a value type from the input stream
Unmarshalls a value type from the input stream
Unmarshalls a value type from the input stream
Unmarshal the value object or a suitable stub object
Unmarshal the class object or the stub class corresponding to the passed type
Returns the name of the character encoding being used by this stream
Reads a single character
Reads characters into a portion of an array
Tells whether this stream is ready to be read
Checks whether the JComponent's input is valid
Calls <code>verify(input)</code> to ensure that the input is valid
Set top, left, bottom, and right to the specified values
Checks whether two insets objects are equal
Returns the hash code for this Insets
Returns a string representation of this <code>Insets</code> object
Create a copy of this object
Call corresponding visitor method(s)
Obtains the current instant from the system clock
Obtains the current instant from the specified clock
Obtains an instance of {@code Instant} using seconds from the epoch of 1970-01-01T00:00:00Z
Obtains an instance of {@code Instant} using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second
Obtains an instance of {@code Instant} using milliseconds from the epoch of 1970-01-01T00:00:00Z
Obtains an instance of {@code Instant} from a temporal object
Obtains an instance of {@code Instant} from a text string such as {@code 2007-12-03T10:15:30
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this instant as an {@code int}
Gets the value of the specified field from this instant as a {@code long}
Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z
Gets the number of nanoseconds, later along the time-line, from the start of the second
Returns an adjusted copy of this instant
Returns a copy of this instant with the specified field set to a new value
Returns a copy of this {@code Instant} truncated to the specified unit
Returns a copy of this instant with the specified amount added
Returns a copy of this instant with the specified amount added
Returns a copy of this instant with the specified duration in seconds added
Returns a copy of this instant with the specified duration in milliseconds added
Returns a copy of this instant with the specified duration in nanoseconds added
Returns a copy of this instant with the specified amount subtracted
Returns a copy of this instant with the specified amount subtracted
Returns a copy of this instant with the specified duration in seconds subtracted
Returns a copy of this instant with the specified duration in milliseconds subtracted
Returns a copy of this instant with the specified duration in nanoseconds subtracted
Queries this instant using the specified query
Adjusts the specified temporal object to have this instant
Calculates the amount of time until another instant in terms of the specified unit
Combines this instant with an offset to create an {@code OffsetDateTime}
Combines this instant with a time-zone to create a {@code ZonedDateTime}
Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z
Compares this instant to the specified instant
Checks if this instant is after the specified instant
Checks if this instant is before the specified instant
Checks if this instant is equal to the specified instant
Returns a hash code for this instant
A string representation of this instant using ISO-8601 representation
Create an invoke instruction
Create a call to the most popular System
Uses PUSH to push a constant value onto the stack
Create a field instruction
Create reference to `this'
Create typed return
Create binary operation for simple basic types, such as int and float
Create conversion operation for two stack operands, this may be an I2C, instruction, e
Create new array of given size and type
Create "null" value for reference types, 0 for basic types like int
Create branch instruction by given opcode, except LOOKUPSWITCH and TABLESWITCH
Reread the instruction list, e
Search for the given pattern in the instruction list
Start search beginning from the start of the given instruction list
Start search beginning from `from'
Start search beginning from the start of the given instruction list
Replace current instruction contained in this handle
Temporarily swap the current instruction, without disturbing anything
Called by InstructionList
Overridden in BranchHandle
Remove all targeters, if any
Denote this handle isn't referenced anymore by t
Denote this handle is being referenced by t
Add an attribute to an instruction handle
Delete an attribute of an instruction handle
Get attribute of an instruction handle
Convenience method, simply calls accept() on the contained instruction
Test for empty list
Find the target instruction (handle) that corresponds to the given target position (byte code offset)
Get instruction handle for instruction at byte code position pos
Append another list after instruction (handle) ih contained in this list
Append another list after instruction i contained in this list
Append another list to this one
Append an instruction to the end of this list
Append a branch instruction to the end of this list
Append a single instruction j after another instruction i, which must be in this list of course!
Append a compound instruction, after instruction i
Append a compound instruction
Append a compound instruction
Append an instruction after instruction (handle) ih contained in this list
Append an instruction after instruction (handle) ih contained in this list
Insert another list before Instruction handle ih contained in this list
Insert another list
Insert another list before Instruction i contained in this list
Insert an instruction at start of this list
Insert a branch instruction at start of this list
Insert a single instruction j before another instruction i, which must be in this list of course!
Insert a compound instruction before instruction i
Insert a compound instruction
Insert an instruction before instruction (handle) ih contained in this list
Insert a compound instruction
Insert an instruction before instruction (handle) ih contained in this list
Take all instructions (handles) from "start" to "end" and append them after the new location "target"
Move a single instruction (handle) to a new location
Remove instruction from this list
Remove instruction from this list
Remove instructions from instruction `from' to instruction `to' contained in this list
Remove instructions from instruction `from' to instruction `to' contained in this list
Give all instructions their position number (offset in byte stream), i
When everything is finished, use this method to convert the instruction list into an array of bytes
Get positions (offsets) of all instructions in the list
Replace all references to the old constant pool with references to the new  constant pool
Delete contents of list
Redirect all references from old_target to new_target, i
Redirect all references of local variables from old_target to new_target
Redirect all references of exception handlers from old_target to new_target
Add observer for this object
Remove observer for this object
Call notify() method on all observers
Obtains the <code>Patch</code> object that indicates the bank and program numbers where this instrument is to be stored in the synthesizer
Registers the supplied transformer
Registers the supplied transformer
Unregisters the supplied transformer
Returns whether or not the current JVM configuration supports retransformation of classes
Retransform the supplied set of classes
Returns whether or not the current JVM configuration supports redefinition of classes
Redefine the supplied set of classes using the supplied class files
Determines whether a class is modifiable by {@linkplain #retransformClasses retransformation} or {@linkplain #redefineClasses redefinition}
Returns an array of all classes currently loaded by the JVM
Returns an array of all classes for which <code>loader</code> is an initiating loader
Returns an implementation-specific approximation of the amount of storage consumed by the specified object
Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader
Specifies a JAR file with instrumentation classes to be defined by the system class loader
Returns whether the current JVM configuration supports {@linkplain #setNativeMethodPrefix(ClassFileTransformer,String) setting a native method prefix}
This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name
Applies this operator to the given operands
Allocates a new int buffer
Wraps an int array into a buffer
Wraps an int array into a buffer
Creates a new int buffer whose content is a shared subsequence of this buffer's content
Creates a new int buffer that shares this buffer's content
Creates a new, read-only int buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible int array
Returns the int array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this int buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Performs this operation on the given argument
Returns a composed {@code IntConsumer} that performs, in sequence, this operation followed by the {@code after} operation
Returns a string representation of the first argument in the radix specified by the second argument
Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
Returns a string representation of the integer argument as an unsigned integer in base&nbsp;16
Returns a string representation of the integer argument as an unsigned integer in base&nbsp;8
Returns a string representation of the integer argument as an unsigned integer in base&nbsp;2
Returns a {@code String} object representing the specified integer
Returns a string representation of the argument as an unsigned decimal value
Parses the string argument as a signed integer in the radix specified by the second argument
Parses the string argument as a signed decimal integer
Parses the string argument as an unsigned integer in the radix specified by the second argument
Parses the string argument as an unsigned decimal integer
Returns an {@code Integer} object holding the value extracted from the specified {@code String} when parsed with the radix given by the second argument
Returns an {@code Integer} object holding the value of the specified {@code String}
Returns an {@code Integer} instance representing the specified {@code int} value
Returns the value of this {@code Integer} as a {@code byte} after a narrowing primitive conversion
Returns the value of this {@code Integer} as a {@code short} after a narrowing primitive conversion
Returns the value of this {@code Integer} as an {@code int}
Returns the value of this {@code Integer} as a {@code long} after a widening primitive conversion
Returns the value of this {@code Integer} as a {@code float} after a widening primitive conversion
Returns the value of this {@code Integer} as a {@code double} after a widening primitive conversion
Returns a {@code String} object representing this {@code Integer}'s value
Returns a hash code for this {@code Integer}
Returns a hash code for a {@code int} value; compatible with {@code Integer
Compares this object to the specified object
Determines the integer value of the system property with the specified name
Determines the integer value of the system property with the specified name
Returns the integer value of the system property with the specified name
Decodes a {@code String} into an {@code Integer}
Compares two {@code Integer} objects numerically
Compares two {@code int} values numerically
Compares two {@code int} values numerically treating the values as unsigned
Converts the argument to a {@code long} by an unsigned conversion
Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Returns an {@code int} value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified {@code int} value
Returns an {@code int} value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified {@code int} value
Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified {@code int} value
Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified {@code int} value
Returns the number of one-bits in the two's complement binary representation of the specified {@code int} value
Returns the value obtained by rotating the two's complement binary representation of the specified {@code int} value left by the specified number of bits
Returns the value obtained by rotating the two's complement binary representation of the specified {@code int} value right by the specified number of bits
Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified {@code int} value
Returns the signum function of the specified {@code int} value
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified {@code int} value
Adds two integers together as per the + operator
Returns the greater of two {@code int} values as if by calling {@link Math#max(int, int) Math
Returns the smaller of two {@code int} values as if by calling {@link Math#min(int, int) Math
Adds new int at the end if not already present
Merge two sorted arrays and eliminate duplicates
Returns this integer attribute's integer value
Returns whether this integer attribute is equivalent to the passed in object
Returns a hash code value for this integer attribute
Returns a string value corresponding to this integer attribute
Configures the pipeline
Create a document scanner: this scanner performs namespace binding
Create a DTD validator: this validator performs namespace binding
Method engineGetURI
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Method engineInitSign
Method engineInitSign
Method engineInitSign
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Method engineGetJCEAlgorithmString
Method engineGetJCEAlgorithmString
Method engineSetHMACOutputLength
Method engineGetContextFromElement
Method engineAddContextToElement
Method engineGetURI
Method engineGetURI
Method engineGetURI
Method engineGetURI
Method engineGetURI
Method engineGetURI
Returns the name of the interceptor
Provides an opportunity to destroy this interceptor
Returns an {@code InetAddress} for this address
Returns an {@code InetAddress} for the broadcast address for this InterfaceAddress
Returns the network prefix length for this address
Compares this object against the specified object
Returns a hashcode for this Interface address
Converts this Interface address to a {@code String}
Invoked when an internal frame has been opened
Invoked when an internal frame is in the process of being closed
Invoked when an internal frame has been closed
Invoked when an internal frame is iconified
Invoked when an internal frame is de-iconified
Invoked when an internal frame is activated
Invoked when an internal frame is de-activated
Returns a parameter string identifying this event
Returns the originator of the event
Returns the Component that should receive the focus when a JInternalFrame is selected for the first time
Invoked when a internal frame has been opened
Invoked when an internal frame is in the process of being closed
Invoked when an internal frame has been closed
Invoked when an internal frame is iconified
Invoked when an internal frame is de-iconified
Invoked when an internal frame is activated
Invoked when an internal frame is de-activated
Sets the format that dictates the legal values that can be edited and displayed
Returns the format that dictates the legal values that can be edited and displayed
Sets the minimum permissible value
Returns the minimum permissible value
Sets the maximum permissible value
Returns the maximum permissible value
Installs the <code>DefaultFormatter</code> onto a particular <code>JFormattedTextField</code>
Returns a String representation of the Object <code>value</code>
Returns the <code>Object</code> representation of the <code>String</code> <code>text</code>
Returns the <code>Format
Creates a copy of the DefaultFormatter
If <code>getSupportsIncrement</code> returns true, this returns two Actions suitable for incrementing/decrementing the value
Method which stringifies the Name Components given as the input parameter
Method which converts the Stringified name into Array of Name Components
Method which converts the Stringified name  and Host Name Address into a URL based Name
Closes this channel
Return the bounds comprising this intersection type
Applies this function to the given argument
Reads unmarshalled data from <code>input</code> and assigns it to the <code>value</code> field in this <code>IntHolder</code> object
Marshals the value in this <code>IntHolder</code> object's <code>value</code> field to the output stream <code>output</code>
Retrieves the <code>TypeCode</code> object that corresponds to the value held in this <code>IntHolder</code> object's <code>value</code> field
Evaluates this predicate on the given argument
Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Returns a predicate that represents the logical negation of this predicate
Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Introspect on a Java Bean and learn about all its properties, exposed methods, and events
Introspect on a Java bean and learn about all its properties, exposed methods, and events, subject to some control flags
Introspect on a Java bean and learn all about its properties, exposed methods, below a given "stop" point
Introspect on a Java Bean and learn about all its properties, exposed methods and events, below a given {@code stopClass} point subject to some control {@code flags}
Utility method to take a string and convert it to normal Java variable name capitalization
Gets the list of package names that will be used for          finding BeanInfo classes
Change the list of package names that will be used for          finding BeanInfo classes
Flush all of the Introspector's internal caches
Flush the Introspector's internal cached information for a given class
Pushes an item onto the top of this stack
Removes the object at the top of this stack and returns that object as the value of this function
Quickly pops a number of items from the stack
Looks at the object at the top of this stack without removing it from the stack
Looks at the object at the position the stack counting down n items
Sets an object at a the top of the statck
Tests if this stack is empty
Returns where an object is on this stack
Returns clone of current IntStack
Returns a stream consisting of the elements of this stream that match the given predicate
Returns a stream consisting of the results of applying the given function to the elements of this stream
Returns an object-valued {@code Stream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code LongStream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code DoubleStream} consisting of the results of applying the given function to the elements of this stream
Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns a stream consisting of the distinct elements of this stream
Returns a stream consisting of the elements of this stream in sorted order
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Returns a stream consisting of the elements of this stream, truncated to be no longer than {@code maxSize} in length
Returns a stream consisting of the remaining elements of this stream after discarding the first {@code n} elements of the stream
Performs an action for each element of this stream
Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
Returns an array containing the elements of this stream
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Returns the sum of elements in this stream
Returns an {@code OptionalInt} describing the minimum element of this stream, or an empty optional if this stream is empty
Returns an {@code OptionalInt} describing the maximum element of this stream, or an empty optional if this stream is empty
Returns the count of elements in this stream
Returns an {@code OptionalDouble} describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
Returns an {@code IntSummaryStatistics} describing various summary data about the elements of this stream
Returns whether any elements of this stream match the provided predicate
Returns whether all elements of this stream match the provided predicate
Returns whether no elements of this stream match the provided predicate
Returns an {@link OptionalInt} describing the first element of this stream, or an empty {@code OptionalInt} if the stream is empty
Returns an {@link OptionalInt} describing some element of the stream, or an empty {@code OptionalInt} if the stream is empty
Returns a {@code LongStream} consisting of the elements of this stream, converted to {@code long}
Returns a {@code DoubleStream} consisting of the elements of this stream, converted to {@code double}
Returns a {@code Stream} consisting of the elements of this stream, each boxed to an {@code Integer}
Returns a builder for an {@code IntStream}
Returns an empty sequential {@code IntStream}
Returns a sequential {@code IntStream} containing a single element
Returns a sequential ordered stream whose elements are the specified values
Returns an infinite sequential ordered {@code IntStream} produced by iterative application of a function {@code f} to an initial element {@code seed}, producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, {@code f(f(seed))}, etc
Returns an infinite sequential unordered stream where each element is generated by the provided {@code IntSupplier}
Returns a sequential ordered {@code IntStream} from {@code startInclusive} (inclusive) to {@code endExclusive} (exclusive) by an incremental step of {@code 1}
Returns a sequential ordered {@code IntStream} from {@code startInclusive} (inclusive) to {@code endInclusive} (inclusive) by an incremental step of {@code 1}
Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Adds an element to the stream being built
Adds an element to the stream being built
Builds the stream, transitioning this builder to the built state
Records a new value into the summary information
Combines the state of another {@code IntSummaryStatistics} into this one
Returns the count of values recorded
Returns the sum of values recorded, or zero if no values have been recorded
Returns the minimum value recorded, or {@code Integer
Returns the maximum value recorded, or {@code Integer
Returns the arithmetic mean of values recorded, or zero if no values have been recorded
Gets a result
Applies this function to the given argument
Applies this function to the given argument
Translates an integer into an object of internal type <code>type</code>
Expects an integer on the stack and pushes a real
Expects an integer on the stack and pushes its string value by calling <code>Integer
Expects an integer on the stack and pushes a 0 if its value is 0 and a 1 otherwise
Expects an integer on the stack and translates it to a non-synthesized boolean
Expects an integer on the stack and pushes a boxed integer
Translates an integer into the Java type denoted by <code>clazz</code>
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Applies this operator to the given operand
Returns a composed operator that first applies the {@code before} operator to its input, and then applies this operator to the result
Returns a composed operator that first applies this operator to its input, and then applies the {@code after} operator to the result
Returns a unary operator that always returns its input argument
Get the length of the list
Get the length of the list
Append a int onto the vector
Append several int values onto the vector
Append several slots onto the vector, but do not set the values
Inserts the specified node in this vector at the specified index
Inserts the specified node in this vector at the specified index
Removes the first occurrence of the argument from this vector
Deletes the component at the specified index
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Tell if the table contains the given node
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Returns clone of current IntVector
Produce the message and include the classname, if present
Returns the input string
Returns a string explaining why the input string was rejected
Returns an index into the input string of the position at which the error occurred, or <tt>-1</tt> if this position is not known
Returns a string describing the error
Calls a method on a script object compiled during a previous script execution, which is retained in the state of the <code>ScriptEngine</code>
Used to call top-level procedures and functions defined in scripts
Returns an implementation of an interface using functions compiled in the interpreter
Returns an implementation of an interface using member functions of a scripting object compiled in the interpreter
Executes the Runnable's <code>run()</code> method and notifies the notifier (if any) when <code>run()</code> has returned or thrown an exception
Returns any Exception caught while executing the Runnable's <code>run() </code> method
Returns any Throwable caught while executing the Runnable's <code>run() </code> method
Returns the timestamp of when this event occurred
Returns {@code true} if the event is dispatched or any exception is thrown while dispatching, {@code false} otherwise
Returns a parameter string identifying this event
Processes a method invocation on a proxy instance and returns the result
Get an InvocationHandler
Get the interfaces that InvocationHandler instances produced by this InvocationHandlerFactory support
Get the thrown target exception
Returns the cause of this exception (the thrown target exception, which may be {@code null})
Invoked by the ORB to dispatch a request to the servant
Also works for instructions whose stack effect depends on the constant pool entry they reference
Also works for instructions whose stack effect depends on the constant pool entry they reference
Dump instruction as byte code to stream out
The <B>count</B> argument according to the Java Language Specification, Second Edition
Read needed data (i
Call corresponding visitor method(s)
JAX-WS runtimes calls this method to ask container to inject WebServiceContext on the endpoint instance
JAX-WS runtime calls this method to do the actual web service invocation on endpoint instance
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Create an ObjectId for the given byte sequence
Create an ObjectKey for the given ObjectKeyTemplate and ObjectId
Create an empty IOR for the given orb and typeid
Create an empty IOR for the given orb with a null typeid
Read an IOR from an InputStream
Create an IORTemplate with the given ObjectKeyTemplate
Read an IORTemplate from an InputStream
This method must be called in order to register the value factories for the ObjectReferenceTemplate and ObjectReferenceFactory value types
Construct an IOR containing the given ORB, typeid, and ObjectId
Return true iff this
Return the IORTemplateList for this IOR
Return the first IIOPProfile in this IOR
An ORB service implementation may determine what server side policy of a particular type is in effect for an IOR being constructed by calling the get_effective_policy operation
A portable ORB service implementation calls this method from its implementation of establish_components to add a tagged component to the set which will be included when constructing IORs
A portable ORB service implementation calls this method from its implementation of establish_components to add a tagged component to the set which will be included when constructing IORs
Allows an ORB service implementation to determine what server side  policy of a particular type is in effect for an IOR being  constructed
A portable ORB service implementation calls  <code>add_ior_component</code> from its implementation of  <code>establish_components</code> to add a tagged component to the  set which will be included when constructing IORs
A portable ORB service implementation calls  <code>add_ior_component_to_profile</code> from its implementation of  <code>establish_components</code> to add a tagged component to the  set which will be included when constructing IORs
Return the adapter manager id of the object adapter that was just created and is running IOR interceptors
Return the adapter state of the object adapter that was just created and is running IOR interceptors
Return the object reference template of the object adapter that was just created and is running IOR interceptors
On read, returns the current factory that will be used to create object references for the object adapter that was just created and is running IOR interceptors
On read, returns the current factory that will be used to create object references for the object adapter that was just created and is running IOR interceptors
A server side ORB calls the <code>establish_components</code>  operation on all registered <code>IORInterceptor</code> instances  when it is assembling the list of components that will be included  in the profile or profiles of an object reference
The components_established method is invoked on all registered  IORInterceptor_3_0 instances after establish_components has been invoked on all registered IORInterceptor instances
Called whenever the state of an adapter manager changes
Called whenever the state of an object adapter changes, and the state change is not caused by an adapter manager
Iterate over all TaggedProfileTemplates in this IORTemplate with the given id
Ensure that this IORTemplate and all of its profiles can not be modified
Used to extract socket address information from an IOR
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the <code>DefinitionKind</code> corresponding to this Interface Repository object
Destroys this object
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Gets the ID of the chronology - 'ISO'
Gets the calendar type of the underlying calendar system - 'iso8601'
Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields
Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields
Obtains an ISO local date from the era, year-of-era and day-of-year fields
Obtains an ISO local date from the proleptic-year and day-of-year fields
Obtains an ISO local date from the epoch-day
Obtains an ISO local date from another date-time object
Obtains an ISO local date-time from another date-time object
Obtains an ISO zoned date-time from another date-time object
Obtains an ISO zoned date-time in this chronology from an {@code Instant}
Obtains the current ISO local date from the system clock in the default time-zone
Obtains the current ISO local date from the system clock in the specified time-zone
Obtains the current ISO local date from the specified clock
Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Resolves parsed {@code ChronoField} values into a date during parsing
Obtains a period for this chronology based on years, months and days
Obtains an instance of {@code IsoEra} from an {@code int} value
Gets the numeric era {@code int} value
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the originator of the event
Returns the item affected by the event
Returns the type of state change (selected or deselected)
Returns a parameter string identifying this item event
Invoked when an item has been selected or deselected by the user
The nearest ancestor element information item with a <code>[schema information]</code> property (or this element item itself if it has such a property)
<code>[validity]</code>: determines the validity of the schema item with respect to the validation being attempted
<code>[validation attempted]</code>: determines the extent to which the schema item has been validated
<code>[schema error code]</code>: a list of error codes generated from the validation attempt or an empty <code>StringList</code> if no errors occurred during the validation attempt
<code>[schema normalized value]</code>: the normalized value of this item after validation
<code>[schema normalized value]</code>: Binding specific actual value or <code>null</code> if the value is in error
The actual value built-in datatype, e
In the case the actual value represents a list, i
<code>[type definition]</code>: an item isomorphic to the type definition used to validate the schema item
<code>[member type definition]</code>: if and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple type definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the schema item's normalized value
<code>[schema default]</code>: the canonical lexical representation of the declaration's {value constraint} value
<code>[schema specified]</code>: if true, the value was specified in the schema
Returns the selected items or <code>null</code> if no items are selected
Adds a listener to receive item events when the state of an item is changed by the user
Removes an item listener
Returns an iterator over elements of type {@code T}
Performs the given action for each element of the {@code Iterable} until all elements have been processed or the action throws an exception
Creates a {@link Spliterator} over the elements described by this {@code Iterable}
Returns {@code true} if the iteration has more elements
Returns the next element in the iteration
Removes from the underlying collection the last element returned by this iterator (optional operation)
Performs the given action for each remaining element until all elements have been processed or the action throws an exception
Get an instance of the given object in this pool
Get an instance of the given object in this pool
Add an instance of the given object to the pool
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Gets the ID of the chronology - 'Japanese'
Gets the calendar type of the underlying calendar system - 'japanese'
Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields
Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields
Obtains a local date in the Japanese calendar system from the epoch-day
Checks if the specified year is a leap year
Returns the calendar system era object from the given numeric value
Obtains the current {@code JapaneseDate} from the system clock in the default time-zone
Obtains the current {@code JapaneseDate} from the system clock in the specified time-zone
Obtains the current {@code JapaneseDate} from the specified clock
Obtains a {@code JapaneseDate} representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
Obtains a {@code JapaneseDate} representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a {@code JapaneseDate} from a temporal object
Gets the chronology of this date, which is the Japanese calendar system
Gets the era applicable at this date
Returns the length of the month represented by this date
Checks if the specified field is supported
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares this date to another date, including the chronology
A hash code for this date
Obtains an instance of {@code JapaneseEra} from an {@code int} value
Returns the {@code JapaneseEra} with the name
Returns an array of JapaneseEras
{@inheritDoc}
Gets the numeric era {@code int} value
Gets the range of valid values for the specified field
Called by the constructor methods to create the default rootPane
Sets the {@code transferHandler} property, which is a mechanism to support transfer of data into this component
Gets the <code>transferHandler</code> property
Just calls <code>paint(g)</code>
Sets the menubar for this applet
Returns the menubar set on this applet
Returns whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Sets whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Adds the specified child <code>Component</code>
Removes the specified component from the container
Sets the <code>LayoutManager</code>
Returns the rootPane object for this applet
Sets the rootPane property
Returns the contentPane object for this applet
Sets the contentPane property
Returns the layeredPane object for this applet
Sets the layeredPane property
Returns the glassPane object for this applet
Sets the glassPane property
{@inheritDoc}
Repaints the specified rectangle of this component within <code>time</code> milliseconds
Returns a string representation of this JApplet
Gets the AccessibleContext associated with this JApplet
Returns the <code>Manifest</code> <code>Attributes</code> for this entry, or <code>null</code> if none
Returns the <code>Certificate</code> objects for this entry, or <code>null</code> if none
Returns the <code>CodeSigner</code> objects for this entry, or <code>null</code> if none
Returns the jar file manifest, or <code>null</code> if none
Returns the <code>JarEntry</code> for the given entry name or <code>null</code> if not found
Returns the <code>ZipEntry</code> for the given entry name or <code>null</code> if not found
Returns an enumeration of the zip file entries
Returns an input stream for reading the contents of the specified zip file entry
Returns the <code>Manifest</code> for this JAR file, or <code>null</code> if none
Reads the next ZIP file entry and positions the stream at the beginning of the entry data
Reads the next JAR file entry and positions the stream at the beginning of the entry data
Reads from the current JAR file entry into an array of bytes
Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the specified JAR file entry name
Begins writing a new JAR file entry and positions the stream to the start of the entry data
Returns the URL for the Jar file for this connection
Return the entry name for this connection
Return the JAR file for this connection
Returns the Manifest for this connection, or null if none
Return the JAR entry object for this connection, if any
Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise
Returns the main Attributes for the JAR file for this connection
Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump class to a file
Dump class to a file named file_name
Dump Java class to output stream in binary format
Dump Java class to output stream in binary format
Set File name of class, aka SourceFile attribute value
Set absolute path to file this class was read from
Gets the ClassRepository which holds its definition
Sets the ClassRepository which loaded the JavaClass
Equivalent to runtime "instanceof" operator
Get interfaces directly implemented by this JavaClass
Get all interfaces implemented by this JavaClass (transitively)
Creates a future for a compilation task with the given components and arguments
Gets a new instance of the standard file manager implementation for this tool
Sets processors (for annotation processing)
Set the locale to be applied when formatting diagnostics and other localized data
Performs this compilation task
Get the {@code JavacTask} for a {@code ProcessingEnvironment}
Parse the specified files returning a list of abstract syntax trees
Complete all analysis
Generate code
The specified listener will receive notification of events describing the progress of this compilation task
The specified listener will receive notification of events describing the progress of this compilation task
The specified listener will no longer receive notification of events describing the progress of this compilation task
Get a type mirror of the tree node determined by the specified path
Get a utility object for dealing with program elements
Get a utility object for dealing with type mirrors
Gets a class loader for loading plug-ins from the given location
Lists all file objects matching the given criteria in the given location
Infers a binary name of a file object based on a location
Compares two file objects and return true if they represent the same underlying object
Handles one option
Determines if a location is known to this file manager
Gets a {@linkplain JavaFileObject file object} for input representing the specified class of the specified kind in the given location
Gets a {@linkplain JavaFileObject file object} for output representing the specified class of the specified kind in the given location
Gets a {@linkplain FileObject file object} for input representing the specified <a href="JavaFileManager
Gets a {@linkplain FileObject file object} for output representing the specified <a href="JavaFileManager
Flushes any resources opened for output by this file manager directly or indirectly
Releases any resources opened by this file manager directly or indirectly
Gets the name of this location
Determines if this is an output location
Gets the kind of this file object
Checks if this file object is compatible with the specified simple name and kind
Provides a hint about the nesting level of the class represented by this file object
Provides a hint about the access level of the class represented by this file object
Method getBytesFromFile
Method writeBytesToFilename
This method reads all bytes from the given InputStream till EOF and returns them as a byte array
Converts an ASN
Converts an XML Signature DSA Value to a ASN
Throws a {@code SecurityException} if a security manager is installed and the caller is not allowed to register an implementation of an algorithm, transform, or other security sensitive XML Signature function
Runs the _main method of the given class with the arguments passed in argv
Default _main method used as wrapper, expects the fully qualified class name of the real class as the first argument
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Reads in a Java object tree from the given XML input
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
Writes a Java object tree to XML and store it to the specified location
<p> Obtain a new instance of a <tt>JAXBContext</tt> class
<p> Obtain a new instance of a <tt>JAXBContext</tt> class
<p> Obtain a new instance of a <tt>JAXBContext</tt> class
<p> Obtain a new instance of a <tt>JAXBContext</tt> class
<p> Obtain a new instance of a <tt>JAXBContext</tt> class
Create an <tt>Unmarshaller</tt> object that can be used to convert XML data into a java content tree
Create a <tt>Marshaller</tt> object that can be used to convert a java content tree into XML data
{@link Validator} has been made optional and deprecated in JAXB 2
Creates a <tt>Binder</tt> object that can be used for associative/in-place unmarshalling/marshalling
Creates a <tt>Binder</tt> for W3C DOM
Creates a <tt>JAXBIntrospector</tt> object that can be used to introspect JAXB objects
Generates the schema documents for this context
Returns the Java binding of the xml element declaration's type attribute
Returns the xml element tag name
<p>Set the content model and attributes of this xml element
<p>Return the content model and attribute values for this element
Returns scope of xml element declaration
<p>Returns <tt>true</tt> iff this element instance content model is nil
<p>Set whether this element has nil content
Returns true iff this xml element declaration is global
Returns true iff this xml element instance's value has a different type than xml element declaration's declared type
Get the vendor specific error code
Get the linked exception
Add a linked Exception
Returns a short description of this JAXBException
Prints this JAXBException and its stack trace (including the stack trace of the linkedException if it is non-null) to the PrintStream
Prints this JAXBException and its stack trace (including the stack trace of the linkedException if it is non-null) to <tt>System
Prints this JAXBException and its stack trace (including the stack trace of the linkedException if it is non-null) to the PrintWriter
<p>Return true if <code>object</code> represents a JAXB element
<p>Get xml element qname for <code>jaxbElement</code>
<p>Get the element value of a JAXB element
Gets the unmarshalled object created by the transformation
Is the extension function available?
Is the extension element available?
Execute the extension function
Execute the extension function
Return the base identifier
Given a prefix and a Context Node, get the corresponding namespace
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the L&amp;F class that renders this component
Gets the value of the <code>defaultButton</code> property, which if <code>true</code> means that this button is the current default button for its <code>JRootPane</code>
Gets the value of the <code>defaultCapable</code> property
Sets the <code>defaultCapable</code> property, which determines whether this button can be made the default button for its root pane
Overrides <code>JComponent
Returns a string representation of this <code>JButton</code>
Gets the <code>AccessibleContext</code> associated with this <code>JButton</code>
Get the role of this object
Method register
This method registers the default algorithms
Method translateURItoJCEID
Method getAlgorithmClassFromURI
Returns the keylength in bits for a particular algorithm
Method getJCEKeyAlgorithmFromURI
Gets the default Provider for obtaining the security algorithms
Sets the default Provider for obtaining the security algorithms
Sets the <code>borderPaintedFlat</code> property, which gives a hint to the look and feel as to the appearance of the check box border
Gets the value of the <code>borderPaintedFlat</code> property
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the L&amp;F class that renders this component
Returns a string representation of this JCheckBox
Gets the AccessibleContext associated with this JCheckBox
Get the role of this object
Returns the name of the L&amp;F class that renders this component
Returns the selected-state of the item
Sets the selected-state of the item
Returns an array (length 1) containing the check box menu item label or null if the check box is not selected
Returns a string representation of this JCheckBoxMenuItem
Gets the AccessibleContext associated with this JCheckBoxMenuItem
Get the role of this object
Shows a modal color-chooser dialog and blocks until the dialog is hidden
Creates and returns a new dialog containing the specified <code>ColorChooser</code> pane along with "OK", "Cancel", and "Reset" buttons
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Notification from the <code>UIManager</code> that the L&amp;F has changed
Returns the name of the L&amp;F class that renders this component
Gets the current color value from the color chooser
Sets the current color of the color chooser to the specified color
Sets the current color of the color chooser to the specified RGB color
Sets the current color of the color chooser to the specified color
Sets the <code>dragEnabled</code> property, which must be <code>true</code> to enable automatic drag handling (the first part of drag and drop) on this component
Gets the value of the <code>dragEnabled</code> property
Sets the current preview panel
Returns the preview panel that shows a chosen color
Adds a color chooser panel to the color chooser
Removes the Color Panel specified
Specifies the Color Panels used to choose a color value
Returns the specified color panels
Returns the data model that handles color selections
Sets the model containing the selected color
Returns a string representation of this <code>JColorChooser</code>
Gets the AccessibleContext associated with this JColorChooser
Get the role of this object
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Returns the L&amp;F object that renders this component
Sets the data model that the <code>JComboBox</code> uses to obtain the list of items
Returns the data model currently used by the <code>JComboBox</code>
Sets the <code>lightWeightPopupEnabled</code> property, which provides a hint as to whether or not a lightweight <code>Component</code> should be used to contain the <code>JComboBox</code>, versus a heavyweight <code>Component</code> such as a <code>Panel</code> or a <code>Window</code>
Gets the value of the <code>lightWeightPopupEnabled</code> property
Determines whether the <code>JComboBox</code> field is editable
Returns true if the <code>JComboBox</code> is editable
Sets the maximum number of rows the <code>JComboBox</code> displays
Returns the maximum number of items the combo box can display without a scrollbar
Sets the renderer that paints the list items and the item selected from the list in the JComboBox field
Returns the renderer used to display the selected item in the <code>JComboBox</code> field
Sets the editor used to paint and edit the selected item in the <code>JComboBox</code> field
Returns the editor used to paint and edit the selected item in the <code>JComboBox</code> field
Sets the selected item in the combo box display area to the object in the argument
Returns the current selected item
Selects the item at index <code>anIndex</code>
Returns the first item in the list that matches the given item
Returns the "prototypical display" value - an Object used for the calculation of the display height and width
Sets the prototype display value used to calculate the size of the display for the UI portion
Adds an item to the item list
Inserts an item into the item list at a given index
Removes an item from the item list
Removes the item at <code>anIndex</code> This method works only if the <code>JComboBox</code> uses a mutable data model
Removes all items from the item list
Causes the combo box to display its popup window
Causes the combo box to close its popup window
Sets the visibility of the popup
Determines the visibility of the popup
Adds an <code>ItemListener</code>
Removes an <code>ItemListener</code>
Returns an array of all the <code>ItemListener</code>s added to this JComboBox with addItemListener()
Adds an <code>ActionListener</code>
Removes an <code>ActionListener</code>
Returns an array of all the <code>ActionListener</code>s added to this JComboBox with addActionListener()
Adds a <code>PopupMenu</code> listener which will listen to notification messages from the popup portion of the combo box
Removes a <code>PopupMenuListener</code>
Returns an array of all the <code>PopupMenuListener</code>s added to this JComboBox with addPopupMenuListener()
Notifies <code>PopupMenuListener</code>s that the popup portion of the combo box will become visible
Notifies <code>PopupMenuListener</code>s that the popup portion of the combo box has become invisible
Notifies <code>PopupMenuListener</code>s that the popup portion of the combo box has been canceled
Sets the action command that should be included in the event sent to action listeners
Returns the action command that is included in the event sent to action listeners
Sets the <code>Action</code> for the <code>ActionEvent</code> source
Returns the currently set <code>Action</code> for this <code>ActionEvent</code> source, or <code>null</code> if no <code>Action</code> is set
Sets the properties on this combobox to match those in the specified <code>Action</code>
Creates and returns a <code>PropertyChangeListener</code> that is responsible for listening for changes from the specified <code>Action</code> and updating the appropriate properties
Updates the combobox's state in response to property changes in associated action
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
This protected method is implementation specific
Returns an array containing the selected item
This method is public as an implementation side effect
This method is public as an implementation side effect
This method is public as an implementation side effect
This method is public as an implementation side effect
Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character
Enables the combo box so that items can be selected
Initializes the editor with the specified item
Handles <code>KeyEvent</code>s, looking for the Tab key
{@inheritDoc}
Sets the object that translates a keyboard character into a list selection
Returns the list's key-selection manager
Returns the number of items in the list
Returns the list item at the specified index
Returns an instance of the default key-selection manager
Returns a string representation of this <code>JComboBox</code>
Gets the AccessibleContext associated with this JComboBox
Given <code>aKey</code> and the model, returns the row  that should become selected
Returns the number of accessible children in the object
Returns the nth Accessible child of the object
Get the role of this object
Gets the state set of this object
Get the AccessibleAction associated with this object
Return a description of the specified action of the object
Returns the number of Actions available in this object
Perform the specified Action on the object
Get the AccessibleSelection associated with this object
Returns the number of Accessible children currently selected
Returns an Accessible representing the specified selected child in the popup
Determines if the current child of this object is selected
Adds the specified Accessible child of the object to the object's selection
Removes the specified child of the object from the object's selection
Clears the selection in the object, so that no children in the object are selected
Causes every child of the object to be selected if the object supports multiple selections
Sets whether or not <code>getComponentPopupMenu</code> should delegate to the parent if this component does not have a <code>JPopupMenu</code> assigned to it
Returns true if the JPopupMenu should be inherited from the parent
Sets the <code>JPopupMenu</code> for this <code>JComponent</code>
Returns <code>JPopupMenu</code> that assigned for this component
Resets the UI property to a value from the current look and feel
Sets the look and feel delegate for this component
Returns the <code>UIDefaults</code> key used to look up the name of the <code>swing
Returns the graphics object used to paint this component
Calls the UI delegate's paint method, if the UI delegate is non-<code>null</code>
Paints this component's children
Paints the component's border
Calls <code>paint</code>
Invoked by Swing to draw components
Invoke this method to print the component
Invoke this method to print the component to the specified <code>Graphics</code>
This is invoked during a printing operation
Prints this component's children
Prints the component's border
Returns true if the component is currently painting a tile
Returns <code>true</code> if the current painting operation on this component is part of a <code>print</code> operation
In release 1
In release 1
In release 1
Provides a hint as to whether or not this <code>JComponent</code> should get focus
Returns <code>true</code> if this <code>JComponent</code> should get focus; otherwise returns <code>false</code>
Requests that this <code>Component</code> gets the input focus
Requests that this <code>Component</code> gets the input focus
Requests that this <code>Component</code> gets the input focus
Requests that this <code>Component</code> gets the input focus
Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus
Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus
Gets the <code>FontMetrics</code> for the specified <code>Font</code>
Sets the preferred size of this component
If the <code>preferredSize</code> has been set to a non-<code>null</code> value just returns it
Sets the maximum size of this component to a constant value
If the maximum size has been set to a non-<code>null</code> value just returns it
Sets the minimum size of this component to a constant value
If the minimum size has been set to a non-<code>null</code> value just returns it
Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing
Sets the border of this component
Returns the border of this component or <code>null</code> if no border is currently set
If a border has been set on this component, returns the border's insets; otherwise calls <code>super
Returns an <code>Insets</code> object containing this component's inset values
Overrides <code>Container
Sets the the horizontal alignment
Overrides <code>Container
Sets the the vertical alignment
Sets the input verifier for this component
Returns the input verifier for this component
Returns this component's graphics context, which lets you draw on a component
Enables or disables diagnostic information about every graphics operation performed within the component or one of its children
Returns the state of graphics debugging
This method is now obsolete, please use a combination of <code>getActionMap()</code> and <code>getInputMap()</code> for similar behavior
This method is now obsolete, please use a combination of <code>getActionMap()</code> and <code>getInputMap()</code> for similar behavior
This method is now obsolete
Returns the <code>KeyStrokes</code> that will initiate registered actions
Returns the condition that determines whether a registered action occurs in response to the specified keystroke
Returns the object that will perform the action registered for a given keystroke
Unregisters all the bindings in the first tier <code>InputMaps</code> and <code>ActionMap</code>
Sets the <code>InputMap</code> to use under the condition <code>condition</code> to <code>map</code>
Returns the <code>InputMap</code> that is used during <code>condition</code>
Returns the <code>InputMap</code> that is used when the component has focus
Sets the <code>ActionMap</code> to <code>am</code>
Returns the <code>ActionMap</code> used to determine what <code>Action</code> to fire for particular <code>KeyStroke</code> binding
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
In release 1
Makes the component visible or invisible
Sets whether or not this component is enabled
Sets the foreground color of this component
Sets the background color of this component
Sets the font for this component
Returns the default locale used to initialize each JComponent's locale property upon creation
Sets the default locale used to initialize each JComponent's locale property upon creation
Processes any key events that the component itself recognizes
Overrides <code>processKeyEvent</code> to process events
Invoked to process the key bindings for <code>ks</code> as the result of the <code>KeyEvent</code> <code>e</code>
Registers the text to display in a tool tip
Returns the tooltip string that has been set with <code>setToolTipText</code>
Returns the string to be used as the tooltip for <i>event</i>
Returns the tooltip location in this component's coordinate system
Returns the preferred location to display the popup menu in this component's coordinate system
Returns the instance of <code>JToolTip</code> that should be used to display the tooltip
Forwards the <code>scrollRectToVisible()</code> message to the <code>JComponent</code>'s parent
Sets the <code>autoscrolls</code> property
Gets the <code>autoscrolls</code> property
Sets the {@code TransferHandler}, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop
Gets the <code>transferHandler</code> property
Processes mouse events occurring on this component by dispatching them to any registered <code>MouseListener</code> objects, refer to {@link java
Processes mouse motion events, such as MouseEvent
Returns the value of the property with the specified key
Adds an arbitrary key/value "client property" to this component
Sets the focus traversal keys for a given traversal operation for this Component
Returns true if this component is lightweight, that is, if it doesn't have a native window system peer
Stores the bounds of this component into "return value" <code>rv</code> and returns <code>rv</code>
Stores the width/height of this component into "return value" <code>rv</code> and returns <code>rv</code>
Stores the x,y origin of this component into "return value" <code>rv</code> and returns <code>rv</code>
Returns the current x coordinate of the component's origin
Returns the current y coordinate of the component's origin
Returns the current width of this component
Returns the current height of this component
Returns true if this component is completely opaque
If true the component paints every pixel within its bounds
Returns the <code>Component</code>'s "visible rect rectangle" -  the intersection of the visible rectangles for this component and all of its ancestors
Returns the <code>Component</code>'s "visible rectangle" -  the intersection of this component's visible rectangle, <code>new Rectangle(0, 0, getWidth(), getHeight())</code>, and all of its ancestors' visible rectangles
Support for reporting bound property changes for boolean properties
Support for reporting bound property changes for integer properties
Supports reporting constrained property changes
Adds a <code>VetoableChangeListener</code> to the listener list
Removes a <code>VetoableChangeListener</code> from the listener list
Returns an array of all the vetoable change listeners registered on this component
Returns the top-level ancestor of this component (either the containing <code>Window</code> or <code>Applet</code>), or <code>null</code> if this component has not been added to any container
Registers <code>listener</code> so that it will receive <code>AncestorEvents</code> when it or any of its ancestors move or are made visible or invisible
Unregisters <code>listener</code> so that it will no longer receive <code>AncestorEvents</code>
Returns an array of all the ancestor listeners registered on this component
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>JComponent</code>
Notifies this component that it now has a parent component
Notifies this component that it no longer has a parent component
Adds the specified region to the dirty region list if the component is showing
Adds the specified region to the dirty region list if the component is showing
Supports deferred automatic layout
If this method returns true, <code>revalidate</code> calls by descendants of this component will cause the entire tree beginning with this root to be validated
Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap
Returns {@code true} if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors
Paints the specified region in this component and all of its descendants that overlap the region, immediately
Paints the specified region now
Sets whether this component should use a buffer to paint
Returns whether this component should use a buffer to paint
Returns the <code>JRootPane</code> ancestor for this component
Returns a string representation of this <code>JComponent</code>
{@inheritDoc}
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Recursively search through the border hierarchy (if it exists) for a TitledBorder with a non-null title
Gets the accessible name of this object
Gets the accessible description of this object
Gets the role of this object
Gets the state of this object
Returns the number of accessible children in the object
Returns the nth Accessible child of the object
Returns the tool tip text
Returns the titled border text
Returns key bindings associated with this object
Retrieves a <code>boolean</code> indicating whether rows marked for deletion appear in the set of current rows
Sets the property <code>showDeleted</code> to the given <code>boolean</code> value
Retrieves the first warning reported by calls on this <code>JdbcRowSet</code> object
Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from the <code>ResultSet</code> or JDBC properties passed to it's constructors
Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
Each <code>JdbcRowSet</code> contains a <code>Connection</code> object from the original <code>ResultSet</code> or JDBC properties passed to it
{@inheritDoc }
Returns the name of the vendor that supports this data type
Returns the vendor specific type number for the data type
Returns the {@code JDBCType} that corresponds to the specified {@code Types} value
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Sets the "dragging style" used by the desktop pane
Gets the current "dragging style" used by the desktop pane
Returns the <code>DesktopManger</code> that handles desktop-specific UI actions
Sets the <code>DesktopManger</code> that will handle desktop-specific UI actions
Notification from the <code>UIManager</code> that the L&amp;F has changed
Returns the name of the L&amp;F class that renders this component
Returns all <code>JInternalFrames</code> currently displayed in the desktop
Returns the currently active <code>JInternalFrame</code> in this <code>JDesktopPane</code>, or <code>null</code> if no <code>JInternalFrame</code> is currently active
Sets the currently active <code>JInternalFrame</code>  in this <code>JDesktopPane</code>
Returns all <code>JInternalFrames</code> currently displayed in the specified layer of the desktop
{@inheritDoc}
Selects the next <code>JInternalFrame</code> in this desktop pane
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a string representation of this <code>JDesktopPane</code>
Gets the <code>AccessibleContext</code> associated with this <code>JDesktopPane</code>
Get the role of this object
Called by the constructors to init the {@code JDialog} properly
Called by the constructor methods to create the default {@code rootPane}
Handles window events depending on the state of the {@code defaultCloseOperation} property
Sets the operation that will happen by default when the user initiates a "close" on this dialog
Returns the operation which occurs when the user initiates a "close" on this dialog
Sets the {@code transferHandler} property, which is a mechanism to support transfer of data into this component
Gets the {@code transferHandler} property
Calls {@code paint(g)}
Sets the menubar for this dialog
Returns the menubar set on this dialog
Returns whether calls to {@code add} and {@code setLayout} are forwarded to the {@code contentPane}
Sets whether calls to {@code add} and {@code setLayout} are forwarded to the {@code contentPane}
Adds the specified child {@code Component}
Removes the specified component from the container
Sets the {@code LayoutManager}
Returns the {@code rootPane} object for this dialog
Sets the {@code rootPane} property
Returns the {@code contentPane} object for this dialog
Sets the {@code contentPane} property
Returns the {@code layeredPane} object for this dialog
Sets the {@code layeredPane} property
Returns the {@code glassPane} object for this dialog
Sets the {@code glassPane} property
{@inheritDoc}
Repaints the specified rectangle of this component within {@code time} milliseconds
Provides a hint as to whether or not newly created {@code JDialog}s should have their Window decorations (such as borders, widgets to close the window, title
Returns true if newly created {@code JDialog}s should have their Window decorations provided by the current look and feel
Returns a string representation of this {@code JDialog}
Gets the AccessibleContext associated with this JDialog
Get the accessible name of this object
Get the state of this object
Get local codebase System property (java
Return true if the system property "java
Returns a class instance for the specified class
Returns a class instance for the specified class
Returns a class instance for the specified class
Set the codebase and useCodebaseOnly properties
Set the default code base
Use an XPath string to select a nodelist
Evaluate an XPath string and return true if the output is to be included or not
Clear any context information from this object
Get a new XPathAPI instance
Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered
Removes a hyperlink listener
Returns an array of all the <code>HyperLinkListener</code>s added to this JEditorPane with addHyperlinkListener()
Notifies all listeners that have registered interest for notification on this event type
Sets the current URL being displayed
This method initializes from a stream
Fetches a stream for the given URL, which is about to be loaded by the <code>setPage</code> method
Scrolls the view to the given reference location (that is, the value returned by the <code>UL
Gets the current URL being displayed
Sets the current URL being displayed
Gets the class ID for the UI
Creates the default editor kit (<code>PlainEditorKit</code>) for when the component is first created
Fetches the currently installed kit for handling content
Gets the type of content that this editor is currently set to deal with
Sets the type of content that this editor handles
Sets the currently installed kit for handling content
Fetches the editor kit to use for the given type of content
Directly sets the editor kit to use for the given type
Replaces the currently selected content with new content represented by the given string
Creates a handler for the given type from the default registry of editor kits
Establishes the default bindings of <code>type</code> to <code>classname</code>
Establishes the default bindings of <code>type</code> to <code>classname</code>
Returns the currently registered <code>EditorKit</code> class name for the type <code>type</code>
Returns the preferred size for the <code>JEditorPane</code>
Sets the text of this <code>TextComponent</code> to the specified content, which is expected to be in the format of the content type of this editor
Returns the text contained in this <code>TextComponent</code> in terms of the content type of this editor
Returns true if a viewport should always force the width of this <code>Scrollable</code> to match the width of the viewport
Returns true if a viewport should always force the height of this <code>Scrollable</code> to match the height of the viewport
Returns a string representation of this <code>JEditorPane</code>
Gets the AccessibleContext associated with this JEditorPane
Gets the accessibleDescription property of this object
Gets the state set of this object
Returns the number of accessible children of the object
Returns the specified Accessible child of the object
Returns the Accessible child, if one exists, contained at the local coordinate Point
Returns the number of links within this hypertext doc
Returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index
Returns the index into an array of hyperlinks that index
Returns the contiguous text within the document that is associated with this hyperlink
Since the document a link is associated with may have changed, this method returns whether this Link is valid anymore (with respect to the document it references)
Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the "default" action of this LINK object (e
Perform the specified Action on the object
Return a String description of this particular link action
Returns a URL object that represents the link
Return an object that represents the link anchor, as appropriate for that link
Get the index with the hypertext document at which this link begins
Get the index with the hypertext document at which this link ends
Performs common constructor initialization and setup
Sets the <code>dragEnabled</code> property, which must be <code>true</code> to enable automatic drag handling (the first part of drag and drop) on this component
Gets the value of the <code>dragEnabled</code> property
Returns the selected file
Sets the selected file
Returns a list of selected files if the file chooser is set to allow multiple selection
Sets the list of selected files if the file chooser is set to allow multiple selection
Returns the current directory
Sets the current directory
Changes the directory to be set to the parent of the current directory
Tells the UI to rescan its files list from the current directory
Makes sure that the specified file is viewable, and not hidden
Pops up an "Open File" file chooser dialog
Pops up a "Save File" file chooser dialog
Pops a custom file chooser dialog with a custom approve button
Creates and returns a new <code>JDialog</code> wrapping <code>this</code> centered on the <code>parent</code> in the <code>parent</code>'s frame
Returns the value of the <code>controlButtonsAreShown</code> property
Sets the property that indicates whether the <i>approve</i> and <i>cancel</i> buttons are shown in the file chooser
Returns the type of this dialog
Sets the type of this dialog
Sets the string that goes in the <code>JFileChooser</code> window's title bar
Gets the string that goes in the <code>JFileChooser</code>'s titlebar
Sets the tooltip text used in the <code>ApproveButton</code>
Returns the tooltip text used in the <code>ApproveButton</code>
Returns the approve button's mnemonic
Sets the approve button's mnemonic using a numeric keycode
Sets the approve button's mnemonic using a character
Sets the text used in the <code>ApproveButton</code> in the <code>FileChooserUI</code>
Returns the text used in the <code>ApproveButton</code> in the <code>FileChooserUI</code>
Gets the list of user choosable file filters
Adds a filter to the list of user choosable file filters
Removes a filter from the list of user choosable file filters
Resets the choosable file filter list to its starting state
Returns the <code>AcceptAll</code> file filter
Returns whether the <code>AcceptAll FileFilter</code> is used
Determines whether the <code>AcceptAll FileFilter</code> is used as an available choice in the choosable filter list
Returns the accessory component
Sets the accessory component
Sets the <code>JFileChooser</code> to allow the user to just select files, just select directories, or select both files and directories
Returns the current file-selection mode
Convenience call that determines if files are selectable based on the current file selection mode
Convenience call that determines if directories are selectable based on the current file selection mode
Sets the file chooser to allow multiple file selections
Returns true if multiple files can be selected
Returns true if hidden files are not shown in the file chooser; otherwise, returns false
Sets file hiding on or off
Sets the current file filter
Returns the currently selected file filter
Sets the file view to used to retrieve UI information, such as the icon that represents a file or the type description of a file
Returns the current file view
Returns the filename
Returns the file description
Returns the file type
Returns the icon for this file or type of file, depending on the system
Returns true if the file (directory) can be visited
Returns true if the file should be displayed
Sets the file system view that the <code>JFileChooser</code> uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives
Returns the file system view
Called by the UI when the user hits the Approve button (labeled "Open" or "Save", by default)
Called by the UI when the user chooses the Cancel button
Adds an <code>ActionListener</code> to the file chooser
Removes an <code>ActionListener</code> from the file chooser
Returns an array of all the action listeners registered on this file chooser
Notifies all listeners that have registered interest for notification on this event type
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the L&amp;F class that renders this component
Gets the UI object which implements the L&amp;F for this component
Returns a string representation of this <code>JFileChooser</code>
Gets the AccessibleContext associated with this JFileChooser
Gets the role of this object
Sets the behavior when focus is lost
Returns the behavior when focus is lost
Sets the <code>AbstractFormatterFactory</code>
Returns the current <code>AbstractFormatterFactory</code>
Sets the current <code>AbstractFormatter</code>
Returns the <code>AbstractFormatter</code> that is used to format and parse the current value
Sets the value that will be formatted by an <code>AbstractFormatter</code> obtained from the current <code>AbstractFormatterFactory</code>
Returns the last valid value
Forces the current value to be taken from the <code>AbstractFormatter</code> and set as the current value
Returns true if the current value being edited is valid
Invoked when the user inputs an invalid value
Processes any input method events, such as <code>InputMethodEvent
Processes any focus events, such as <code>FocusEvent
Fetches the command list for the editor
Gets the class ID for a UI
Associates the editor with a text document
Returns an <code>AbstractFormatter</code> that can handle formatting of the passed in <code>JFormattedTextField</code>
Installs the <code>AbstractFormatter</code> onto a particular <code>JFormattedTextField</code>
Uninstalls any state the <code>AbstractFormatter</code> may have installed on the <code>JFormattedTextField</code>
Parses <code>text</code> returning an arbitrary Object
Returns the string value to display for <code>value</code>
Returns the current <code>JFormattedTextField</code> the <code>AbstractFormatter</code> is installed on
This should be invoked when the user types an invalid character
Invoke this to update the <code>editValid</code> property of the <code>JFormattedTextField</code>
Subclass and override if you wish to provide a custom set of <code>Action</code>s
Subclass and override if you wish to provide a <code>DocumentFilter</code> to restrict what can be input
Subclass and override if you wish to provide a filter to restrict where the user can navigate to
Clones the <code>AbstractFormatter</code>
Called by the constructors to init the <code>JFrame</code> properly
Called by the constructor methods to create the default <code>rootPane</code>
Processes window events occurring on this component
Sets the operation that will happen by default when the user initiates a "close" on this frame
Returns the operation that occurs when the user initiates a "close" on this frame
Sets the {@code transferHandler} property, which is a mechanism to support transfer of data into this component
Gets the <code>transferHandler</code> property
Just calls <code>paint(g)</code>
Sets the menubar for this frame
Returns the menubar set on this frame
Returns whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Sets whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Adds the specified child <code>Component</code>
Removes the specified component from the container
Sets the <code>LayoutManager</code>
Returns the <code>rootPane</code> object for this frame
Sets the <code>rootPane</code> property
{@inheritDoc}
Returns the <code>contentPane</code> object for this frame
Sets the <code>contentPane</code> property
Returns the <code>layeredPane</code> object for this frame
Sets the <code>layeredPane</code> property
Returns the <code>glassPane</code> object for this frame
Sets the <code>glassPane</code> property
{@inheritDoc}
Repaints the specified rectangle of this component within <code>time</code> milliseconds
Provides a hint as to whether or not newly created <code>JFrame</code>s should have their Window decorations (such as borders, widgets to close the window, title
Returns true if newly created <code>JFrame</code>s should have their Window decorations provided by the current look and feel
Returns a string representation of this <code>JFrame</code>
Gets the AccessibleContext associated with this JFrame
Get the accessible name of this object
Get the state of this object
Called by the constructor to set up the <code>JRootPane</code>
Returns the look-and-feel object that renders this component
Sets the UI delegate for this <code>JInternalFrame</code>
Notification from the <code>UIManager</code> that the look and feel has changed
Returns the name of the look-and-feel class that renders this component
Returns whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Sets whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Adds the specified child <code>Component</code>
Removes the specified component from the container
Ensures that, by default, the layout of this component cannot be set
Returns the current <code>JMenuBar</code> for this <code>JInternalFrame</code>, or <code>null</code> if no menu bar has been set
Returns the current <code>JMenuBar</code> for this <code>JInternalFrame</code>, or <code>null</code> if no menu bar has been set
Sets the <code>menuBar</code> property for this <code>JInternalFrame</code>
Sets the <code>menuBar</code> property for this <code>JInternalFrame</code>
Returns the content pane for this internal frame
Sets this <code>JInternalFrame</code>'s <code>contentPane</code> property
Returns the layered pane for this internal frame
Sets this <code>JInternalFrame</code>'s <code>layeredPane</code> property
Returns the glass pane for this internal frame
Sets this <code>JInternalFrame</code>'s <code>glassPane</code> property
Returns the <code>rootPane</code> object for this internal frame
Sets the <code>rootPane</code> property for this <code>JInternalFrame</code>
Sets whether this <code>JInternalFrame</code> can be closed by some user action
Returns whether this <code>JInternalFrame</code> can be closed by some user action
Returns whether this <code>JInternalFrame</code> is currently closed
Closes this internal frame if the argument is <code>true</code>
Sets whether the <code>JInternalFrame</code> can be resized by some user action
Returns whether the <code>JInternalFrame</code> can be resized by some user action
Sets the <code>iconable</code> property, which must be <code>true</code> for the user to be able to make the <code>JInternalFrame</code> an icon
Gets the <code>iconable</code> property, which by default is <code>false</code>
Returns whether the <code>JInternalFrame</code> is currently iconified
Iconifies or de-iconifies this internal frame, if the look and feel supports iconification
Sets the <code>maximizable</code> property, which determines whether the <code>JInternalFrame</code> can be maximized by some user action
Gets the value of the <code>maximizable</code> property
Returns whether the <code>JInternalFrame</code> is currently maximized
Maximizes and restores this internal frame
Returns the title of the <code>JInternalFrame</code>
Sets the <code>JInternalFrame</code> title
Selects or deselects the internal frame if it's showing
Returns whether the <code>JInternalFrame</code> is the currently "selected" or active frame
Sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner)
Returns the image displayed in the title bar of this internal frame (usually in the top-left corner)
Convenience method that moves this component to position 0 if its parent is a <code>JLayeredPane</code>
Convenience method that moves this component to position -1 if its parent is a <code>JLayeredPane</code>
Returns the last <code>Cursor</code> that was set by the <code>setCursor</code> method that is not a resizable <code>Cursor</code>
{@inheritDoc}
Convenience method for setting the layer attribute of this component
Convenience method for setting the layer attribute of this component
Convenience method for getting the layer attribute of this component
Convenience method that searches the ancestor hierarchy for a <code>JDesktop</code> instance
Sets the <code>JDesktopIcon</code> associated with this <code>JInternalFrame</code>
Returns the <code>JDesktopIcon</code> used when this <code>JInternalFrame</code> is iconified
If the <code>JInternalFrame</code> is not in maximized state, returns <code>getBounds()</code>; otherwise, returns the bounds that the <code>JInternalFrame</code> would be restored to
Sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state
If this <code>JInternalFrame</code> is active, returns the child that has focus
Returns the child component of this <code>JInternalFrame</code> that will receive the focus when this <code>JInternalFrame</code> is selected
Requests the internal frame to restore focus to the last subcomponent that had focus
Moves and resizes this component
Adds the specified listener to receive internal frame events from this internal frame
Removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame
Returns an array of all the <code>InternalFrameListener</code>s added to this <code>JInternalFrame</code> with <code>addInternalFrameListener</code>
Fires an internal frame event
Fires an <code>INTERNAL_FRAME_CLOSING</code> event and then performs the action specified by the internal frame's default close operation
Sets the operation that will happen by default when the user initiates a "close" on this internal frame
Returns the default operation that occurs when the user initiates a "close" on this internal frame
Causes subcomponents of this <code>JInternalFrame</code> to be laid out at their preferred size
If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it
Makes this internal frame invisible, unselected, and closed
Brings this internal frame to the front
Sends this internal frame to the back
Does nothing because <code>JInternalFrame</code>s must always be roots of a focus traversal cycle
Always returns <code>true</code> because all <code>JInternalFrame</code>s must be roots of a focus traversal cycle
Always returns <code>null</code> because <code>JInternalFrame</code>s must always be roots of a focus traversal cycle
Gets the warning string that is displayed with this internal frame
Returns a string representation of this <code>JInternalFrame</code>
Overridden to allow optimized painting when the internal frame is being dragged
Gets the <code>AccessibleContext</code> associated with this <code>JInternalFrame</code>
Get the accessible name of this object
Get the role of this object
Gets the AccessibleValue associated with this object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Returns the look-and-feel object that renders this component
Sets the look-and-feel object that renders this component
Returns the <code>JInternalFrame</code> that this <code>DesktopIcon</code> is associated with
Sets the <code>JInternalFrame</code> with which this <code>DesktopIcon</code> is associated
Convenience method to ask the icon for the <code>Desktop</code> object it belongs to
Notification from the <code>UIManager</code> that the look and feel has changed
Returns the name of the look-and-feel class that renders this component
Gets the AccessibleContext associated with this JDesktopIcon
Gets the role of this object
Gets the AccessibleValue associated with this object
Gets the value of this object as a <code>Number</code>
Sets the value of this object as a <code>Number</code>
Gets the minimum value of this object as a <code>Number</code>
Gets the maximum value of this object as a <code>Number</code>
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the l&amp;f class that renders this component
Returns the text string that the label displays
Defines the single line of text this component will display
Returns the graphic image (glyph, icon) that the label displays
Defines the icon this component will display
Returns the icon used by the label when it's disabled
Set the icon to be displayed if this JLabel is "disabled" (JLabel
Specify a keycode that indicates a mnemonic key
Specifies the displayedMnemonic as a char value
Return the keycode that indicates a mnemonic key
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character
Verify that key is a legal value for the horizontalAlignment properties
Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties
Returns the amount of space between the text and the icon displayed in this label
If both the icon and text properties are set, this property defines the space between them
Returns the alignment of the label's contents along the Y axis
Sets the alignment of the label's contents along the Y axis
Returns the alignment of the label's contents along the X axis
Sets the alignment of the label's contents along the X axis
Returns the vertical position of the label's text, relative to its image
Sets the vertical position of the label's text, relative to its image
Returns the horizontal position of the label's text, relative to its image
Sets the horizontal position of the label's text, relative to its image
This is overridden to return false if the current Icon's Image is not equal to the passed in Image <code>img</code>
Returns a string representation of this JLabel
Get the component this is labelling
Set the component this is labelling
Get the AccessibleContext of this object
Get the accessible name of this object
Get the role of this object
Get the AccessibleIcons associated with this object if one or more exist
Get the AccessibleRelationSet associated with this object if one exists
Given a point in local coordinates, return the zero-based index of the character under that Point
Returns the bounding box of the character at the given index in the string
Return the number of characters (valid indicies)
Return the zero-based offset of the caret
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Return the AttributeSet for a given character at a given index
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Returns the tool tip text
Returns the titled border text
Returns key bindings associated with this object
Returns the {@code JLayer}'s view component or {@code null}
Sets the {@code JLayer}'s view component, which can be {@code null}
Sets the {@link javax
Returns the {@link javax
Returns the {@code JLayer}'s glassPane component or {@code null}
Sets the {@code JLayer}'s glassPane component, which can be {@code null}
Called by the constructor methods to create a default {@code glassPane}
Sets the layout manager for this container
A non-{@code null} border, or non-zero insets, isn't supported, to prevent the geometry of this component from becoming complex enough to inhibit subclassing of {@code LayerUI} class
This method is not supported by {@code JLayer} and always throws {@code UnsupportedOperationException}
{@inheritDoc}
{@inheritDoc}
Always returns {@code true} to cause painting to originate from {@code JLayer}, or one of its ancestors
Delegates its functionality to the {@link javax
Delegates all painting to the {@link javax
This method is empty, because all painting is done by {@link #paint(Graphics)} and {@link javax
The {@code JLayer} overrides the default implementation of this method (in {@code JComponent}) to return {@code false}
{@inheritDoc}
Enables the events from JLayer and <b>all its descendants</b> defined by the specified event mask parameter to be delivered to the {@link LayerUI#eventDispatched(AWTEvent, JLayer)} method
Returns the bitmap of event mask to receive by this {@code JLayer} and its {@code LayerUI}
Delegates its functionality to the {@link javax
Returns the preferred size of the viewport for a view component
Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation
Returns {@code false} to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport
Returns {@code false} to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport
Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation
{@inheritDoc}
{@inheritDoc}
Delegates its functionality to the {@link javax
Gets the AccessibleContext associated with this {@code JLayer}
Remove the indexed component from this pane
Removes all the components from this container
Returns false if components in the pane can overlap, which makes optimized drawing impossible
Sets the layer property on a JComponent
Gets the layer property for a JComponent, it does not cause any side effects like setLayer()
Convenience method that returns the first JLayeredPane which contains the specified component
Sets the layer attribute on the specified component, making it the bottommost component in that layer
Sets the layer attribute for the specified component and also sets its position within that layer
Returns the layer attribute for the specified Component
Returns the index of the specified Component
Moves the component to the top of the components in its current layer (position 0)
Moves the component to the bottom of the components in its current layer (position -1)
Moves the component to <code>position</code> within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position
Get the relative position of the component within its layer
Returns the highest layer value from all current children
Returns the lowest layer value from all current children
Returns the number of children currently in the specified layer
Returns an array of the components in the specified layer
Paints this JLayeredPane within the specified graphics context
Returns the hashtable that maps components to layers
Returns the Integer object associated with a specified layer
Primitive method that determines the proper location to insert a new child based on layer and position requests
Returns a string representation of this JLayeredPane
Gets the AccessibleContext associated with this JLayeredPane
Get the role of this object
Returns the {@code ListUI}, the look and feel object that renders this component
Sets the {@code ListUI}, the look and feel object that renders this component
Resets the {@code ListUI} property by setting it to the value provided by the current look and feel
Returns {@code "ListUI"}, the <code>UIDefaults</code> key used to look up the name of the {@code javax
Returns the "prototypical" cell value -- a value used to calculate a fixed width and height for cells
Sets the {@code prototypeCellValue} property, and then (if the new value is {@code non-null}), computes the {@code fixedCellWidth} and {@code fixedCellHeight} properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size
Returns the value of the {@code fixedCellWidth} property
Sets a fixed value to be used for the width of every cell in the list
Returns the value of the {@code fixedCellHeight} property
Sets a fixed value to be used for the height of every cell in the list
Returns the object responsible for painting list items
Sets the delegate that is used to paint each cell in the list
Returns the color used to draw the foreground of selected items
Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics
Returns the color used to draw the background of selected items
Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells
Returns the value of the {@code visibleRowCount} property
Sets the {@code visibleRowCount} property, which has different meanings depending on the layout orientation: For a {@code VERTICAL} layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells
Returns the layout orientation property for the list: {@code VERTICAL} if the layout is a single column of cells, {@code VERTICAL_WRAP} if the layout is "newspaper style" with the content flowing vertically then horizontally, or {@code HORIZONTAL_WRAP} if the layout is "newspaper style" with the content flowing horizontally then vertically
Defines the way list cells are layed out
Returns the smallest list index that is currently visible
Returns the largest list index that is currently visible
Scrolls the list within an enclosing viewport to make the specified cell completely visible
Turns on or off automatic drag handling
Returns whether or not automatic drag handling is enabled
Sets the drop mode for this component
Returns the drop mode for this component
Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or {@code null} if no location is to currently be shown
Returns the next list element whose {@code toString} value starts with the given prefix
Returns the tooltip text to be used for the given event
Returns the cell index closest to the given location in the list's coordinate system
Returns the origin of the specified item in the list's coordinate system
Returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices
Returns the data model that holds the list of items displayed by the <code>JList</code> component
Sets the model that represents the contents or "value" of the list, notifies property change listeners, and then clears the list's selection
Constructs a read-only <code>ListModel</code> from an array of items, and calls {@code setModel} with this model
Constructs a read-only <code>ListModel</code> from a <code>Vector</code> and calls {@code setModel} with this model
Returns an instance of {@code DefaultListSelectionModel}; called during construction to initialize the list's selection model property
Returns the current selection model
Notifies {@code ListSelectionListener}s added directly to the list of selection changes made to the selection model
Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes
Removes a selection listener from the list
Returns an array of all the {@code ListSelectionListener}s added to this {@code JList} by way of {@code addListSelectionListener}
Sets the <code>selectionModel</code> for the list to a non-<code>null</code> <code>ListSelectionModel</code> implementation
Sets the selection mode for the list
Returns the current selection mode for the list
Returns the anchor selection index
Returns the lead selection index
Returns the smallest selected cell index, or {@code -1} if the selection is empty
Returns the largest selected cell index, or {@code -1} if the selection is empty
Returns {@code true} if the specified index is selected, else {@code false}
Returns {@code true} if nothing is selected, else {@code false}
Clears the selection; after calling this method, {@code isSelectionEmpty} will return {@code true}
Selects the specified interval
Sets the selection to be the union of the specified interval with current selection
Sets the selection to be the set difference of the specified interval and the current selection
Sets the selection model's {@code valueIsAdjusting} property
Returns the value of the selection model's {@code isAdjusting} property
Returns an array of all of the selected indices, in increasing order
Selects a single cell
Changes the selection to be the set of indices specified by the given array
Returns an array of all the selected values, in increasing order based on their indices in the list
Returns a list of all the selected items, in increasing order based on their indices in the list
Returns the smallest selected cell index; <i>the selection</i> when only a single item is selected in the list
Returns the value for the smallest selected cell index; <i>the selected value</i> when only a single item is selected in the list
Selects the specified object from the list
Computes the size of viewport needed to display {@code visibleRowCount} rows
Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling)
Returns the distance to scroll to expose the next or previous block
Returns {@code true} if this {@code JList} is displayed in a {@code JViewport} and the viewport is wider than the list's preferred width, or if the layout orientation is {@code HORIZONTAL_WRAP} and {@code visibleRowCount <= 0}; otherwise returns {@code false}
Returns {@code true} if this {@code JList} is displayed in a {@code JViewport} and the viewport is taller than the list's preferred height, or if the layout orientation is {@code VERTICAL_WRAP} and {@code visibleRowCount <= 0}; otherwise returns {@code false}
Returns a {@code String} representation of this {@code JList}
Gets the {@code AccessibleContext} associated with this {@code JList}
Returns the index where dropped data should be placed in the list
Returns whether or not this location represents an insert location
Returns a string representation of this drop location
Property Change Listener change method
List Selection Listener value change method
List Data Listener interval added method
List Data Listener interval removed method
List Data Listener contents changed method
Get the state set of this object
Get the role of this object
Returns the <code>Accessible</code> child contained at the local coordinate <code>Point</code>, if one exists
Returns the number of accessible children in the object
Return the nth Accessible child of the object
Get the AccessibleSelection associated with this object
Returns the number of items currently selected
Returns an Accessible representing the specified selected item in the object
Returns true if the current child of this object is selected
Adds the specified selected item in the object to the object's selection
Removes the specified selected item in the object from the object's selection
Clears the selection in the object, so that nothing in the object is selected
Causes every selected item in the object to be selected if the object supports multiple selections
Get the AccessibleContext for this object
Get the AccessibleComponent associated with this object
Returns the icon for the element renderer, as the only item of an array of <code>AccessibleIcon</code>s or a <code>null</code> array if the renderer component contains no icons
Resets the UI property with a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Sets the data model for the "menu button" -- the label that the user clicks to open or close the menu
Returns true if the menu is currently selected (highlighted)
Sets the selection status of the menu
Returns true if the menu's popup window is visible
Sets the visibility of the menu's popup
Computes the origin for the <code>JMenu</code>'s popup menu
Returns the suggested delay, in milliseconds, before submenus are popped up or down
Sets the suggested delay before the menu's <code>PopupMenu</code> is popped up or down
Sets the location of the popup component
Appends a menu item to the end of this menu
Appends a component to the end of this menu
Adds the specified component to this container at the given position
Creates a new menu item with the specified text and appends it to the end of this menu
Creates a new menu item attached to the specified <code>Action</code> object and appends it to the end of this menu
Factory method which creates the <code>JMenuItem</code> for <code>Action</code>s added to the <code>JMenu</code>
Returns a properly configured <code>PropertyChangeListener</code> which updates the control as changes to the <code>Action</code> occur
Appends a new separator to the end of the menu
Inserts a new menu item with the specified text at a given position
Inserts the specified <code>JMenuitem</code> at a given position
Inserts a new menu item attached to the specified <code>Action</code> object at a given position
Inserts a separator at the specified position
Returns the <code>JMenuItem</code> at the specified position
Returns the number of items on the menu, including separators
Returns true if the menu can be torn off
Removes the specified menu item from this menu
Removes the menu item at the specified index from this menu
Removes the component <code>c</code> from this menu
Removes all menu items from this menu
Returns the number of components on the menu
Returns the component at position <code>n</code>
Returns an array of <code>Component</code>s of the menu's subcomponents
Returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar
Returns true if the specified component exists in the submenu hierarchy
Returns the popupmenu associated with this menu
Adds a listener for menu events
Removes a listener for menu events
Returns an array of all the <code>MenuListener</code>s added to this JMenu with addMenuListener()
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Creates a window-closing listener for the popup
Messaged when the menubar selection changes to activate or deactivate this menu
Returns an array of <code>MenuElement</code>s containing the submenu for this menu component
Returns the <code>java
Sets the <code>ComponentOrientation</code> property of this menu and all components contained within it
<code>setAccelerator</code> is not defined for <code>JMenu</code>
Processes key stroke events such as mnemonics and accelerators
Programmatically performs a "click"
Returns a string representation of this <code>JMenu</code>
Gets the AccessibleContext associated with this JMenu
Deselect the menu when the popup is closed from outside
Returns the number of accessible children in the object
Returns the nth Accessible child of the object
Get the role of this object
Get the AccessibleSelection associated with this object
Returns 1 if a sub-menu is currently selected in this menu
Returns the currently selected sub-menu if one is selected, otherwise null (there can only be one selection, and it can only be a sub-menu, as otherwise menu items don't remain selected)
Returns true if the current child of this object is selected (that is, if this child is a popped-up submenu)
Selects the <code>i</code>th menu in the menu
Removes the nth item from the selection
Clears the selection in the object, so that nothing in the object is selected
Normally causes every selected item in the object to be selected if the object supports multiple selections
Returns the menubar's current UI
Sets the L&amp;F object that renders this component
Resets the UI property with a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Returns the model object that handles single selections
Sets the model object to handle single selections
Appends the specified menu to the end of the menu bar
Returns the menu at the specified position in the menu bar
Returns the number of items in the menu bar
Sets the help menu that appears when the user selects the "help" option in the menu bar
Gets the help menu for the menu bar
Returns the component at the specified index
Returns the index of the specified component
Sets the currently selected component, producing a a change to the selection model
Returns true if the menu bar currently has a component selected
Returns true if the menu bars border should be painted
Sets whether the border should be painted
Paints the menubar's border if <code>BorderPainted</code> property is true
Sets the margin between the menubar's border and its menus
Returns the margin between the menubar's border and its menus
Implemented to be a <code>MenuElement</code> -- does nothing
Implemented to be a <code>MenuElement</code> -- does nothing
Implemented to be a <code>MenuElement</code> -- does nothing
Implemented to be a <code>MenuElement</code> -- returns the menus in this menu bar
Implemented to be a <code>MenuElement</code>
Returns a string representation of this <code>JMenuBar</code>
Gets the AccessibleContext associated with this JMenuBar
Subclassed to check all the child menus
Overrides <code>JComponent
Overrides <code>JComponent
Get the accessible state set of this object
Get the role of this object
Get the AccessibleSelection associated with this object
Returns 1 if a menu is currently selected in this menu bar
Returns the currently selected menu if one is selected, otherwise null
Returns true if the current child of this object is selected
Selects the nth menu in the menu bar, forcing it to pop up
Removes the nth selected item in the object from the object's selection
Clears the selection in the object, so that nothing in the object is selected
Normally causes every selected item in the object to be selected if the object supports multiple selections
{@inheritDoc}
Initializes the menu item with the specified text and icon
Sets the look and feel object that renders this component
Resets the UI property with a value from the current look and feel
Returns the suffix used to construct the name of the L&amp;F class used to render this component
Identifies the menu item as "armed"
Returns whether the menu item is "armed"
Enables or disables the menu item
Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy
Returns the <code>KeyStroke</code> which serves as an accelerator for the menu item
{@inheritDoc}
{@inheritDoc}
Processes a mouse event forwarded from the <code>MenuSelectionManager</code> and changes the menu selection, if necessary, by using the <code>MenuSelectionManager</code>'s API
Processes a key event forwarded from the <code>MenuSelectionManager</code> and changes the menu selection, if necessary, by using <code>MenuSelectionManager</code>'s API
Handles mouse drag in a menu
Handles a keystroke in a menu
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Called by the <code>MenuSelectionManager</code> when the <code>MenuElement</code> is selected or unselected
This method returns an array containing the sub-menu components for this menu component
Returns the <code>java
Adds a <code>MenuDragMouseListener</code> to the menu item
Removes a <code>MenuDragMouseListener</code> from the menu item
Returns an array of all the <code>MenuDragMouseListener</code>s added to this JMenuItem with addMenuDragMouseListener()
Adds a <code>MenuKeyListener</code> to the menu item
Removes a <code>MenuKeyListener</code> from the menu item
Returns an array of all the <code>MenuKeyListener</code>s added to this JMenuItem with addMenuKeyListener()
Returns a string representation of this <code>JMenuItem</code>
Returns the <code>AccessibleContext</code> associated with this <code>JMenuItem</code>
Get the role of this object
Supports the change listener interface and fires property changes
<p>Make a proxy for a Standard MBean in a local or remote MBean Server
<p>Make a proxy for a Standard MBean in a local or remote MBean Server that may also support the methods of {@link NotificationEmitter}
Make a proxy for an MXBean in a local or remote MBean Server
<p>Make a proxy for an MXBean in a local or remote MBean Server that may also support the methods of {@link NotificationEmitter}
<p>Test whether an interface is an MXBean interface
<p>The address of this object
<p>Authenticates the <code>MBeanServerConnection</code> client with the given client credentials
<p>The connection ID to which this notification pertains
<p>Establishes the connection to the connector server
<p>Establishes the connection to the connector server
<p>Returns an <code>MBeanServerConnection</code> object representing a remote MBean server
<p>Returns an <code>MBeanServerConnection</code> object representing a remote MBean server on which operations are performed on behalf of the supplied delegation subject
<p>Closes the client connection to its server
<p>Adds a listener to be informed of changes in connection status
<p>Removes a listener from the list to be informed of changes in status
<p>Removes a listener from the list to be informed of changes in status
<p>Gets this connection's ID from the connector server
<p>Creates a connection to the connector server at the given address
<p>Creates a connection to the connector server at the given address
<p>Creates a connector client for the connector server at the given address
<p>Creates a new connector client that is ready to connect to the connector server at the given address
<p>Returns the MBean server that this connector server is attached to
<p>Returns a client stub for this connector server
<p>Returns an array indicating the notifications that this MBean sends
<p>Called by a subclass when a new client connection is opened
<p>Called by a subclass when a client connection is closed normally
<p>Called by a subclass when a client connection fails
<p>Called by an MBean server when this connector server is registered in that MBean server
<p>Called by an MBean server when this connector server is unregistered from that MBean server
<p>Creates a connector server at the given address
<p>Activates the connector server, that is, starts listening for client connections
<p>Deactivates the connector server, that is, stops listening for client connections
<p>Determines whether the connector server is active
<p>Inserts an object that intercepts requests for the MBean server that arrive through this connector server
<p>The list of IDs for currently-open connections to this connector server
<p>The address of this connector server
<p>The attributes for this connector server
<p>Returns a client stub for this connector server
<p>Creates a new connector server at the given address
Tell whether {@link MBeanServerInterceptor}s are enabled on this object
Return the MBeanInstantiator associated to this MBeanServer
Instantiates and registers an MBean in the MBean server
Instantiates and registers an MBean in the MBean server
Instantiates and registers an MBean in the MBean server
Instantiates and registers an MBean in the MBean server
Registers a pre-existing object as an MBean with the MBean server
De-registers an MBean from the MBean server
Gets the <CODE>ObjectInstance</CODE> for a given MBean registered with the MBean server
Gets MBeans controlled by the MBean server
Gets the names of MBeans controlled by the MBean server
Checks whether an MBean, identified by its object name, is already registered with the MBean server
Returns the number of MBeans registered in the MBean server
Gets the value of a specific attribute of a named MBean
Enables the values of several attributes of a named MBean
Sets the value of a specific attribute of a named MBean
Sets the values of several attributes of a named MBean
Invokes an operation on an MBean
Returns the default domain used for naming the MBean
Adds a listener to a registered MBean
Adds a listener to a registered MBean
This method discovers the attributes and operations that an MBean exposes for management
Instantiates an object using the list of all class loaders registered in the MBean server (using its {@link javax
Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>
Instantiates an object using the list of all class loaders registered in the MBean server (using its {@link javax
Instantiates an object
Returns true if the MBean specified is an instance of the specified class, false otherwise
De-serializes a byte array in the context of the class loader of an MBean
De-serializes a byte array in the context of a given MBean class loader
De-serializes a byte array in the context of a given MBean class loader
Return the MBeanServerInterceptor
Set the MBeanServerInterceptor
<p>Return the {@link java
<p>Return the named {@link java
<p>Return the ClassLoaderRepository for that MBeanServer
This method creates a new MBeanServerDelegate for a new MBeanServer
This method creates a new MBeanServer implementation object
This method creates a new MBeanServerDelegate for a new MBeanServer
This method creates a new MBeanServer implementation object
Authenticate the <code>MBeanServerConnection</code> client with the given client credentials
Returns the name of this principal
Returns a string representation of this <code>JMXPrincipal</code>
Compares the specified Object with this <code>JMXPrincipal</code> for equality
Returns a hash code for this <code>JMXPrincipal</code>
<p>The protocol part of the Service URL
<p>The host part of the Service URL
<p>The port of the Service URL
<p>The URL Path part of the Service URL
<p>The string representation of this Service URL
<p>Indicates whether some other object is equal to this one
Get the current AccessControlContext combined with the supplied subject
Get the AccessControlContext of the domain combiner created with the supplied subject, i
Initialize this <code>LoginModule</code>
<p> Prompt for username and password
Abstract method to commit the authentication process (phase 2)
<p> This method is called if the LoginContext's overall authentication failed
Logout a user
Returns the CORBA object for a Remote object
Creates and returns a copy of this <code>JobAttributes</code>
Sets all of the attributes of this <code>JobAttributes</code> to the same values as the attributes of obj
Returns the number of copies the application should render for jobs using these attributes
Specifies the number of copies the application should render for jobs using these attributes
Sets the number of copies the application should render for jobs using these attributes to the default
Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of <code>getPageRanges</code>, or the current selection
Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of <code>getPageRanges</code>, or the current selection
Specifies whether output will be to a printer or a file for jobs using these attributes
Specifies whether output will be to a printer or a file for jobs using these attributes
Returns whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed
Specifies whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed
Specifies the file name for the output file for jobs using these attributes
Specifies the file name for the output file for jobs using these attributes
Returns, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed
Specifies, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed
Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes
Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes
Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes
Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes
Specifies the handling of multiple copies, including collation, for jobs using these attributes
Specifies the handling of multiple copies, including collation, for jobs using these attributes
Sets the handling of multiple copies, including collation, for jobs using these attributes to the default
Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed
Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed
Returns the destination printer for jobs using these attributes
Specifies the destination printer for jobs using these attributes
Returns how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes
Specifies how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes
Sets how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes to the default
Returns, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed
Specifies, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed
Determines whether two JobAttributes are equal to each other
Returns a hash code value for this JobAttributes
Returns a string representation of this JobAttributes
Returns whether this job hold until attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job impressions attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job impressions completed attribute is equivalent tp the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job impressions supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job K octets attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job K octets processed attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job K octets supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job media sheets attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job media sheets completed attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job media sheets supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job message from operator attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job originating user name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job priority attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this job priority supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class JobSheets
Returns the enumeration value table for class JobSheets
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class JobState
Returns the enumeration value table for class JobState
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class JobStateReason
Returns the enumeration value table for class JobStateReason
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Adds the specified element to this job state reasons attribute if it is not already present
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Sets the designated column as the match column for this <code>RowSet</code> object
Sets the designated columns as the match column for this <code>RowSet</code> object
Sets the designated column as the match column for this <code>RowSet</code> object
Sets the designated columns as the match column for this <code>RowSet</code> object
Retrieves the indexes of the match columns that were set for this <code>RowSet</code> object with the method <code>setMatchColumn(int[] columnIdxes)</code>
Retrieves the names of the match columns that were set for this <code>RowSet</code> object with the method <code>setMatchColumn(String [] columnNames)</code>
Unsets the designated column as the match column for this <code>RowSet</code> object
Unsets the designated columns as the match column for this <code>RowSet</code> object
Unsets the designated column as the match column for this <code>RowSet</code> object
Unsets the designated columns as the match columns for this <code>RowSet</code> object
Adds the given <code>RowSet</code> object to this <code>JoinRowSet</code> object
Adds the given <code>RowSet</code> object to this <code>JoinRowSet</code> object and sets the designated column as the match column for the <code>RowSet</code> object
Adds <i>rowset</i> to this <code>JoinRowSet</code> object and sets the designated column as the match column
Adds one or more <code>RowSet</code> objects contained in the given array of <code>RowSet</code> objects to this <code>JoinRowSet</code> object and sets the match column for each of the <code>RowSet</code> objects to the match columns in the given array of column indexes
Adds one or more <code>RowSet</code> objects contained in the given array of <code>RowSet</code> objects to this <code>JoinRowSet</code> object and sets the match column for each of the <code>RowSet</code> objects to the match columns in the given array of column names
Returns a <code>Collection</code> object containing the <code>RowSet</code> objects that have been added to this <code>JoinRowSet</code> object
Returns a <code>String</code> array containing the names of the         <code>RowSet</code> objects added to this <code>JoinRowSet</code>         object
Creates a new <code>CachedRowSet</code> object containing the data in this <code>JoinRowSet</code> object, which can be saved to a data source using the <code>SyncProvider</code> object for the <code>CachedRowSet</code> object
Indicates if CROSS_JOIN is supported by a JoinRowSet implementation
Indicates if INNER_JOIN is supported by a JoinRowSet implementation
Indicates if LEFT_OUTER_JOIN is supported by a JoinRowSet implementation
Indicates if RIGHT_OUTER_JOIN is supported by a JoinRowSet implementation
Indicates if FULL_JOIN is supported by a JoinRowSet implementation
Allow the application to adjust the type of <code>JOIN</code> imposed on tables contained within the JoinRowSet object instance
Return a SQL-like description of the WHERE clause being used in a JoinRowSet object
Returns a <code>int</code> describing the set SQL <code>JOIN</code> type governing this JoinRowSet instance
Shows a question-message dialog requesting input from the user
Shows a question-message dialog requesting input from the user, with the input value initialized to <code>initialSelectionValue</code>
Shows a question-message dialog requesting input from the user parented to <code>parentComponent</code>
Shows a question-message dialog requesting input from the user and parented to <code>parentComponent</code>
Shows a dialog requesting input from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>
Prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified
Brings up an information-message dialog titled "Message"
Brings up a dialog that displays a message using a default icon determined by the <code>messageType</code> parameter
Brings up a dialog displaying a message, specifying all parameters
Brings up a dialog with the options <i>Yes</i>, <i>No</i> and <i>Cancel</i>; with the title, <b>Select an Option</b>
Brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter
Brings up a dialog where the number of choices is determined by the <code>optionType</code> parameter, where the <code>messageType</code> parameter determines the icon to display
Brings up a dialog with a specified icon, where the number of choices is determined by the <code>optionType</code> parameter
Brings up a dialog with a specified icon, where the initial choice is determined by the <code>initialValue</code> parameter and the number of choices is determined by the <code>optionType</code> parameter
Creates and returns a new <code>JDialog</code> wrapping <code>this</code> centered on the <code>parentComponent</code> in the <code>parentComponent</code>'s frame
Creates and returns a new parentless <code>JDialog</code> with the specified title
Brings up an internal confirmation dialog panel
Brings up an internal dialog panel that displays a message using a default icon determined by the <code>messageType</code> parameter
Brings up an internal dialog panel displaying a message, specifying all parameters
Brings up an internal dialog panel with the options <i>Yes</i>, <i>No</i> and <i>Cancel</i>; with the title, <b>Select an Option</b>
Brings up a internal dialog panel where the number of choices is determined by the <code>optionType</code> parameter
Brings up an internal dialog panel where the number of choices is determined by the <code>optionType</code> parameter, where the <code>messageType</code> parameter determines the icon to display
Brings up an internal dialog panel with a specified icon, where the number of choices is determined by the <code>optionType</code> parameter
Brings up an internal dialog panel with a specified icon, where the initial choice is determined by the <code>initialValue</code> parameter and the number of choices is determined by the <code>optionType</code> parameter
Shows an internal question-message dialog requesting input from the user parented to <code>parentComponent</code>
Shows an internal dialog requesting input from the user parented to <code>parentComponent</code> with the dialog having the title <code>title</code> and message type <code>messageType</code>
Prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified
Creates and returns an instance of <code>JInternalFrame</code>
Returns the specified component's <code>Frame</code>
Returns the specified component's desktop pane
Sets the frame to use for class methods in which a frame is not provided
Returns the <code>Frame</code> to use for the class methods in which a frame is not provided
Sets the UI object which implements the {@literal L&F} for this component
Returns the UI object which implements the {@literal L&F} for this component
Notification from the <code>UIManager</code> that the {@literal L&F} has changed
Returns the name of the UI class that implements the {@literal L&F} for this component
Sets the option pane's message-object
Returns the message-object this pane displays
Sets the icon to display
Returns the icon this pane displays
Sets the value the user has chosen
Returns the value the user has selected
Sets the options this pane displays
Returns the choices the user can make
Sets the initial value that is to be enabled -- the <code>Component</code> that has the focus when the pane is initially displayed
Returns the initial value
Sets the option pane's message type
Returns the message type
Sets the options to display
Returns the type of options that are displayed
Sets the input selection values for a pane that provides the user with a list of items to choose from
Returns the input selection values
Sets the input value that is initially displayed as selected to the user
Returns the input value that is displayed as initially selected to the user
Sets the input value that was selected or input by the user
Returns the value the user has input, if <code>wantsInput</code> is true
Returns the maximum number of characters to place on a line in a message
Sets the <code>wantsInput</code> property
Returns the value of the <code>wantsInput</code> property
Requests that the initial value be selected, which will set focus to the initial value
Returns a string representation of this <code>JOptionPane</code>
Returns the <code>AccessibleContext</code> associated with this JOptionPane
Get the role of this object
Resets the UI property with a value from the current look and feel
Returns the look and feel (L&amp;amp;F) object that renders this component
Sets the look and feel (L&amp;F) object that renders this component
Returns a string that specifies the name of the L&amp;F class that renders this component
Returns a string representation of this JPanel
Gets the AccessibleContext associated with this JPanel
Get the role of this object
Returns the name of the L&amp;F class that renders this component
{@inheritDoc}
Returns the character to be used for echoing
Sets the echo character for this <code>JPasswordField</code>
Returns true if this <code>JPasswordField</code> has a character set for echoing
Invokes <code>provideErrorFeedback</code> on the current look and feel, which typically initiates an error beep
Invokes <code>provideErrorFeedback</code> on the current look and feel, which typically initiates an error beep
Returns the text contained in this <code>TextComponent</code>
Fetches a portion of the text represented by the component
Returns the text contained in this <code>TextComponent</code>
Returns a string representation of this <code>JPasswordField</code>
Returns the <code>AccessibleContext</code> associated with this <code>JPasswordField</code>
Gets the role of this object
Gets the <code>AccessibleText</code> for the <code>JPasswordField</code>
Returns the <code>String</code> at a given <code>index</code>
Returns the <code>String</code> after a given <code>index</code>
Returns the <code>String</code> before a given <code>index</code>
Returns the text between two <code>indices</code>
Returns the <code>AccessibleTextSequence</code> at a given <code>index</code>
Returns the <code>AccessibleTextSequence</code> after a given <code>index</code>
Returns the <code>AccessibleTextSequence</code> before a given <code>index</code>
This creates an instance of a JPEGImageDecoder that can be used to decode JPEG Data streams
This creates an instance of a JPEGImageDecoder that can be used to decode JPEG Data streams
This creates an instance of a JPEGImageEncoder that can be used to encode image data as JPEG Data streams
This creates an instance of a JPEGImageEncoder that can be used to encode image data as JPEG Data streams
This is a factory method for creating JPEGEncodeParam objects
This is a factory method for creating JPEGEncodeParam objects
This is a factory method for creating JPEGEncodeParam objects
This is a factory method for creating a JPEGEncodeParam from a JPEGDecodeParam
Get the image width
Get the image height
Return the Horizontal subsampling factor for requested Component
Return the Vertical subsampling factor for requested Component
Returns the coefficient quantization tables or NULL if not defined
Returns the Quantization table for the requested component
Returns the DC Huffman coding table requested or null if not defined
Returns the DC Huffman coding table for the requested component
Returns the AC Huffman coding table requested or null if not defined
Returns the AC Huffman coding table for the requested component
Get the number of the DC Huffman table that will be used for a particular component
Get the number of the AC Huffman table that will be used for a particular component
Get the number of the quantization table that will be used for a particular component
Returns true if the image information in the ParamBlock is currently valid
Returns true if the tables in the ParamBlock are currently valid
Returns true if at least one instance of the marker is present in the Parameter object
Returns a 'byte[][]' associated with the requested marker in the parameter object
Returns the JPEG Encoded color id
Returns the number of components for the current encoding COLOR_ID
Get the MCUs per restart marker
Get the code for pixel size units This value is copied from the APP0 marker
Get the horizontal pixel density This value is copied from the APP0 marker
Get the vertical pixel density This value is copied into the APP0 marker
Set the horizontal subsample factor for the given component
Set the vertical subsample factor for the given component
Sets the coefficient quantization tables at index passed
Sets the DC Huffman coding table at index to the table provided
Sets the AC Huffman coding table at index to the table provided
Sets the mapping between a component and it's DC Huffman Table
Sets the mapping between a component and it's AC Huffman Table
Sets the mapping between a component and it's Quantization Table
Set the flag indicating the validity of the table information in the ParamBlock
Set the flag indicating the validity of the image information in the ParamBlock
Sets the marker data to be written to the output data stream
Appends 'data' to the array of byte[] associated with marker
Set the MCUs per restart, or 0 for no restart markers
Set the pixel size units This value is copied into the APP0 marker (if that marker is written)
Set the horizontal pixel density This value is written into the APP0 marker
Set the vertical pixel density
This creates new Quantization tables that replace the currently installed Quantization tables
Returns an array of <code>short</code>s containing the number of values for each length in the Huffman table
Returns an array of <code>short</code>s containing the values arranged by increasing length of their corresponding codes
Returns a {@code String} representing this Huffman table
Returns the JPEGDecodeParam object that resulted from the most recent decoding event
Sets the JPEGDecodeParam object used to determine the features of the decompression performed on the JPEG encoded data
Get the input stream that decoding will occur from
Decode the JPEG stream that was passed as part of construction
Decodes the current JPEG data stream
Return the stream the Encoder is currenlt associated with
Set the JPEGEncodeParam object that is to be used for future encoding operations
This returns a copy of the current JPEGEncodeParam object, if you want changes to affect the encoding process you must 'set' it back into the encoder (either through setJPEGEncodeParam or by providing the modified param object in the call to encode
This is a factory method for creating JPEGEncodeParam objects
Encode a BufferedImage as a JPEG data stream
Encode a BufferedImage as a JPEG data stream
Returns the 'default' encoded COLOR_ID for a given ColorModel
This is a factory method for creating JPEGEncodeParam objects
This is a factory method for creating JPEGEncodeParam objects
This is a factory method for creating a JPEGEncodeParam from a JPEGDecodeParam
Encode a Raster as a JPEG data stream
Encode a Raster as a JPEG data stream
Called by the native code or other classes to signal a warning
The library has it's own error facility that emits warning messages
Returns <code>true</code> if tables are currently set
Sets the quantization and Huffman tables to use in decoding abbreviated streams
Removes any quantization and Huffman tables that are currently set
Returns a copy of the array of quantization tables set on the most recent call to <code>setDecodeTables</code>, or <code>null</code> if tables are not currently set
Returns a copy of the array of DC Huffman tables set on the most recent call to <code>setDecodeTables</code>, or <code>null</code> if tables are not currently set
Returns a copy of the array of AC Huffman tables set on the most recent call to <code>setDecodeTables</code>, or <code>null</code> if tables are not currently set
Removes any previous compression quality setting
Returns <code>false</code> since the JPEG plug-in only supports lossy compression
Returns <code>true</code> if tables are currently set
Sets the quantization and Huffman tables to use in encoding abbreviated streams
Removes any quantization and Huffman tables that are currently set
Returns a copy of the array of quantization tables set on the most recent call to <code>setEncodeTables</code>, or <code>null</code> if tables are not currently set
Returns a copy of the array of DC Huffman tables set on the most recent call to <code>setEncodeTables</code>, or <code>null</code> if tables are not currently set
Returns a copy of the array of AC Huffman tables set on the most recent call to <code>setEncodeTables</code>, or <code>null</code> if tables are not currently set
Tells the writer to generate optimized Huffman tables for the image as part of the writing process
Returns the value passed into the most recent call to <code>setOptimizeHuffmanTables</code>, or <code>false</code> if <code>setOptimizeHuffmanTables</code> has never been called
Returns a copy of the current quantization table as an array of {@code int}s in natural (not zig-zag) order
Returns a new quantization table where the values are multiplied by <code>scaleFactor</code> and then clamped to the range 1
Returns a {@code String} representing this quantization table
Sets the default value of the <code>lightWeightPopupEnabled</code>  property
Gets the <code>defaultLightWeightPopupEnabled</code> property,  which by default is <code>true</code>
Returns the look and feel (L&amp;F) object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Processes key stroke events such as mnemonics and accelerators
Returns the model object that handles single selections
Sets the model object to handle single selections
Appends the specified menu item to the end of this menu
Creates a new menu item with the specified text and appends it to the end of this menu
Appends a new menu item to the end of the menu which dispatches the specified <code>Action</code> object
Factory method which creates the <code>JMenuItem</code> for <code>Actions</code> added to the <code>JPopupMenu</code>
Returns a properly configured <code>PropertyChangeListener</code> which updates the control as changes to the <code>Action</code> occur
Removes the component at the specified index from this popup menu
Sets the value of the <code>lightWeightPopupEnabled</code> property, which by default is <code>true</code>
Gets the <code>lightWeightPopupEnabled</code> property
Returns the popup menu's label
Sets the popup menu's label
Appends a new separator at the end of the menu
Inserts a menu item for the specified <code>Action</code> object at a given position
Inserts the specified component into the menu at a given position
Adds a <code>PopupMenu</code> listener
Removes a <code>PopupMenu</code> listener
Returns an array of all the <code>PopupMenuListener</code>s added to this JMenuItem with addPopupMenuListener()
Adds a <code>MenuKeyListener</code> to the popup menu
Removes a <code>MenuKeyListener</code> from the popup menu
Returns an array of all the <code>MenuKeyListener</code>s added to this JPopupMenu with addMenuKeyListener()
Notifies <code>PopupMenuListener</code>s that this popup menu will become visible
Notifies <code>PopupMenuListener</code>s that this popup menu will become invisible
Notifies <code>PopupMenuListeners</code> that this popup menu is cancelled
Lays out the container so that it uses the minimum space needed to display its contents
Sets the visibility of the popup menu
Returns true if the popup menu is visible (currently being displayed)
Sets the location of the upper left corner of the popup menu using x, y coordinates
Returns the component which is the 'invoker' of this popup menu
Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed
Displays the popup menu at the position x,y in the coordinate space of the component invoker
Returns the component at the specified index
Returns the index of the specified component
Sets the size of the Popup window using a <code>Dimension</code> object
Sets the size of the Popup window to the specified width and height
Sets the currently selected component,  This will result in a change to the selection model
Checks whether the border should be painted
Sets whether the border should be painted
Paints the popup menu's border if the <code>borderPainted</code> property is <code>true</code>
Returns the margin, in pixels, between the popup menu's border and its containers
Returns a string representation of this <code>JPopupMenu</code>
Gets the AccessibleContext associated with this JPopupMenu
This method is required to conform to the <code>MenuElement</code> interface, but it not implemented
Processes a key event forwarded from the <code>MenuSelectionManager</code> and changes the menu selection, if necessary, by using <code>MenuSelectionManager</code>'s API
Messaged when the menubar selection changes to activate or deactivate this menu
Returns an array of <code>MenuElement</code>s containing the submenu for this menu component
Returns this <code>JPopupMenu</code> component
Returns true if the <code>MouseEvent</code> is considered a popup trigger by the <code>JPopupMenu</code>'s currently installed UI
Get the role of this object
This method gets called when a bound property is changed
Returns the name of the L&amp;F class that renders this component
Returns {@code SwingConstants
Sets the progress bar's orientation to <code>newOrientation</code>, which must be {@code SwingConstants
Returns the value of the <code>stringPainted</code> property
Sets the value of the <code>stringPainted</code> property, which determines whether the progress bar should render a progress string
Returns a {@code String} representation of the current progress
Sets the value of the progress string
Returns the percent complete for the progress bar
Returns the <code>borderPainted</code> property
Sets the <code>borderPainted</code> property, which is <code>true</code> if the progress bar should paint its border
Paints the progress bar's border if the <code>borderPainted</code> property is <code>true</code>
Returns the look-and-feel object that renders this component
Sets the look-and-feel object that renders this component
Resets the UI property to a value from the current look and feel
Returns the name of the look-and-feel class that renders this component
Subclasses that want to handle change events from the model differently can override this to return an instance of a custom <code>ChangeListener</code> implementation
Adds the specified <code>ChangeListener</code> to the progress bar
Removes a <code>ChangeListener</code> from the progress bar
Returns an array of all the <code>ChangeListener</code>s added to this progress bar with <code>addChangeListener</code>
Send a {@code ChangeEvent}, whose source is this {@code JProgressBar}, to all {@code ChangeListener}s that have registered interest in {@code ChangeEvent}s
Returns the data model used by this progress bar
Sets the data model used by the <code>JProgressBar</code>
Returns the progress bar's current {@code value} from the <code>BoundedRangeModel</code>
Returns the progress bar's {@code minimum} value from the <code>BoundedRangeModel</code>
Returns the progress bar's {@code maximum} value from the <code>BoundedRangeModel</code>
Sets the progress bar's current value to {@code n}
Sets the progress bar's minimum value (stored in the progress bar's data model) to <code>n</code>
Sets the progress bar's maximum value (stored in the progress bar's data model) to <code>n</code>
Sets the <code>indeterminate</code> property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode
Returns the value of the <code>indeterminate</code> property
Returns a string representation of this <code>JProgressBar</code>
Gets the <code>AccessibleContext</code> associated with this <code>JProgressBar</code>
Gets the state set of this object
Gets the role of this object
Gets the <code>AccessibleValue</code> associated with this object
Gets the accessible value of this object
Sets the value of this object as a <code>Number</code>
Gets the minimum accessible value of this object
Gets the maximum accessible value of this object
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Returns a string representation of this JRadioButton
Gets the AccessibleContext associated with this JRadioButton
Get the role of this object
Returns the name of the L&amp;F class that renders this component
Returns a string representation of this <code>JRadioButtonMenuItem</code>
Gets the AccessibleContext associated with this JRadioButtonMenuItem
Get the role of this object
{@inheritDoc}
Returns a constant identifying the type of Window decorations the <code>JRootPane</code> is providing
Sets the type of Window decorations (such as borders, widgets for closing a Window, title 
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the L&amp;F class that renders this component
Called by the constructor methods to create the default <code>layeredPane</code>
Called by the constructor methods to create the default <code>contentPane</code>
Called by the constructor methods to create the default <code>glassPane</code>
Called by the constructor methods to create the default <code>layoutManager</code>
Adds or changes the menu bar used in the layered pane
Specifies the menu bar value
Returns the menu bar from the layered pane
Returns the menu bar value
Sets the content pane -- the container that holds the components parented by the root pane
Returns the content pane -- the container that holds the components parented by the root pane
Sets the layered pane for the root pane
Gets the layered pane used by the root pane
Sets a specified <code>Component</code> to be the glass pane for this root pane
Returns the current glass pane for this <code>JRootPane</code>
If a descendant of this <code>JRootPane</code> calls <code>revalidate</code>, validate from here on down
The <code>glassPane</code> and <code>contentPane</code> have the same bounds, which means <code>JRootPane</code> does not tiles its children and this should return false
{@inheritDoc}
{@inheritDoc}
Sets the <code>defaultButton</code> property, which determines the current default button for this <code>JRootPane</code>
Returns the value of the <code>defaultButton</code> property
Overridden to enforce the position of the glass component as the zero child
Returns a string representation of this <code>JRootPane</code>
Gets the <code>AccessibleContext</code> associated with this <code>JRootPane</code>
Returns the amount of space the layout would like to have
Returns the minimum amount of space the layout needs
Returns the maximum amount of space the layout can use
Instructs the layout manager to perform the layout for the specified container
Get the role of this object
Returns the number of accessible children of the object
Returns the specified Accessible child of the object
Sets the {@literal L&F} object that renders this component
Returns the delegate that implements the look and feel for this component
Overrides <code>JComponent
Returns the name of the LookAndFeel class for this component
Returns the component's orientation (horizontal or vertical)
Set the scrollbar's orientation to either VERTICAL or HORIZONTAL
Returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent
Sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent
Returns the amount to change the scrollbar's value by, given a unit up/down request
Sets the unitIncrement property
Returns the amount to change the scrollbar's value by, given a block (usually "page") up/down request
Sets the blockIncrement property
For backwards compatibility with java
For backwards compatibility with java
Returns the scrollbar's value
Sets the scrollbar's value
Returns the scrollbar's extent, aka its "visibleAmount"
Set the model's extent property
Returns the minimum value supported by the scrollbar (usually zero)
Sets the model's minimum property
The maximum value of the scrollbar is maximum - extent
Sets the model's maximum property
True if the scrollbar knob is being dragged
Sets the model's valueIsAdjusting property
Sets the four BoundedRangeModel properties after forcing the arguments to obey the usual constraints: <pre> minimum &le; value &le; value+extent &le; maximum </pre>
Adds an AdjustmentListener
Removes an AdjustmentEvent listener
Returns an array of all the <code>AdjustmentListener</code>s added to this JScrollBar with addAdjustmentListener()
Notify listeners that the scrollbar's model has changed
The scrollbar is flexible along it's scrolling axis and rigid along the other axis
The scrollbar is flexible along it's scrolling axis and rigid along the other axis
Enables the component so that the knob position can be changed
Returns a string representation of this JScrollBar
Gets the AccessibleContext associated with this JScrollBar
Get the state set of this object
Get the role of this object
Get the AccessibleValue associated with this object
Get the accessible value of this object
Set the value of this object as a Number
Get the minimum accessible value of this object
Get the maximum accessible value of this object
Returns the look and feel (L&amp;F) object that renders this component
Sets the <code>ScrollPaneUI</code> object that provides the look and feel (L&amp;F) for this component
Replaces the current <code>ScrollPaneUI</code> object with a version from the current default look and feel
Returns the suffix used to construct the name of the L&amp;F class used to render this component
Sets the layout manager for this <code>JScrollPane</code>
Overridden to return true so that any calls to <code>revalidate</code> on any descendants of this <code>JScrollPane</code> will cause the entire tree beginning with this <code>JScrollPane</code> to be validated
Returns the vertical scroll bar policy value
Determines when the vertical scrollbar appears in the scrollpane
Returns the horizontal scroll bar policy value
Determines when the horizontal scrollbar appears in the scrollpane
Returns the <code>Border</code> object that surrounds the viewport
Adds a border around the viewport
Returns the bounds of the viewport's border
Returns a <code>JScrollPane
Returns the horizontal scroll bar that controls the viewport's horizontal view position
Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane
Returns a <code>JScrollPane
Returns the vertical scroll bar that controls the viewports vertical view position
Adds the scrollbar that controls the viewports vertical view position to the scrollpane
Returns a new <code>JViewport</code> by default
Returns the current <code>JViewport</code>
Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport
Creates a viewport if necessary and then sets its view
Returns the row header
Removes the old rowHeader, if it exists; if the new rowHeader isn't <code>null</code>, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane
Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane
Returns the column header
Removes the old columnHeader, if it exists; if the new columnHeader isn't <code>null</code>, syncs the x coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane
Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane
Returns the component at the specified corner
Adds a child that will appear in one of the scroll panes corners, if there's room
Sets the orientation for the vertical and horizontal scrollbars as determined by the <code>ComponentOrientation</code> argument
Indicates whether or not scrolling will take place in response to the mouse wheel
Enables/disables scrolling in response to movement of the mouse wheel
Returns a string representation of this <code>JScrollPane</code>
Gets the AccessibleContext associated with this JScrollPane
Messages super to set the value, and resets the <code>unitIncrementSet</code> instance variable to true
Computes the unit increment for scrolling if the viewport's view is a <code>Scrollable</code> object
Messages super to set the value, and resets the <code>blockIncrementSet</code> instance variable to true
Computes the block increment for scrolling if the viewport's view is a <code>Scrollable</code> object
Get the role of this object
Invoked when the target of the listener has changed its state
This method gets called when a bound property is changed
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Returns the orientation of this separator
Sets the orientation of the separator
Returns a string representation of this <code>JSeparator</code>
Gets the AccessibleContext associated with this JSeparator
Get the role of this object
Gets the UI object which implements the L&amp;F for this component
Sets the UI object which implements the L&amp;F for this component
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Subclasses that want to handle {@code ChangeEvent}s from the model differently can override this to return an instance of a custom <code>ChangeListener</code> implementation
Adds a ChangeListener to the slider
Removes a ChangeListener from the slider
Returns an array of all the <code>ChangeListener</code>s added to this JSlider with addChangeListener()
Send a {@code ChangeEvent}, whose source is this {@code JSlider}, to all {@code ChangeListener}s that have registered interest in {@code ChangeEvent}s
Returns the {@code BoundedRangeModel} that handles the slider's three fundamental properties: minimum, maximum, value
Sets the {@code BoundedRangeModel} that handles the slider's three fundamental properties: minimum, maximum, value
Returns the slider's current value from the {@code BoundedRangeModel}
Sets the slider's current value to {@code n}
Returns the minimum value supported by the slider from the <code>BoundedRangeModel</code>
Sets the slider's minimum value to {@code minimum}
Returns the maximum value supported by the slider from the <code>BoundedRangeModel</code>
Sets the slider's maximum value to {@code maximum}
Returns the {@code valueIsAdjusting} property from the model
Sets the model's {@code valueIsAdjusting} property
Returns the "extent" from the <code>BoundedRangeModel</code>
Sets the size of the range "covered" by the knob
Return this slider's vertical or horizontal orientation
Set the slider's orientation to either {@code SwingConstants
{@inheritDoc}
{@inheritDoc}
Returns the dictionary of what labels to draw at which values
Used to specify what label will be drawn at any given value
Updates the UIs for the labels in the label table by calling {@code updateUI} on each label
Creates a {@code Hashtable} of numerical text labels, starting at the slider minimum, and using the increment specified
Creates a {@code Hashtable} of numerical text labels, starting at the starting point specified, and using the increment specified
Returns true if the value-range shown for the slider is reversed,
Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order
This method returns the major tick spacing
This method sets the major tick spacing
This method returns the minor tick spacing
This method sets the minor tick spacing
Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob
Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob
Tells if tick marks are to be painted
Determines whether tick marks are painted on the slider
Tells if the track (area the slider slides in) is to be painted
Determines whether the track is painted on the slider
Tells if labels are to be painted
Determines whether labels are painted on the slider
Returns a string representation of this JSlider
Gets the AccessibleContext associated with this JSlider
Get the state set of this object
Get the role of this object
Get the AccessibleValue associated with this object
Get the accessible value of this object
Set the value of this object as a Number
Get the minimum accessible value of this object
Get the maximum accessible value of this object
Returns the look and feel (L&amp;F) object that renders this component
Sets the look and feel (L&amp;F) object that renders this component
Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component
Resets the UI property with the value from the current look and feel
This method is called by the constructors to create the <code>JComponent</code> that displays the current value of the sequence
Changes the model that represents the value of this spinner
Returns the <code>SpinnerModel</code> that defines this spinners sequence of values
Returns the current value of the model, typically this value is displayed by the <code>editor</code>
Changes current value of the model, typically this value is displayed by the <code>editor</code>
Returns the object in the sequence that comes after the object returned by <code>getValue()</code>
Adds a listener to the list that is notified each time a change to the model occurs
Removes a <code>ChangeListener</code> from this spinner
Returns an array of all the <code>ChangeListener</code>s added to this JSpinner with addChangeListener()
Sends a <code>ChangeEvent</code>, whose source is this <code>JSpinner</code>, to each <code>ChangeListener</code>
Returns the object in the sequence that comes before the object returned by <code>getValue()</code>
Changes the <code>JComponent</code> that displays the current value of the <code>SpinnerModel</code>
Returns the component that displays and potentially changes the model's value
Commits the currently edited value to the <code>SpinnerModel</code>
Gets the <code>AccessibleContext</code> for the <code>JSpinner</code>
Disconnect <code>this</code> editor from the specified <code>JSpinner</code>
Returns the <code>JSpinner</code> ancestor of this editor or <code>null</code> if none of the ancestors are a <code>JSpinner</code>
Returns the <code>JFormattedTextField</code> child of this editor
This method is called when the spinner's model's state changes
Called by the <code>JFormattedTextField</code> <code>PropertyChangeListener</code>
This <code>LayoutManager</code> method does nothing
This <code>LayoutManager</code> method does nothing
Returns the preferred size of first (and only) child plus the size of the parents insets
Returns the minimum size of first (and only) child plus the size of the parents insets
Resize the one (and only) child to completely fill the area within the parents insets
Pushes the currently edited value to the <code>SpinnerModel</code>
Returns the baseline
Returns an enum indicating how the baseline of the component changes as the size changes
Returns the <code>java
Return our spinner ancestor's <code>SpinnerDateModel</code>
Returns the <code>java
Return our spinner ancestor's <code>SpinnerNumberModel</code>
Return our spinner ancestor's <code>SpinnerNumberModel</code>
Invoked when the target of the listener has changed its state
Gets the role of this object
Returns the number of accessible children of the object
Returns the specified Accessible child of the object
Gets the AccessibleAction associated with this object that supports one or more actions
Gets the AccessibleText associated with this object presenting text on the display
Gets the AccessibleValue associated with this object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object
Returns a description of the specified action of the object
Performs the specified Action on the object
Given a point in local coordinates, return the zero-based index of the character under that Point
Determines the bounding box of the character at the given index into the string
Returns the number of characters (valid indicies)
Returns the zero-based offset of the caret
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Returns the AttributeSet for a given character at a given index
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Sets the text contents to the specified string
Inserts the specified string at the given index/
Returns the text string between two indices
Deletes the text between two indices
Cuts the text between two indices into the system clipboard
Pastes the text from the system clipboard into the text starting at the specified index
Replaces the text between two indices with the specified string
Selects the text between two indices
Sets attributes for the text between two indices
Sets the L&amp;F object that renders this component
Returns the <code>SplitPaneUI</code> that is providing the current look and feel
Notification from the <code>UIManager</code> that the L&amp;F has changed
Returns the name of the L&amp;F class that renders this component
Sets the size of the divider
Returns the size of the divider
Sets the component to the left (or above) the divider
Returns the component to the left (or above) the divider
Sets the component above, or to the left of the divider
Returns the component above, or to the left of the divider
Sets the component to the right (or below) the divider
Returns the component to the right (or below) the divider
Sets the component below, or to the right of the divider
Returns the component below, or to the right of the divider
Sets the value of the <code>oneTouchExpandable</code> property, which must be <code>true</code> for the <code>JSplitPane</code> to provide a UI widget on the divider to quickly expand/collapse the divider
Gets the <code>oneTouchExpandable</code> property
Sets the last location the divider was at to <code>newLastLocation</code>
Returns the last location the divider was at
Sets the orientation, or how the splitter is divided
Returns the orientation
Sets the value of the <code>continuousLayout</code> property, which must be <code>true</code> for the child components to be continuously redisplayed and laid out during user intervention
Gets the <code>continuousLayout</code> property
Specifies how to distribute extra space when the size of the split pane changes
Returns the number that determines how extra space is distributed
Lays out the <code>JSplitPane</code> layout based on the preferred size of the children components
Sets the divider location as a percentage of the <code>JSplitPane</code>'s size
Sets the location of the divider
Returns the last value passed to <code>setDividerLocation</code>
Returns the minimum location of the divider from the look and feel implementation
Returns the maximum location of the divider from the look and feel implementation
Removes the child component, <code>component</code> from the pane
Removes the <code>Component</code> at the specified index
Removes all the child components from the split pane
Returns true, so that calls to <code>revalidate</code> on any descendant of this <code>JSplitPane</code> will cause a request to be queued that will validate the <code>JSplitPane</code> and all its descendants
Adds the specified component to this split pane
Subclassed to message the UI with <code>finishedPaintingChildren</code> after super has been messaged, as well as painting the border
Returns a string representation of this <code>JSplitPane</code>
Gets the AccessibleContext associated with this JSplitPane
Gets the state set of this object
Get the AccessibleValue associated with this object
Gets the accessible value of this object
Sets the value of this object as a Number
Gets the minimum accessible value of this object
Gets the maximum accessible value of this object
Gets the role of this object
Dump instruction as byte code to stream out
Call corresponding visitor method(s)
Returns an InstructionHandle to the physical successor of this JsrInstruction
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Returns the UI object which implements the L&amp;F for this component
Sets the UI object which implements the L&amp;F for this component
Resets the UI property to a value from the current look and feel
Returns the name of the UI class that implements the L&amp;F for this component
Subclasses that want to handle <code>ChangeEvents</code> differently can override this to return a subclass of <code>ModelListener</code> or another <code>ChangeListener</code> implementation
Adds a <code>ChangeListener</code> to this tabbedpane
Removes a <code>ChangeListener</code> from this tabbedpane
Returns an array of all the <code>ChangeListener</code>s added to this <code>JTabbedPane</code> with <code>addChangeListener</code>
Sends a {@code ChangeEvent}, with this {@code JTabbedPane} as the source, to each registered listener
Returns the model associated with this tabbedpane
Sets the model to be used with this tabbedpane
Returns the placement of the tabs for this tabbedpane
Sets the tab placement for this tabbedpane
Returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run
Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run
Returns the currently selected index for this tabbedpane
Sets the selected index for this tabbedpane
Returns the currently selected component for this tabbedpane
Sets the selected component for this tabbedpane
Inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be {@code null}
Adds a <code>component</code> and <code>tip</code> represented by a <code>title</code> and/or <code>icon</code>, either of which can be <code>null</code>
Adds a <code>component</code> represented by a <code>title</code> and/or <code>icon</code>, either of which can be <code>null</code>
Adds a <code>component</code> represented by a <code>title</code> and no icon
Adds a <code>component</code> with a tab title defaulting to the name of the component which is the result of calling <code>component
Adds a <code>component</code> with the specified tab title
Adds a <code>component</code> at the specified tab index with a tab title defaulting to the name of the component
Adds a <code>component</code> to the tabbed pane
Adds a <code>component</code> at the specified tab index
Removes the tab at <code>index</code>
Removes the specified <code>Component</code> from the <code>JTabbedPane</code>
Removes the tab and component which corresponds to the specified index
Removes all the tabs and their corresponding components from the <code>tabbedpane</code>
Returns the number of tabs in this <code>tabbedpane</code>
Returns the number of tab runs currently used to display the tabs
Returns the tab title at <code>index</code>
Returns the tab icon at <code>index</code>
Returns the tab disabled icon at <code>index</code>
Returns the tab tooltip text at <code>index</code>
Returns the tab background color at <code>index</code>
Returns the tab foreground color at <code>index</code>
Returns whether or not the tab at <code>index</code> is currently enabled
Returns the component at <code>index</code>
Returns the keyboard mnemonic for accessing the specified tab
Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character
Returns the tab bounds at <code>index</code>
Sets the title at <code>index</code> to <code>title</code> which can be <code>null</code>
Sets the icon at <code>index</code> to <code>icon</code> which can be <code>null</code>
Sets the disabled icon at <code>index</code> to <code>icon</code> which can be <code>null</code>
Sets the tooltip text at <code>index</code> to <code>toolTipText</code> which can be <code>null</code>
Sets the background color at <code>index</code> to <code>background</code> which can be <code>null</code>, in which case the tab's background color will default to the background color of the <code>tabbedpane</code>
Sets the foreground color at <code>index</code> to <code>foreground</code> which can be <code>null</code>, in which case the tab's foreground color will default to the foreground color of this <code>tabbedpane</code>
Sets whether or not the tab at <code>index</code> is enabled
Sets the component at <code>index</code> to <code>component</code>
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
Sets the keyboard mnemonic for accessing the specified tab
Returns the first tab index with a given <code>title</code>,  or -1 if no tab has this title
Returns the first tab index with a given <code>icon</code>, or -1 if no tab has this icon
Returns the index of the tab for the specified component
Returns the tab index corresponding to the tab whose bounds intersect the specified location
Returns the tooltip text for the component determined by the mouse event location
Returns a string representation of this <code>JTabbedPane</code>
Gets the AccessibleContext associated with this JTabbedPane
Sets the component that is responsible for rendering the title for the specified tab
Returns the tab component at <code>index</code>
Returns the index of the tab for the specified tab component
Returns the accessible name of this object, or {@code null} if there is no accessible name
Get the role of this object
Returns the number of accessible children in the object
Return the specified Accessible child of the object
Gets the <code>AccessibleSelection</code> associated with this object
Returns the <code>Accessible</code> child contained at the local coordinate <code>Point</code>, if one exists
Calls the <code>configureEnclosingScrollPane</code> method
If this <code>JTable</code> is the <code>viewportView</code> of an enclosing <code>JScrollPane</code> (the usual situation), configure this <code>ScrollPane</code> by, amongst other things, installing the table's <code>tableHeader</code> as the <code>columnHeaderView</code> of the scroll pane
Calls the <code>unconfigureEnclosingScrollPane</code> method
Reverses the effect of <code>configureEnclosingScrollPane</code> by replacing the <code>columnHeaderView</code> of the enclosing scroll pane with <code>null</code>
Equivalent to <code>new JScrollPane(aTable)</code>
Sets the <code>tableHeader</code> working with this <code>JTable</code> to <code>newHeader</code>
Returns the <code>tableHeader</code> used by this <code>JTable</code>
Sets the height, in pixels, of all cells to <code>rowHeight</code>, revalidates, and repaints
Returns the height of a table row, in pixels
Sets the height for <code>row</code> to <code>rowHeight</code>, revalidates, and repaints
Returns the height, in pixels, of the cells in <code>row</code>
Sets the amount of empty space between cells in adjacent rows
Gets the amount of empty space, in pixels, between cells
Sets the <code>rowMargin</code> and the <code>columnMargin</code> -- the height and width of the space between cells -- to <code>intercellSpacing</code>
Returns the horizontal and vertical space between cells
Sets the color used to draw grid lines to <code>gridColor</code> and redisplays
Returns the color used to draw grid lines
Sets whether the table draws grid lines around cells
Sets whether the table draws horizontal lines between cells
Sets whether the table draws vertical lines between cells
Returns true if the table draws horizontal lines between cells, false if it doesn't
Returns true if the table draws vertical lines between cells, false if it doesn't
Sets the table's auto resize mode when the table is resized
Returns the auto resize mode of the table
Sets this table's <code>autoCreateColumnsFromModel</code> flag
Determines whether the table will create default columns from the model
Creates default columns for the table from the data model using the <code>getColumnCount</code> method defined in the <code>TableModel</code> interface
Sets a default cell renderer to be used if no renderer has been set in a <code>TableColumn</code>
Returns the cell renderer to be used when no renderer has been set in a <code>TableColumn</code>
Sets a default cell editor to be used if no editor has been set in a <code>TableColumn</code>
Returns the editor to be used when no editor has been set in a <code>TableColumn</code>
Turns on or off automatic drag handling
Returns whether or not automatic drag handling is enabled
Sets the drop mode for this component
Returns the drop mode for this component
Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or {@code null} if no location is to currently be shown
Specifies whether a {@code RowSorter} should be created for the table whenever its model changes
Returns {@code true} if whenever the model changes, a new {@code RowSorter} should be created and installed as the table's sorter; otherwise, returns {@code false}
Specifies whether the selection should be updated after sorting
Returns true if the selection should be updated after sorting
Sets the <code>RowSorter</code>
Returns the object responsible for sorting
Sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals
Sets whether the rows in this model can be selected
Returns true if rows can be selected
Sets whether the columns in this model can be selected
Returns true if columns can be selected
Sets whether this table allows both a column selection and a row selection to exist simultaneously
Returns true if both row and column selection models are enabled
Selects all rows, columns, and cells in the table
Deselects all selected columns and rows
Selects the rows from <code>index0</code> to <code>index1</code>, inclusive
Selects the columns from <code>index0</code> to <code>index1</code>, inclusive
Adds the rows from <code>index0</code> to <code>index1</code>, inclusive, to the current selection
Adds the columns from <code>index0</code> to <code>index1</code>, inclusive, to the current selection
Deselects the rows from <code>index0</code> to <code>index1</code>, inclusive
Deselects the columns from <code>index0</code> to <code>index1</code>, inclusive
Returns the index of the first selected row, -1 if no row is selected
Returns the index of the first selected column, -1 if no column is selected
Returns the indices of all selected rows
Returns the indices of all selected columns
Returns the number of selected rows
Returns the number of selected columns
Returns true if the specified index is in the valid range of rows, and the row at that index is selected
Returns true if the specified index is in the valid range of columns, and the column at that index is selected
Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected
Updates the selection models of the table, depending on the state of the two flags: <code>toggle</code> and <code>extend</code>
Returns the foreground color for selected cells
Sets the foreground color for selected cells
Returns the background color for selected cells
Sets the background color for selected cells
Returns the <code>TableColumn</code> object for the column in the table whose identifier is equal to <code>identifier</code>, when compared using <code>equals</code>
Maps the index of the column in the view at <code>viewColumnIndex</code> to the index of the column in the table model
Maps the index of the column in the table model at <code>modelColumnIndex</code> to the index of the column in the view
Maps the index of the row in terms of the <code>TableModel</code> to the view
Maps the index of the row in terms of the view to the underlying <code>TableModel</code>
Returns the number of rows that can be shown in the <code>JTable</code>, given unlimited space
Returns the number of columns in the column model
Returns the name of the column appearing in the view at column position <code>column</code>
Returns the type of the column appearing in the view at column position <code>column</code>
Returns the cell value at <code>row</code> and <code>column</code>
Sets the value for the cell in the table model at <code>row</code> and <code>column</code>
Returns true if the cell at <code>row</code> and <code>column</code> is editable
Appends <code>aColumn</code> to the end of the array of columns held by  this <code>JTable</code>'s column model
Removes <code>aColumn</code> from this <code>JTable</code>'s  array of columns
Moves the column <code>column</code> to the position currently occupied by the column <code>targetColumn</code> in the view
Returns the index of the column that <code>point</code> lies in, or -1 if the result is not in the range [0, <code>getColumnCount()</code>-1]
Returns the index of the row that <code>point</code> lies in, or -1 if the result is not in the range [0, <code>getRowCount()</code>-1]
Returns a rectangle for the cell that lies at the intersection of <code>row</code> and <code>column</code>
Causes this table to lay out its rows and columns
Sizes the table columns to fit the available space
Obsolete as of Java 2 platform v1
Overrides <code>JComponent</code>'s <code>getToolTipText</code> method in order to allow the renderer's tips to be used if it has text set
Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell
Returns true if the editor should get the focus when keystrokes cause the editor to be activated
Programmatically starts editing the cell at <code>row</code> and <code>column</code>, if those indices are in the valid range, and the cell at those indices is editable
Programmatically starts editing the cell at <code>row</code> and <code>column</code>, if those indices are in the valid range, and the cell at those indices is editable
Returns true if a cell is being edited
Returns the component that is handling the editing session
Returns the index of the column that contains the cell currently being edited
Returns the index of the row that contains the cell currently being edited
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component and repaints
Notification from the <code>UIManager</code> that the L&amp;F has changed
Returns the suffix used to construct the name of the L&amp;F class used to render this component
Sets the data model for this table to <code>newModel</code> and registers with it for listener notifications from the new data model
Returns the <code>TableModel</code> that provides the data displayed by this <code>JTable</code>
Sets the column model for this table to <code>newModel</code> and registers for listener notifications from the new column model
Returns the <code>TableColumnModel</code> that contains all column information of this table
Sets the row selection model for this table to <code>newModel</code> and registers for listener notifications from the new selection model
Returns the <code>ListSelectionModel</code> that is used to maintain row selection state
<code>RowSorterListener</code> notification that the <code>RowSorter</code> has changed in some way
Invoked when this table's <code>TableModel</code> generates a <code>TableModelEvent</code>
Invoked when a column is added to the table column model
Invoked when a column is removed from the table column model
Invoked when a column is repositioned
Invoked when a column is moved due to a margin change
Invoked when the selection model of the <code>TableColumnModel</code> is changed
Invoked when the row selection changes -- repaints to show the new selection
Invoked when editing is finished
Invoked when editing is canceled
Sets the preferred size of the viewport for this table
Returns the preferred size of the viewport for this table
Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation)
Returns <code>visibleRect
Returns false if <code>autoResizeMode</code> is set to <code>AUTO_RESIZE_OFF</code>, which indicates that the width of the viewport does not determine the width of the table
Returns {@code false} to indicate that the height of the viewport does not determine the height of the table, unless {@code getFillsViewportHeight} is {@code true} and the preferred height of the table is smaller than the viewport's height
Sets whether or not this table is always made large enough to fill the height of an enclosing viewport
Returns whether or not this table is always made large enough to fill the height of an enclosing viewport
Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons
Creates default cell editors for objects, numbers, and boolean values
Initializes table properties to their default values
Returns the default table model object, which is a <code>DefaultTableModel</code>
Returns the default column model object, which is a <code>DefaultTableColumnModel</code>
Returns the default selection model object, which is a <code>DefaultListSelectionModel</code>
Returns the default table header object, which is a <code>JTableHeader</code>
Equivalent to <code>revalidate</code> followed by <code>repaint</code>
Returns the active cell editor, which is {@code null} if the table is not currently editing
Sets the active cell editor
Sets the <code>editingColumn</code> variable
Sets the <code>editingRow</code> variable
Returns an appropriate renderer for the cell specified by this row and column
Prepares the renderer by querying the data model for the value and selection state of the cell at <code>row</code>, <code>column</code>
Returns an appropriate editor for the cell specified by <code>row</code> and <code>column</code>
Prepares the editor by querying the data model for the value and selection state of the cell at <code>row</code>, <code>column</code>
Discards the editor object and frees the real estate it used for cell rendering
Returns a string representation of this table
A convenience method that displays a printing dialog, and then prints this <code>JTable</code> in mode <code>PrintMode
A convenience method that displays a printing dialog, and then prints this <code>JTable</code> in the given printing mode, with no header or footer text
A convenience method that displays a printing dialog, and then prints this <code>JTable</code> in the given printing mode, with the specified header and footer text
Prints this table, as specified by the fully featured {@link #print(JTable
Prints this <code>JTable</code>
Return a <code>Printable</code> for use in printing this JTable
Gets the AccessibleContext associated with this JTable
Returns the row index where a dropped item should be placed in the table
Returns the column index where a dropped item should be placed in the table
Returns whether or not this location represents an insert of a row
Returns whether or not this location represents an insert of a column
Returns a string representation of this drop location
Track changes to selection model, column model, etc
Track changes to the table contents
Track changes to the table contents (row insertions)
Track changes to the table contents (row deletions)
Track changes to the table contents (column insertions)
Track changes to the table contents (column deletions)
Track changes of a column repositioning
Track changes of a column moving due to margin changes
Track that the selection model of the TableColumnModel changed
Track changes to a cell's contents
Invoked when editing is canceled
Track changes to table cell selections
Get the AccessibleSelection associated with this object
Gets the role of this object
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Returns the number of accessible children in the object
Returns the nth <code>Accessible</code> child of the object
Returns the number of <code>Accessible</code> children currently selected
Returns an <code>Accessible</code> representing the specified selected child in the object
Determines if the current child of this object is selected
Adds the specified <code>Accessible</code> child of the object to the object's selection
Removes the specified child of the object from the object's selection
Clears the selection in the object, so that no children in the object are selected
Causes every child of the object to be selected, but only if the <code>JTable</code> supports multiple selections, and if individual cell selection is enabled
Returns the row number of an index in the table
Returns the column number of an index in the table
Returns the index at a row and column in the table
Gets the <code>AccessibleTable</code> associated with this object
Returns the caption for the table
Sets the caption for the table
Returns the summary description of the table
Sets the summary description of the table
Returns the number of rows occupied by the <code>Accessible</code> at a specified row and column in the table
Returns the number of columns occupied by the <code>Accessible</code> at a given (row, column)
Returns the row headers as an <code>AccessibleTable</code>
Sets the row headers as an <code>AccessibleTable</code>
Returns the column headers as an <code>AccessibleTable</code>
Sets the column headers as an <code>AccessibleTable</code>
Returns the description of the specified row in the table
Sets the description text of the specified row of the table
Returns the description of the specified column in the table
Sets the description text of the specified column of the table
Returns a boolean value indicating whether the accessible at a given (row, column) is selected
Returns a boolean value indicating whether the specified row is selected
Returns a boolean value indicating whether the specified column is selected
Returns the selected rows in a table
Returns the selected columns in a table
Returns the row at a given index into the table
Returns the column at a given index into the table
Returns the index at a given (row, column) in the table
Gets the <code>AccessibleContext</code> associated with this component
Gets the AccessibleContext for the table cell renderer
Gets the table cell renderer component
Gets the accessible name of this object
Sets the localized accessible name of this object
Gets the accessible description of this object
Sets the accessible description of this object
Gets the role of this object
Gets the state set of this object
Gets the <code>Accessible</code> parent of this object
Gets the index of this object in its accessible parent
Returns the number of accessible children in the object
Returns the specified <code>Accessible</code> child of the object
Gets the locale of the component
Adds a <code>PropertyChangeListener</code> to the listener list
Removes a <code>PropertyChangeListener</code> from the listener list
Gets the <code>AccessibleAction</code> associated with this object if one exists
Gets the <code>AccessibleComponent</code> associated with this object if one exists
Gets the <code>AccessibleSelection</code> associated with this object if one exists
Gets the <code>AccessibleText</code> associated with this object if one exists
Gets the <code>AccessibleValue</code> associated with this object if one exists
Gets the background color of this object
Sets the background color of this object
Gets the foreground color of this object
Sets the foreground color of this object
Gets the <code>Cursor</code> of this object
Sets the <code>Cursor</code> of this object
Gets the <code>Font</code> of this object
Sets the <code>Font</code> of this object
Gets the <code>FontMetrics</code> of this object
Determines if the object is enabled
Sets the enabled state of the object
Determines if this object is visible
Sets the visible state of the object
Determines if the object is showing
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns the location of the object on the screen
Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space
Sets the location of the object relative to the parent
Sets the table associated with this header
Returns the table associated with this header
Sets whether the user can drag column headers to reorder columns
Returns true if the user is allowed to rearrange columns by dragging their headers, false otherwise
Sets whether the user can resize columns by dragging between headers
Returns true if the user is allowed to resize columns by dragging between their headers, false otherwise
Returns the the dragged column, if and only if, a drag is in process, otherwise returns <code>null</code>
Returns the column's horizontal distance from its original position, if and only if, a drag is in process
Returns the resizing column
Obsolete as of Java 2 platform v1
Obsolete as of Java 2 platform v1
Sets the default renderer to be used when no <code>headerRenderer</code> is defined by a <code>TableColumn</code>
Returns the default renderer used when no <code>headerRenderer</code> is defined by a <code>TableColumn</code>
Returns the index of the column that <code>point</code> lies in, or -1 if it lies out of bounds
Returns the rectangle containing the header tile at <code>column</code>
Allows the renderer's tips to be used if there is text set
Returns the look and feel (L&amp;F) object that renders this component
Sets the look and feel (L&amp;F) object that renders this component
Notification from the <code>UIManager</code> that the look and feel (L&amp;F) has changed
Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component
Sets the column model for this table to <code>newModel</code> and registers  for listener notifications from the new column model
Returns the <code>TableColumnModel</code> that contains all column information of this table header
Invoked when a column is added to the table column model
Invoked when a column is removed from the table column model
Invoked when a column is repositioned
Invoked when a column is moved due to a margin change
Invoked when the selection model of the <code>TableColumnModel</code> is changed
Returns the default column model object which is  a <code>DefaultTableColumnModel</code>
Returns a default renderer to be used when no header renderer  is defined by a <code>TableColumn</code>
Initializes the local variables and properties with default values
Sizes the header and marks it as needing display
Sets the header's <code>draggedColumn</code> to <code>aColumn</code>
Sets the header's <code>draggedDistance</code> to <code>distance</code>
Sets the header's <code>resizingColumn</code> to <code>aColumn</code>
Returns a string representation of this <code>JTableHeader</code>
Gets the AccessibleContext associated with this JTableHeader
Get the role of this object
Returns the Accessible child, if one exists, contained at the local coordinate Point
Returns the number of accessible children in the object
Return the nth Accessible child of the object
Get the AccessibleContext associated with this object
Get the AccessibleComponent associated with this object
Returns the class ID for the UI
Creates the default implementation of the model to be used at construction if one isn't explicitly given
Sets the number of characters to expand tabs to
Gets the number of characters used to expand tabs
Sets the line-wrapping policy of the text area
Gets the line-wrapping policy of the text area
Sets the style of wrapping used if the text area is wrapping lines
Gets the style of wrapping used if the text area is wrapping lines
Translates an offset into the components text to a line number
Determines the number of lines contained in the area
Determines the offset of the start of the given line
Determines the offset of the end of the given line
Inserts the specified text at the specified position
Appends the given text to the end of the document
Replaces text from the indicated start to end position with the new text specified
Returns the number of rows in the TextArea
Sets the number of rows for this TextArea
Defines the meaning of the height of a row
Returns the number of columns in the TextArea
Sets the number of columns for this TextArea
Gets column width
Returns the preferred size of the TextArea
Sets the current font
Returns a string representation of this JTextArea
Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport
Returns the preferred size of the viewport if this component is embedded in a JScrollPane
Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation
Gets the AccessibleContext associated with this JTextArea
Gets the state set of this object
Fetches the user-interface factory for this text-oriented editor
Sets the user-interface factory for this text-oriented editor
Reloads the pluggable UI
Adds a caret listener for notification of any changes to the caret
Removes a caret listener
Returns an array of all the caret listeners registered on this text component
Notifies all listeners that have registered interest for notification on this event type
Associates the editor with a text document
Fetches the model associated with the editor
Fetches the command list for the editor
Sets margin space between the text component's border and its text
Returns the margin between the text component's border and its text
Sets the <code>NavigationFilter</code>
Returns the <code>NavigationFilter</code>
Fetches the caret that allows text-oriented navigation over the view
Sets the caret to be used
Fetches the object responsible for making highlights
Sets the highlighter to be used
Sets the keymap to use for binding events to actions
Turns on or off automatic drag handling
Returns whether or not automatic drag handling is enabled
Sets the drop mode for this component
Returns the drop mode for this component
Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or {@code null} if no location is to currently be shown
Fetches the keymap currently active in this text component
Adds a new keymap into the keymap hierarchy
Removes a named keymap previously added to the document
Fetches a named keymap previously added to the document
<p> Loads a keymap with a bunch of bindings
Fetches the current color used to render the caret
Sets the current color used to render the caret
Fetches the current color used to render the selection
Sets the current color used to render the selection
Fetches the current color used to render the selected text
Sets the current color used to render the selected text
Fetches the current color used to render the disabled text
Sets the current color used to render the disabled text
Replaces the currently selected content with new content represented by the given string
Fetches a portion of the text represented by the component
Converts the given location in the model to a place in the view coordinate system
Converts the given place in the view coordinate system to the nearest representative location in the model
Transfers the currently selected range in the associated text model to the system clipboard, removing the contents from the model
Transfers the currently selected range in the associated text model to the system clipboard, leaving the contents in the text model
Transfers the contents of the system clipboard into the associated text model
Moves the caret to a new position, leaving behind a mark defined by the last time <code>setCaretPosition</code> was called
Sets the key accelerator that will cause the receiving text component to get the focus
Returns the key accelerator that will cause the receiving text component to get the focus
Initializes from a stream
Stores the contents of the model into the given stream
Sets the position of the text insertion caret for the <code>TextComponent</code>
Returns the position of the text insertion caret for the text component
Sets the text of this <code>TextComponent</code> to the specified text
Returns the text contained in this <code>TextComponent</code>
Returns the selected text contained in this <code>TextComponent</code>
Returns the boolean indicating whether this <code>TextComponent</code> is editable or not
Sets the specified boolean to indicate whether or not this <code>TextComponent</code> should be editable
Returns the selected text's start position
Sets the selection start to the specified position
Returns the selected text's end position
Sets the selection end to the specified position
Selects the text between the specified start and end positions
Selects all the text in the <code>TextComponent</code>
Returns the string to be used as the tooltip for <code>event</code>
Returns the preferred size of the viewport for a view component
Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation
Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation
Returns true if a viewport should always force the width of this <code>Scrollable</code> to match the width of the viewport
Returns true if a viewport should always force the height of this <code>Scrollable</code> to match the height of the viewport
A convenience print method that displays a print dialog, and then prints this {@code JTextComponent} in <i>interactive</i> mode with no header or footer text
A convenience print method that displays a print dialog, and then prints this {@code JTextComponent} in <i>interactive</i> mode with the specified header and footer text
Prints the content of this {@code JTextComponent}
Returns a {@code Printable} to use for printing the content of this {@code JTextComponent}
Gets the <code>AccessibleContext</code> associated with this <code>JTextComponent</code>
Returns a string representation of this <code>JTextComponent</code>
Saves composed text around the specified position
Restores composed text previously saved by {@code saveComposedText}
Handles caret updates (fire appropriate property change event, which are AccessibleContext
Handles document insert (fire appropriate property change event which is AccessibleContext
Handles document remove (fire appropriate property change event, which is AccessibleContext
Handles document remove (fire appropriate property change event, which is AccessibleContext
Gets the state set of the JTextComponent
Gets the role of this object
Get the AccessibleText associated with this object
Given a point in local coordinates, return the zero-based index of the character under that Point
Determines the bounding box of the character at the given index into the string
Returns the number of characters (valid indices)
Returns the zero-based offset of the caret
Returns the AttributeSet for a given character (at a given index)
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Returns the AccessibleEditableText interface for this text component
Sets the text contents to the specified string
Inserts the specified string at the given index
Returns the text string between two indices
Deletes the text between two indices
Cuts the text between two indices into the system clipboard
Pastes the text from the system clipboard into the text starting at the specified index
Replaces the text between two indices with the specified string
Selects the text between two indices
Sets attributes for the text between two indices
Returns the <code>AccessibleTextSequence</code> at a given <code>index</code>
Returns the <code>AccessibleTextSequence</code> after a given <code>index</code>
Returns the <code>AccessibleTextSequence</code> before a given <code>index</code>
Returns the <code>Rectangle</code> enclosing the text between two indicies
Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object
Returns a description of the specified action of the object
Performs the specified Action on the object
Returns the index where dropped data should be inserted into the associated component
Returns the bias for the drop index
Returns a string representation of this drop location
Gets the class ID for a UI
Associates the editor with a text document
Calls to <code>revalidate</code> that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a <code>JViewport</code>, in which case this returns false
Returns the horizontal alignment of the text
Sets the horizontal alignment of the text
Creates the default implementation of the model to be used at construction if one isn't explicitly given
Returns the number of columns in this <code>TextField</code>
Sets the number of columns in this <code>TextField</code>, and then invalidate the layout
Returns the column width
Returns the preferred size <code>Dimensions</code> needed for this <code>TextField</code>
Sets the current font
Adds the specified action listener to receive action events from this textfield
Removes the specified action listener so that it no longer receives action events from this textfield
Returns an array of all the <code>ActionListener</code>s added to this JTextField with addActionListener()
Notifies all listeners that have registered interest for notification on this event type
Sets the command string used for action events
Sets the <code>Action</code> for the <code>ActionEvent</code> source
Returns the currently set <code>Action</code> for this <code>ActionEvent</code> source, or <code>null</code> if no <code>Action</code> is set
Sets the properties on this textfield to match those in the specified <code>Action</code>
Updates the textfield's state in response to property changes in associated action
Creates and returns a <code>PropertyChangeListener</code> that is responsible for listening for changes from the specified <code>Action</code> and updating the appropriate properties
Fetches the command list for the editor
Processes action events occurring on this textfield by dispatching them to any registered <code>ActionListener</code> objects
Gets the visibility of the text field
Gets the scroll offset, in pixels
Sets the scroll offset, in pixels
Scrolls the field left or right
Returns a string representation of this <code>JTextField</code>
Gets the <code>AccessibleContext</code> associated with this <code>JTextField</code>
Gets the state set of this object
Returns the class ID for the UI
Associates the editor with a text document
Associates the editor with a text document
Fetches the model associated with the editor
Replaces the currently selected content with new content represented by the given string
Inserts a component into the document as a replacement for the currently selected content
Inserts an icon into the document as a replacement for the currently selected content
Adds a new style into the logical style hierarchy
Removes a named non-<code>null</code> style previously added to the document
Fetches a named non-<code>null</code> style previously added
Sets the logical style to use for the paragraph at the current caret position
Fetches the logical style assigned to the paragraph represented by the current position of the caret, or <code>null</code>
Fetches the character attributes in effect at the current location of the caret, or <code>null</code>
Applies the given attributes to character content
Fetches the current paragraph attributes in effect at the location of the caret, or <code>null</code> if none
Applies the given attributes to paragraphs
Gets the input attributes for the pane
Gets the editor kit
Creates the <code>EditorKit</code> to use by default
Sets the currently installed kit for handling content
Returns a string representation of this <code>JTextPane</code>
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the l&amp;f class that renders this component
Returns a string representation of this JToggleButton
Gets the AccessibleContext associated with this JToggleButton
Checks if the button is selected
Sets the selected state of the button
Sets the pressed state of the toggle button
Fire accessible property change events when the state of the toggle button changes
Get the role of this object
Returns the tool bar's current UI
Sets the L&amp;F object that renders this component
Notification from the <code>UIFactory</code> that the L&amp;F has changed
Returns the name of the L&amp;F class that renders this component
Returns the index of the specified component
Returns the component at the specified index
Sets the margin between the tool bar's border and its buttons
Returns the margin between the tool bar's border and its buttons
Gets the <code>borderPainted</code> property
Sets the <code>borderPainted</code> property, which is <code>true</code> if the border should be painted
Paints the tool bar's border if the <code>borderPainted</code> property is <code>true</code>
Gets the <code>floatable</code> property
Sets the <code>floatable</code> property, which must be <code>true</code> for the user to move the tool bar
Returns the current orientation of the tool bar
Sets the orientation of the tool bar
Sets the rollover state of this toolbar
Returns the rollover state
Appends a separator of default size to the end of the tool bar
Appends a separator of a specified size to the end of the tool bar
Adds a new <code>JButton</code> which dispatches the action
Factory method which creates the <code>JButton</code> for <code>Action</code>s added to the <code>JToolBar</code>
Returns a properly configured <code>PropertyChangeListener</code> which updates the control as changes to the <code>Action</code> occur, or <code>null</code> if the default property change listener for the control is desired
If a <code>JButton</code> is being added, it is initially set to be disabled
Returns a string representation of this <code>JToolBar</code>
Gets the AccessibleContext associated with this JToolBar
Returns the name of the L&amp;F class that renders this component
Sets the size of the separator
Returns the size of the separator
Returns the minimum size for the separator
Returns the maximum size for the separator
Returns the preferred size for the separator
Get the state of this object
Get the role of this object
Returns the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns the name of the L&amp;F class that renders this component
Sets the text to show when the tool tip is displayed
Returns the text that is shown when the tool tip is displayed
Specifies the component that the tooltip describes
Returns the component the tooltip applies to
Returns a string representation of this <code>JToolTip</code>
Gets the AccessibleContext associated with this JToolTip
Get the accessible description of this object
Get the role of this object
Creates and returns a sample <code>TreeModel</code>
Returns a <code>TreeModel</code> wrapping the specified object
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Notification from the <code>UIManager</code> that the L&amp;F has changed
Returns the name of the L&amp;F class that renders this component
Returns the current <code>TreeCellRenderer</code>  that is rendering each cell
Sets the <code>TreeCellRenderer</code> that will be used to draw each cell
Determines whether the tree is editable
Returns true if the tree is editable
Sets the cell editor
Returns the editor used to edit entries in the tree
Returns the <code>TreeModel</code> that is providing the data
Sets the <code>TreeModel</code> that will provide the data
Returns true if the root node of the tree is displayed
Determines whether or not the root node from the <code>TreeModel</code> is visible
Sets the value of the <code>showsRootHandles</code> property, which specifies whether the node handles should be displayed
Returns the value of the <code>showsRootHandles</code> property
Sets the height of each cell, in pixels
Returns the height of each row
Returns true if the height of each display row is a fixed size
Specifies whether the UI should use a large model
Returns true if the tree is configured for a large model
Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means
Returns the indicator that tells what happens when editing is interrupted
Sets the <code>scrollsOnExpand</code> property, which determines whether the tree might scroll to show previously hidden children
Returns the value of the <code>scrollsOnExpand</code> property
Sets the number of mouse clicks before a node will expand or close
Returns the number of mouse clicks needed to expand or close a node
Configures the <code>expandsSelectedPaths</code> property
Returns the <code>expandsSelectedPaths</code> property
Turns on or off automatic drag handling
Returns whether or not automatic drag handling is enabled
Sets the drop mode for this component
Returns the drop mode for this component
Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or {@code null} if no location is to currently be shown
Returns <code>isEditable</code>
Overrides <code>JComponent</code>'s <code>getToolTipText</code> method in order to allow renderer's tips to be used if it has text set
Called by the renderers to convert the specified value to text
Returns the number of viewable nodes
Selects the node identified by the specified path
Selects the nodes identified by the specified array of paths
Sets the path identifies as the lead
Sets the path identified as the anchor
Selects the node at the specified row in the display
Selects the nodes corresponding to each of the specified rows in the display
Adds the node identified by the specified <code>TreePath</code> to the current selection
Adds each path in the array of paths to the current selection
Adds the path at the specified row to the current selection
Adds the paths at each of the specified rows to the current selection
Returns the last path component of the selected path
Returns the path identified as the lead
Returns the path identified as the anchor
Returns the path to the first selected node
Returns the paths of all selected values
Returns all of the currently selected rows
Returns the number of nodes selected
Returns the smallest selected row
Returns the largest selected row
Returns the row index corresponding to the lead path
Returns true if the item identified by the path is currently selected
Returns true if the node identified by row is selected
Returns an <code>Enumeration</code> of the descendants of the path <code>parent</code> that are currently expanded
Returns true if the node identified by the path has ever been expanded
Returns true if the node identified by the path is currently expanded,
Returns true if the node at the specified display row is currently expanded
Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed
Returns true if the node at the specified display row is collapsed
Ensures that the node identified by path is currently viewable
Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded
Returns the <code>Rectangle</code> that the specified node will be drawn into
Returns the <code>Rectangle</code> that the node at the specified row is drawn in
Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed
Scrolls the item identified by row until it is displayed
Returns the path for the specified row
Returns the row that displays the node identified by the specified path
Ensures that the node identified by the specified path is expanded and viewable
Ensures that the node in the specified row is expanded and viewable
Ensures that the node identified by the specified path is collapsed and viewable
Ensures that the node in the specified row is collapsed
Returns the path for the node at the specified location
Returns the row for the specified location
Returns the path to the node that is closest to x,y
Returns the row to the node that is closest to x,y
Returns true if the tree is being edited
Ends the current editing session
Cancels the current editing session
Selects the node identified by the specified path and initiates editing
Returns the path to the element that is currently being edited
Sets the tree's selection model
Returns the model for selections
Returns the paths (inclusive) between the specified rows
Selects the rows in the specified interval (inclusive)
Adds the specified rows (inclusive) to the selection
Removes the specified rows (inclusive) from the selection
Removes the node identified by the specified path from the current selection
Removes the nodes identified by the specified paths from the current selection
Removes the row at the index <code>row</code> from the current selection
Removes the rows that are selected at each of the specified rows
Clears the selection
Returns true if the selection is currently empty
Adds a listener for <code>TreeExpansion</code> events
Removes a listener for <code>TreeExpansion</code> events
Returns an array of all the <code>TreeExpansionListener</code>s added to this JTree with addTreeExpansionListener()
Adds a listener for <code>TreeWillExpand</code> events
Removes a listener for <code>TreeWillExpand</code> events
Returns an array of all the <code>TreeWillExpandListener</code>s added to this JTree with addTreeWillExpandListener()
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Notifies all listeners that have registered interest for notification on this event type
Adds a listener for <code>TreeSelection</code> events
Removes a <code>TreeSelection</code> listener
Returns an array of all the <code>TreeSelectionListener</code>s added to this JTree with addTreeSelectionListener()
Notifies all listeners that have registered interest for notification on this event type
Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e
Sets the number of rows that are to be displayed
Returns the number of rows that are displayed in the display area
Returns the TreePath to the next tree element that begins with a prefix
Returns the preferred display size of a <code>JTree</code>
Returns the amount to increment when scrolling
Returns the amount for a block increment, which is the height or width of <code>visibleRect</code>, based on <code>orientation</code>
Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width
Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height
Sets the expanded state of this <code>JTree</code>
Returns an <code>Enumeration</code> of <code>TreePaths</code> that have been expanded that are descendants of <code>parent</code>
Removes any descendants of the <code>TreePaths</code> in <code>toRemove</code> that have been expanded
Clears the cache of toggled tree paths
Creates and returns an instance of <code>TreeModelHandler</code>
Removes any paths in the selection that are descendants of <code>path</code>
Returns a string representation of this <code>JTree</code>
Gets the AccessibleContext associated with this JTree
Returns the index where the dropped data should be inserted with respect to the path returned by <code>getPath()</code>
Returns the path where dropped data should be placed in the tree
Returns a string representation of this drop location
Returns the single instance of {@code EmptySelectionModel}
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
This is overriden to do nothing; {@code EmptySelectionModel} does not allow a selection
Invoked by the <code>TreeSelectionModel</code> when the selection changes
Adds to parent all the children in <code>children</code>
Returns true if this node allows children
Returns the number of child nodes
Loads the children based on <code>childValue</code>
Subclassed to load the children, if necessary
Subclassed to load the children, if necessary
Tree Selection Listener value change method
Fire a visible data property change notification
Tree Model Node change notification
Tree Model Node change notification
Tree Model Node change notification
Tree Model structure change change notification
Tree Collapsed notification
Tree Model Expansion notification
Get the role of this object
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Returns the number of top-level children nodes of this JTree
Return the nth Accessible child of the object
Get the index of this object in its accessible parent
Get the AccessibleSelection associated with this object
Returns the number of items currently selected
Returns an Accessible representing the specified selected item in the object
Returns true if the current child of this object is selected
Adds the specified selected item in the object to the object's selection
Removes the specified selected item in the object from the object's selection
Clears the selection in the object, so that nothing in the object is selected
Causes every selected item in the object to be selected if the object supports multiple selections
Get the AccessibleContext associated with this tree node
Get the accessible name of this object
Set the localized accessible name of this object
Get the accessible description of this object
Set the accessible description of this object
Get the role of this object
Get the state set of this object
Get the Accessible parent of this object
Get the index of this object in its accessible parent
Returns the number of accessible children in the object
Return the specified Accessible child of the object
Gets the locale of the component
Add a PropertyChangeListener to the listener list
Remove a PropertyChangeListener from the listener list
Get the AccessibleAction associated with this object
Get the AccessibleComponent associated with this object
Get the AccessibleSelection associated with this object if one exists
Get the AccessibleText associated with this object if one exists
Get the AccessibleValue associated with this object if one exists
Get the background color of this object
Set the background color of this object
Get the foreground color of this object
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Returns the number of items currently selected
Returns an Accessible representing the specified selected item in the object
Returns true if the current child of this object is selected
Adds the specified selected item in the object to the object's selection
Removes the specified selected item in the object from the object's selection
Clears the selection in the object, so that nothing in the object is selected
Causes every selected item in the object to be selected if the object supports multiple selections
Returns the number of accessible actions available in this tree node
Return a description of the specified action of the tree node
Perform the specified Action on the tree node
Returns the L&amp;F object that renders this component
Sets the L&amp;F object that renders this component
Resets the UI property to a value from the current look and feel
Returns a string that specifies the name of the L&amp;F class that renders this component
Sets the <code>JViewport</code>'s one lightweight child, which can be <code>null</code>
Removes the <code>Viewport</code>s one lightweight child
Scrolls the view so that <code>Rectangle</code> within the view becomes visible
The viewport "scrolls" its child (called the "view") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll)
Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a <code>JViewport</code>
Returns an <code>Insets</code> object containing this <code>JViewport</code>s inset values
The <code>JViewport</code> overrides the default implementation of this method (in <code>JComponent</code>) to return false
Returns true if scroll mode is a {@code BACKINGSTORE_SCROLL_MODE} to cause painting to originate from {@code JViewport}, or one of its ancestors
Depending on whether the <code>backingStore</code> is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to "blit" the remainder
Sets the bounds of this viewport
Used to control the method of scrolling the viewport contents
Returns the current scrolling mode
Returns <code>true</code> if this viewport is maintaining an offscreen image of its contents
If true if this viewport will maintain an offscreen image of its contents
Returns the <code>JViewport</code>'s one child or <code>null</code>
Sets the <code>JViewport</code>'s one lightweight child (<code>view</code>), which can be <code>null</code>
If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size
Sets the size of the view
Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view
Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view
Returns a rectangle whose origin is <code>getViewPosition</code> and size is <code>getExtentSize</code>
Computes the parameters for a blit where the backing store image currently contains <code>oldLoc</code> in the upper left hand corner and we're scrolling to <code>newLoc</code>
Returns the size of the visible part of the view in view coordinates
Converts a size in pixel coordinates to view coordinates
Converts a point in pixel coordinates to view coordinates
Sets the size of the visible part of the view using view coordinates
Creates a listener for the view
Subclassers can override this to install a different layout manager (or <code>null</code>) in the constructor
Adds a <code>ChangeListener</code> to the list that is notified each time the view's size, position, or the viewport's extent size has changed
Removes a <code>ChangeListener</code> from the list that's notified each time the views size, position, or the viewports extent size has changed
Returns an array of all the <code>ChangeListener</code>s added to this JViewport with addChangeListener()
Notifies all <code>ChangeListeners</code> when the views size, position, or the viewports extent size has changed
Always repaint in the parents coordinate system to make sure only one paint is performed by the <code>RepaintManager</code>
Returns a string representation of this <code>JViewport</code>
Notifies listeners of a property change
Gets the AccessibleContext associated with this JViewport
Get the role of this object
Called by the constructors to init the <code>JWindow</code> properly
Called by the constructor methods to create the default <code>rootPane</code>
Returns whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Sets the {@code transferHandler} property, which is a mechanism to support transfer of data into this component
Gets the <code>transferHandler</code> property
Calls <code>paint(g)</code>
Sets whether calls to <code>add</code> and <code>setLayout</code> are forwarded to the <code>contentPane</code>
Adds the specified child <code>Component</code>
Removes the specified component from the container
Sets the <code>LayoutManager</code>
Returns the <code>rootPane</code> object for this window
Sets the new <code>rootPane</code> object for this window
Returns the <code>Container</code> which is the <code>contentPane</code> for this window
Sets the <code>contentPane</code> property for this window
Returns the <code>layeredPane</code> object for this window
Sets the <code>layeredPane</code> property
Returns the <code>glassPane Component</code> for this window
Sets the <code>glassPane</code> property
{@inheritDoc}
Repaints the specified rectangle of this component within <code>time</code> milliseconds
Returns a string representation of this <code>JWindow</code>
Gets the AccessibleContext associated with this JWindow
Returns the principal that this key belongs to
Returns the key version number
Returns the key type for this long-term key
Returns the standard algorithm name for this key
Returns the name of the encoding format for this secret key
Returns the key material of this secret key
Destroys this key
Determines if this key has been destroyed
Returns a hashcode for this KerberosKey
Compares the specified Object with this KerberosKey for equality
Returns the realm component of this Kerberos principal
Returns a hashcode for this principal
Compares the specified Object with this Principal for equality
The returned string corresponds to the single-string representation of a Kerberos Principal name as specified in Section 2
Returns the name type of the KerberosPrincipal
Returns the client principal associated with this ticket
Returns the service principal associated with this ticket
Returns the session key associated with this ticket
Returns the key type of the session key associated with this ticket as defined by the Kerberos Protocol Specification
Determines if this ticket is forwardable
Determines if this ticket had been forwarded or was issued based on authentication involving a forwarded ticket-granting ticket
Determines if this ticket is proxiable
Determines is this ticket is a proxy-ticket
Determines is this ticket is post-dated
Determines is this ticket is renewable
Determines if this ticket was issued using the Kerberos AS-Exchange protocol, and not issued based on some ticket-granting ticket
Returns the flags associated with this ticket
Returns the time that the client was authenticated
Returns the start time for this ticket's validity period
Returns the expiration time for this ticket's validity period
Returns the latest expiration time for this ticket, including all renewals
Returns a list of addresses from where the ticket can be used
Returns an ASN
Determines if this ticket is still current
Extends the validity period of this ticket
Destroys the ticket and destroys any sensitive information stored in it
Determines if this ticket has been destroyed
Returns a hashcode for this KerberosTicket
Compares the specified Object with this KerberosTicket for equality
Returns the X origin of this <code>Kernel</code>
Returns the Y origin of this <code>Kernel</code>
Returns the width of this <code>Kernel</code>
Returns the height of this <code>Kernel</code>
Returns the kernel data in row major order
Clones this object
Returns the standard algorithm name for this key
Returns the name of the primary encoding format of this key, or null if this key does not support encoding
Returns the key in its primary encoding format, or null if this key does not support encoding
Invoked when a key has been typed
Invoked when a key has been pressed
Invoked when a key has been released
Returns the current KeyboardFocusManager instance for the calling thread's context
Sets the current KeyboardFocusManager instance for the calling thread's context
Returns the focus owner, if the focus owner is in the same context as the calling thread
Returns the focus owner, even if the calling thread is in a different context than the focus owner
Sets the focus owner
Clears the focus owner at both the Java and native levels if the focus owner exists and resides in the same context as the calling thread, otherwise the method returns silently
Clears the global focus owner at both the Java and native levels
Returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread
Returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner
Sets the permanent focus owner
Returns the focused Window, if the focused Window is in the same context as the calling thread
Returns the focused Window, even if the calling thread is in a different context than the focused Window
Sets the focused Window
Returns the active Window, if the active Window is in the same context as the calling thread
Returns the active Window, even if the calling thread is in a different context than the active Window
Sets the active Window
Returns the default FocusTraversalPolicy
Sets the default FocusTraversalPolicy
Sets the default focus traversal keys for a given traversal operation
Returns a Set of default focus traversal keys for a given traversal operation
Returns the current focus cycle root, if the current focus cycle root is in the same context as the calling thread
Returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root
Sets the current focus cycle root
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Returns an array of all the property change listeners registered on this keyboard focus manager
Adds a PropertyChangeListener to the listener list for a specific property
Removes a PropertyChangeListener from the listener list for a specific property
Returns an array of all the <code>PropertyChangeListener</code>s associated with the named property
Fires a PropertyChangeEvent in response to a change in a bound property
Adds a VetoableChangeListener to the listener list
Removes a VetoableChangeListener from the listener list
Returns an array of all the vetoable change listeners registered on this keyboard focus manager
Adds a VetoableChangeListener to the listener list for a specific property
Removes a VetoableChangeListener from the listener list for a specific property
Returns an array of all the <code>VetoableChangeListener</code>s associated with the named property
Fires a PropertyChangeEvent in response to a change in a vetoable property
Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher chain
Removes a KeyEventDispatcher which was previously added to this KeyboardFocusManager's dispatcher chain
Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List
Adds a KeyEventPostProcessor to this KeyboardFocusManager's post- processor chain
Removes a previously added KeyEventPostProcessor from this KeyboardFocusManager's post-processor chain
Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a List
This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf
Redispatches an AWTEvent in such a way that the AWT event dispatcher will not recursively request that the KeyboardFocusManager, or any installed KeyEventDispatchers, dispatch the event again
Typically this method will be called by <code>dispatchEvent</code> if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered
This method will be called by <code>dispatchKeyEvent</code>
This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent
Called by the AWT to notify the KeyboardFocusManager that it should delay dispatching of KeyEvents until the specified Component becomes the focus owner
Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents
Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents
Focuses the Component after aComponent, typically based on a FocusTraversalPolicy
Focuses the Component before aComponent, typically based on a FocusTraversalPolicy
Moves the focus up one focus traversal cycle
Moves the focus down one focus traversal cycle
Focuses the Component after the current focus owner
Focuses the Component before the current focus owner
Moves the focus up one focus traversal cycle from the current focus owner
Moves the focus down one focus traversal cycle from the current focus owner, if and only if the current focus owner is a Container that is a focus cycle root
Sets the window that should become the focused window
Returns the currently focused window
Sets the component that should become the focus owner
Returns the component that currently owns the input focus
Clears the current global focus owner
Returns the integer keyCode associated with the key in this event
Set the keyCode value to indicate a physical key
Returns the character associated with the key in this event
Set the keyChar value to indicate a logical character
Set the modifiers to indicate additional keys that were held down (e
Returns the location of the key that originated this key event
Returns a String describing the keyCode, such as "HOME", "F1" or "A"
Returns a <code>String</code> describing the modifier key(s), such as "Shift", or "Ctrl+Shift"
Returns whether the key in this event is an "action" key
Returns a parameter string identifying this event
Returns an extended key code for the event
Returns an extended key code for a unicode character
This method is called by the current KeyboardFocusManager requesting that this KeyEventDispatcher dispatch the specified event on its behalf
This method is called by the current KeyboardFocusManager, requesting that this KeyEventPostProcessor perform any necessary post-processing which should be part of the KeyEvent's final resolution
Returns a KeyFactory object that converts public/private keys of the specified algorithm
Returns a KeyFactory object that converts public/private keys of the specified algorithm
Returns a KeyFactory object that converts public/private keys of the specified algorithm
Returns the provider of this key factory object
Gets the name of the algorithm associated with this {@code KeyFactory}
Generates a public key object from the provided key specification (key material)
Generates a private key object from the provided key specification (key material)
Returns a specification (key material) of the given key object
Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory
Generates a public key object from the provided key specification (key material)
Generates a private key object from the provided key specification (key material)
Returns a specification (key material) of the given key object
Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory
Adds a node to the node list for a given value
Merge the current value's nodeset set by lookupKey() with _nodes
This method must be called by the code generated by the id() function prior to returning the node iterator
Return an IntegerArray for the DOM Node which has the given id
<p>This method must be called by the code generated by the key() function prior to returning the node iterator
<p>Callers should not call next() after it returns END
Given a context node and the argument to the XPath <code>id</code> function, checks whether the context node is in the set of nodes that results from that reference to the <code>id</code> function
<p>Given a context node and the second argument to the XSLT <code>key</code> function, checks whether the context node is in the set of nodes that results from that reference to the <code>key</code> function
<p>Resets the iterator to the last start node
<p>Returns the number of elements in this iterator
<p>Returns the position of the current node in the set
<p>Remembers the current node for the next call to gotoMark()
<p>Restores the current node remembered by setMark()
<p>Set start to END should 'close' the iterator, i
<p>Get start to END should 'close' the iterator, i
<p>True if this iterator has a reversed axis
<p>Returns a deep copy of this iterator
Create a {@link KeyIndexIterator} that iterates over the nodes that result from a reference to the XSLT <code>key</code> function or XPath <code>id</code> function
Create a {@link KeyIndexIterator} that iterates over the nodes that result from a reference to the XSLT <code>key</code> function or XPath <code>id</code> function
Create a {@link KeyIndexIterator} that iterates over the nodes that result from a reference to the XSLT <code>key</code> function or XPath <code>id</code> function
Retrieve nodes for a particular key value or a particular id argument value
Set context node for the iterator
Get the next node in the iteration
Resets the iterator to the last start node
Evaluate the reference to the <code>key</code> or <code>id</code> function with the context specified by {@link #setStartNode(int)} and set up this iterator to iterate over the DTM nodes that are to be returned
Returns the number of nodes in this iterator
Return the node at the given position
Advance to the next node represented by this {@link HeapNode}
Creates a deep copy of this {@link HeapNode}
Remembers the current node for the next call to {@link #gotoMark()}
Restores the current node remembered by {@link #setMark()}
Performs a comparison of the two heap nodes
<p>Sets context with respect to which this heap node is evaluated
Reset the heap node back to its beginning
Returns an {@link java
Return the optional Id attribute of this <code>KeyInfo</code>, which may be useful for referencing this <code>KeyInfo</code> from other XML structures
Marshals the key info to XML
Returns a <code>KeyInfoFactory</code> that supports the specified XML processing mechanism and representation type (ex: "DOM")
Returns a <code>KeyInfoFactory</code> that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied by the specified provider
Returns a <code>KeyInfoFactory</code> that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied by the specified provider
Returns a <code>KeyInfoFactory</code> that supports the default XML processing mechanism and representation type ("DOM")
Returns the type of the XML processing mechanism and representation supported by this <code>KeyInfoFactory</code> (ex: "DOM")
Returns the provider of this <code>KeyInfoFactory</code>
Creates a <code>KeyInfo</code> containing the specified list of key information types
Creates a <code>KeyInfo</code> containing the specified list of key information types and optional id
Creates a <code>KeyName</code> from the specified name
Creates a <code>KeyValue</code> from the specified public key
Creates a <code>PGPData</code> from the specified PGP public key identifier
Creates a <code>PGPData</code> from the specified PGP public key identifier, and optional key material packet and list of external elements
Creates a <code>PGPData</code> from the specified PGP key material packet and optional list of external elements
Creates a <code>RetrievalMethod</code> from the specified URI
Creates a <code>RetrievalMethod</code> from the specified parameters
Creates a <code>X509Data</code> containing the specified list of X
Creates an <code>X509IssuerSerial</code> from the specified X
Indicates whether a specified feature is supported
Returns a reference to the <code>URIDereferencer</code> that is used by default to dereference URIs in {@link RetrievalMethod} objects
Unmarshals a new <code>KeyInfo</code> instance from a mechanism-specific <code>XMLStructure</code> (ex: {@link DOMStructure}) instance
Method getURIAttr
Method getURI
Sets the <code>Id</code> attribute
Returns the <code>Id</code> attribute
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Invoked when a key has been typed
Invoked when a key has been pressed
Invoked when a key has been released
Fetches the name of the set of key-bindings
Fetches the default action to fire if a key is typed (i
Set the default action to fire if a key is typed
Fetches the action appropriate for the given symbolic event sequence
Fetches all of the keystrokes in this map that are bound to some action
Fetches all of the actions defined in this keymap
Fetches the keystrokes that will result in the given action
Determines if the given key sequence is locally defined
Adds a binding to the keymap
Removes a binding from the keymap
Removes all bindings from the keymap
Fetches the parent keymap used to resolve key-bindings
Sets the parent keymap, which will be used to resolve key-bindings
Returns the name of this <code>KeyName</code>
Returns a reference to the public key component of this key pair
Returns a reference to the private key component of this key pair
Returns the standard name of the algorithm for this key pair generator
Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
Returns the provider of this key pair generator object
Initializes the key pair generator for a certain keysize using a default parameter set and the {@code SecureRandom} implementation of the highest-priority installed provider as the source of randomness
Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set)
Initializes the key pair generator using the specified parameter set and the {@code SecureRandom} implementation of the highest-priority installed provider as the source of randomness
Initializes the key pair generator with the given parameter set and source of randomness
Generates a key pair
Generates a key pair
Initializes the key pair generator for a certain keysize, using the default parameter set
Initializes the key pair generator using the specified parameter set and user-provided source of randomness
Generates a key pair
Returns the key being referred to
{referenced key} Required if {identity-constraint category} is keyref, forbidden otherwise
Resolve the Key object
Method length
Method getX509Certificate
Method getPublicKey
This method is used for registering {@link KeyResolverSpi}s which are available to <I>all</I> {@link com
This method is used for registering {@link KeyResolverSpi}s which are available to <I>all</I> {@link com
This method is used for registering {@link KeyResolverSpi}s which are available to <I>all</I> {@link com
This method is used for registering {@link KeyResolverSpi}s which are available to <I>all</I> {@link com
This method registers the default resolvers
Method resolvePublicKey
Method resolveX509Certificate
Method setProperty
Method getProperty
Method understandsProperty
Method resolverClassName
Set whether secure validation is enabled or not
This method returns whether the KeyResolverSpi is able to perform the requested action
Method engineResolvePublicKey
Method engineLookupAndResolvePublicKey
Method engineResolveCertificate
Method engineLookupResolveX509Certificate
Method engineResolveSecretKey
Method engineLookupAndResolveSecretKey
Method engineLookupAndResolvePrivateKey
Method engineSetProperty
Method engineGetProperty
Method understandsProperty
Attempts to find a key that satisfies the specified constraints
Returns a <code>KeySelector</code> that always selects the specified key, regardless of the <code>KeyInfo</code> passed to it
Returns a string representation of this purpose ("sign", "verify", "encrypt", or "decrypt")
Returns the cause of this <code>KeySelectorException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>KeySelectorException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>KeySelectorException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>KeySelectorException</code>, its backtrace and the cause's backtrace to the specified print writer
Returns the selected key
Returns a keystore object of the specified type
Returns a keystore object of the specified type
Returns a keystore object of the specified type
Returns the default keystore type as specified by the {@code keystore
Returns the provider of this keystore
Returns the type of this keystore
Returns the key associated with the given alias, using the given password to recover it
Returns the certificate chain associated with the given alias
Returns the certificate associated with the given alias
Returns the creation date of the entry identified by the given alias
Assigns the given key to the given alias, protecting it with the given password
Assigns the given key (that has already been protected) to the given alias
Assigns the given trusted certificate to the given alias
Deletes the entry identified by the given alias from this keystore
Lists all the alias names of this keystore
Checks if the given alias exists in this keystore
Retrieves the number of entries in this keystore
Returns true if the entry identified by the given alias was created by a call to {@code setKeyEntry}, or created by a call to {@code setEntry} with a {@code PrivateKeyEntry} or a {@code SecretKeyEntry}
Returns true if the entry identified by the given alias was created by a call to {@code setCertificateEntry}, or created by a call to {@code setEntry} with a {@code TrustedCertificateEntry}
Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
Stores this keystore to the given output stream, and protects its integrity with the given password
Stores this keystore using the given {@code LoadStoreParameter}
Loads this KeyStore from the given input stream
Loads this keystore using the given {@code LoadStoreParameter}
Gets a keystore {@code Entry} for the specified alias with the specified protection parameter
Saves a keystore {@code Entry} under the specified alias
Determines if the keystore {@code Entry} for the specified {@code alias} is an instance or subclass of the specified {@code entryClass}
Gets the parameter used to protect keystore data
Gets the name of the protection algorithm
Gets the parameters supplied for the protection algorithm
Gets the password
Clears the password
Determines if password has been cleared
Returns the CallbackHandler
Retrieves the attributes associated with an entry
Returns the attribute's name
Returns the attribute's value
Gets the {@code PrivateKey} from this entry
Gets the {@code Certificate} chain from this entry
Gets the end entity {@code Certificate} from the certificate chain in this entry
Retrieves the attributes associated with an entry
Returns a string representation of this PrivateKeyEntry
Gets the {@code SecretKey} from this entry
Retrieves the attributes associated with an entry
Returns a string representation of this SecretKeyEntry
Gets the trusted {@code Certficate} from this entry
Retrieves the attributes associated with an entry
Returns a string representation of this TrustedCertificateEntry
Returns the KeyStore described by this object
Returns the ProtectionParameters that should be used to obtain the {@link KeyStore
Returns a new Builder that encapsulates the given KeyStore
Returns a new Builder object
Returns a new Builder object
Initialize this <code>LoginModule</code>
Authenticate the user
Abstract method to commit the authentication process (phase 2)
<p> This method is called if the LoginContext's overall authentication failed
Logout a user
Returns the key associated with the given alias, using the given password to recover it
Returns the certificate chain associated with the given alias
Returns the certificate associated with the given alias
Returns the creation date of the entry identified by the given alias
Assigns the given key to the given alias, protecting it with the given password
Assigns the given key (that has already been protected) to the given alias
Assigns the given certificate to the given alias
Deletes the entry identified by the given alias from this keystore
Lists all the alias names of this keystore
Checks if the given alias exists in this keystore
Retrieves the number of entries in this keystore
Returns true if the entry identified by the given alias was created by a call to {@code setKeyEntry}, or created by a call to {@code setEntry} with a {@code PrivateKeyEntry} or a {@code SecretKeyEntry}
Returns true if the entry identified by the given alias was created by a call to {@code setCertificateEntry}, or created by a call to {@code setEntry} with a {@code TrustedCertificateEntry}
Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
Stores this keystore to the given output stream, and protects its integrity with the given password
Stores this keystore using the given {@code KeyStore
Loads the keystore from the given input stream
Loads the keystore using the given {@code KeyStore
Gets a {@code KeyStore
Saves a {@code KeyStore
Determines if the keystore {@code Entry} for the specified {@code alias} is an instance or subclass of the specified {@code entryClass}
Returns a shared instance of a <code>KeyStroke</code> that represents a <code>KEY_TYPED</code> event for the specified character
Returns an instance of a KeyStroke, specifying whether the key is considered to be activated when it is pressed or released
Returns a shared instance of a {@code KeyStroke} that represents a {@code KEY_TYPED} event for the specified Character object and a set of modifiers
Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released
Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers
Returns a KeyStroke which represents the stroke which generated a given KeyEvent
Parses a string and returns a <code>KeyStroke</code>
Returns a {@code KeyTab} instance from a {@code File} object that is bound to an unknown service principal
Returns an unbound {@code KeyTab} instance from a {@code File} object
Returns a {@code KeyTab} instance from a {@code File} object that is bound to the specified service principal
Returns the default {@code KeyTab} instance that is bound to an unknown service principal
Returns the default unbound {@code KeyTab} instance
Returns the default {@code KeyTab} instance that is bound to the specified service principal
Returns fresh keys for the given Kerberos principal
Checks if the keytab file exists
Returns a hashcode for this KeyTab
Compares the specified Object with this KeyTab for equality
Returns the service principal this {@code KeyTab} object is bound to
Returns if the keytab is bound to a principal
Method prinoutKeyInfo
Returns the public key of this <code>KeyValue</code>
Method getPublicKey
Initialize this <code>LoginModule</code>
Authenticate the user <p>
<p> This method is called if the LoginContext's overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded)
<p> This method is called if the LoginContext's overall authentication failed
Logout the user
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Creates the peer for this label
Gets the current alignment of this label
Sets the alignment for this label to the specified alignment
Gets the text of this label
Sets the text for this label to the specified text
Returns a string representing the state of this <code>Label</code>
Gets the AccessibleContext associated with this Label
Get the accessible name of this object
Get the role of this object
Sets the text to be displayed on the label
Sets the alignment of the label text
Sets whether or not the view is underlined
Sets whether or not the view has a strike/line through it
Sets whether or not the view represents a superscript
Sets whether or not the view represents a subscript
Sets the background color for the view
Sets the cached properties from the attributes
Fetches the <code>FontMetrics</code> used for this view
Fetches the background color to use to render the glyphs
Fetches the foreground color to use to render the glyphs
Fetches the font that the glyphs should be based upon
Determines if the glyphs should be underlined
Determines if the glyphs should have a strikethrough line
Determines if the glyphs should be rendered as superscript
Determines if the glyphs should be rendered as subscript
Gives notification from the document that attributes were changed in a location that this view is responsible for
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided {@link MethodHandle}, after appropriate type adaptation and partial evaluation of arguments
Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided {@link MethodHandle}, after appropriate type adaptation and partial evaluation of arguments
Call corresponding visitor method(s)
Set the retrieved {@code Locale}
Get the retrieved {@code Locale}
Call corresponding visitor method(s)
When leaf Views (such as LabelView) are rendering they should call into this method
Paints the specified component
Processes {@code AWTEvent}s for {@code JLayer} and <b>all its descendants</b> to this {@code LayerUI} instance
Processes component events occurring on the {@link JLayer} or any of its subcomponents
Processes focus events occurring on the {@link JLayer} or any of its subcomponents
Processes key events occurring on the {@link JLayer} or any of its subcomponents
Processes mouse events occurring on the {@link JLayer} or any of its subcomponents
Processes mouse motion event occurring on the {@link JLayer} or any of its subcomponents
Processes mouse wheel event occurring on the {@link JLayer} or any of its subcomponents
Processes input event occurring on the {@link JLayer} or any of its subcomponents
Processes hierarchy event occurring on the {@link JLayer} or any of its subcomponents
Processes hierarchy bounds event occurring on the {@link JLayer} or any of its subcomponents
Invoked when {@link javax
Configures the {@code JLayer} this {@code LayerUI} is set to
Reverses the configuration which was previously set in the {@link #installUI(JComponent)} method
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Returns an array of all the property change listeners registered on this component
Adds a PropertyChangeListener to the listener list for a specific property
Removes a {@code PropertyChangeListener} from the listener list for a specific property
Returns an array of all the listeners which have been associated with the named property
Support for reporting bound property changes for Object properties
Notifies the {@code LayerUI} when any of its property are changed and enables updating every {@code JLayer} this {@code LayerUI} instance is set to
If the {@code JLayer}'s view component is not {@code null}, this calls the view's {@code getBaseline()} method
If the {@code JLayer}'s view component is not {@code null}, this returns the result of the view's {@code getBaselineResizeBehavior()} method
Causes the passed instance of {@code JLayer} to lay out its components
If the {@code JLayer}'s view component is not {@code null}, this returns the result of  the view's {@code getPreferredSize()} method
If the {@code JLayer}'s view component is not {@code null}, this returns the result of  the view's {@code getMinimalSize()} method
If the {@code JLayer}'s view component is not {@code null}, this returns the result of  the view's {@code getMaximumSize()} method
Paints the specified region in the {@code JLayer} this {@code LayerUI} is set to, immediately
Returns the Component that should receive the focus after aComponent
Returns the Component that should receive the focus before aComponent
Returns the first Component in the traversal cycle
Returns the last Component in the traversal cycle
Determines whether the specified <code>Component</code> is an acceptable choice as the new focus owner
If the layout manager uses a per-component string, adds the component <code>comp</code> to the layout, associating it with the string specified by <code>name</code>
Removes the specified component from the layout
Calculates the preferred size dimensions for the specified container, given the components it contains
Calculates the minimum size dimensions for the specified container, given the components it contains
Lays out the specified container
Adds the specified component to the layout, using the specified constraint object
Calculates the maximum size dimensions for the specified container, given the components it contains
Returns the alignment along the x axis
Returns the alignment along the y axis
Invalidates the layout, indicating that if the layout manager has cached information it should be discarded
Convert a point in user space to a location relative to the path
Convert a location relative to the path to a point in user coordinates
Fetch the default layout queue
Set the default layout queue
Add a task that is not needed immediately because the results are not believed to be visible
Used by the worker thread to get a new task to execute
Sets the shared instance of <code>LayoutStyle</code>
Returns the shared instance of <code>LayoutStyle</code>
Returns the amount of space to use between two components
Returns the amount of space to place between the component and specified edge of its parent
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the DNS name of the LDAP server
Returns the port number of the LDAP server
Returns a copy of this object
Returns a formatted string describing the parameters
Performs an extended operation
Creates a new instance of this context initialized using request controls
Reconnects to the LDAP server using the supplied controls and this context's environment
Retrieves the connection request controls in effect for this context
Sets the request controls for methods subsequently invoked on this context
Retrieves the request controls in effect for this context
Retrieves the response controls produced as a result of the last method invoked on this context
Initialize this <code>LoginModule</code>
Begin user authentication
Complete user authentication
Abort user authentication
Logout a user
Retrieves the number of components in this LDAP name
Determines whether this LDAP name is empty
Retrieves the components of this name as an enumeration of strings
Retrieves a component of this LDAP name as a string
Retrieves an RDN of this LDAP name as an Rdn
Creates a name whose components consist of a prefix of the components of this LDAP name
Creates a name whose components consist of a suffix of the components in this LDAP name
Determines whether this LDAP name starts with a specified LDAP name prefix
Determines whether the specified RDN sequence forms a prefix of this LDAP name
Determines whether this LDAP name ends with a specified LDAP name suffix
Determines whether the specified RDN sequence forms a suffix of this LDAP name
Adds the components of a name -- in order -- to the end of this name
Adds the RDNs of a name -- in order -- to the end of this name
Adds the components of a name -- in order -- at a specified position within this name
Adds the RDNs of a name -- in order -- at a specified position within this name
Adds a single component to the end of this LDAP name
Adds a single RDN to the end of this LDAP name
Adds a single component at a specified position within this LDAP name
Adds a single RDN at a specified position within this LDAP name
Removes a component from this LDAP name
Retrieves the list of relative distinguished names
Generates a new copy of this name
Returns a string representation of this LDAP name in a format defined by <a href="http://www
Determines whether two LDAP names are equal
Compares this LdapName with the specified Object for order
Computes the hash code of this LDAP name
Compares this principal to the specified object
Computes the hash code for this principal
Returns the name originally used to create this principal
Creates a string representation of this principal's name in the format defined by <a href="http://www
Retrieves the context at which to continue the method using the context's environment and no controls
Retrieves the context at which to continue the method using environment properties and no controls
Retrieves the context at which to continue the method using request controls and environment properties
Dump instruction as byte code to stream out
Set the index to constant pool and adjust size
Read needed data (e
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Read needed data (i
Call corresponding visitor method(s)
Returns the client VMID associated with the lease
Returns the lease duration
e
Get the host name of this end point
The ORBD's proxy port of this end point
Return the level's localization resource bundle name, or null if no localization bundle is defined
Return the non-localized string name of the Level
Return the localized string name of the Level, for the current default locale
Returns a string representation of this Level
Get the integer value for this level
Parse a level name string into a Level
Compare two objects for value equality
Generate a hashcode
Report the start of DTD declarations, if any
Report the end of DTD declarations
Report the beginning of some internal and external XML entities
Report the end of an entity
Report the start of a CDATA section
Report the end of a CDATA section
Report an XML comment anywhere in the document
specifies the policy value
Obtains the <code>Line
Opens the line, indicating that it should acquire any required system resources and become operational
Closes the line, indicating that any system resources in use by the line can be released
Indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound
Obtains the set of controls associated with this line
Indicates whether the line supports a control of the specified type
Obtains a control of the specified type, if there is any
Adds a listener to this line
Removes the specified listener from this line's list of listeners
Obtains the class of the line that this Line
Indicates whether the specified info object matches this one
Obtains a textual description of the line info
Returns the X coordinate of the start point in double precision
Returns the Y coordinate of the start point in double precision
Returns the start <code>Point2D</code> of this <code>Line2D</code>
Returns the X coordinate of the end point in double precision
Returns the Y coordinate of the end point in double precision
Returns the end <code>Point2D</code> of this <code>Line2D</code>
Sets the location of the end points of this <code>Line2D</code> to the specified double coordinates
Sets the location of the end points of this <code>Line2D</code> to the specified <code>Point2D</code> coordinates
Sets the location of the end points of this <code>Line2D</code> to the same as those end points of the specified <code>Line2D</code>
Returns an indicator of where the specified point {@code (px,py)} lies with respect to the line segment from {@code (x1,y1)} to {@code (x2,y2)}
Returns an indicator of where the specified point {@code (px,py)} lies with respect to this line segment
Returns an indicator of where the specified <code>Point2D</code> lies with respect to this line segment
Tests if the line segment from {@code (x1,y1)} to {@code (x2,y2)} intersects the line segment from {@code (x3,y3)} to {@code (x4,y4)}
Tests if the line segment from {@code (x1,y1)} to {@code (x2,y2)} intersects this line segment
Tests if the specified line segment intersects this line segment
Returns the square of the distance from a point to a line segment
Returns the distance from a point to a line segment
Returns the square of the distance from a point to this line segment
Returns the square of the distance from a <code>Point2D</code> to this line segment
Returns the distance from a point to this line segment
Returns the distance from a <code>Point2D</code> to this line segment
Returns the square of the distance from a point to a line
Returns the distance from a point to a line
Returns the square of the distance from a point to this line
Returns the square of the distance from a specified <code>Point2D</code> to this line
Returns the distance from a point to this line
Returns the distance from a <code>Point2D</code> to this line
Tests if a specified coordinate is inside the boundary of this <code>Line2D</code>
Tests if a given <code>Point2D</code> is inside the boundary of this <code>Line2D</code>
{@inheritDoc}
{@inheritDoc}
Tests if the interior of this <code>Line2D</code> entirely contains the specified set of rectangular coordinates
Tests if the interior of this <code>Line2D</code> entirely contains the specified <code>Rectangle2D</code>
{@inheritDoc}
Returns an iteration object that defines the boundary of this <code>Line2D</code>
Returns an iteration object that defines the boundary of this flattened <code>Line2D</code>
Creates a new object of the same class as this object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location of the end points of this <code>Line2D</code> to the specified float coordinates
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates and returns a {@link PaintContext} used to generate a linear color gradient pattern
Returns a copy of the start point of the gradient axis
Returns a copy of the end point of the gradient axis
Convenience method for getting the Color
Convenience method for getting the Color
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
Returns the color of the border
Returns the thickness of the border
Returns whether this border will be drawn with rounded corners
Returns whether or not the border is opaque
Returns the position at the end of the next layout
Returns the position at the end of the next layout
Returns the next layout, and updates the current position
Returns the next layout, and updates the current position
Returns the current position of this <code>LineBreakMeasurer</code>
Sets the current position of this <code>LineBreakMeasurer</code>
Updates this <code>LineBreakMeasurer</code> after a single character is inserted into the text, and sets the current position to the beginning of the paragraph
Updates this <code>LineBreakMeasurer</code> after a single character is deleted from the text, and sets the current position to the beginning of the paragraph
Obtains the audio line that is the source of this event
Obtains the event's type
Obtains the position in the line's audio data when the event occurred, expressed in sample frames
Obtains a string representation of the event
Indicates whether the specified object is equal to this event type, returning <code>true</code> if the objects are identical
Finalizes the hashcode method
Returns the type name as the string representation
Informs the listener that a line's state has changed
Find the start position of a line
Find the position corresponding to a (line,column)
Find the line containing a position; a line termination character is on the line it terminates
Find the column for a character position
Returns the number of characters (<code>char</code> values) in the text whose metrics are encapsulated by this <code>LineMetrics</code> object
Returns the ascent of the text
Returns the descent of the text
Returns the leading of the text
Returns the height of the text
Returns the baseline index of the text
Returns the baseline offsets of the text, relative to the baseline of the text
Returns the position of the strike-through line relative to the baseline
Returns the thickness of the strike-through line
Returns the position of the underline relative to the baseline
Returns the thickness of the underline
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump line number/pc pair to file stream in binary format
Get LineNumber attribute 
Reads the next byte of data from this input stream
Reads up to {@code len} bytes of data from this input stream into an array of bytes
Skips over and discards {@code n} bytes of data from this input stream
Sets the line number to the specified argument
Returns the current line number
Returns the number of bytes that can be read from this input stream without blocking
Marks the current position in this input stream
Repositions this stream to the position at the time the {@code mark} method was last called on this input stream
Set the current line number
Get the current line number
Read a single character
Read characters into a portion of an array
Read a line of text
Skip characters
Mark the present position in the stream
Reset the stream to the most recent mark
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump line number table attribute to file stream in binary format
Map byte code positions to source code lines
Inserts the specified element at the end of this deque unless it would violate capacity restrictions
Retrieves and removes the head of the queue represented by this deque
Retrieves, but does not remove, the head of the queue represented by this deque
Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking
Removes the first occurrence of the specified element from this deque
Returns the number of elements in this deque
Returns {@code true} if this deque contains the specified element
Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this deque
Returns an iterator over the elements in this deque in proper sequence
Returns an iterator over the elements in this deque in reverse sequential order
Returns a {@link Spliterator} over the elements in this deque
Returns the number of elements in this queue
Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
Inserts the specified element at the tail of this queue, waiting if necessary for space to become available
Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning {@code true} upon success and {@code false} if this queue is full
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Returns an array containing all of the elements in this queue, in proper sequence
Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this queue
Returns an iterator over the elements in this queue in proper sequence
Returns a {@link Spliterator} over the elements in this queue
Returns <tt>true</tt> if this map maps one or more keys to the specified value
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
{@inheritDoc}
{@inheritDoc}
Returns <tt>true</tt> if this map should remove its eldest entry
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Creates a <em><a href="Spliterator
Returns the first element in this list
Returns the last element in this list
Removes and returns the first element from this list
Removes and returns the last element from this list
Inserts the specified element at the beginning of this list
Appends the specified element to the end of this list
Returns {@code true} if this list contains the specified element
Returns the number of elements in this list
Appends the specified element to the end of this list
Removes the first occurrence of the specified element from this list, if it is present
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator
Inserts all of the elements in the specified collection into this list, starting at the specified position
Removes all of the elements from this list
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
Retrieves, but does not remove, the head (first element) of this list
Retrieves, but does not remove, the head (first element) of this list
Retrieves and removes the head (first element) of this list
Retrieves and removes the head (first element) of this list
Adds the specified element as the tail (last element) of this list
Inserts the specified element at the front of this list
Inserts the specified element at the end of this list
Retrieves, but does not remove, the first element of this list, or returns {@code null} if this list is empty
Retrieves, but does not remove, the last element of this list, or returns {@code null} if this list is empty
Retrieves and removes the first element of this list, or returns {@code null} if this list is empty
Retrieves and removes the last element of this list, or returns {@code null} if this list is empty
Pushes an element onto the stack represented by this list
Pops an element from the stack represented by this list
Removes the first occurrence of the specified element in this list (when traversing the list from head to tail)
Removes the last occurrence of the specified element in this list (when traversing the list from head to tail)
Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list
Returns a shallow copy of this {@code LinkedList}
Returns an array containing all of the elements in this list in proper sequence (from first to last element)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
Creates a <em><a href="Spliterator
Returns a {@link Spliterator} over the elements in this queue
Inserts the specified element at the tail of this queue
Inserts the specified element at the tail of this queue
Inserts the specified element at the tail of this queue
Inserts the specified element at the tail of this queue
Transfers the element to a waiting consumer immediately, if possible
Transfers the element to a consumer, waiting if necessary to do so
Transfers the element to a consumer if it is possible to do so before the timeout elapses
Returns an iterator over the elements in this queue in proper sequence
Returns {@code true} if this queue contains no elements
Returns the number of elements in this queue
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Always returns {@code Integer
Retrieves the leading portion of the link name that was resolved successfully
Retrieves the remaining unresolved portion of the link name
Retrieves the object to which resolution was successful
Retrieves the explanation associated with the problem encounter when resolving a link
Sets the explanation associated with the problem encounter when resolving a link
Sets the resolved link name field of this exception
Sets the remaining link name field of this exception
Sets the link resolved object field of this exception
Generates the string representation of this exception
Generates the string representation of this exception
Retrieves the name of this link
The style sheet
Returns the number of elements in this list
Returns <tt>true</tt> if this list contains no elements
Returns <tt>true</tt> if this list contains the specified element
Returns an iterator over the elements in this list in proper sequence
Returns an array containing all of the elements in this list in proper sequence (from first to last element)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
Appends the specified element to the end of this list (optional operation)
Removes the first occurrence of the specified element from this list, if it is present (optional operation)
Returns <tt>true</tt> if this list contains all of the elements of the specified collection
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)
Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
Removes from this list all of its elements that are contained in the specified collection (optional operation)
Retains only the elements in this list that are contained in the specified collection (optional operation)
Replaces each element of this list with the result of applying the operator to that element
Sorts this list according to the order induced by the specified {@link Comparator}
Removes all of the elements from this list (optional operation)
Compares the specified object with this list for equality
Returns the hash code value for this list
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element (optional operation)
Inserts the specified element at the specified position in this list (optional operation)
Removes the element at the specified position in this list (optional operation)
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
Returns a list iterator over the elements in this list (in proper sequence)
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Returns a view of the portion of this list between the specified <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive
Creates a {@link Spliterator} over the elements in this list
Return a component that has been configured to display the specified value
Returns the event type
Returns the lower index of the range
Returns the upper index of the range
Returns a string representation of this ListDataEvent
Sent after the indices in the index0,index1 interval have been inserted in the data model
Sent after the indices in the index0,index1 interval have been removed from the data model
Sent when the contents of the list has changed in a way that's too complex to characterize with the previous methods
Checks that "content" string is valid
Receive notification of a warning
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Receive notification of a warning
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Print out location information about the exception
Print out the specific source line that caused the exception, if possible to load it
Return the specific source line that caused the exception, if possible to load it; allow exceptions to be thrown
User-settable behavior: when to re-throw exceptions
User-settable behavior: when to re-throw exceptions
User-settable behavior: when to re-throw exceptions
User-settable behavior: when to re-throw exceptions
User-settable behavior: when to re-throw exceptions
User-settable behavior: when to re-throw exceptions
Returns {@code true} if this list iterator has more elements when traversing the list in the forward direction
Returns the next element in the list and advances the cursor position
Returns {@code true} if this list iterator has more elements when traversing the list in the reverse direction
Returns the previous element in the list and moves the cursor position backwards
Returns the index of the element that would be returned by a subsequent call to {@link #next}
Returns the index of the element that would be returned by a subsequent call to {@link #previous}
Removes from the list the last element that was returned by {@link #next} or {@link #previous} (optional operation)
Replaces the last element returned by {@link #next} or {@link #previous} with the specified element (optional operation)
Inserts the specified element into the list (optional operation)
Returns the length of the list
Returns the value at the specified index
Adds a listener to the list that's notified each time a change to the data model occurs
Removes a listener from the list that's notified each time a change to the data model occurs
Returns the indices of the list items that are currently selected
Adds an item to the list at the specified index
Deletes items from the list
Removes all items from the list
Selects the item at the specified {@code index}
De-selects the item at the specified {@code index}
Makes sure that the item at the specified {@code index} is visible, by scrolling the list or similar
Toggles multiple selection mode on or off
Returns the preferred size for a list with the specified number of rows
Returns the minimum size for a list with the specified number of rows
Returns an <code>Enumeration</code> of the keys contained in this <code>ResourceBundle</code> and its parent bundles
Returns a <code>Set</code> of the keys contained <em>only</em> in this <code>ResourceBundle</code>
Returns an array in which each item is a pair of objects in an <code>Object</code> array
Returns the index of the first row whose selection may have changed
Returns the index of the last row whose selection may have changed
Returns whether or not this is one in a series of multiple events, where changes are still being made
Returns a {@code String} that displays and identifies this object's properties
Called whenever the value of the selection changes
Changes the selection to be between {@code index0} and {@code index1} inclusive
Changes the selection to be the set union of the current selection and the indices between {@code index0} and {@code index1} inclusive
Changes the selection to be the set difference of the current selection and the indices between {@code index0} and {@code index1} inclusive
Returns the first selected index or -1 if the selection is empty
Returns the last selected index or -1 if the selection is empty
Returns true if the specified index is selected
Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()
Set the anchor selection index
Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()
Set the lead selection index
Change the selection to the empty set
Returns true if no indices are selected
Insert length indices beginning before/after index
Remove the indices in the interval index0,index1 (inclusive) from the selection model
Sets the {@code valueIsAdjusting} property, which indicates whether or not upcoming selection changes should be considered part of a single change
Returns {@code true} if the selection is undergoing a series of changes
Sets the selection mode
Returns the current selection mode
Add a listener to the list that's notified each time a change to the selection occurs
Remove a listener from the list that's notified each time a change to the selection occurs
Returns the cell index in the specified {@code JList} closest to the given location in the list's coordinate system
Returns the origin in the given {@code JList}, of the specified item, in the list's coordinate system
Returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices
Calculates the desired shape of the list
Renders using the given rendering surface and area on that surface
Paints one of the children; called by paint()
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the ObjectType of the referenced class or interface that may be loaded and resolved
Returns the type associated with this instruction
Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall
Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall
Loads a class from the location specified by the <code>java
Loads a class from a URL
Returns the security context of the given class loader
Call corresponding visitor method(s)
Returns a Java reference to the servant which should be used for this request
Check that the servant in info (which must not be null) is an instance of the expectedType
Obtains the current date from the system clock in the default time-zone
Obtains the current date from the system clock in the specified time-zone
Obtains the current date from the specified clock
Obtains an instance of {@code LocalDate} from a year, month and day
Obtains an instance of {@code LocalDate} from a year, month and day
Obtains an instance of {@code LocalDate} from a year and day-of-year
Obtains an instance of {@code LocalDate} from the epoch day count
Obtains an instance of {@code LocalDate} from a temporal object
Obtains an instance of {@code LocalDate} from a text string such as {@code 2007-12-03}
Obtains an instance of {@code LocalDate} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this date as an {@code int}
Gets the value of the specified field from this date as a {@code long}
Gets the chronology of this date, which is the ISO calendar system
Gets the era applicable at this date
Gets the year field
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Gets the day-of-month field
Gets the day-of-year field
Gets the day-of-week field, which is an enum {@code DayOfWeek}
Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Returns the length of the month represented by this date
Returns the length of the year represented by this date
Returns an adjusted copy of this date
Returns a copy of this date with the specified field set to a new value
Returns a copy of this {@code LocalDate} with the year altered
Returns a copy of this {@code LocalDate} with the month-of-year altered
Returns a copy of this {@code LocalDate} with the day-of-month altered
Returns a copy of this {@code LocalDate} with the day-of-year altered
Returns a copy of this date with the specified amount added
Returns a copy of this date with the specified amount added
Returns a copy of this {@code LocalDate} with the specified number of years added
Returns a copy of this {@code LocalDate} with the specified number of months added
Returns a copy of this {@code LocalDate} with the specified number of weeks added
Returns a copy of this {@code LocalDate} with the specified number of days added
Returns a copy of this date with the specified amount subtracted
Returns a copy of this date with the specified amount subtracted
Returns a copy of this {@code LocalDate} with the specified number of years subtracted
Returns a copy of this {@code LocalDate} with the specified number of months subtracted
Returns a copy of this {@code LocalDate} with the specified number of weeks subtracted
Returns a copy of this {@code LocalDate} with the specified number of days subtracted
Queries this date using the specified query
Adjusts the specified temporal object to have the same date as this object
Calculates the amount of time until another date in terms of the specified unit
Calculates the period between this date and another date as a {@code Period}
Formats this date using the specified formatter
Combines this date with a time to create a {@code LocalDateTime}
Combines this date with a time to create a {@code LocalDateTime}
Combines this date with a time to create a {@code LocalDateTime}
Combines this date with a time to create a {@code LocalDateTime}
Combines this date with an offset time to create an {@code OffsetDateTime}
Combines this date with the time of midnight to create a {@code LocalDateTime} at the start of this date
Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone
Compares this date to another date
Checks if this date is after the specified date
Checks if this date is before the specified date
Checks if this date is equal to the specified date
Checks if this date is equal to another date
A hash code for this date
Outputs this date as a {@code String}, such as {@code 2007-12-03}
Obtains the current date-time from the system clock in the default time-zone
Obtains the current date-time from the system clock in the specified time-zone
Obtains the current date-time from the specified clock
Obtains an instance of {@code LocalDateTime} from year, month, day, hour and minute, setting the second and nanosecond to zero
Obtains an instance of {@code LocalDateTime} from year, month, day, hour, minute and second, setting the nanosecond to zero
Obtains an instance of {@code LocalDateTime} from year, month, day, hour, minute, second and nanosecond
Obtains an instance of {@code LocalDateTime} from year, month, day, hour and minute, setting the second and nanosecond to zero
Obtains an instance of {@code LocalDateTime} from year, month, day, hour, minute and second, setting the nanosecond to zero
Obtains an instance of {@code LocalDateTime} from year, month, day, hour, minute, second and nanosecond
Obtains an instance of {@code LocalDateTime} from a date and time
Obtains an instance of {@code LocalDateTime} from an {@code Instant} and zone ID
Obtains an instance of {@code LocalDateTime} using seconds from the epoch of 1970-01-01T00:00:00Z
Obtains an instance of {@code LocalDateTime} from a temporal object
Obtains an instance of {@code LocalDateTime} from a text string such as {@code 2007-12-03T10:15:30}
Obtains an instance of {@code LocalDateTime} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this date-time as an {@code int}
Gets the value of the specified field from this date-time as a {@code long}
Gets the {@code LocalDate} part of this date-time
Gets the year field
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Gets the day-of-month field
Gets the day-of-year field
Gets the day-of-week field, which is an enum {@code DayOfWeek}
Gets the {@code LocalTime} part of this date-time
Gets the hour-of-day field
Gets the minute-of-hour field
Gets the second-of-minute field
Gets the nano-of-second field
Returns an adjusted copy of this date-time
Returns a copy of this date-time with the specified field set to a new value
Returns a copy of this {@code LocalDateTime} with the year altered
Returns a copy of this {@code LocalDateTime} with the month-of-year altered
Returns a copy of this {@code LocalDateTime} with the day-of-month altered
Returns a copy of this {@code LocalDateTime} with the day-of-year altered
Returns a copy of this {@code LocalDateTime} with the hour-of-day altered
Returns a copy of this {@code LocalDateTime} with the minute-of-hour altered
Returns a copy of this {@code LocalDateTime} with the second-of-minute altered
Returns a copy of this {@code LocalDateTime} with the nano-of-second altered
Returns a copy of this {@code LocalDateTime} with the time truncated
Returns a copy of this date-time with the specified amount added
Returns a copy of this date-time with the specified amount added
Returns a copy of this {@code LocalDateTime} with the specified number of years added
Returns a copy of this {@code LocalDateTime} with the specified number of months added
Returns a copy of this {@code LocalDateTime} with the specified number of weeks added
Returns a copy of this {@code LocalDateTime} with the specified number of days added
Returns a copy of this {@code LocalDateTime} with the specified number of hours added
Returns a copy of this {@code LocalDateTime} with the specified number of minutes added
Returns a copy of this {@code LocalDateTime} with the specified number of seconds added
Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds added
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of years subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of months subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of weeks subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of days subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of hours subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of minutes subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of seconds subtracted
Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds subtracted
Queries this date-time using the specified query
Adjusts the specified temporal object to have the same date and time as this object
Calculates the amount of time until another date-time in terms of the specified unit
Formats this date-time using the specified formatter
Combines this date-time with an offset to create an {@code OffsetDateTime}
Combines this date-time with a time-zone to create a {@code ZonedDateTime}
Compares this date-time to another date-time
Checks if this date-time is after the specified date-time
Checks if this date-time is before the specified date-time
Checks if this date-time is equal to the specified date-time
Checks if this date-time is equal to another date-time
A hash code for this date-time
Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30}
Gets the current value of the default locale for this instance of the Java Virtual Machine
Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine
Sets the default locale for this instance of the Java Virtual Machine
Sets the default locale for the specified Category for this instance of the Java Virtual Machine
Returns an array of all installed locales
Returns a list of all 2-letter country codes defined in ISO 3166
Returns a list of all 2-letter language codes defined in ISO 639
Returns the language code of this Locale
Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code
Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M
Returns the variant code for this locale
Returns {@code true} if this {@code Locale} has any <a href="#def_extensions"> extensions</a>
Returns a copy of this {@code Locale} with no <a href="#def_extensions"> extensions</a>
Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key
Returns the set of extension keys associated with this locale, or the empty set if it has no extensions
Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes
Returns the Unicode locale type associated with the specified Unicode locale key for this locale
Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none
Returns a string representation of this <code>Locale</code> object, consisting of language, country, variant, script, and extensions as below: <blockquote> language + "_" + country + "_" + (variant + "_#" | "#") + script + "-" + extensions </blockquote> Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case
Returns a well-formed IETF BCP 47 language tag representing this locale
Returns a locale for the specified IETF BCP 47 language tag string
Returns a three-letter abbreviation of this locale's language
Returns a three-letter abbreviation for this locale's country
Returns a name for the locale's language that is appropriate for display to the user
Returns a name for the locale's language that is appropriate for display to the user
Returns a name for the the locale's script that is appropriate for display to the user
Returns a name for the locale's script that is appropriate for display to the user
Returns a name for the locale's country that is appropriate for display to the user
Returns a name for the locale's country that is appropriate for display to the user
Returns a name for the locale's variant code that is appropriate for display to the user
Returns a name for the locale's variant code that is appropriate for display to the user
Returns a name for the locale that is appropriate for display to the user
Returns a name for the locale that is appropriate for display to the user
Overrides Cloneable
Override hashCode
Returns true if this Locale is equal to another object
Returns a list of matching {@code Locale} instances using the filtering mechanism defined in RFC 4647
Returns a list of matching {@code Locale} instances using the filtering mechanism defined in RFC 4647
Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Returns a {@code Locale} instance for the best-matching language tag using the lookup mechanism defined in RFC 4647
Returns the best-matching language tag using the lookup mechanism defined in RFC 4647
Resets the <code>Builder</code> to match the provided <code>locale</code>
Resets the Builder to match the provided IETF BCP 47 language tag
Sets the language
Sets the script
Sets the region
Sets the variant
Sets the extension for the given key
Sets the Unicode locale keyword type for the given key
Adds a unicode locale attribute, if not already present, otherwise has no effect
Removes a unicode locale attribute, if present, otherwise has no effect
Resets the builder to its initial, empty state
Resets the extensions to their initial, empty state
Returns an instance of <code>Locale</code> created from the fields set on this builder
Returns the language range of this {@code LanguageRange}
Returns the weight of this {@code LanguageRange}
Parses the given {@code ranges} to generate a Language Priority List
Parses the given {@code ranges} to generate a Language Priority List, and then customizes the list using the given {@code map}
Generates a new customized Language Priority List using the given {@code priorityList} and {@code map}
Returns a hash code value for the object
Compares this object to the specified object
Returns a localized name for the given <a href="http://www
Returns a localized name for the given <a href="http://www
Returns a localized name for the given <a href="http://www
Returns a localized name for the given variant code and the given locale that is appropriate for display to the user
Returns an array of all locales for which this locale service provider can provide localized objects or names
Returns {@code true} if the given {@code locale} is supported by this locale service provider
<P>Determines whether the two object references are equivalent, so far as the ORB can easily determine
Always returns <code>false</code>
Returns a hash value that is consistent for the lifetime of the object, using the given number as the maximum
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Throws an <code>org
Register the Closure with the given name
Obtains the current time from the system clock in the default time-zone
Obtains the current time from the system clock in the specified time-zone
Obtains the current time from the specified clock
Obtains an instance of {@code LocalTime} from an hour and minute
Obtains an instance of {@code LocalTime} from an hour, minute and second
Obtains an instance of {@code LocalTime} from an hour, minute, second and nanosecond
Obtains an instance of {@code LocalTime} from a second-of-day value
Obtains an instance of {@code LocalTime} from a nanos-of-day value
Obtains an instance of {@code LocalTime} from a temporal object
Obtains an instance of {@code LocalTime} from a text string such as {@code 10:15}
Obtains an instance of {@code LocalTime} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this time as an {@code int}
Gets the value of the specified field from this time as a {@code long}
Gets the hour-of-day field
Gets the minute-of-hour field
Gets the second-of-minute field
Gets the nano-of-second field
Returns an adjusted copy of this time
Returns a copy of this time with the specified field set to a new value
Returns a copy of this {@code LocalTime} with the hour-of-day altered
Returns a copy of this {@code LocalTime} with the minute-of-hour altered
Returns a copy of this {@code LocalTime} with the second-of-minute altered
Returns a copy of this {@code LocalTime} with the nano-of-second altered
Returns a copy of this {@code LocalTime} with the time truncated
Returns a copy of this time with the specified amount added
Returns a copy of this time with the specified amount added
Returns a copy of this {@code LocalTime} with the specified number of hours added
Returns a copy of this {@code LocalTime} with the specified number of minutes added
Returns a copy of this {@code LocalTime} with the specified number of seconds added
Returns a copy of this {@code LocalTime} with the specified number of nanoseconds added
Returns a copy of this time with the specified amount subtracted
Returns a copy of this time with the specified amount subtracted
Returns a copy of this {@code LocalTime} with the specified number of hours subtracted
Returns a copy of this {@code LocalTime} with the specified number of minutes subtracted
Returns a copy of this {@code LocalTime} with the specified number of seconds subtracted
Returns a copy of this {@code LocalTime} with the specified number of nanoseconds subtracted
Queries this time using the specified query
Adjusts the specified temporal object to have the same time as this object
Calculates the amount of time until another time in terms of the specified unit
Formats this time using the specified formatter
Combines this time with a date to create a {@code LocalDateTime}
Combines this time with an offset to create an {@code OffsetTime}
Extracts the time as seconds of day, from {@code 0} to {@code 24 * 60 * 60 - 1}
Extracts the time as nanos of day, from {@code 0} to {@code 24 * 60 * 60 * 1,000,000,000 - 1}
Compares this time to another time
Checks if this time is after the specified time
Checks if this time is before the specified time
Checks if this time is equal to another time
A hash code for this time
Outputs this time as a {@code String}, such as {@code 10:15}
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump local variable to file stream in binary format
Get LocalVariable object
We consider two local variables to be equal, if they use the same index and are valid in the same range
Dump instruction as byte code to stream out
Long output format: &lt;name of opcode&gt; "["&lt;opcode number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt; local variable index&gt;"&gt;"
Read needed data (e
Set the local variable index
Returns the type associated with the instruction - in case of ALOAD or ASTORE Type
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump local variable table attribute to file stream in binary format
Returns a reference to the the remote object <code>Registry</code> for the local host on the default registry port of 1099
Returns a reference to the the remote object <code>Registry</code> for the local host on the specified <code>port</code>
Returns a reference to the remote object <code>Registry</code> on the specified <code>host</code> on the default registry port of 1099
Returns a reference to the remote object <code>Registry</code> on the specified <code>host</code> and <code>port</code>
Returns a locally created remote reference to the remote object <code>Registry</code> on the specified <code>host</code> and <code>port</code>
Creates and exports a <code>Registry</code> instance on the local host that accepts requests on the specified <code>port</code>
Creates and exports a <code>Registry</code> instance on the local host that uses custom socket factories for communication with that instance
Return the line number where the current event ends, returns -1 if none is available
Return the column number where the current event ends, returns -1 if none is available
Return the byte or character offset into the input source this location is pointing to
Returns the public ID of the XML
Returns the system ID of the XML
This method is used by the Mode class to prioritise patterns and template
Return the public identifier for the current document event
Return the system identifier for the current document event
Return the line number where the current document event ends
Return the column number where the current document event ends
Returns the version of XML used for the entity
Returns the name of the character encoding for the entity
Returns the current value of the version property
Returns the current value of the encoding property
Assigns the current value of the version property
Assigns the current value of the encoding property
Return the saved public identifier
Return the saved system identifier
Return the saved line number (1-based)
Return the saved column number (1-based)
Set the public identifier for this locator
Set the system identifier for this locator
Set the line number for this locator (1-based)
Set the column number for this locator (1-based)
Public identifier
System identifier
Line number
Column number
<p>Returns the character offset, or <code>-1</code>, if no character offset is available
<p>Returns the XML version of the current entity
Acquires the lock
Acquires the lock unless the current thread is {@linkplain Thread#interrupt interrupted}
Acquires the lock only if it is free at the time of invocation
Acquires the lock if it is free within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Releases the lock
Returns a new {@link Condition} instance that is bound to this {@code Lock} instance
Returns the fully qualified name of the class of the lock object
Returns the identity hash code of the lock object returned from the {@link System#identityHashCode} method
Returns a {@code LockInfo} object represented by the given {@code CompositeData}
Returns a string representation of a lock
Makes available the permit for the given thread, if it was not already available
Disables the current thread for thread scheduling purposes unless the permit is available
Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked
Disables the current thread for thread scheduling purposes unless the permit is available
Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
Get the analysis bits for this walker, as defined in the WalkerFactory
Set the environment in which this iterator operates, which should provide: a node (the context node
Get an instance of a DTM that "owns" a node handle
Get an instance of the DTMManager
Execute this iterator, meaning create a clone that can store state, and initialize it for fast execution from the current runtime state
Execute an expression in the XPath runtime context, and return the result of the expression
Given an select expression and a context, evaluate the XPath and return the resulting iterator
Tell if the expression is a nodeset expression
Return the first node out of the nodeset, if this expression is a nodeset expression
Evaluate this operation directly to a boolean
Set if this is an iterator at the upper level of the XPath
Get if this is an iterator at the upper level of the XPath
Initialize the context values for this expression after it is cloned
Set the next position index of this iterator
Get the current position, which is one less than the next nextNode() call will retrieve
If setShouldCacheNodes(true) is called, then nodes will be cached
Tells if this iterator can have nodes added to it or set via the <code>setItem(int node, int index)</code> method
Set the current position in the node set
Increment the current position in the node set
Get the length of the cached nodes
Returns the <code>index</code> th item in the collection
Sets the node at the specified index of this vector to be the specified node
The number of nodes in the list
Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set
Returns the previous node in the set and moves the position of the iterator backwards in the set
This attribute determines which node types are presented via the iterator
The filter used to screen nodes
The root node of the Iterator, as specified when it was created
The value of this flag determines whether the children of entity reference nodes are visible to the iterator
Specify if it's OK for detach to release the iterator for reuse
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Reset the iterator
Get a cloned Iterator that is reset to the beginning of the query
Returns the next node in the set and advances the position of the iterator in the set
Bottleneck the return of a next node, to make returns easier from nextNode()
Return the last fetched node
If an index is requested, NodeSetDTM will call this method to run the iterator to the index
Tells if we've found the last node yet
The XPath execution context we are operating on
The node context for the iterator
The node context from where the expression is being executed from (i
Set the current context node for this iterator
Return the saved reference to the prefix resolver that was in effect when this iterator was created
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
Return global logger object with the name Logger
Find or create a logger for a named subsystem
Find or create a logger for a named subsystem
Create an anonymous Logger
Create an anonymous Logger
Retrieve the localization resource bundle for this logger
Retrieve the localization resource bundle name for this logger
Set a filter to control output on this Logger
Get the current filter for this Logger
Log a LogRecord
Log a message, with no arguments
Log a message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a message, with one object parameter
Log a message, with an array of object arguments
Log a message, with associated Throwable information
Log a lazily constructed message, with associated Throwable information
Log a message, specifying source class and method, with no arguments
Log a lazily constructed message, specifying source class and method, with no arguments
Log a message, specifying source class and method, with a single object parameter to the log message
Log a message, specifying source class and method, with an array of object arguments
Log a message, specifying source class and method, with associated Throwable information
Log a lazily constructed message, specifying source class and method, with associated Throwable information
Log a message, specifying source class, method, and resource bundle name with no arguments
Log a message, specifying source class, method, and resource bundle name, with a single object parameter to the log message
Log a message, specifying source class, method, and resource bundle name, with an array of object arguments
Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters
Log a message, specifying source class, method, and resource bundle name, with associated Throwable information
Log a message, specifying source class, method, and resource bundle, with associated Throwable information
Log a method entry
Log a method entry, with one parameter
Log a method entry, with an array of parameters
Log a method return
Log a method return, with result object
Log throwing an exception
Log a SEVERE message
Log a WARNING message
Log an INFO message
Log a CONFIG message
Log a FINE message
Log a FINER message
Log a FINEST message
Log a SEVERE message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a WARNING message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a INFO message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a FINE message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a FINER message, which is only to be constructed if the logging level is such that the message will actually be logged
Log a FINEST message, which is only to be constructed if the logging level is such that the message will actually be logged
Set the log level specifying which message levels will be logged by this logger
Get the log Level that has been specified for this Logger
Check if a message of the given level would actually be logged by this logger
Get the name for this logger
Add a log Handler to receive logging messages
Remove a log Handler
Get the Handlers associated with this logger
Specify whether or not this logger should send its output to its parent Logger
Discover whether or not this logger is sending its output to its parent logger
Sets a resource bundle on this logger
Return the parent for this Logger
Set the parent for this Logger
Returns the list of currently registered logger names
Gets the name of the log level associated with the specified logger
Sets the specified logger to the specified new level
Returns the name of the parent for the specified logger
Gets the message payload as an XML source, may be called  multiple times on the same LogicalMessage instance, always  returns a new <code>Source</code> that may be used to retrieve the entire  message payload
Sets the message payload
Gets the message payload as a JAXB object
Sets the message payload
Gets the message from this message context
Perform the authentication
Logout the {@code Subject}
Return the authenticated Subject
Initialize this LoginModule
Method to authenticate a {@code Subject} (phase 1)
Method to commit the authentication process (phase 2)
Method to abort the authentication process (phase 2)
Method which logs out a {@code Subject}
Returns the global LogManager object
Adds an event listener to be invoked when the logging properties are re-read
Removes an event listener for property change events
Add a named logger
Method to find a named logger
Get an enumeration of known logger names
Reinitialize the logging properties and reread the logging configuration
Reset the logging configuration
Reinitialize the logging properties and reread the logging configuration from the given stream, which should be in java
Get the value of a logging property
Check that the current context is trusted to modify the logging configuration
Returns <tt>LoggingMXBean</tt> for managing loggers
Get the source Logger's name
Set the source Logger's name
Get the localization resource bundle <p> This is the ResourceBundle that should be used to localize the message string before formatting it
Set the localization resource bundle
Get the localization resource bundle name <p> This is the name for the ResourceBundle that should be used to localize the message string before formatting it
Set the localization resource bundle name
Get the logging message level, for example Level
Set the logging message level, for example Level
Get the sequence number
Set the sequence number
Get the  name of the class that (allegedly) issued the logging request
Set the name of the class that (allegedly) issued the logging request
Get the  name of the method that (allegedly) issued the logging request
Set the name of the method that (allegedly) issued the logging request
Get the "raw" log message, before localization or formatting
Set the "raw" log message, before localization or formatting
Get the parameters to the log message
Set the parameters to the log message
Get an identifier for the thread where the message originated
Set an identifier for the thread where the message originated
Get event time in milliseconds since 1970
Set event time
Get any throwable associated with the log record
Set a throwable associated with the log event
Return the LogStream identified by the given name
Return the current default stream for new logs
Set the default stream for new logs
Return the current stream to which output from this log is sent
Set the stream to which output from this log is sent
Write a byte of data to the stream
Write a subarray of bytes
Return log name as string representation
Convert a string name of a logging level to its internal integer representation
Returns a string representation of the first argument in the radix specified by the second argument
Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
Returns a string representation of the {@code long} argument as an unsigned integer in base&nbsp;16
Returns a string representation of the {@code long} argument as an unsigned integer in base&nbsp;8
Returns a string representation of the {@code long} argument as an unsigned integer in base&nbsp;2
Returns a {@code String} object representing the specified {@code long}
Returns a string representation of the argument as an unsigned decimal value
Parses the string argument as a signed {@code long} in the radix specified by the second argument
Parses the string argument as a signed decimal {@code long}
Parses the string argument as an unsigned {@code long} in the radix specified by the second argument
Parses the string argument as an unsigned decimal {@code long}
Returns a {@code Long} object holding the value extracted from the specified {@code String} when parsed with the radix given by the second argument
Returns a {@code Long} object holding the value of the specified {@code String}
Returns a {@code Long} instance representing the specified {@code long} value
Decodes a {@code String} into a {@code Long}
Returns the value of this {@code Long} as a {@code byte} after a narrowing primitive conversion
Returns the value of this {@code Long} as a {@code short} after a narrowing primitive conversion
Returns the value of this {@code Long} as an {@code int} after a narrowing primitive conversion
Returns the value of this {@code Long} as a {@code long} value
Returns the value of this {@code Long} as a {@code float} after a widening primitive conversion
Returns the value of this {@code Long} as a {@code double} after a widening primitive conversion
Returns a {@code String} object representing this {@code Long}'s value
Returns a hash code for this {@code Long}
Returns a hash code for a {@code long} value; compatible with {@code Long
Compares this object to the specified object
Determines the {@code long} value of the system property with the specified name
Determines the {@code long} value of the system property with the specified name
Returns the {@code long} value of the system property with the specified name
Compares two {@code Long} objects numerically
Compares two {@code long} values numerically
Compares two {@code long} values numerically treating the values as unsigned
Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
Returns a {@code long} value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified {@code long} value
Returns a {@code long} value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified {@code long} value
Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified {@code long} value
Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified {@code long} value
Returns the number of one-bits in the two's complement binary representation of the specified {@code long} value
Returns the value obtained by rotating the two's complement binary representation of the specified {@code long} value left by the specified number of bits
Returns the value obtained by rotating the two's complement binary representation of the specified {@code long} value right by the specified number of bits
Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified {@code long} value
Returns the signum function of the specified {@code long} value
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified {@code long} value
Adds two {@code long} values together as per the + operator
Returns the greater of two {@code long} values as if by calling {@link Math#max(long, long) Math
Returns the smaller of two {@code long} values as if by calling {@link Math#min(long, long) Math
Updates with the given value
Returns the current value
Resets variables maintaining updates to the identity value
Equivalent in effect to {@link #get} followed by {@link #reset}
Returns the String representation of the current value
Equivalent to {@link #get}
Returns the {@linkplain #get current value} as an {@code int} after a narrowing primitive conversion
Returns the {@linkplain #get current value} as a {@code float} after a widening primitive conversion
Returns the {@linkplain #get current value} as a {@code double} after a widening primitive conversion
Adds the given value
Equivalent to {@code add(1)}
Equivalent to {@code add(-1)}
Returns the current sum
Resets variables maintaining the sum to zero
Equivalent in effect to {@link #sum} followed by {@link #reset}
Returns the String representation of the {@link #sum}
Equivalent to {@link #sum}
Returns the {@link #sum} as an {@code int} after a narrowing primitive conversion
Returns the {@link #sum} as a {@code float} after a widening primitive conversion
Returns the {@link #sum} as a {@code double} after a widening primitive conversion
Applies this operator to the given operands
Allocates a new long buffer
Wraps a long array into a buffer
Wraps a long array into a buffer
Creates a new long buffer whose content is a shared subsequence of this buffer's content
Creates a new long buffer that shares this buffer's content
Creates a new, read-only long buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible long array
Returns the long array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this long buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Performs this operation on the given argument
Returns a composed {@code LongConsumer} that performs, in sequence, this operation followed by the {@code after} operation
Applies this function to the given argument
Reads from <code>input</code> and initalizes the value in the Holder with the unmarshalled data
Marshals to <code>output</code> the value in the Holder
Returns the <code>TypeCode</code> object corresponding to the value held in the Holder
Evaluates this predicate on the given argument
Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Returns a predicate that represents the logical negation of this predicate
Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Returns a stream consisting of the elements of this stream that match the given predicate
Returns a stream consisting of the results of applying the given function to the elements of this stream
Returns an object-valued {@code Stream} consisting of the results of applying the given function to the elements of this stream
Returns an {@code IntStream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code DoubleStream} consisting of the results of applying the given function to the elements of this stream
Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns a stream consisting of the distinct elements of this stream
Returns a stream consisting of the elements of this stream in sorted order
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Returns a stream consisting of the elements of this stream, truncated to be no longer than {@code maxSize} in length
Returns a stream consisting of the remaining elements of this stream after discarding the first {@code n} elements of the stream
Performs an action for each element of this stream
Performs an action for each element of this stream, guaranteeing that each element is processed in encounter order for streams that have a defined encounter order
Returns an array containing the elements of this stream
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Returns the sum of elements in this stream
Returns an {@code OptionalLong} describing the minimum element of this stream, or an empty optional if this stream is empty
Returns an {@code OptionalLong} describing the maximum element of this stream, or an empty optional if this stream is empty
Returns the count of elements in this stream
Returns an {@code OptionalDouble} describing the arithmetic mean of elements of this stream, or an empty optional if this stream is empty
Returns a {@code LongSummaryStatistics} describing various summary data about the elements of this stream
Returns whether any elements of this stream match the provided predicate
Returns whether all elements of this stream match the provided predicate
Returns whether no elements of this stream match the provided predicate
Returns an {@link OptionalLong} describing the first element of this stream, or an empty {@code OptionalLong} if the stream is empty
Returns an {@link OptionalLong} describing some element of the stream, or an empty {@code OptionalLong} if the stream is empty
Returns a {@code DoubleStream} consisting of the elements of this stream, converted to {@code double}
Returns a {@code Stream} consisting of the elements of this stream, each boxed to a {@code Long}
Returns a builder for a {@code LongStream}
Returns an empty sequential {@code LongStream}
Returns a sequential {@code LongStream} containing a single element
Returns a sequential ordered stream whose elements are the specified values
Returns an infinite sequential ordered {@code LongStream} produced by iterative application of a function {@code f} to an initial element {@code seed}, producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, {@code f(f(seed))}, etc
Returns an infinite sequential unordered stream where each element is generated by the provided {@code LongSupplier}
Returns a sequential ordered {@code LongStream} from {@code startInclusive} (inclusive) to {@code endExclusive} (exclusive) by an incremental step of {@code 1}
Returns a sequential ordered {@code LongStream} from {@code startInclusive} (inclusive) to {@code endInclusive} (inclusive) by an incremental step of {@code 1}
Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Adds an element to the stream being built
Adds an element to the stream being built
Builds the stream, transitioning this builder to the built state
Records a new {@code int} value into the summary information
Records a new {@code long} value into the summary information
Combines the state of another {@code LongSummaryStatistics} into this one
Returns the count of values recorded
Returns the sum of values recorded, or zero if no values have been recorded
Returns the minimum value recorded, or {@code Long
Returns the maximum value recorded, or {@code Long
Returns the arithmetic mean of values recorded, or zero if no values have been recorded
Gets a result
Applies this function to the given argument
Applies this function to the given argument
Applies this operator to the given operand
Returns a composed operator that first applies the {@code before} operator to its input, and then applies this operator to the result
Returns a composed operator that first applies this operator to its input, and then applies the {@code after} operator to the result
Returns a unary operator that always returns its input argument
Convenience method for setting a component's foreground and background color properties with values from the defaults
Convenience method for setting a component's foreground, background and font properties with values from the defaults
Convenience method for setting a component's border property with a value from the defaults
Convenience method for uninstalling a border
Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer
Convenience method for building an array of {@code KeyBindings}
Creates a {@code InputMapUIResource} from <code>keys</code>
Creates a {@code ComponentInputMapUIResource} from <code>keys</code>
Populates an {@code InputMap} with the specified bindings
Creates and returns a {@code UIDefault
Returns the <code>LayoutStyle</code> for this look and feel
Invoked when the user attempts an invalid operation, such as pasting into an uneditable <code>JTextField</code> that has focus
Returns the value of the specified system desktop property by invoking <code>Toolkit
Returns an <code>Icon</code> with a disabled appearance
Returns an <code>Icon</code> for use by disabled components that are also selected
Return a short string that identifies this look and feel, e
Return a string that identifies this look and feel
Return a one line description of this look and feel implementation, e
Returns {@code true} if the <code>LookAndFeel</code> returned <code>RootPaneUI</code> instances support providing {@code Window} decorations in a <code>JRootPane</code>
If the underlying platform has a "native" look and feel, and this is an implementation of it, return {@code true}
Return {@code true} if the underlying platform supports and or permits this look and feel
Initializes the look and feel
Uninitializes the look and feel
Returns the look and feel defaults
Returns a string that displays and identifies this object's properties
Returns the <code>LookupTable</code>
Performs a lookup operation on a <code>BufferedImage</code>
Performs a lookup operation on a <code>Raster</code>
Returns the bounding box of the filtered destination image
Returns the bounding box of the filtered destination Raster
Creates a zeroed destination image with the correct size and number of bands
Creates a zeroed-destination <code>Raster</code> with the correct size and number of bands, given this source
Returns the location of the destination point given a point in the source
Returns the rendering hints for this op
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Returns the number of components in the lookup table
Returns the offset
Returns an <code>int</code> array of components for one pixel
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Call corresponding visitor method(s)
The number of Symbols after an error we much match to consider it  recovered from
Table of production information (supplied by generated subclass)
The action table (supplied by generated subclass)
The reduce-goto table (supplied by generated subclass)
The index of the start state (supplied by generated subclass)
The index of the start production (supplied by generated subclass)
The index of the end of file terminal Symbol (supplied by generated  subclass)
The index of the special error Symbol (supplied by generated subclass)
This method is called to indicate that the parser should quit
Simple accessor method to set the default scanner
Simple accessor method to get the default scanner
Perform a bit of user supplied action code (supplied by generated  subclass)
User code for initialization inside the parser
Initialize the action object
Get the next Symbol from the input (supplied by generated subclass)
Report a fatal error
Report a non fatal error (or warning)
This method is called when a syntax error has been detected and recovery  is about to be invoked
This method is called if it is determined that syntax error recovery  has been unsuccessful
Fetch an action from the action table
Fetch a state from the reduce-goto table
This method provides the main parsing routine
Write a debugging message to System
Dump the parse stack for debugging purposes
Do debug output for a reduce
Do debug output for shift
Do debug output for stack state
Perform a parse with debugging output
Attempt to recover from a syntax error
Determine if we can shift under the special error Symbol out of the  state currently on the top of the (real) parse stack
Put the (real) parse stack into error recovery configuration by  popping the stack down to a state that can shift on the special  error Symbol, then doing the shift
Read from input to establish our buffer of "parse ahead" lookahead  Symbols
Return the current lookahead in our error "parse ahead" buffer
Advance to next "parse ahead" input Symbol
Reset the parse ahead input to one Symbol past where we started error  recovery (this consumes one new Symbol from the real input)
Do a simulated parse forward (a "parse ahead") from the current  stack configuration using stored lookahead input and a virtual parse  stack
Parse forward using stored lookahead Symbols
Utility function: unpacks parse tables from strings
Call corresponding visitor method(s)
Call corresponding visitor method(s)
An attribute of a language and binding dependent type that represents a stream of 16-bit units
An attribute of a language and binding dependent type that represents a stream of 16-bit units
An attribute of a language and binding dependent type that represents a stream of bytes
An attribute of a language and binding dependent type that represents a stream of bytes
String data to parse
String data to parse
The system identifier, a URI reference [<a href='http://www
The system identifier, a URI reference [<a href='http://www
The public identifier for this input source
The public identifier for this input source
The base URI to be used (see section 5
The base URI to be used (see section 5
The character encoding, if known
The character encoding, if known
If set to true, assume that the input is certified (see section 2
If set to true, assume that the input is certified (see section 2
The number of <code>LSInput</code>s in the list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
The number of <code>LSInput</code>s in the list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
The document that finished loading
The input source that was parsed
An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output
An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output
An attribute of a language and binding dependent type that represents a writable stream of bytes
An attribute of a language and binding dependent type that represents a writable stream of bytes
The system identifier, a URI reference [<a href='http://www
The system identifier, a URI reference [<a href='http://www
The character encoding to use for the output
The character encoding to use for the output
The <code>DOMConfiguration</code> object used when parsing an input source
When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure
When a filter is provided, the implementation will call out to the filter as it is constructing the DOM tree structure
<code>true</code> if the <code>LSParser</code> is asynchronous, <code>false</code> if it is synchronous
<code>true</code> if the <code>LSParser</code> is currently busy loading a document, otherwise <code>false</code>
Parse an XML document from a resource identified by a <code>LSInput</code>
Parse an XML document from a location identified by a URI reference [<a href='http://www
Parse an XML fragment from a resource identified by a <code>LSInput</code> and insert the content into an existing document at the position specified with the <code>context</code> and <code>action</code> arguments
Abort the loading of the document that is currently being loaded by the <code>LSParser</code>
The parser will call this method after each <code>Element</code> start tag has been scanned, but before the remainder of the <code>Element</code> is processed
This method will be called by the parser at the completion of the parsing of each node
Tells the <code>LSParser</code> what types of nodes to show to the method <code>LSParserFilter
The input source that is being parsed
The current position in the input source, including all external entities and other resources that have been read
The total size of the document including all external resources, this number might change as a document is being parsed if references to more external resources are seen
Allow the application to resolve external resources
The <code>DOMConfiguration</code> object used by the <code>LSSerializer</code> when serializing a DOM node
The end-of-line sequence of characters to be used in the XML being written out
The end-of-line sequence of characters to be used in the XML being written out
When the application provides a filter, the serializer will call out to the filter before serializing each Node
When the application provides a filter, the serializer will call out to the filter before serializing each Node
Serialize the specified node as described above in the general description of the <code>LSSerializer</code> interface
A convenience method that acts as if <code>LSSerializer
Serialize the specified node as described above in the general description of the <code>LSSerializer</code> interface
Tells the <code>LSSerializer</code> what types of nodes to show to the filter
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Apply the operation to two operands, and return the result
Apply the operation to two operands, and return the result
Call corresponding visitor method(s)
Call corresponding visitor method(s)
<p>Returns the error domain of the error message
<p>Returns the key of the error message
<p>Returns the replacement arguments for the error message or <code>null</code> if none exist
<p>Returns the localized message for this exception
Returns the length of the input
Returns the message
Returns the managed bean for the class loading system of the Java virtual machine
Returns the managed bean for the memory system of the Java virtual machine
Returns the managed bean for the thread system of the Java virtual machine
Returns the managed bean for the runtime system of the Java virtual machine
Returns the managed bean for the compilation system of the Java virtual machine
Returns the managed bean for the operating system on which the Java virtual machine is running
Returns a list of {@link MemoryPoolMXBean} objects in the Java virtual machine
Returns a list of {@link MemoryManagerMXBean} objects in the Java virtual machine
Returns a list of {@link GarbageCollectorMXBean} objects in the Java virtual machine
Returns the platform {@link javax
Returns a proxy for a platform MXBean interface of a given <a href="#MXBeanNames">MXBean name</a> that forwards its method calls through the given <tt>MBeanServerConnection</tt>
Returns the platform MXBean implementing the given {@code mxbeanInterface} which is specified to have one single instance in the Java virtual machine
Returns the list of platform MXBeans implementing the given {@code mxbeanInterface} in the Java virtual machine
Returns the platform MXBean proxy for {@code mxbeanInterface} which is specified to have one single instance in a Java virtual machine and the proxy will forward the method calls through the given {@code MBeanServerConnection}
Returns the list of the platform MXBean proxies for forwarding the method calls of the {@code mxbeanInterface} through the given {@code MBeanServerConnection}
Returns the set of {@code Class} objects, subinterface of {@link PlatformManagedObject}, representing all management interfaces for monitoring and managing the Java platform
Returns the main Attributes for the Manifest
Returns a Map of the entries contained in this Manifest
Returns the Attributes for the specified entry name
Clears the main Attributes as well as the entries in this Manifest
Writes the Manifest to the specified OutputStream
Reads the Manifest from the specified InputStream
Returns true if the specified Object is also a Manifest and has the same main Attributes and entries
Returns the hash code for this Manifest
Returns a shallow copy of this Manifest
Tells whether or not this buffer's content is resident in physical memory
Loads this buffer's content into physical memory
Forces any changes made to this buffer's content to be written to the storage device containing the mapped file
Returns the cause of this <code>MarshalException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>MarshalException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>MarshalException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>MarshalException</code>, its backtrace and the cause's backtrace to the specified print writer
This must be called once before unmarshaling valuetypes or anything that uses repository IDs
Tells the input stream to null any code set converter references, forcing it to reacquire them if it needs converters again
Returns a new copy of the contained marshalledobject
Return a hash code for this <code>MarshalledObject</code>
Compares this <code>MarshalledObject</code> to another object
Marshal the content tree rooted at <tt>jaxbElement</tt> into the specified <tt>javax
Marshal the content tree rooted at <tt>jaxbElement</tt> into an output stream
Marshal the content tree rooted at <tt>jaxbElement</tt> into a file
Marshal the content tree rooted at <tt>jaxbElement</tt> into a Writer
Marshal the content tree rooted at <tt>jaxbElement</tt> into SAX2 events
Marshal the content tree rooted at <tt>jaxbElement</tt> into a DOM tree
Marshal the content tree rooted at <tt>jaxbElement</tt> into a {@link javax
Marshal the content tree rooted at <tt>jaxbElement</tt> into a {@link javax
Get a DOM tree view of the content tree(Optional)
Set the particular property in the underlying implementation of <tt>Marshaller</tt>
Get the particular property in the underlying implementation of <tt>Marshaller</tt>
Allow an application to register a validation event handler
Return the current event handler or the default event handler if one hasn't been set
Associates a configured instance of {@link XmlAdapter} with this marshaller
Associates a configured instance of {@link XmlAdapter} with this marshaller
Gets the adapter associated with the specified type
<p>Associate a context that enables binary data within an XML document to be transmitted as XML-binary optimized attachment
Specify the JAXP 1
Get the JAXP 1
<p> Register marshal event callback {@link Listener} with this {@link Marshaller}
<p>Return {@link Listener} registered with this {@link Marshaller}
<p/> Callback method invoked before marshalling from <tt>source</tt> to XML
<p/> Callback method invoked after marshalling <tt>source</tt> to XML
Sets the mask dictating the legal characters
Returns the formatting mask
Allows for further restricting of the characters that can be input
Returns the valid characters that can be input
Allows for further restricting of the characters that can be input
Returns the characters that are not valid for input
Sets the string to use if the value does not completely fill in the mask
Returns the String to use if the value does not completely fill in the mask
Sets the character to use in place of characters that are not present in the value, ie the user must fill them in
Returns the character to use in place of characters that are not present in the value, ie the user must fill them in
If true, the returned value and set value will also contain the literal characters in mask
Returns true if <code>stringToValue</code> should return literal characters in the mask
Parses the text, returning the appropriate Object representation of the String <code>value</code>
Returns a String representation of the Object <code>value</code> based on the mask
Installs the <code>DefaultFormatter</code> onto a particular <code>JFormattedTextField</code>
Return the number of regular expression groups
Return a start position in the target text matched to specified regular expression group
Return an end position in the target text matched to specified regular expression group
Return an substring of the target text matched to specified regular expression group
Returns the pattern that is interpreted by this matcher
Returns the match state of this matcher as a {@link MatchResult}
Changes the <tt>Pattern</tt> that this <tt>Matcher</tt> uses to find matches with
Resets this matcher
Resets this matcher with a new input sequence
Returns the start index of the previous match
Returns the start index of the subsequence captured by the given group during the previous match operation
Returns the start index of the subsequence captured by the given <a href="Pattern
Returns the offset after the last character matched
Returns the offset after the last character of the subsequence captured by the given group during the previous match operation
Returns the offset after the last character of the subsequence captured by the given <a href="Pattern
Returns the input subsequence matched by the previous match
Returns the input subsequence captured by the given group during the previous match operation
Returns the input subsequence captured by the given <a href="Pattern
Returns the number of capturing groups in this matcher's pattern
Attempts to match the entire region against the pattern
Attempts to find the next subsequence of the input sequence that matches the pattern
Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index
Attempts to match the input sequence, starting at the beginning of the region, against the pattern
Returns a literal replacement <code>String</code> for the specified <code>String</code>
Implements a non-terminal append-and-replace step
Implements a terminal append-and-replace step
Replaces every subsequence of the input sequence that matches the pattern with the given replacement string
Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string
Sets the limits of this matcher's region
Reports the start index of this matcher's region
Reports the end index (exclusive) of this matcher's region
Queries the transparency of region bounds for this matcher
Sets the transparency of region bounds for this matcher
Queries the anchoring of region bounds for this matcher
Sets the anchoring of region bounds for this matcher
<p>Returns the string representation of this matcher
<p>Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher
<p>Returns true if more input could change a positive match into a negative one
Get index of the register where the DOM is stored
Set index where the reference to the DOM is stored
Get index of the register where the current iterator is stored
Set index of the register where the current iterator is stored
Initialize the context values for this expression after it is cloned
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Get the next node via getNextXXX
Returns the next node in the set and advances the position of the iterator in the set
Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator
Returns the start index of the match
Returns the start index of the subsequence captured by the given group during this match
Returns the offset after the last character matched
Returns the offset after the last character of the subsequence captured by the given group during this match
Returns the input subsequence matched by the previous match
Returns the input subsequence captured by the given group during the previous match operation
Returns the number of capturing groups in this match result's pattern
Returns the trigonometric sine of an angle
Returns the trigonometric cosine of an angle
Returns the trigonometric tangent of an angle
Returns the arc sine of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2
Returns the arc cosine of a value; the returned angle is in the range 0
Returns the arc tangent of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2
Converts an angle measured in degrees to an approximately equivalent angle measured in radians
Converts an angle measured in radians to an approximately equivalent angle measured in degrees
Returns Euler's number <i>e</i> raised to the power of a {@code double} value
Returns the natural logarithm (base <i>e</i>) of a {@code double} value
Returns the base 10 logarithm of a {@code double} value
Returns the correctly rounded positive square root of a {@code double} value
Returns the cube root of a {@code double} value
Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
Returns the smallest (closest to negative infinity) {@code double} value that is greater than or equal to the argument and is equal to a mathematical integer
Returns the largest (closest to positive infinity) {@code double} value that is less than or equal to the argument and is equal to a mathematical integer
Returns the {@code double} value that is closest in value to the argument and is equal to a mathematical integer
Returns the angle <i>theta</i> from the conversion of rectangular coordinates ({@code x},&nbsp;{@code y}) to polar coordinates (r,&nbsp;<i>theta</i>)
Returns the value of the first argument raised to the power of the second argument
Returns the closest {@code int} to the argument, with ties rounding to positive infinity
Returns the closest {@code long} to the argument, with ties rounding to positive infinity
Returns a {@code double} value with a positive sign, greater than or equal to {@code 0
Returns the sum of its arguments, throwing an exception if the result overflows an {@code int}
Returns the sum of its arguments, throwing an exception if the result overflows a {@code long}
Returns the difference of the arguments, throwing an exception if the result overflows an {@code int}
Returns the difference of the arguments, throwing an exception if the result overflows a {@code long}
Returns the product of the arguments, throwing an exception if the result overflows an {@code int}
Returns the product of the arguments, throwing an exception if the result overflows a {@code long}
Returns the argument incremented by one, throwing an exception if the result overflows an {@code int}
Returns the argument incremented by one, throwing an exception if the result overflows a {@code long}
Returns the argument decremented by one, throwing an exception if the result overflows an {@code int}
Returns the argument decremented by one, throwing an exception if the result overflows a {@code long}
Returns the negation of the argument, throwing an exception if the result overflows an {@code int}
Returns the negation of the argument, throwing an exception if the result overflows a {@code long}
Returns the value of the {@code long} argument; throwing an exception if the value overflows an {@code int}
Returns the largest (closest to positive infinity) {@code int} value that is less than or equal to the algebraic quotient
Returns the largest (closest to positive infinity) {@code long} value that is less than or equal to the algebraic quotient
Returns the floor modulus of the {@code int} arguments
Returns the floor modulus of the {@code long} arguments
Returns the absolute value of an {@code int} value
Returns the absolute value of a {@code long} value
Returns the absolute value of a {@code float} value
Returns the absolute value of a {@code double} value
Returns the greater of two {@code int} values
Returns the greater of two {@code long} values
Returns the greater of two {@code float} values
Returns the greater of two {@code double} values
Returns the smaller of two {@code int} values
Returns the smaller of two {@code long} values
Returns the smaller of two {@code float} values
Returns the smaller of two {@code double} values
Returns the size of an ulp of the argument
Returns the size of an ulp of the argument
Returns the signum function of the argument; zero if the argument is zero, 1
Returns the signum function of the argument; zero if the argument is zero, 1
Returns the hyperbolic sine of a {@code double} value
Returns the hyperbolic cosine of a {@code double} value
Returns the hyperbolic tangent of a {@code double} value
Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>) without intermediate overflow or underflow
Returns <i>e</i><sup>x</sup>&nbsp;-1
Returns the natural logarithm of the sum of the argument and 1
Returns the first floating-point argument with the sign of the second floating-point argument
Returns the first floating-point argument with the sign of the second floating-point argument
Returns the unbiased exponent used in the representation of a {@code float}
Returns the unbiased exponent used in the representation of a {@code double}
Returns the floating-point number adjacent to the first argument in the direction of the second argument
Returns the floating-point number adjacent to the first argument in the direction of the second argument
Returns the floating-point value adjacent to {@code d} in the direction of positive infinity
Returns the floating-point value adjacent to {@code f} in the direction of positive infinity
Returns the floating-point value adjacent to {@code d} in the direction of negative infinity
Returns the floating-point value adjacent to {@code f} in the direction of negative infinity
Returns {@code d} &times; 2<sup>{@code scaleFactor}</sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
Returns {@code f} &times; 2<sup>{@code scaleFactor}</sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
Returns the {@code precision} setting
Returns the roundingMode setting
Compares this {@code MathContext} with the specified {@code Object} for equality
Returns the hash code for this {@code MathContext}
Returns the string representation of this {@code MathContext}
Paints the matte border
Reinitialize the insets parameter with this Border's current Insets
Returns the insets of the border
Returns the color used for tiling the border or null if a tile icon is being used
Returns the icon used for tiling the border or null if a solid color is being used
Returns whether or not the border is opaque
<p>Returns a shallow clone of this instance
Returns the class name of the attribute
Whether the value of the attribute can be read
Whether new values can be written to the attribute
Indicates if this attribute has an "is" getter
Compare this MBeanAttributeInfo to another
<p>Returns a shallow clone of this instance
<p>Returns the list of parameters for this constructor
Compare this MBeanConstructorInfo to another
Return the actual {@link Exception} thrown
Return the actual {@link Exception} thrown
Returns the name of the feature
Returns the human-readable description of the feature
Returns the descriptor for the feature
Compare this MBeanFeatureInfo to another
<p>Returns a shallow clone of this instance
Returns the name of the Java class of the MBean described by this <CODE>MBeanInfo</CODE>
Returns a human readable description of the MBean
Returns the list of attributes exposed for management
Returns the list of operations  of the MBean
<p>Returns the list of the public constructors of the MBean
Returns the list of the notifications emitted by the MBean
Get the descriptor of this MBeanInfo
<p>Compare this MBeanInfo to another
This methods tests if the MBean class makes it possible to instantiate an MBean of this class in the MBeanServer
Loads the class with the specified name using this object's Default Loader Repository
Gets the class for the specified class name using the MBean Interceptor's classloader
Gets the class for the specified class name using the specified class loader
Return an array of Class corresponding to the given signature, using the specified class loader
Instantiates an object given its class, using its empty constructor
Instantiates an object given its class, the parameters and signature of its constructor The call returns a reference to the newly created object
De-serializes a byte array in the context of a classloader
De-serializes a byte array in the context of a given MBean class loader
Instantiates an object using the list of all class loaders registered in the MBean Interceptor (using its {@link javax
Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>
Instantiates an object using the list of all class loaders registered in the MBean server (using its {@link javax
Instantiates an object
Return the Default Loader Repository used by this instantiator object
Returns a shallow clone of this instance
Returns the array of strings (in dot notation) containing the notification types that the MBean may emit
Compare this MBeanNotificationInfo to another
<p>Returns a shallow clone of this instance
Returns the type of the method's return value
<p>Returns the list of parameters for this operation
Returns the impact of the method, one of <CODE>INFO</CODE>, <CODE>ACTION</CODE>, <CODE>ACTION_INFO</CODE>, <CODE>UNKNOWN</CODE>
Compare this MBeanOperationInfo to another
<p>Returns a shallow clone of this instance
Returns the type or class name of the data
Compare this MBeanParameterInfo to another
Returns the "canonical string representation" of the actions
Returns the hash code value for this object
<p>Checks if this MBeanPermission object "implies" the specified permission
Checks two MBeanPermission objects for equality
Allows the MBean to perform any operations it needs before being registered in the MBean Server
Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed
Allows the MBean to perform any operations it needs before being unregistered by the MBean server
Allows the MBean to perform any operations needed after having been unregistered in the MBean server
{@inheritDoc} <p>If this method successfully creates an MBean, a notification is sent as described <a href="#notif">above</a>
{@inheritDoc} <p>If this method successfully creates an MBean, a notification is sent as described <a href="#notif">above</a>
{@inheritDoc} <p>If this method successfully creates an MBean, a notification is sent as described <a href="#notif">above</a>
{@inheritDoc} <p>If this method successfully creates an MBean, a notification is sent as described <a href="#notif">above</a>
<p>Registers a pre-existing object as an MBean with the MBean server
{@inheritDoc} <p>If this method successfully unregisters an MBean, a notification is sent as described <a href="#notif">above</a>
{@inheritDoc}
{@inheritDoc}
Returns the number of MBeans registered in the MBean server
{@inheritDoc} If the source of the notification is a reference to an MBean object, the MBean server will replace it by that MBean's ObjectName
{@inheritDoc}
<p>Instantiates an object using the list of all class loaders registered in the MBean server's {@link javax
<p>Instantiates an object using the class Loader specified by its <CODE>ObjectName</CODE>
<p>Instantiates an object using the list of all class loaders registered in the MBean server {@link javax
<p>Instantiates an object
<p>De-serializes a byte array in the context of the class loader of an MBean
<p>De-serializes a byte array in the context of a given MBean class loader
<p>De-serializes a byte array in the context of a given MBean class loader
<p>Return the {@link java
<p>Return the named {@link java
<p>Return the ClassLoaderRepository for this MBeanServer
Check if the caller can do read operations
Check if the caller can do write operations
Check if the caller can create the named class
Check if the caller can unregister the named MBean
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkCreate(className)</code>, then forward this method to the wrapped object
Call <code>checkWrite()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkWrite()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkRead()</code>, then forward this method to the wrapped object
Call <code>checkWrite()</code>, then forward this method to the wrapped object
Call <code>checkWrite()</code>, then forward this method to the wrapped object
Call <code>checkUnregister()</code>, then forward this method to the wrapped object
This method creates a new MBeanServerDelegate for a new MBeanServer
This method creates a new MBeanServer implementation object
<p>Instantiates and registers an MBean in the MBean server
<p>Instantiates and registers an MBean in the MBean server
Instantiates and registers an MBean in the MBean server
<p>Instantiates and registers an MBean in the MBean server
Unregisters an MBean from the MBean server
Gets the <CODE>ObjectInstance</CODE> for a given MBean registered with the MBean server
Gets MBeans controlled by the MBean server
Gets the names of MBeans controlled by the MBean server
Checks whether an MBean, identified by its object name, is already registered with the MBean server
Returns the number of MBeans registered in the MBean server
Gets the value of a specific attribute of a named MBean
<p>Retrieves the values of several attributes of a named MBean
Sets the value of a specific attribute of a named MBean
<p>Sets the values of several attributes of a named MBean
<p>Invokes an operation on an MBean
Returns the default domain used for naming the MBean
<p>Returns the list of domains in which any MBean is currently registered
<p>Adds a listener to a registered MBean
<p>Adds a listener to a registered MBean
Removes a listener from a registered MBean
<p>Removes a listener from a registered MBean
<p>Removes a listener from a registered MBean
<p>Removes a listener from a registered MBean
This method discovers the attributes and operations that an MBean exposes for management
<p>Returns true if the MBean specified is an instance of the specified class, false otherwise
Returns the MBean server agent identity
Returns the full name of the JMX specification implemented by this product
Returns the version of the JMX specification implemented by this product
Returns the vendor of the JMX specification implemented by this product
Returns the JMX implementation name (the name of this product)
Returns the JMX implementation version (the version of this product)
Returns the JMX implementation vendor (the vendor of this product)
Enables the MBean server to send a notification
Returns the MBean server agent identity
Returns the full name of the JMX specification implemented by this product
Returns the version of the JMX specification implemented by this product
Returns the vendor of the JMX specification implemented by this product
Returns the JMX implementation name (the name of this product)
Returns the JMX implementation version (the version of this product)
Returns the JMX implementation vendor (the vendor of this product)
Remove internal MBeanServerFactory references to a created MBeanServer
<p>Return a new object implementing the MBeanServer interface with a standard default domain name
<p>Return a new object implementing the {@link MBeanServer} interface with the specified default domain name
<p>Return a new object implementing the MBeanServer interface with a standard default domain name, without keeping an internal reference to this new object
<p>Return a new object implementing the MBeanServer interface with the specified default domain name, without keeping an internal reference to this new object
<p>Return a list of registered MBeanServer objects
Return the ClassLoaderRepository used by the given MBeanServer
Check if the caller can do read operations
Check if the caller can do write operations
Check if the caller can create MBeans or instances of the given class
Check if the caller can do unregister operations
<p>Refresh the set of username/access level entries
Returns the MBeanServer object to which requests will be forwarded
Sets the MBeanServer object to which requests will be forwarded after treatment by this object
This method should never be called
This method should never be called
This method should never be called
This method should never be called
This method should never be called
This method should never be called
This method should never be called
This method should never be called
<p>The MBean server connection through which the methods of a proxy using this handler are forwarded
<p>The name of the MBean within the MBean server to which methods are forwarded
<p>If true, the proxy is for an MXBean, and appropriate mappings are applied to method parameters and return values
<p>Return a proxy that implements the given interface by forwarding its methods through the given MBean server to the named MBean
Returns the  object name of the MBean that caused the notification
Disables any MBeanServerNotification (all ObjectNames are deselected)
Disables MBeanServerNotifications concerning given ObjectName
Enables all MBeanServerNotifications (all ObjectNames are selected)
Enables MBeanServerNotifications concerning given ObjectName
Gets all the ObjectNames enabled
Gets all the ObjectNames disabled
Invoked before sending the specified notification to the listener
<p>Checks if this MBeanServerPermission object "implies" the specified permission
Checks two MBeanServerPermission objects for equality
Returns whether this media attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
The parsable textual representation of the media list
The parsable textual representation of the media list
The number of media in the list
Returns the <code>index</code>th in the list
Deletes the medium indicated by <code>oldMedium</code> from the list
Adds the medium <code>newMedium</code> to the end of the list
Returns the string table for class MediaTray
Returns the enumeration value table for class MediaTray
Get the printable area as an array of 4 values in the order x, y, w, h
Get the x location of the origin of the printable area in the specified units
Get the y location of the origin of the printable area in the specified units
Get the width of the printable area in the specified units
Get the height of the printable area in the specified units
Returns whether this media margins attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a string version of this rectangular size attribute in the given units
Returns a string version of this rectangular size attribute in mm
Returns a hash code value for this attribute
Get the media name, if any, for this size
Get the MediaSize for the specified named media
The specified dimensions are used to locate a matching MediaSize instance from amongst all the standard MediaSize instances
Returns whether this media size attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class MediaSizeName
Returns the enumeration value table for class MediaSizeName
Adds an image to the list of images being tracked by this media tracker
Adds a scaled image to the list of images being tracked by this media tracker
Checks to see if all images being tracked by this media tracker have finished loading
Checks to see if all images being tracked by this media tracker have finished loading
Checks the error status of all of the images
Returns a list of all media that have encountered an error
Starts loading all images tracked by this media tracker
Starts loading all images tracked by this media tracker
Calculates and returns the bitwise inclusive <b>OR</b> of the status of all media that are tracked by this media tracker
Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading
Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading
Checks the error status of all of the images tracked by this media tracker with the specified identifier
Returns a list of media with the specified ID that have encountered an error
Starts loading all images tracked by this media tracker with the specified identifier
Starts loading all images tracked by this media tracker with the specified identifier
Calculates and returns the bitwise inclusive <b>OR</b> of the status of all media with the specified identifier that are tracked by this media tracker
Removes the specified image from this media tracker
Removes the specified image from the specified tracking ID of this media tracker
Removes the specified image with the specified width, height, and ID from this media tracker
Returns the string table for class MediaTray
Returns the enumeration value table for class MediaTray
Returns the Class object representing the class or interface that declares the member or constructor represented by this Member
Returns the simple name of the underlying member or constructor represented by this Member
Returns the Java language modifiers for the member or constructor represented by this Member, as an integer
Returns {@code true} if this member was introduced by the compiler; returns {@code false} otherwise
Returns true if this member was synthesized by the compiler
Tells whether or not this membership is valid
Drop membership
Block multicast datagrams from the given source address
Unblock multicast datagrams from the given source address that was previously blocked using the {@link #block(InetAddress) block} method
Returns the channel for which this membership key was created
Returns the multicast group for which this membership key was created
Returns the network interface for which this membership key was created
Returns the source address if this membership key is source-specific, or {@code null} if this membership is not source-specific
Returns <code>true</code> since this <code>ImageInputStream</code> caches data in order to allow seeking backwards
Returns <code>false</code> since this <code>ImageInputStream</code> does not maintain a file cache
Returns <code>true</code> since this <code>ImageInputStream</code> maintains a main memory cache
Closes this <code>MemoryCacheImageInputStream</code>, freeing the cache
{@inheritDoc}
Returns <code>true</code> since this <code>ImageOutputStream</code> caches data in order to allow seeking backwards
Returns <code>false</code> since this <code>ImageOutputStream</code> does not maintain a file cache
Returns <code>true</code> since this <code>ImageOutputStream</code> maintains a main memory cache
Closes this <code>MemoryCacheImageOutputStream</code>
Store a <tt>LogRecord</tt> in an internal buffer
Push any buffered output to the target <tt>Handler</tt>
Causes a flush on the target <tt>Handler</tt>
Close the <tt>Handler</tt> and free all associated resources
Set the <tt>pushLevel</tt>
Get the <tt>pushLevel</tt>
Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt> into its internal buffer
Adds an ImageConsumer to the list of consumers interested in data for this image
Determines if an ImageConsumer is on the list of consumers currently interested in data for this image
Removes an ImageConsumer from the list of consumers interested in data for this image
Adds an ImageConsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the ImageConsumer interface
Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order
Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter
Specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change
Sends a whole new buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete
Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete
Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image
Changes to a new byte array to hold the pixels for this image
Changes to a new int array to hold the pixels for this image
Returns the name representing this memory manager
Tests if this memory manager is valid in the Java virtual machine
Returns the name of memory pools that this memory manager manages
Returns the approximate number of objects for which finalization is pending
Returns the current memory usage of the heap that is used for object allocation
Returns the current memory usage of non-heap memory that is used by the Java virtual machine
Tests if verbose output for the memory system is enabled
Enables or disables verbose output for the memory system
Runs the garbage collector
Returns the name of the memory pool that triggers this notification
Returns the memory usage of the memory pool when this notification was constructed
Returns the number of times that the memory usage has crossed a threshold when the notification was constructed
Returns a <tt>MemoryNotificationInfo</tt> object represented by the given <tt>CompositeData</tt>
Returns the name representing this memory pool
Returns the type of this memory pool
Returns an estimate of the memory usage of this memory pool
Returns the peak memory usage of this memory pool since the Java virtual machine was started or since the peak was reset
Resets the peak memory usage statistic of this memory pool to the current memory usage
Tests if this memory pool is valid in the Java virtual machine
Returns the name of memory managers that manages this memory pool
Returns the usage threshold value of this memory pool in bytes
Sets the threshold of this memory pool to the given <tt>threshold</tt> value if this memory pool supports the usage threshold
Tests if the memory usage of this memory pool reaches or exceeds its usage threshold value
Returns the number of times that the memory usage has crossed the usage threshold
Tests if this memory pool supports usage threshold
Returns the collection usage threshold value of this memory pool in bytes
Sets the collection usage threshold of this memory pool to the given <tt>threshold</tt> value
Tests if the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold
Returns the number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold
Returns the memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool
Tests if this memory pool supports a collection usage threshold
Returns the string representation of this <tt>MemoryType</tt>
Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management
Returns the amount of used memory in bytes
Returns the amount of memory in bytes that is committed for the Java virtual machine to use
Returns the maximum amount of memory in bytes that can be used for memory management
Returns a descriptive representation of this memory usage
Returns a <tt>MemoryUsage</tt> object represented by the given <tt>CompositeData</tt>
Creates the menu's peer
Removes the menu's peer
Indicates whether this menu is a tear-off menu
Get the number of items in this menu
Gets the item located at the specified index of this menu
Adds the specified menu item to this menu
Adds an item with the specified label to this menu
Inserts a menu item into this menu at the specified position
Inserts a menu item with the specified label into this menu at the specified position
Adds a separator line, or a hypen, to the menu at the current position
Inserts a separator at the specified position
Removes the menu item at the specified index from this menu
Removes the specified menu item from this menu
Removes all items from this menu
Returns a string representing the state of this <code>Menu</code>
Gets the AccessibleContext associated with this Menu
Get the role of this object
Creates the menu bar's peer
Removes the menu bar's peer
Gets the help menu on the menu bar
Sets the specified menu to be this menu bar's help menu
Adds the specified menu to the menu bar
Removes the menu located at the specified index from this menu bar
Removes the specified menu component from this menu bar
Gets the number of menus on the menu bar
Gets the specified menu
Gets an enumeration of all menu shortcuts this menu bar is managing
Gets the instance of <code>MenuItem</code> associated with the specified <code>MenuShortcut</code> object, or <code>null</code> if none of the menu items being managed by this menu bar is associated with the specified menu shortcut
Deletes the specified menu shortcut
Gets the AccessibleContext associated with this MenuBar
Get the role of this object
Adds a menu to the menu bar
Deletes a menu from the menu bar
Adds a help menu to the menu bar
Gets the name of the menu component
Sets the name of the component to the specified string
Returns the parent container for this menu component
Gets the font used for this menu component
Sets the font to be used for this menu component to the specified font
Removes the menu component's peer
Posts the specified event to the menu
Delivers an event to this component or one of its sub components
Processes events occurring on this menu component
Returns a string representing the state of this <code>MenuComponent</code>
Returns a representation of this menu component as a string
Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations
Gets the <code>AccessibleContext</code> associated with this <code>MenuComponent</code>
Gets the <code>AccessibleSelection</code> associated with this object which allows its <code>Accessible</code> children to be selected
Gets the accessible name of this object
Gets the accessible description of this object
Gets the role of this object
Gets the state of this object
Gets the <code>Accessible</code> parent of this object
Gets the index of this object in its accessible parent
Returns the number of accessible children in the object
Returns the nth <code>Accessible</code> child of the object
Returns the locale of this object
Gets the <code>AccessibleComponent</code> associated with this object if one exists
Gets the background color of this object
Sets the background color of this object
Gets the foreground color of this object
Sets the foreground color of this object
Gets the <code>Cursor</code> of this object
Sets the <code>Cursor</code> of this object
Gets the <code>Font</code> of this object
Sets the <code>Font</code> of this object
Gets the <code>FontMetrics</code> of this object
Determines if the object is enabled
Sets the enabled state of the object
Determines if the object is visible
Sets the visible state of the object
Determines if the object is showing
Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object
Returns the location of the object on the screen
Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space
Sets the location of the object relative to the parent
Gets the bounds of this object in the form of a <code>Rectangle</code> object
Sets the bounds of this object in the form of a <code>Rectangle</code> object
Returns the size of this object in the form of a <code>Dimension</code> object
Resizes this object
Returns the <code>Accessible</code> child, if one exists, contained at the local coordinate <code>Point</code>
Returns whether this object can accept focus or not
Requests focus for this object
Adds the specified focus listener to receive focus events from this component
Removes the specified focus listener so it no longer receives focus events from this component
Returns the number of <code>Accessible</code> children currently selected
Returns an <code>Accessible</code> representing the specified selected child in the object
Determines if the current child of this object is selected
Adds the specified <code>Accessible</code> child of the object to the object's selection
Removes the specified child of the object from the object's selection
Clears the selection in the object, so that no children in the object are selected
Causes every child of the object to be selected if the object supports multiple selections
Disposes the menu component
Sets the font for the menu component
Returns the path to the selected menu item
Returns the current menu selection manager
Invoked when the dragged mouse has entered a menu component's display area
Invoked when the dragged mouse has left a menu component's display area
Invoked when the mouse is being dragged in a menu component's display area
Invoked when a dragged mouse is release in a menu component's display area
Processes a mouse event
Process a key event
Call by the <code>MenuSelectionManager</code> when the <code>MenuElement</code> is added or remove from the menu selection
This method should return an array containing the sub-elements for the receiving menu element
This method should return the java
Creates the menu item's peer
Gets the label for this menu item
Sets the label for this menu item to the specified label
Checks whether this menu item is enabled
Sets whether or not this menu item can be chosen
Get the <code>MenuShortcut</code> object associated with this menu item,
Set the <code>MenuShortcut</code> object associated with this menu item
Delete any <code>MenuShortcut</code> object associated with this menu item
Enables event delivery to this menu item for events to be defined by the specified event mask parameter <p> Since event types are automatically enabled when a listener for that type is added to the menu item, this method only needs to be invoked by subclasses of <code>MenuItem</code> which desire to have the specified event types delivered to <code>processEvent</code> regardless of whether a listener is registered
Disables event delivery to this menu item for events defined by the specified event mask parameter
Sets the command name of the action event that is fired by this menu item
Gets the command name of the action event that is fired by this menu item
Adds the specified action listener to receive action events from this menu item
Removes the specified action listener so it no longer receives action events from this menu item
Returns an array of all the action listeners registered on this menu item
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>MenuItem</code>
Processes events on this menu item
Processes action events occurring on this menu item, by dispatching them to any registered <code>ActionListener</code> objects
Returns a string representing the state of this <code>MenuItem</code>
Gets the AccessibleContext associated with this MenuItem
Get the accessible name of this object
Get the role of this object
Get the AccessibleAction associated with this object
Get the AccessibleValue associated with this object
Returns the number of Actions available in this object
Return a description of the specified action of the object
Perform the specified Action on the object
Get the value of this object as a Number
Set the value of this object as a Number
Get the minimum value of this object as a Number
Get the maximum value of this object as a Number
Sets the label to be displayed in this menu item
Enables or disables the menu item
Returns the path to the menu item referenced by this event
Returns the current menu selection manager
Invoked when a key has been typed
Invoked when a key has been pressed
Invoked when a key has been released
Invoked when a menu is selected
Invoked when the menu is deselected
Invoked when the menu is canceled
Adds a separator (e
Adds the specified menu item to the menu
Removes the menu item at the specified index
Returns the default menu selection manager
Changes the selection in the menu hierarchy
Returns the path to the currently selected menu item
Tell the menu selection to close and unselect all the menu components
Adds a ChangeListener to the button
Removes a ChangeListener from the button
Returns an array of all the <code>ChangeListener</code>s added to this MenuSelectionManager with addChangeListener()
Notifies all listeners that have registered interest for notification on this event type
When a MenuElement receives an event from a MouseListener, it should never process the event directly
Returns the component in the currently selected path which contains sourcePoint
When a MenuElement receives an event from a KeyListener, it should never process the event directly
Return true if c is part of the currently used menu
Returns the raw keycode of this MenuShortcut
Returns whether this MenuShortcut must be invoked using the SHIFT key
Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key
Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key
Returns the hashcode for this MenuShortcut
Returns an internationalized description of the MenuShortcut
Returns the parameter string representing the state of this MenuShortcut
Set a flag in the given buffer (fragment bit, byte order bit, etc)
Clears a flag in the given buffer
Sets the scope of a property
Gets the scope of a property
Returns a MessageDigest object that implements the specified digest algorithm
Returns a MessageDigest object that implements the specified digest algorithm
Returns a MessageDigest object that implements the specified digest algorithm
Returns the provider of this message digest object
Updates the digest using the specified byte
Updates the digest using the specified array of bytes, starting at the specified offset
Updates the digest using the specified array of bytes
Update the digest using the specified ByteBuffer
Completes the hash computation by performing final operations such as padding
Completes the hash computation by performing final operations such as padding
Performs a final update on the digest using the specified array of bytes, then completes the digest computation
Returns a string representation of this message digest object
Compares two digests for equality
Resets the digest for further use
Returns a string that identifies the algorithm, independent of implementation details
Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable
Returns a clone if the implementation is cloneable
Factory method for constructing a message digest algorithm by name
Returns the actual {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Returns the digest length in bytes
Updates the digest using the specified byte
Updates the digest using the specified array of bytes, starting at the specified offset
Update the digest using the specified ByteBuffer
Completes the hash computation by performing final operations such as padding
Completes the hash computation by performing final operations such as padding
Resets the digest for further use
Returns a clone if the implementation is cloneable
Creates a new <code>MessageFactory</code> object that is an instance of the default implementation (SOAP 1
Creates a new <code>MessageFactory</code> object that is an instance of the specified implementation
Creates a new <code>SOAPMessage</code> object with the default <code>SOAPPart</code>, <code>SOAPEnvelope</code>, <code>SOAPBody</code>, and <code>SOAPHeader</code> objects
Internalizes the contents of the given <code>InputStream</code> object into a new <code>SOAPMessage</code> object and returns the <code>SOAPMessage</code> object
Sets the locale to be used when creating or comparing subformats
Gets the locale that's used when creating or comparing subformats
Sets the pattern used by this message format
Returns a pattern representing the current state of the message format
Sets the formats to use for the values passed into <code>format</code> methods or returned from <code>parse</code> methods
Sets the formats to use for the format elements in the previously set pattern string
Sets the format to use for the format elements within the previously set pattern string that use the given argument index
Sets the format to use for the format element with the given format element index within the previously set pattern string
Gets the formats used for the values passed into <code>format</code> methods or returned from <code>parse</code> methods
Gets the formats used for the format elements in the previously set pattern string
Formats an array of objects and appends the <code>MessageFormat</code>'s pattern, with format elements replaced by the formatted objects, to the provided <code>StringBuffer</code>
Creates a MessageFormat with the given pattern and uses it to format the given arguments
Formats an array of objects and appends the <code>MessageFormat</code>'s pattern, with format elements replaced by the formatted objects, to the provided <code>StringBuffer</code>
Formats an array of objects and inserts them into the <code>MessageFormat</code>'s pattern, producing an <code>AttributedCharacterIterator</code>
Parses the string
Parses text from the beginning of the given string to produce an object array
Parses text from a string to produce an object array
Creates and returns a copy of this object
Equality comparison between two message format objects
Generates a hash code for the message format object
Resolves instances being deserialized to the predefined constants
Formats a message with the specified arguments using the given locale information
The {@link com
Get the {@link com
Get the {@link com
Used to initialize message headers
Used to send the message (or its last fragment)
Used to wait for a response for synchronous messages
Used to set the {@link com
Used to get the {@link com
Used to set the {@link com
Used to get the {@link com
Retrieves the QOP value
Retrieves the privacy state
Sets the QOP value
Sets the privacy state
Tests if this is a duplicate of an earlier token
Tests if this token's validity period has expired, i
Tests if a later token had already been processed
Tests if an expected token was not received, i
Retrieves the minor status code that the underlying mechanism might have set for this per-message operation
Retrieves a string explaining the minor status code
This method sets the state for the supplementary information flags and the minor status in MessageProp
Prints a message of the specified kind
Prints a message of the specified kind at the location of the element
Prints a message of the specified kind at the location of the annotation mirror of the annotated element
Prints a message of the specified kind at the location of the annotation value inside the annotation mirror of the annotated element
Allows us to create a fragment message from any message type
The byteBuffer is presumed to have contents of the message already read in
Invoked when a <code>{@link Sequencer}</code> has encountered and processed a <code>MetaMessage</code> in the <code>{@link Sequence}</code> it is processing
Returns a border instance for a JButton
Returns a border instance for a text component
Returns a border instance for a JTextField
Returns a border instance for a JToggleButton
Returns a border instance for a Desktop Icon
If necessary paints the background of the component, then invokes <code>paint</code>
Paints the horizontal bars for the
Created a stub to satisfy the interface
Created a stub to satisfy the interface
If necessary paints the currently selected item
If necessary paints the background of the currently selected item
Returns the baseline
As of Java 2 platform v1
As of Java 2 platform v1
Creates a selection listener for the list of files and directories
Returns the preferred size of the specified <code>JFileChooser</code>
Returns the minimum size of the <code>JFileChooser</code>
Returns the maximum size of the <code>JFileChooser</code>
Property to remember whether a directory is currently selected in the UI
Returns a checkbox icon
Returns an icon to be used by <code>JCheckBoxMenuItem</code>
Override the parent's method to do nothing
Override the parent's method to do nothing
Override the parent's method to do nothing
Override the parent's method avoid creating a menu bar
Returns the <code>MouseInputAdapter</code> that will be installed on the TitlePane
Just paint the text gray (Label
Returns the name of this look and feel
Returns an identifier for this look and feel
Returns a short description of this look and feel
Returns {@code false}; {@code MetalLookAndFeel} is not a native look and feel
Returns {@code true}; {@code MetalLookAndFeel} can be run on any platform
Returns {@code true}; metal can provide {@code Window} decorations
Populates {@code table} with mappings from {@code uiClassID} to the fully qualified name of the ui class
Populates {@code table} with system colors
Populates {@code table} with the defaults for metal
Ensures the current {@code MetalTheme} is {@code non-null}
Returns the look and feel defaults
{@inheritDoc}
Set the theme used by <code>MetalLookAndFeel</code>
Return the theme currently being used by <code>MetalLookAndFeel</code>
Returns an <code>Icon</code> with a disabled appearance
Returns an <code>Icon</code> for use by disabled components that are also selected
Returns the control text font of the current theme
Returns the system text font of the current theme
Returns the user text font of the current theme
Returns the menu text font of the current theme
Returns the window title font of the current theme
Returns the sub-text font of the current theme
Returns the desktop color of the current theme
Returns the focus color of the current theme
Returns the white color of the current theme
Returns the black color of the current theme
Returns the control color of the current theme
Returns the control shadow color of the current theme
Returns the control dark shadow color of the current theme
Returns the control info color of the current theme
Returns the control highlight color of the current theme
Returns the control disabled color of the current theme
Returns the primary control color of the current theme
Returns the primary control shadow color of the current theme
Returns the primary control dark shadow color of the current theme
Returns the primary control info color of the current theme
Returns the primary control highlight color of the current theme
Returns the system text color of the current theme
Returns the control text color of the current theme
Returns the inactive control text color of the current theme
Returns the inactive system text color of the current theme
Returns the user text color of the current theme
Returns the text highlight color of the current theme
Returns the highlighted text color of the current theme
Returns the window background color of the current theme
Returns the window title background color of the current theme
Returns the window title foreground color of the current theme
Returns the window title inactive background color of the current theme
Returns the window title inactive foreground color of the current theme
Returns the menu background color of the current theme
Returns the menu foreground color of the current theme
Returns the menu selected background color of the current theme
Returns the menu selected foreground color of the current theme
Returns the menu disabled foreground color of the current theme
Returns the separator background color of the current theme
Returns the separator foreground color of the current theme
Returns the accelerator foreground color of the current theme
Returns the accelerator selected foreground color of the current theme
Returns a {@code LayoutStyle} implementing the Java look and feel design guidelines as specified at <a href="http://www
Creates the <code>ComponentUI</code> implementation for the passed in component
Configures the specified component appropriate for the metal look and feel
Reverses configuration which was done on the specified component during <code>installUI</code>
If necessary paints the background of the component, then invokes <code>paint</code>
Draws a bit of special highlighting on the progress bar
Draws a bit of special highlighting on the progress bar and bouncing box
Creates a UI for a <code>JRootPane</code>
Invokes supers implementation of <code>installUI</code> to install the necessary state onto the passed in <code>JRootPane</code> to render the metal look and feel implementation of <code>RootPaneUI</code>
Invokes supers implementation to uninstall any of its state
Invoked when a property changes
Returns the view that represents the decrease view
Returns the view that represents the increase view
This is overridden only to increase the invalid area
{@inheritDoc}
Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders
Returns the shorter dimension of the track
Returns the longer dimension of the slide bar
Returns the amount that the thumb goes past the slide bar
Creates a new MetalSplitPaneUI instance
Creates the default divider
Overridden to do nothing for the Java L&amp;F
Overridden to do nothing for the Java L&amp;F
{@inheritDoc}
This method gets called when a bound property is changed on the associated JTextComponent
Returns the name of this theme
Returns the primary 1 color
Returns the primary 2 color
Returns the primary 3 color
Returns the secondary 1 color
Returns the secondary 2 color
Returns the secondary 3 color
Returns the control text font
Returns the system text font
Returns the user text font
Returns the menu text font
Returns the window title font
Returns the sub-text font
Returns the white color
Returns the black color
Returns the focus color
Returns the desktop color
Returns the control color
Returns the control shadow color
Returns the control dark shadow color
Returns the control info color
Returns the control highlight color
Returns the control disabled color
Returns the primary control color
Returns the primary control shadow color
Returns the primary control dark shadow color
Returns the primary control info color
Returns the primary control highlight color
Returns the system text color
Returns the control text color
Returns the inactive control text color
Returns the inactive system text color
Returns the user text color
Returns the text highlight color
Returns the highlighted text color
Returns the window background color
Returns the window title background color
Returns the window title foreground color
Returns the window title inactive background color
Returns the window title inactive foreground color
Returns the menu background color
Returns the menu foreground color
Returns the menu selected background color
Returns the menu selected foreground color
Returns the menu disabled foreground color
Returns the separator background color
Returns the separator foreground color
Returns the accelerator foreground color
Returns the accelerator selected foreground color
Adds values specific to this theme to the defaults table
If necessary paints the background of the component, then invokes <code>paint</code>
Paints the appropriate icon of the button <code>b</code> in the space <code>iconRect</code>
Creates a container listener that will be added to the JToolBar
Creates a property change listener that will be added to the JToolBar
If necessary paints the background of the component, then invokes <code>paint</code>
this function converts between the string passed into the client property and the internal representation (currently and int)
Sets the message parameters for a <code>MetaMessage</code>
Obtains the type of the <code>MetaMessage</code>
Obtains a copy of the data for the meta message
Creates a new object of the same class and with the same contents as this object
{@inheritDoc}
Returns the name of the method represented by this {@code Method} object, as a {@code String}
{@inheritDoc}
{@inheritDoc}
Returns a {@code Class} object that represents the formal return type of the method represented by this {@code Method} object
Returns a {@code Type} object that represents the formal return type of the method represented by this {@code Method} object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares this {@code Method} against the specified object
Returns a hashcode for this {@code Method}
Returns a string describing this {@code Method}
Returns a string describing this {@code Method}, including type parameters
Invokes the underlying method represented by this {@code Method} object, on the specified object with the specified parameters
Returns {@code true} if this method is a bridge method; returns {@code false} otherwise
{@inheritDoc}
{@inheritDoc}
Returns {@code true} if this method is a default method; returns {@code false} otherwise
Returns the default value for the annotation member represented by this {@code Method} instance
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Gets the method that this MethodDescriptor encapsulates
Gets the ParameterDescriptor for each of this MethodDescriptor's method's parameters
Return true if this method is abstract
Return true if this method is default
Get return type
Return the class containing the method that this method overrides
Return the type containing the method that this method overrides
Return the method that this method overrides
Tests whether this method overrides another
Adds a local variable to this method
Adds a local variable to this method and assigns an index automatically
Remove a local variable, its slot will not be reused, if you do not use addLocalVariable with an explicit index argument
Remove all local variables
Give an instruction a line number corresponding to the source code line
Remove a line number
Remove all line numbers
Add an exception handler, i
Remove an exception handler
Remove all line numbers
Add an exception possibly thrown by this method
Remove an exception
Remove all exceptions
Add an attribute to the code
Remove a code attribute
Remove all code attributes
Get method object
Remove all NOPs from the instruction list (if possible) and update every object refering to them, i
Set maximum number of local variables
Set maximum stack size for this method
Computes max
Compute maximum number of local variables
Do not/Do produce attributes code attributesLineNumberTable and LocalVariableTable, like javac -O
Computes stack usage of an instruction list by performing control flow analysis
Add observer for this object
Remove observer for this object
Call notify() method on all observers
Return string representation close to declaration format, `public static void _main(String[]) throws IOException', e
Allocates a local variable
by default context node is the same as current node
Add a pre-compiled pattern to this mode
Get the instruction list for a pre-compiled pattern
Breaks up the IL for this {@link MethodGenerator} into separate outlined methods so that no method exceeds the 64KB limit on the length of the byte code associated with a method
Mark the end of the method's {@link InstructionList} as the start of an outlineable chunk of code
Mark the end of an outlineable chunk of code
Registers a {@link org
<p>Find which {@link LocalVariableGen}, if any, is registered for a particular JVM local stack frame slot at a particular position in the byte code for the method
<p>Set up a mapping of the name of the specified {@link LocalVariableGen} object to the <code>LocalVariableGen</code> itself
Remove the mapping from the name of the specified {@link LocalVariableGen} to itself
<p>Given the name of a variable, finds a {@link LocalVariableGen} corresponding to it
<p>Gets all {@link LocalVariableGen} objects for this method
Reports the type of this method handle
Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match
Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values
Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact {@link #invoke invoke} from a call site which mentions only the type {@code Object}, and whose arity is the length of the argument list
Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact {@link #invoke invoke} from a call site which mentions only the type {@code Object}, and whose arity is the length of the argument array
Produces an adapter method handle which adapts the type of the current method handle to a new type
Makes an <em>array-spreading</em> method handle, which accepts a trailing array argument and spreads its elements as positional arguments
Makes an <em>array-collecting</em> method handle, which accepts a given number of trailing positional arguments and collects them into an array argument
Makes a <em>variable arity</em> adapter which is able to accept any number of trailing positional arguments and collect them into an array argument
Determines if this method handle supports {@linkplain #asVarargsCollector variable arity} calls
Makes a <em>fixed arity</em> method handle which is otherwise equivalent to the current method handle
Binds a value {@code x} to the first argument of a method handle, without invoking it
Returns a string representation of the method handle, starting with the string {@code "MethodHandle"} and ending with the string representation of the method handle's type
Returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field
Returns the class in which the cracked method handle's underlying member was defined
Returns the name of the cracked method handle's underlying member
Returns the nominal type of the cracked symbolic reference, expressed as a method type
Reflects the underlying member as a method, constructor, or field object
Returns the access modifiers of the underlying member
Determines if the underlying member was a variable arity method or constructor
Returns the descriptive name of the given reference kind, as defined in the <a href="MethodHandleInfo
Returns a string representation for a {@code MethodHandleInfo}, given the four parts of its symbolic reference
Produces an instance of the given single-method interface which redirects its calls to the given method handle
Determines if the given object was produced by a call to {@link #asInterfaceInstance asInterfaceInstance}
Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance
Recovers the unique single-method interface type for which this wrapper instance was created
Returns a {@link Lookup lookup object} with full capabilities to emulate all supported bytecode behaviors of the caller
Returns a {@link Lookup lookup object} which is trusted minimally
Performs an unchecked "crack" of a <a href="MethodHandleInfo
Produces a method handle giving read access to elements of an array
Produces a method handle giving write access to elements of an array
Produces a method handle which will invoke any method handle of the given {@code type}, with a given number of trailing arguments replaced by a single trailing {@code Object[]} array
Produces a special <em>invoker method handle</em> which can be used to invoke any method handle of the given type, as if by {@link MethodHandle#invokeExact invokeExact}
Produces a special <em>invoker method handle</em> which can be used to invoke any method handle compatible with the given type, as if by {@link MethodHandle#invoke invoke}
Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion
Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments
Produces a method handle of the requested return type which returns the given constant value every time it is invoked
Produces a method handle which returns its sole argument when invoked
Provides a target method handle with one or more <em>bound arguments</em> in advance of the method handle's invocation
Produces a method handle which will discard some dummy arguments before calling some other specified <i>target</i> method handle
Produces a method handle which will discard some dummy arguments before calling some other specified <i>target</i> method handle
Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function
Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle)
Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle)
Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments
Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle
Makes a method handle which adapts a target method handle, by running it inside an exception handler
Produces a method handle which will throw exceptions of the given {@code exType}
Tells which class is performing the lookup
Tells which access-protection classes of members this lookup object can produce
Creates a lookup on the specified new lookup class
Displays the name of the class from which lookups are to be made
Produces a method handle for a static method
Produces a method handle for a virtual method
Produces a method handle which creates an object and initializes it, using the constructor of the specified type
Produces an early-bound method handle for a virtual method
Produces a method handle giving read access to a non-static field
Produces a method handle giving write access to a non-static field
Produces a method handle giving read access to a static field
Produces a method handle giving write access to a static field
Produces an early-bound method handle for a non-static method
Makes a <a href="MethodHandleInfo
Produces a method handle for a reflected method
Produces a method handle for a reflected constructor
Produces a method handle giving read access to a reflected field
Produces a method handle giving write access to a reflected field
Cracks a <a href="MethodHandleInfo
Return an explicit receiver parameter ("this" parameter)
Finds or creates an instance of the given method type
Finds or creates a method type with the given components
Finds or creates a method type with the given components
Finds or creates a method type with the given components
Finds or creates a method type with the given components
Finds or creates a method type with the given components
Finds or creates a method type whose components are {@code Object} with an optional trailing {@code Object[]} array
Finds or creates a method type whose components are all {@code Object}
Finds or creates a method type with a single different parameter type
Finds or creates a method type with additional parameter types
Finds or creates a method type with additional parameter types
Finds or creates a method type with additional parameter types
Finds or creates a method type with additional parameter types
Finds or creates a method type with some parameter types omitted
Finds or creates a method type with a different return type
Reports if this type contains a primitive argument or return value
Reports if this type contains a wrapper argument or return value
Erases all reference types to {@code Object}
Converts all types, both reference and primitive, to {@code Object}
Converts all primitive types to their corresponding wrapper types
Converts all wrapper types to their corresponding primitive types
Returns the parameter type at the specified index, within this method type
Returns the number of parameter types in this method type
Returns the return type of this method type
Presents the parameter types as a list (a convenience method)
Presents the parameter types as an array (a convenience method)
Compares the specified object with this type for equality
Returns the hash code value for this method type
Returns a string representation of the method type, of the form {@code "(PT0,PT1
Finds or creates an instance of a method type, given the spelling of its bytecode descriptor
Produces a bytecode descriptor representation of the method type
Returns the algorithm name of the message digest used by the mask generation function
Method getMgmtData
Starts the specified note sounding
Turns the specified note off
Turns the specified note off
Reacts to a change in the specified note's key pressure
Obtains the pressure with which the specified key is being depressed
Reacts to a change in the keyboard pressure
Obtains the channel's keyboard pressure
Reacts to a change in the specified controller's value
Obtains the current value of the specified controller
Changes a program (patch)
Changes the program using bank and program (patch) numbers
Obtains the current program number for this channel
Changes the pitch offset for all notes on this channel
Obtains the upward or downward pitch offset for this channel
Resets all the implemented controllers to their default values
Turns off all notes that are currently sounding on this channel
Immediately turns off all sounding notes on this channel, ignoring the state of the Hold Pedal and the internal decay rate of the current <code>Instrument</code>
Turns local control on or off
Turns mono mode on or off
Obtains the current mono/poly mode
Turns omni mode on or off
Obtains the current omni mode
Sets the mute state for this channel
Obtains the current mute state for this channel
Sets the solo state for this channel
Obtains the current solo state for this channel
Obtains information about the device, including its Java class and <code>Strings</code> containing its name, vendor, and description
Opens the device, indicating that it should now acquire any system resources it requires and become operational
Closes the device, indicating that the device should now release any system resources it is using
Reports whether the device is open
Obtains the current time-stamp of the device, in microseconds
Obtains the maximum number of MIDI IN connections available on this MIDI device for receiving MIDI data
Obtains the maximum number of MIDI OUT connections available on this MIDI device for transmitting MIDI data
Obtains a MIDI IN receiver through which the MIDI device may receive MIDI data
Returns all currently active, non-closed receivers connected with this MidiDevice
Obtains a MIDI OUT connection from which the MIDI device will transmit MIDI data  The returned transmitter must be closed when the application has finished using it
Returns all currently active, non-closed transmitters connected with this MidiDevice
Reports whether two objects are equal
Finalizes the hashcode method
Obtains the name of the device
Obtains the name of the company who supplies the device
Obtains the description of the device
Obtains the version of the device
Provides a string representation of the device information
Indicates whether the device provider supports the device represented by the specified device info object
Obtains the set of info objects representing the device or devices provided by this {@code MidiDeviceProvider}
Obtains an instance of the device represented by the info object
Obtains a MidiDevice object which is an owner of this Receiver
Obtains a MidiDevice object which is an owner of this Transmitter
Obtains the MIDI message contained in the event
Sets the time-stamp for the event, in MIDI ticks
Obtains the time-stamp for the event, in MIDI ticks
Obtains the MIDI file type
Obtains the timing division type for the MIDI file
Obtains the timing resolution for the MIDI file
Obtains the length of the MIDI file, expressed in 8-bit bytes
Obtains the length of the MIDI file, expressed in microseconds
Obtain an unmodifiable map of properties
Obtain the property value specified by the key
Obtains the MIDI file format of the input stream provided
Obtains the MIDI file format of the URL provided
Obtains the MIDI file format of the {@code File} provided
Obtains a MIDI sequence from the input stream provided
Obtains a MIDI sequence from the URL provided
Obtains a MIDI sequence from the {@code File} provided
Obtains the set of MIDI file types for which file writing support is provided by this file writer
Obtains the file types that this file writer can write from the sequence specified
Indicates whether file writing support for the specified MIDI file type is provided by this file writer
Indicates whether a MIDI file of the file type specified can be written from the sequence indicated
Writes a stream of bytes representing a MIDI file of the file type indicated to the output stream provided
Writes a stream of bytes representing a MIDI file of the file type indicated to the external file provided
Sets the data for the MIDI message
Obtains the MIDI message data
Obtains the status byte for the MIDI message
Obtains the total length of the MIDI message in bytes
Creates a new object of the same class and with the same contents as this object
Obtains an array of information objects representing the set of all MIDI devices available on the system
Obtains the requested MIDI device
Obtains a MIDI receiver from an external MIDI port or other default device
Obtains a MIDI transmitter from an external MIDI port or other default source
Obtains the default synthesizer
Obtains the default <code>Sequencer</code>, connected to a default device
Obtains the default <code>Sequencer</code>, optionally connected to a default device
Constructs a MIDI sound bank by reading it from the specified stream
Constructs a <code>Soundbank</code> by reading it from the specified URL
Constructs a <code>Soundbank</code> by reading it from the specified <code>File</code>
Obtains the MIDI file format of the data in the specified input stream
Obtains the MIDI file format of the data in the specified URL
Obtains the MIDI file format of the specified <code>File</code>
Obtains a MIDI sequence from the specified input stream
Obtains a MIDI sequence from the specified URL
Obtains a MIDI sequence from the specified <code>File</code>
Obtains the set of MIDI file types for which file writing support is provided by the system
Indicates whether file writing support for the specified MIDI file type is provided by the system
Obtains the set of MIDI file types that the system can write from the sequence specified
Indicates whether a MIDI file of the file type specified can be written from the sequence indicated
Writes a stream of bytes representing a file of the MIDI file type indicated to the output stream provided
Writes a stream of bytes representing a file of the MIDI file type indicated to the external file provided
Returns the name of this <code>MimeHeader</code> object
Returns the value of this <code>MimeHeader</code> object
Returns all of the values for the specified header as an array of <code>String</code> objects
Replaces the current value of the first header entry whose name matches the given name with the given value, adding a new header if no existing header name matches
Adds a <code>MimeHeader</code> object with the specified name and value to this <code>MimeHeaders</code> object's list of headers
Remove all <code>MimeHeader</code> objects whose name matches the given name
Removes all the header entries from this <code>MimeHeaders</code> object
Returns all the <code>MimeHeader</code>s in this <code>MimeHeaders</code> object
Returns all the <code>MimeHeader</code> objects whose name matches a name in the given array of names
Returns all of the <code>MimeHeader</code> objects whose name does not match a name in the given array of names
Gets the ID of the chronology - 'Minguo'
Gets the calendar type of the underlying calendar system - 'roc'
Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields
Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields
Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields
Obtains a local date in the Minguo calendar system from the epoch-day
Checks if the specified year is a leap year
Obtains the current {@code MinguoDate} from the system clock in the default time-zone
Obtains the current {@code MinguoDate} from the system clock in the specified time-zone
Obtains the current {@code MinguoDate} from the specified clock
Obtains a {@code MinguoDate} representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a {@code MinguoDate} from a temporal object
Gets the chronology of this date, which is the Minguo calendar system
Gets the era applicable at this date
Returns the length of the month represented by this date
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares this date to another date, including the chronology
A hash code for this date
Obtains an instance of {@code MinguoEra} from an {@code int} value
Gets the numeric era {@code int} value
Generates HTML output from a StyledDocument
Writes out all the attributes for the following types:  StyleConstants
Writes out text
Writes out a start tag appropriately indented
Writes out an end tag appropriately indented
Writes out the &lt;head&gt; and &lt;style&gt; tags, and then invokes writeStyles() to write out all the named styles as the content of the &lt;style&gt; tag
Writes out all the named styles as the content of the &lt;style&gt; tag
Iterates over the elements in the document and processes elements based on whether they are branch elements or leaf elements
Emits an end tag for a &lt;p&gt; tag
Emits the start tag for a paragraph
Responsible for writing out other non-text leaf elements
Responsible for handling Icon Elements; deliberately unimplemented
Responsible for handling Component Elements; deliberately unimplemented
Returns true if the element is a text element
Writes out the attribute set in an HTML-compliant manner
Generates bold &lt;b&gt;, italic &lt;i&gt;, and &lt;u&gt; tags for the text based on its attribute settings
Writes out the remaining character-level attributes (attributes other than bold, italic, and underline) in an HTML-compliant way
Returns true if we are currently in a &lt;font&gt; tag
This is no longer used, instead &lt;span&gt; will be written out
This is no longer used, instead &lt;span&gt; will be written out
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Returns the type mirror corresponding to the type being accessed
Returns the type mirrors corresponding to the types being accessed
Returns the unmatched format specifier
Returns the format specifier which does not have a width
Gets parameter passed by constructor
Gets parameter passed by constructor
used to set the uninitialized {@link com
used to get the uninitialized {@link com
Check that the specified content is valid according to this content model
Obtains information about this mixer, including the product's name, version, vendor, etc
Obtains information about the set of source lines supported by this mixer
Obtains information about the set of target lines supported by this mixer
Obtains information about source lines of a particular type supported by the mixer
Obtains information about target lines of a particular type supported by the mixer
Indicates whether the mixer supports a line (or lines) that match the specified <code>Line
Obtains a line that is available for use and that matches the description in the specified <code>Line
Obtains the approximate maximum number of lines of the requested type that can be open simultaneously on the mixer
Obtains the set of all source lines currently open to this mixer
Obtains the set of all target lines currently open from this mixer
Synchronizes two or more lines
Releases synchronization for the specified lines
Reports whether this mixer supports synchronization of the specified set of lines
Indicates whether two info objects are equal, returning <code>true</code> if they are identical
Finalizes the hashcode method
Obtains the name of the mixer
Obtains the vendor of the mixer
Obtains the description of the mixer
Obtains the version of the mixer
Provides a string representation of the mixer info
Indicates whether the mixer provider supports the mixer represented by the specified mixer info object
Obtains the set of info objects representing the mixer or mixers provided by this MixerProvider
Obtains an instance of the mixer represented by the info object
Appends the specified URL to the list of URLs to search for classes and resources
Appends the specified URL to the list of URLs to search for classes and resources
Returns the search path of URLs for loading classes and resources
Loads a text file containing MLET tags that define the MBeans to be added to the MBean server
Loads a text file containing MLET tags that define the MBeans to be added to the MBean server
Gets the current directory used by the library loader for storing native libraries before they are loaded into memory
Sets the directory used by the library loader for storing native libraries before they are loaded into memory
Allows the m-let to perform any operations it needs before being registered in the MBean server
Allows the m-let to perform any operations needed after having been registered in the MBean server or after the registration has failed
Allows the m-let to perform any operations it needs before being unregistered by the MBean server
Allows the m-let to perform any operations needed after having been unregistered in the MBean server
<p>Save this MLet's contents to the given {@link ObjectOutput}
<p>Restore this MLet's contents from the given {@link ObjectInput}
<p>Load a class, using the given {@link ClassLoaderRepository} if the class is not found in this MLet's URLs
This is the main method for class loaders that is being redefined
Returns the absolute path name of a native library
<p>This method is to be overridden when extending this service to support caching and versioning
Gets the attributes of the <CODE>MLET</CODE> tag
Gets the MLet text file's base URL
Gets the code base URL
Gets the list of <CODE>
Gets the value of the <CODE>CODE</CODE> attribute of the <CODE>MLET</CODE> tag
Gets the value of the <CODE>OBJECT</CODE> attribute of the <CODE>MLET</CODE> tag
Gets the value of the <CODE>NAME</CODE> attribute of the <CODE>MLET</CODE> tag
Gets the value of the <CODE>VERSION</CODE> attribute of the <CODE>MLET</CODE> tag
Gets the list of values of the <code>TYPE</code> attribute in each nested &lt;PARAM&gt; tag within the <code>MLET</code> tag
Gets the list of values of the <code>VALUE</code> attribute in each nested &lt;PARAM&gt; tag within the <code>MLET</code> tag
Loads a text file containing MLET tags that define the MBeans to be added to the MBean server
Loads a text file containing MLET tags that define the MBeans to be added to the MBean server
Appends the specified URL to the list of URLs to search for classes and resources
Appends the specified URL to the list of URLs to search for classes and resources
Returns the search path of URLs for loading classes and resources
Finds the resource with the given name
Returns an input stream for reading the specified resource
Finds all the resources with the given name
Gets the current directory used by the library loader for storing native libraries before they are loaded into memory
Sets the directory used by the library loader for storing native libraries before they are loaded into memory
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Initializes a ModelMBean object using ModelMBeanInfo passed in
Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors)
Gets a copy of the associated Descriptor for the ModelMBeanAttributeInfo
Sets associated Descriptor (full replace) for the ModelMBeanAttributeDescriptor
Creates and returns a new ModelMBeanAttributeInfo which is a duplicate of this ModelMBeanAttributeInfo
Returns a human-readable version of the ModelMBeanAttributeInfo instance
Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo
Returns a copy of the associated Descriptor
Sets associated Descriptor (full replace) of ModelMBeanConstructorInfo
Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form
Returns a Descriptor array consisting of all Descriptors for the ModelMBeanInfo of type inDescriptorType
Adds or replaces descriptors in the ModelMBeanInfo
Returns a Descriptor requested by name and descriptorType
Sets descriptors in the info array of type inDescriptorType for the ModelMBean
<p>Returns the ModelMBean's descriptor which contains MBean wide policies
Sets the ModelMBean's descriptor
Returns a ModelMBeanAttributeInfo requested by name
Returns a ModelMBeanOperationInfo requested by name
Returns a ModelMBeanNotificationInfo requested by name
Creates and returns a copy of this object
Returns the list of attributes exposed for management
Returns the name of the Java class of the MBean described by this <CODE>MBeanInfo</CODE>
Returns the list of the public constructors  of the MBean
Returns a human readable description of the MBean
Returns the list of the notifications emitted by the MBean
Returns the list of operations  of the MBean
Returns a shallow clone of this instance
Returns a Descriptor requested by name
Returns the ModelMBeanConstructorInfo requested by name
Sends a Notification which is passed in to the registered Notification listeners on the ModelMBean as a jmx
Sends a Notification which contains the text string that is passed in to the registered Notification listeners on the ModelMBean
Sends an attributeChangeNotification which is passed in to the registered attributeChangeNotification listeners on the ModelMBean
Sends an attributeChangeNotification which contains the old value and new value for the attribute to the registered AttributeChangeNotification listeners on the ModelMBean
Registers an object which implements the NotificationListener interface as a listener
Removes a listener for attributeChangeNotifications from the RequiredModelMBean
Creates and returns a new ModelMBeanNotificationInfo which is a duplicate of this ModelMBeanNotificationInfo
Returns a copy of the associated Descriptor for the ModelMBeanNotificationInfo
Sets associated Descriptor (full replace) for the ModelMBeanNotificationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor
Returns a human readable string containing ModelMBeanNotificationInfo
Creates and returns a new ModelMBeanOperationInfo which is a duplicate of this ModelMBeanOperationInfo
Returns a copy of the associated Descriptor of the ModelMBeanOperationInfo
Sets associated Descriptor (full replace) for the ModelMBeanOperationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor
Returns a string containing the entire contents of the ModelMBeanOperationInfo in human readable form
Add an anonymous ClassLoader to the repository
Remove the specified ClassLoader to the repository
Add a named ClassLoader to the repository
Remove a named ClassLoader from the repository
Get a named ClassLoader from the repository
Retrieves the modification code of this modification item
Retrieves the attribute associated with this modification item
Generates the string representation of this modification item, which consists of the modification operation and its related attribute
Returns this modifier's name in lowercase
Allows the monitor MBean to perform any operations it needs before being registered in the MBean server
Allows the monitor MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed
Allows the monitor MBean to perform any operations it needs before being unregistered by the MBean server
Allows the monitor MBean to perform any operations needed after having been unregistered by the MBean server
Starts the monitor
Stops the monitor
Returns the object name of the first object in the set of observed MBeans, or <code>null</code> if there is no such object
Removes all objects from the set of observed objects, and then adds the specified object
Adds the specified object in the set of observed MBeans, if this object is not already present
Removes the specified object from the set of observed MBeans
Tests whether the specified object is in the set of observed MBeans
Returns an array containing the objects being observed
Gets the attribute being observed
Sets the attribute to observe
Gets the granularity period (in milliseconds)
Sets the granularity period (in milliseconds)
Tests whether the monitor MBean is active
<p> Gets the Monitored Attribute Info for the attribute
<p> Sets the value for the Monitored Attribute if isWritable() is false, the method will throw ILLEGAL Operation exception
<p> Gets the value of the Monitored Attribute
<p> Gets the name of the Monitored Attribute
<p> If this attribute needs to be cleared, the user needs to implement this method to reset the state to initial state
If the concrete class decides not to provide the implementation of this  method, then it's OK
This method should be implemented by the concrete class
This method should be implemented by the concrete class only if the  attribute is writable
Gets the MonitoredAttributeInfo for the attribute
Gets the name of the attribute
<p> If the Attribute is writable from ASAdmin then isWritable() will return true
<p> isStatistic() is true if the attribute is presented as a Statistic
<p> Class Type: We will allow only basic class types: 1)Boolean 2)Integer 3)Byte 4)Long 5)Float 6)Double 7)String 8)Character </p> <p>
<p> Get's the description for the Monitored Attribute
A Simple Factory Method to create the Monitored Attribute Info
<p> Gets the name of this MonitoredObject </p><p>
<p> Gets the description of MonitoredObject </p><p>
<p> This method will add a child Monitored Object to this Monitored Object
<p> This method will remove child Monitored Object identified by the given name </p> <p>
<p> Gets the child MonitoredObject associated with this MonitoredObject instance using name as the key
<p> Gets all the Children registered under this instance of Monitored Object
<p> Sets the parent for this Monitored Object
<p> There will be only one parent for an instance of MontoredObject, this call gets parent and returns null if the Monitored Object is the root
<p> Adds the attribute with the given name
<p> Removes the attribute with the given name
<p> Gets the Monitored Object registered by the given name </p> <p>
<p> Gets all the Monitored Attributes for this Monitored Objects
<p> Clears the state of all the Monitored Attributes associated with the Monitored Object
A Simple Factory Method to create the Monitored Object
calls clearState() on all the registered children MonitoredObjects and MonitoredAttributes
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the depth in the stack trace where the object monitor was locked
Returns the stack frame that locked the object monitor
Returns a <tt>MonitorInfo</tt> object represented by the given <tt>CompositeData</tt>
<p> Gets the MonitoredObjectFactory </p> <p>
<p> Gets the MonitoredAttributeInfoFactory
<p> Gets the MonitoredManagerFactory
<p> Gets the Root Monitored Object which contains a Hierarchy Of Monitored Objects exposing various Monitorable Attributes of Various modules
<p> Initialize is called whenever there is a start monitoring call to CORBA MBean
A Simple Factory Method to create the Monitored Attribute Info
Starts the monitor
Stops the monitor
Adds the specified object in the set of observed MBeans
Removes the specified object from the set of observed MBeans
Tests whether the specified object is in the set of observed MBeans
Returns an array containing the objects being observed
Gets the object name of the object being observed
Sets the object to observe identified by its object name
Gets the attribute being observed
Sets the attribute to observe
Gets the granularity period (in milliseconds)
Sets the granularity period (in milliseconds)
Tests if the monitor MBean is active
Gets the observed object of this monitor notification
Gets the observed attribute of this monitor notification
Gets the derived gauge of this monitor notification
Gets the threshold/string (depending on the monitor type) that triggered off this monitor notification
Obtains an instance of {@code Month} from an {@code int} value
Obtains an instance of {@code Month} from a temporal object
Gets the month-of-year {@code int} value
Gets the textual representation, such as 'Jan' or 'December'
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this month-of-year as an {@code int}
Gets the value of the specified field from this month-of-year as a {@code long}
Returns the month-of-year that is the specified number of quarters after this one
Returns the month-of-year that is the specified number of months before this one
Gets the length of this month in days
Gets the minimum length of this month in days
Gets the maximum length of this month in days
Gets the day-of-year corresponding to the first day of this month
Gets the month corresponding to the first month of this quarter
Queries this month-of-year using the specified query
Adjusts the specified temporal object to have this month-of-year
Obtains the current month-day from the system clock in the default time-zone
Obtains the current month-day from the system clock in the specified time-zone
Obtains the current month-day from the specified clock
Obtains an instance of {@code MonthDay}
Obtains an instance of {@code MonthDay}
Obtains an instance of {@code MonthDay} from a temporal object
Obtains an instance of {@code MonthDay} from a text string such as {@code --12-03}
Obtains an instance of {@code MonthDay} from a text string using a specific formatter
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this month-day as an {@code int}
Gets the value of the specified field from this month-day as a {@code long}
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Gets the day-of-month field
Checks if the year is valid for this month-day
Returns a copy of this {@code MonthDay} with the month-of-year altered
Returns a copy of this {@code MonthDay} with the month-of-year altered
Returns a copy of this {@code MonthDay} with the day-of-month altered
Queries this month-day using the specified query
Adjusts the specified temporal object to have this month-day
Formats this month-day using the specified formatter
Combines this month-day with a year to create a {@code LocalDate}
Compares this month-day to another month-day
Checks if this month-day is after the specified month-day
Checks if this month-day is before the specified month-day
Checks if this month-day is equal to another month-day
A hash code for this month-day
Outputs this month-day as a {@code String}, such as {@code --12-03}
Convert a string to a compiled form
Parses, validates and computes normalized version of gMonthDay object
Converts gMonthDay object representation to String
Convert a string to a compiled form
Parses, validates and computes normalized version of gMonth object
Converts month object representation to String
Sets the FrameBorder's JComponent
Returns the FrameBorder's JComponent
Draws the FrameBorder's top border
Draws the FrameBorder's left border
Draws the FrameBorder's right border
Draws the FrameBorder's bottom border
Draws the FrameBorder in the given Rect
Sets the InternalFrameBorder's InternalFrame
Returns the InternalFrameBorder's InternalFrame
Returns the width of the InternalFrameBorder's resize controls, appearing along the InternalFrameBorder's bottom border
Draws the InternalFrameBorder's top border
Draws the InternalFrameBorder's left border
Draws the InternalFrameBorder's right border
Draws the InternalFrameBorder's bottom border
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
{@inheritDoc}
Motif combo popup should not track the mouse in the list
Returns the default desktop icon
Sets the icon used as the default desktop icon
Creates a UI for the JTextPane
Creates the object to use for a caret
Draws <b>aString</b> in the rectangle defined by (<b>x</b>, <b>y</b>, <b>width</b>, <b>height</b>)
This method is not being used to paint menu item since 6
This method is called when the frame becomes selected
This method is called when the frame is no longer selected
Load the SystemColors into the defaults table
Creates a new MotifOptionPaneUI instance
Creates and returns a Container containin the buttons
Returns null, CDE/Motif does not impose a minimum size
Creates and adds a JLabel representing the icon returned from <code>getIcon</code> to <code>top</code>
Creates a UI for a JPasswordField
Creates the object to use for a caret
Creates the ProgressBar's UI
create a MotifSliderUI object
overrides to hardcode the size of the divider PENDING(jeff) - rewrite JSplitPane so that this ins't needed
Paints the divider
The minimums size is the same as the preferredSize
Sets the SplitPaneUI that is using the receiver
Creates a new MotifSplitPaneUI instance
Creates the default divider
Creates a UI for a JTextArea
Creates the object to use for a caret
Creates a UI for a JTextField
Creates the object to use for a caret
Creates a UI for the JTextPane
Creates the object to use for a caret
Creates the object to use for a caret for all of the Motif text components
Called when the component containing the caret gains focus
Called when the component containing the caret loses focus
Damages the area surrounding the caret to cause it to be repainted
Renders the caret as a vertical line
Returns the default cell renderer that is used to do the stamping of each node
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
register this DragGestureRecognizer's Listeners with the Component
unregister this DragGestureRecognizer's Listeners with the Component subclasses must override this method
Invoked when the mouse has been clicked on a component
Invoked when a mouse button has been pressed on a <code>Component</code>
Invoked when a mouse button has been released on a component
Invoked when the mouse enters a component
Invoked when the mouse exits a component
Invoked when a mouse button is pressed on a component
Invoked when the mouse button has been moved on a component (with no buttons no down)
The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system
The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system
The horizontal coordinate at which the event occurred relative to the DOM implementation's client area
The vertical coordinate at which the event occurred relative to the DOM implementation's client area
Used to indicate whether the 'ctrl' key was depressed during the firing of the event
Used to indicate whether the 'shift' key was depressed during the firing of the event
Used to indicate whether the 'alt' key was depressed during the firing of the event
Used to indicate whether the 'meta' key was depressed during the firing of the event
During mouse events caused by the depression or release of a mouse button, <code>button</code> is used to indicate which mouse button changed state
Used to identify a secondary <code>EventTarget</code> related to a UI event
The <code>initMouseEvent</code> method is used to initialize the value of a <code>MouseEvent</code> created through the <code>DocumentEvent</code> interface
Returns a <code>PointerInfo</code> instance that represents the current location of the mouse pointer
Returns the number of buttons on the mouse
This method does two things: it fills the point fields with the current coordinates of the mouse cursor and returns the number of the screen device where the pointer is located
Returns whether or not the window is located under the mouse pointer
Invoked when the mouse button has been clicked (pressed and released) on a component
Invoked when a mouse button has been pressed on a component
Invoked when a mouse button has been released on a component
Invoked when the mouse enters a component
Invoked when the mouse exits a component
Invoked when a mouse button is pressed on a component and then dragged
Invoked when the mouse button has been moved on a component (with no buttons no down)
Invoked when a mouse button is pressed on a component and then dragged
Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed
Returns the type of scrolling that should take place in response to this event
Returns the number of units that should be scrolled per click of mouse wheel rotation
Returns the number of "clicks" the mouse wheel was rotated, as an integer
Returns the number of "clicks" the mouse wheel was rotated, as a double
This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings
Returns a parameter string identifying this event
Invoked when the mouse wheel is rotated
Specifies if this feature is enabled or disabled
Property for MTOM threshold value
{@inheritDoc}
Gets the threshold value used to determine when binary data should be sent as an attachment
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Dump instruction as byte code to stream out
Read needed data (i
Also works for instructions whose stack effect depends on the constant pool entry they reference
Call corresponding visitor method(s)
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Closes this channel
Joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key
Joins a multicast group to begin receiving datagrams sent to the group from a given source address
Set the default time-to-live for multicast packets sent out on this {@code MulticastSocket} in order to control the scope of the multicasts
Set the default time-to-live for multicast packets sent out on this {@code MulticastSocket} in order to control the scope of the multicasts
Get the default time-to-live for multicast packets sent out on the socket
Get the default time-to-live for multicast packets sent out on the socket
Joins a multicast group
Leave a multicast group
Joins the specified multicast group at the specified interface
Leave a multicast group on a specified local interface
Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface
Retrieve the address of the network interface used for multicast packets
Specify the network interface for outgoing multicast datagrams sent on this socket
Get the multicast network interface set
Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket
Get the setting for local loopback of multicast datagrams
Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>isFocusTraversable</code> method on each UI handled by this object
Invokes the <code>setPopupVisible</code> method on each UI handled by this object
Invokes the <code>isPopupVisible</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Obtain the current doc object
Go to the multidoc object that contains the next doc object in the sequence of doc objects
Print a MultiDoc with the specified job attributes
Create a job which can print a multiDoc
Returns singleton iterator containing the document root
Returns a DOMBuilder class wrapped in a SAX adapter
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>getAcceptAllFileFilter</code> method on each UI handled by this object
Invokes the <code>getFileView</code> method on each UI handled by this object
Invokes the <code>getApproveButtonText</code> method on each UI handled by this object
Invokes the <code>getDialogTitle</code> method on each UI handled by this object
Invokes the <code>rescanCurrentDirectory</code> method on each UI handled by this object
Invokes the <code>ensureFileIsVisible</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Associates the specified key with a set of values
Maps a key to a value in a set that is associated with the specified key
Makes the MultiHashtable unmodifiable
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>locationToIndex</code> method on each UI handled by this object
Invokes the <code>indexToLocation</code> method on each UI handled by this object
Invokes the <code>getCellBounds</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns a string, suitable for use in menus, that identifies this look and feel
Returns a string, suitable for use by applications/services, that identifies this look and feel
Returns a one-line description of this look and feel
Returns <code>false</code>; this look and feel is not native to any platform
Returns <code>true</code>; every platform permits this look and feel
Creates, initializes, and returns the look and feel specific defaults
Creates the <code>ComponentUI</code> objects required to present the <code>target</code> component, placing the objects in the <code>uis</code> vector and returning the <code>ComponentUI</code> object that best represents the component's UI
Creates an array, populates it with UI objects from the passed-in vector, and returns the array
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>selectInitialValue</code> method on each UI handled by this object
Invokes the <code>containsCustomComponents</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Creates a new <code>MultiPixelPackedSampleModel</code> with the specified width and height
Creates a <code>DataBuffer</code> that corresponds to this <code>MultiPixelPackedSampleModel</code>
Returns the number of data elements needed to transfer one pixel via the {@link #getDataElements} and {@link #setDataElements} methods
Returns the number of bits per sample for all bands
Returns the number of bits per sample for the specified band
Returns the offset of pixel (x,&nbsp;y) in data array elements
Returns the offset, in bits, into the data element in which it is  stored for the <code>x</code>th pixel of a scanline
Returns the scanline stride
Returns the pixel bit stride in bits
Returns the data bit offset in bits
Returns the TransferType used to transfer pixels by way of the  <code>getDataElements</code> and <code>setDataElements</code>  methods
Creates a new <code>MultiPixelPackedSampleModel</code> with a subset of the bands of this <code>MultiPixelPackedSampleModel</code>
Returns as <code>int</code> the sample in a specified band for the pixel located at (x,&nbsp;y)
Sets a sample in the specified band for the pixel located at (x,&nbsp;y) in the <code>DataBuffer</code> using an <code>int</code> for input
Returns data for a single pixel in a primitive array of type TransferType
Returns the specified single band pixel in the first element of an <code>int</code> array
Sets the data for a single pixel in the specified <code>DataBuffer</code> from a primitive array of type TransferType
Sets a pixel in the <code>DataBuffer</code> using an <code>int</code> array for input
Returns the string table for class MultipleDocumentHandling
Returns the enumeration value table for class MultipleDocumentHandling
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a copy of the array of floats used by this gradient to calculate color distribution
Returns a copy of the array of colors used by this gradient
Returns the enumerated type which specifies cycling behavior
Returns the enumerated type which specifies color space for interpolation
Returns a copy of the transform applied to the gradient
Returns the transparency mode for this {@code Paint} object
Returns the number of multiple master design controls
Returns an array of design limits interleaved in the form [from&rarr;to] for each axis
Returns an array of default design values for each axis
Returns the name for each design axis
Creates a new instance of a multiple master font based on the design axis values contained in the specified array
Creates a new instance of a multiple master font based on detailed metric information
Only resets the current scope -- all namespaces defined in lower scopes remain valid after a call to reset
Begins a new scope
Pops the current scope
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>isPopupTrigger</code> method on each UI handled by this object
Invokes the <code>getPopup</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>resetToPreferredSizes</code> method on each UI handled by this object
Invokes the <code>setDividerLocation</code> method on each UI handled by this object
Invokes the <code>getDividerLocation</code> method on each UI handled by this object
Invokes the <code>getMinimumDividerLocation</code> method on each UI handled by this object
Invokes the <code>getMaximumDividerLocation</code> method on each UI handled by this object
Invokes the <code>finishedPaintingChildren</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>tabForCoordinate</code> method on each UI handled by this object
Invokes the <code>getTabBounds</code> method on each UI handled by this object
Invokes the <code>getTabRunCount</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>getToolTipText</code> method on each UI handled by this object
Invokes the <code>modelToView</code> method on each UI handled by this object
Invokes the <code>modelToView</code> method on each UI handled by this object
Invokes the <code>viewToModel</code> method on each UI handled by this object
Invokes the <code>viewToModel</code> method on each UI handled by this object
Invokes the <code>getNextVisualPositionFrom</code> method on each UI handled by this object
Invokes the <code>damageRange</code> method on each UI handled by this object
Invokes the <code>damageRange</code> method on each UI handled by this object
Invokes the <code>getEditorKit</code> method on each UI handled by this object
Invokes the <code>getRootView</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>getPathBounds</code> method on each UI handled by this object
Invokes the <code>getPathForRow</code> method on each UI handled by this object
Invokes the <code>getRowForPath</code> method on each UI handled by this object
Invokes the <code>getRowCount</code> method on each UI handled by this object
Invokes the <code>getClosestPathForLocation</code> method on each UI handled by this object
Invokes the <code>isEditing</code> method on each UI handled by this object
Invokes the <code>stopEditing</code> method on each UI handled by this object
Invokes the <code>cancelEditing</code> method on each UI handled by this object
Invokes the <code>startEditingAtPath</code> method on each UI handled by this object
Invokes the <code>getEditingPath</code> method on each UI handled by this object
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Advance to the next node represented by this {@link HeapNode}
Creates a deep copy of this {@link HeapNode}
Remembers the current node for the next call to {@link #gotoMark()}
Restores the current node remembered by {@link #setMark()}
Performs a comparison of the two heap nodes
Sets context with respect to which this heap node is evaluated
Reset the heap node back to its beginning
Returns the list of UIs associated with this multiplexing UI
Invokes the <code>contains</code> method on each UI handled by this object
Invokes the <code>update</code> method on each UI handled by this object
Returns a multiplexing UI instance if any of the auxiliary <code>LookAndFeel</code>s supports this UI
Invokes the <code>installUI</code> method on each UI handled by this object
Invokes the <code>uninstallUI</code> method on each UI handled by this object
Invokes the <code>paint</code> method on each UI handled by this object
Invokes the <code>getPreferredSize</code> method on each UI handled by this object
Invokes the <code>getMinimumSize</code> method on each UI handled by this object
Invokes the <code>getMaximumSize</code> method on each UI handled by this object
Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object
Invokes the <code>getAccessibleChild</code> method on each UI handled by this object
Creates a new attribute set similar to this one except that it contains an attribute with the given name and value
Creates a new attribute set similar to this one except that it contains the given attributes and values
Removes an attribute with the given <code>name</code>
Removes an attribute set with the given <code>names</code>
Removes a set of attributes with the given <code>name</code>
Sets the resolving parent
Add an attribute to the end of the list
Add the contents of the attribute list to this list
Return true if list contains the given (raw) attribute name
Returns the target method of the call site, which behaves like a normal field of the {@code MutableCallSite}
Updates the target method of this call site, as a normal variable
{@inheritDoc}
Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites
Adds an item at the end of the model
Removes an item from the model
Adds an item at a specific index
Removes an item at a specific index
Adds <code>child</code> to the receiver at <code>index</code>
Removes the child at <code>index</code> from the receiver
Removes <code>node</code> from the receiver
Resets the user object of the receiver to <code>object</code>
Removes the receiver from its parent
Sets the parent of the receiver to <code>newParent</code>
<code>relatedNode</code> is used to identify a secondary node related to a mutation event
<code>prevValue</code> indicates the previous value of the <code>Attr</code> node in DOMAttrModified events, and of the <code>CharacterData</code> node in DOMCharacterDataModified events
<code>newValue</code> indicates the new value of the <code>Attr</code> node in DOMAttrModified events, and of the <code>CharacterData</code> node in DOMCharacterDataModified events
<code>attrName</code> indicates the name of the changed <code>Attr</code> node in a DOMAttrModified event
<code>attrChange</code> indicates the type of change which triggered the DOMAttrModified event
The <code>initMutationEvent</code> method is used to initialize the value of a <code>MutationEvent</code> created through the <code>DocumentEvent</code> interface
<code>attrChange</code> indicates the type of change which triggered the DOMAttrModified event
Initialize a mutation event, or overwrite the event's current        settings with new values of the parameters
True if the annotated interface is an MXBean interface
<p>The Java type that was supplied to the constructor
<p>The Open Type that was supplied to the constructor
<p>The Java class that corresponds to instances of the {@linkplain #getOpenType() Open Type} for this mapping
<p>Convert an instance of the Open Type into the Java type
<p>Convert an instance of the Java type into the Open Type
<p>Throw an appropriate InvalidObjectException if we will not be able to convert back from the open data to the original Java object
<p>Return the mapping for the given Java type
Gets the local name part of the XML name that this <code>Name</code> object represents
Gets the namespace-qualified name of the XML name that this <code>Name</code> object represents
Returns the prefix that was specified when this <code>Name</code> object was initialized
Returns the URI of the namespace for the XML name that this <code>Name</code> object represents
Get the prompt
Get the default name
Set the retrieved name
Get the retrieved name
Retrieves the class name of the object bound to the name of this binding
Retrieves the name of this binding
Sets the name of this binding
Sets the class name of this binding
Determines whether the name of this binding is relative to the target context (which is named by the first parameter of the <code>list()</code> method)
Sets whether the name of this binding is relative to the target context (which is named by the first parameter of the <code>list()</code> method)
Retrieves the full name of this binding
Sets the full name of this binding
Generates the string representation of this name/class pair
Retrieves a node specified by name
Adds a node using its <code>nodeName</code> attribute
Removes a node specified by name
Returns the <code>index</code>th item in the map
The number of nodes in this map
Retrieves a node specified by local name and namespace URI
Adds a node using its <code>namespaceURI</code> and <code>localName</code>
Removes a node specified by local name and namespace URI
Compares the current object name with another object name
Returns a hash code for this named object
Get the object name
Get the object
Retrieves the name for this <code>NamedValue</code> object
Retrieves the value for this <code>NamedValue</code> object
Retrieves the argument mode flag for this <code>NamedValue</code> object
Returns the <code>index</code>th name item in the collection
Returns the <code>index</code>th namespaceURI item in the collection
The number of pairs (name and namespaceURI) in the list
Test if a name is part of this <code>NameList</code>
Test if the pair namespaceURI/name is part of this <code>NameList</code>
Parses a name into its components
This method returns the Root Naming Context
This method  creates a NewContext, This will internally invoked from NamingContextImpl
Gets the prefix, returns "" if this is a default namespace declaration
Gets the uri bound to the prefix of this namespace
returns true if this attribute declares the default namespace
Called when an object has been added
Called when an object has been removed
Called when an object has been renamed
<p>Get Namespace URI bound to a prefix in the current scope
<p>Get prefix bound to Namespace URI in the current scope
<p>Get all prefixes bound to a Namespace URI in the current scope
TODO: Namespace doesn't give information giving multiple prefixes for the same namespaceURI
This method supports all functions in the NamespaceContext utility class
Use a namespace prefix to lookup a namespace URI
Given a namespace uri, and the namespaces mappings for the current element, return the current prefix for that uri
Generate a new namespace prefix ( ns0, ns1 
This method makes a clone of this object
Returns the "prefix" part of a QName or the empty string (not null) if the name has no prefix
Returns the "localname" part of a QName, which is the whole name if it has no prefix
Returns the namespace URI for the specified prefix at the specified context node
Returns the namespace URI for the namespace to which the element belongs
Reset this Namespace support object for reuse
Start a new Namespace context
Revert to the previous Namespace context
Declare a Namespace prefix
Process a raw XML qualified name, after all declarations in the current context have been handled by {@link #declarePrefix declarePrefix()}
Look up a prefix and get the currently-mapped Namespace URI
Return an enumeration of all prefixes whose declarations are active in the current context
Return one of the prefixes mapped to a Namespace URI
Return an enumeration of all prefixes for a given URI whose declarations are active in the current context
Return an enumeration of all prefixes declared in this context
Controls whether namespace declaration attributes are placed into the {@link #NSDECL NSDECL} namespace by {@link #processName processName()}
Returns true if namespace declaration attributes are placed into a namespace
Get all the unrendered nodes in the name space
Push a frame for visible namespace
Pop a frame for visible namespace
Push a frame for a node
Pop a frame
Gets the attribute node that defines the binding for the prefix
Gets a definition without mark it as render
Adds the mapping for a prefix
Adds a definition and mark it as render
Returns a reference, a stub, for the remote object associated with the specified <code>name</code>
Binds the specified <code>name</code> to a remote object
Destroys the binding for the specified name that is associated with a remote object
Rebinds the specified name to a new remote object
Returns an array of the names bound in the registry
Method which implements binding a name to an object as the specified binding type
Method which implements resolving the specified name, returning the type of the binding and the bound object reference
Method which implements unbinding a name
Method which implements listing the contents of this NamingContext and return a binding list and a binding iterator
Method which implements creating a new NamingContext
Method which implements destroying this NamingContext
Method which returns whether this NamingContext is empty or not
This operation creates a stringified name from the array of Name components
This operation  converts a Stringified Name into an  equivalent array of Name Components
This operation creates a URL based "iiopname://" format name from the Stringified Name of the object
This operation resolves the Stringified name into the object reference
Bind an object under a name in this NamingContext
Bind a NamingContext under a name in this NamingContext
Bind an object under a name in this NamingContext
Bind a NamingContext under a name in this NamingContext
Resolve a name in this NamingContext and return the object reference bound to the name
Remove a binding from this NamingContext
List the contents of this NamingContest
Create a NamingContext object and return its object reference
Create a new NamingContext, bind it in this Naming Context and return its object reference
Destroy this NamingContext object
Implements resolving names in this NamingContext
Implements unbinding bound names in this NamingContext
Implements resolving a NameComponent in this context and narrowing it to CosNaming::NamingContext
Implements all flavors of binding( bind and bindcontext) This method will be called from the superclass's doBind( ) method which takes care of all the conditions before calling this method
This method resolves the NamingContext or Object Reference for one level The doResolve( ) method calls Resolve( ) recursively to resolve n level Names
This method Unbinds the NamingContext or Object Reference for one level The doUnbind( ) method from superclass calls Unbind() to recursively Unbind using compound Names
List the contents of this NamingContext
Create a NamingContext object and return its object reference
Destroys the NamingContext
This operation creates a stringified name from the array of Name components
This operation  converts a Stringified Name into an  equivalent array of Name Components
This operation creates a URL based "iiopname://" format name from the Stringified Name of the object
This operation resolves the Stringified name into the object reference
This is a Debugging Method
This is a Debugging Method
Creates a binding of a name and an object in the naming context
Names an object that is a naming context
Creates a binding of a name and an object in the naming context even if the name is already bound in the context
Creates a binding of a name and a naming context in the naming context even if the name is already bound in the context
The resolve operation is the process of retrieving an object bound to a name in a given context
The unbind operation removes a name binding from a context
The list operation allows a client to iterate through a set of bindings in a naming context
This operation returns a naming context implemented by the same naming server as the context on which the operation was invoked
This operation creates a new context and binds it to the name supplied as an argument
The destroy operation deletes a naming context
Retrieves the next element in the enumeration
Determines whether there are any more elements in the enumeration
Closes this enumeration
Returns the type of this event
Retrieves the event source that fired this event
Retrieves the binding of the object before the change
Retrieves the binding of the object after the change
Retrieves the change information for this event
Invokes the appropriate listener method on this event
Retrieves the leading portion of the name that was resolved successfully
Retrieves the remaining unresolved portion of the name
Retrieves the object to which resolution was successful
Retrieves the explanation associated with this exception
Sets the resolved name field of this exception
Sets the remaining name field of this exception
Sets the resolved object field of this exception
Add name as the last component in remaining name
Add components from 'name' as the last components in remaining name
Retrieves the root cause of this NamingException, if any
Records the root cause of this NamingException
Returns the cause of this exception
Initializes the cause of this exception to the specified value
Generates the string representation of this exception
Generates the string representation in more detail
Retrieves the exception that was thrown
Retrieves the <tt>EventContext</tt> that fired this event
Invokes the <tt>namingExceptionThrown()</tt> method on a listener using this event
Called when a naming exception is thrown while attempting to fire a <tt>NamingEvent</tt>
The ObjectFactoryBuilder determines the policy used when trying to load object factories
Creates an instance of an object for the specified object and environment
Creates a context for the given URL scheme id
Creates an initial context using the specified environment properties
Sets the InitialContextFactory builder to be builder
Determines whether an initial context factory builder has been set
Creates a context in which to continue a context operation
Retrieves the state of an object for binding
Prints the message to the debug stream if debugging is enabled
Prints the message to the error stream (System
Prints the stacktrace of the supplied exception to the error stream
Create a debug print stream to the supplied log file
Create a error print stream to the supplied file
Returns a key-value mapping associated with the greatest key strictly less than the given key, or {@code null} if there is no such key
Returns the greatest key strictly less than the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or {@code null} if there is no such key
Returns the greatest key less than or equal to the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the least key greater than or equal to the given key, or {@code null} if there is no such key
Returns the least key greater than or equal to the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the least key strictly greater than the given key, or {@code null} if there is no such key
Returns the least key strictly greater than the given key, or {@code null} if there is no such key
Returns a key-value mapping associated with the least key in this map, or {@code null} if the map is empty
Returns a key-value mapping associated with the greatest key in this map, or {@code null} if the map is empty
Removes and returns a key-value mapping associated with the least key in this map, or {@code null} if the map is empty
Removes and returns a key-value mapping associated with the greatest key in this map, or {@code null} if the map is empty
Returns a reverse order view of the mappings contained in this map
Returns a {@link NavigableSet} view of the keys contained in this map
Returns a reverse order {@link NavigableSet} view of the keys contained in this map
Returns a view of the portion of this map whose keys range from {@code fromKey} to {@code toKey}
Returns a view of the portion of this map whose keys are less than (or equal to, if {@code inclusive} is true) {@code toKey}
Returns a view of the portion of this map whose keys are greater than (or equal to, if {@code inclusive} is true) {@code fromKey}
{@inheritDoc} <p>Equivalent to {@code subMap(fromKey, true, toKey, false)}
{@inheritDoc} <p>Equivalent to {@code headMap(toKey, false)}
{@inheritDoc} <p>Equivalent to {@code tailMap(fromKey, true)}
Returns the greatest element in this set strictly less than the given element, or {@code null} if there is no such element
Returns the greatest element in this set less than or equal to the given element, or {@code null} if there is no such element
Returns the least element in this set greater than or equal to the given element, or {@code null} if there is no such element
Returns the least element in this set strictly greater than the given element, or {@code null} if there is no such element
Retrieves and removes the first (lowest) element, or returns {@code null} if this set is empty
Retrieves and removes the last (highest) element, or returns {@code null} if this set is empty
Returns an iterator over the elements in this set, in ascending order
Returns a reverse order view of the elements contained in this set
Returns an iterator over the elements in this set, in descending order
Returns a view of the portion of this set whose elements range from {@code fromElement} to {@code toElement}
Returns a view of the portion of this set whose elements are less than (or equal to, if {@code inclusive} is true) {@code toElement}
Returns a view of the portion of this set whose elements are greater than (or equal to, if {@code inclusive} is true) {@code fromElement}
{@inheritDoc} <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}
{@inheritDoc} <p>Equivalent to {@code headSet(toElement, false)}
{@inheritDoc} <p>Equivalent to {@code tailSet(fromElement, true)}
Invoked prior to the Caret setting the dot
Invoked prior to the Caret moving the dot
Returns the next visual position to place the caret at from an existing position
Returns the Caret that is changing
Sets the caret location, bypassing the NavigationFilter
Moves the caret location, bypassing the NavigationFilter
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Does this constant correspond to a nested type element? A <i>nested</i> type element is any that is not top-level
Binds the channel's socket to a local address
Returns the socket address that this channel's socket is bound to
Sets the value of a socket option
Returns the value of a socket option
Returns a set of the socket options supported by this channel
Get the name of this network interface
Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface
Get a List of all or a subset of the {@code InterfaceAddresses} of this network interface
Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface
Returns the parent NetworkInterface of this interface if this is a subinterface, or {@code null} if it is a physical (non virtual) interface or has no parent
Returns the index of this network interface
Get the display name of this network interface
Searches for the network interface with the specified name
Get a network interface given its index
Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it
Returns all the interfaces on this machine
Returns whether a network interface is up and running
Returns whether a network interface is a loopback interface
Returns whether a network interface is a point to point interface
Returns whether a network interface supports multicasting or not
Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges
Returns the Maximum Transmission Unit (MTU) of this interface
Returns whether this interface is a virtual interface (also called subinterface)
Compares this object against the specified object
Call corresponding visitor method(s)
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Called by UIManager when this look and feel is installed
Called by UIManager when this look and feel is uninstalled
{@inheritDoc}
Gets the style associated with the given component and region
Return a short string that identifies this look and feel
Return a string that identifies this look and feel
Returns a textual description of this look and feel
{@inheritDoc}
{@inheritDoc} <p>Overridden to return {@code true} when one of the following properties change: <ul>   <li>{@code "Nimbus
<p>Registers a third party component with the NimbusLookAndFeel
Get a derived color, derived colors are shared instances and is color value will change when its parent UIDefault color changes
Decodes and returns a color, which is derived from an offset between two other colors
Decodes and returns a color, which is derived from a offset between two other colors
{@inheritDoc} Overridden to cause this style to populate itself with data from UIDefaults, if necessary
{@inheritDoc} Overridden to cause this style to populate itself with data from UIDefaults, if necessary
{@inheritDoc} <p>Overridden to cause this style to populate itself with data from UIDefaults, if necessary
{@inheritDoc} Overridden to cause this style to populate itself with data from UIDefaults, if necessary
{@inheritDoc} Returns the SynthPainter for this style, which ends up delegating to the Painters installed in this style
{@inheritDoc} Overridden to cause this style to populate itself with data from UIDefaults, if necessary
{@inheritDoc} <p>Overridden to cause this style to populate itself with data from UIDefaults, if necessary
Gets the appropriate background Painter, if there is one, for the state specified in the given SynthContext
Gets the appropriate foreground Painter, if there is one, for the state specified in the given SynthContext
Gets the appropriate border Painter, if there is one, for the state specified in the given SynthContext
Checks that "content" string is valid NMTOKEN value
Returns the parent of the node that was added or removed
Returns the node that was added or removed
This method gets called when a child node is added
This method gets called when a child node is removed
Set the node that is originating the SAX event
Set the start node for this counter
If the user specified a value attribute, use this instead of counting nodes
Sets formatting fields before calling formatNumbers()
Sets formatting fields to their default values
Returns the position of <tt>node</tt> according to the level and the from and count patterns
Returns the position of <tt>node</tt> according to the level and the from and count patterns
Returns true if <tt>node</tt> matches the count pattern
Returns true if <tt>node</tt> matches the from pattern
Format a single value according to the format parameters
Format a sequence of values according to the format paramaters set by calling setFormatting()
Set the index of the register where "this" (the pointer to the translet) is stored
The index of the translet pointer within the execution of matchFrom or matchCount
Returns <tt>true</tt> since this class is external to the translet
Test whether a specified node is visible in the logical view of a <code>TreeWalker</code> or <code>NodeIterator</code>
<code>systemId</code> returns the system id of the current context node
<code>systemId</code> returns the system id of the node passed as argument
<code>publicId</code> returns the public identifier of the current context node
<code>publicId</code> returns the public identifier of the node passed as argument
<code>lineNumber</code> returns the line number of the current context node
<code>lineNumber</code> returns the line number of the node passed as argument
<code>columnNumber</code> returns the column number of the current context node
<code>columnNumber</code> returns the column number of the node passed as argument
The root node of the <code>NodeIterator</code>, as specified when it was created
This attribute determines which node types are presented via the <code>NodeIterator</code>
The <code>NodeFilter</code> used to screen nodes
The value of this flag determines whether the children of entity reference nodes are visible to the <code>NodeIterator</code>
Returns the next node in the set and advances the position of the <code>NodeIterator</code> in the set
Returns the previous node in the set and moves the position of the <code>NodeIterator</code> backwards in the set
Detaches the <code>NodeIterator</code> from the set which it iterated over, releasing any computational resources and placing the <code>NodeIterator</code> in the INVALID state
Setter for _isRestartable flag
Initialize iterator using a node
Reset this iterator using state from last call to setStartNode()
Setter for _includeSelf flag
Default implementation of getLast()
Returns the position() in this iterator
Indicates if position in this iterator is computed in reverse document order
Clones and resets this iterator
Utility method that increments position and returns its argument
Reset the position in this iterator
Return the whatToShow value
Return the filter
Return whether children entity references are included in the iterator
Return the next Node in the Iterator
Return the previous Node in the Iterator
Fix-up the iterator on a remove
Returns the <code>index</code>th item in the collection
The number of nodes in the list
<code>getPublicId</code> returns the public ID of the node
<code>getSystemId</code> returns the system ID of the node
<code>getLineNumber</code> returns the line number of the node
<code>getColumnNumber</code> returns the column number of the node
<code>toString</code> returns a string representation of this NodeLocator instance
If this iterator needs to cache nodes that are fetched, they are stored in the Vector in the generic object
Set the vector where nodes will be cached
If the iterator needs to cache nodes as they are fetched, then this method returns true
Set the functional iterator that fetches nodes
Get the functional iterator that fetches nodes
Calling this with a value of false will cause the nodeset to be cached
Note: Not a deep clone
Get a clone of this iterator, but don't reset the iteration in the process, so that it may be used from the current position
Add the node into a vector of nodes where it should occur in document order
It used to be that many locations in the code simply did an assignment to this
Get the cached list of nodes appended with values obtained from the iterator as a NodeSequence is walked when its nextNode() method is called
Get a cloned Iterator, and reset its state to the beginning of the iteration
Reset the iterator
This attribute determines which node types are presented via the iterator
The filter object used to screen nodes
The value of this flag determines whether the children of entity reference nodes are visible to the iterator
Returns the next node in the set and advances the position of the iterator in the set
Returns the previous node in the set and moves the position of the iterator backwards in the set
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Tells if this NodeSet is "fresh", in other words, if the first nextNode() that is called will return the first node in the set
If an index is requested, NodeSet will call this method to run the iterator to the index
Returns the <code>index</code>th item in the collection
The number of nodes in the list
Add a node to the NodeSet
Insert a node at a given position
Remove a node
Copy NodeList members into this nodelist, adding in document order
<p>Copy NodeList members into this nodelist, adding in document order
Copy NodeList members into this nodelist, adding in document order
Copy NodeList members into this nodelist, adding in document order
Copy NodeList members into this nodelist, adding in document order
Add the node into a vector of nodes where it should occur in document order
Add the node into a vector of nodes where it should occur in document order
Get the current position, which is one less than the next nextNode() call will retrieve
Set the current position in the node set
Return the last fetched node
Get whether or not this is a cached node set
If setShouldCacheNodes(true) is called, then nodes will be cached
Get a cloned LocPathIterator
Get the length of the list
Append a Node onto the vector
Append a Node onto the vector
Pop a node from the tail of the vector and return the result
Pop a node from the tail of the vector and return the top of the stack after the pop
Pop a node from the tail of the vector
Return the node at the top of the stack without popping the stack
Push a pair of nodes into the stack
Pop a pair of nodes from the tail of the stack
Set the tail of the stack to the given node
Set the given node one position from the tail
Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement
Return the node one position from the tail without popping
Inserts the specified node in this vector at the specified index
Append the nodes to the list
Inserts the specified node in this vector at the specified index
Removes the first occurrence of the argument from this vector
Deletes the component at the specified index
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Tell if the table contains the given node
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Returns a read-only iterator over the nodes contained in this <code>NodeSetData</code> in <a href="http://www
Set the environment in which this iterator operates, which should provide: a node (the context node
Initialize the context values for this expression after it is cloned
Clone this NodeSetDTM
Get a cloned Iterator, and reset its state to the beginning of the iteration
Reset the iterator
This attribute determines which node types are presented via the iterator
The filter object used to screen nodes
The value of this flag determines whether the children of entity reference nodes are visible to the iterator
Get an instance of a DTM that "owns" a node handle
Get an instance of the DTMManager
Returns the next node in the set and advances the position of the iterator in the set
Returns the previous node in the set and moves the position of the iterator backwards in the set
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Specify if it's OK for detach to release the iterator for reuse
Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set
If an index is requested, NodeSetDTM will call this method to run the iterator to the index
Returns the <code>index</code>th item in the collection
The number of nodes in the list
Add a node to the NodeSetDTM
Insert a node at a given position
Remove a node
Copy NodeList members into this nodelist, adding in document order
Copy NodeList members into this nodelist, adding in document order
Add the node into a vector of nodes where it should occur in document order
Add the node into a vector of nodes where it should occur in document order
Get the length of the list
Append a Node onto the vector
Inserts the specified node in this vector at the specified index
Append the nodes to the list
Inserts the specified node in this vector at the specified index
Removes the first occurrence of the argument from this vector
Deletes the component at the specified index
Sets the component at the specified index of this vector to be the specified object
Same as setElementAt
Get the nth element
Tell if the table contains the given node
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Get the current position, which is one less than the next nextNode() call will retrieve
Set the current position in the node set
Return the last fetched node
Get whether or not this is a cached node set
If setShouldCacheNodes(true) is called, then nodes will be cached
Tells if this iterator can have nodes added to it or set via the <code>setItem(int node, int index)</code> method
Returns true if all the nodes in the iteration well be returned in document order
Returns the axis being iterated, if it is known
Translates a node-set into an object of internal type <code>type</code>
Translates an external Java Class into an internal type
Translates a node-set into a synthesized boolean
Translates a node-set into a string
Expects a node-set on the stack and pushes a real
Expects a node-set on the stack and pushes a node
Subsume node-set into ObjectType
Translates a node-set into a non-synthesized boolean
Expects a node-set on the stack and pushes a boxed node-set
Translates a node-set into the Java type denoted by <code>clazz</code>
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Returns the class name of an internal type's external representation
This method allows the caller to set the values that could not be passed to the default constructor
Returns the node for this sort object
Compare this sort element to another
Returns the array of Collators used for text comparisons in this object
Extract the sort value for a level of this key
Returns <tt>true</tt> since this class is external to the translet
Create an instance of a sub-class of NodeSortRecord
The index of the translet pointer within the execution of the test method
Returns <tt>true</tt> since this class is external to the translet
This attribute determines which node types are accepted
This attribute determines which node types are accepted
Return the namespace to be tested
Set the namespace to be tested
Return the local name to be tested
Set the local name to be tested
Initialize this node test by setting the whatToShow property, and calculating the score that this test will return if a test succeeds
Initialize this node test by setting the whatToShow property and the namespace and local name, and calculating the score that this test will return if a test succeeds
Get the static score for this node test
Set the static score for this node test
Static calc of match score
Get the score that this test will return if a test succeeds
Tell what node type to test, if not DTMFilter
Do a diagnostics dump of a whatToShow bit set
Tell what the test score is for the given node
Tell what the test score is for the given node
Test the current node to see if it matches the given node test
Node tests by themselves do not need to fix up variables
Set the node test for this filter
Translates a node into an object of internal type <code>type</code>
Expects a node on the stack and pushes its string value
Translates a node into a synthesized boolean
Expects a node on the stack and pushes a real
Expects a node on the stack and pushes a singleton node-set
Subsume Node into ObjectType
Translates a node into a non-synthesized boolean
Expects a node on the stack and pushes a boxed node
Translates a node into the Java type denoted by <code>clazz</code>
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Returns the class name of an internal type's external representation
Get a cloned LocPathIterator
Get the length of the list
Append a Node onto the vector
Append a Node onto the vector
Pop a node from the tail of the vector and return the result
Pop a node from the tail of the vector and return the top of the stack after the pop
Pop a node from the tail of the vector
Return the node at the top of the stack without popping the stack
Push a pair of nodes into the stack
Pop a pair of nodes from the tail of the stack
Set the tail of the stack to the given node
Set the given node one position from the tail
Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement
Return the node one position from the tail without popping
Insert a node in order in the list
Inserts the specified node in this vector at the specified index
Append the nodes to the list
Inserts the specified node in this vector at the specified index
Set the length to zero, but don't clear the array
Removes the first occurrence of the argument from this vector
Deletes the component at the specified index
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Tell if the table contains the given node
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Sort an array using a quicksort algorithm
Sort an array using a quicksort algorithm
Set the locale to use for messages
Sets the input source for the document to parse
Parses the document in a pull parsing fashion
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Reset all components before parsing
Configures the pipeline
Check a feature
Check a property
Creates an entity manager
Creates an error reporter
Create a document scanner
Create a DTD scanner
Create a datatype validator factory
Call corresponding visitor method(s)
Replace any tab, CR, and LF by a whitespace character ' ', as specified in <a href="http://www
No-op
Returns true if the specified char is a white space character but not 0x20
Normalize a sequence of char values
Determines if the given sequence of char values is normalized
Create a String[] of all suffixes of property names that match the propertyName prefix, pass this to op, and return the result
Returns the cause of this <code>NoSuchMechanismException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>NoSuchMechanismException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>NoSuchMechanismException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>NoSuchMechanismException</code>, its backtrace and the cause's backtrace to the specified print writer
The public identifier of this notation
The system identifier of this notation
Checks that "content" string is valid NOTATION value
The notation name
The notation's public identifier, or null if none was given
The notation's system identifier, or null if none was given
A short integer indicating what type of node this is
Returns the notation name
The Public Identifier for this Notation
The System Identifier for this Notation
NON-DOM: The Public Identifier for this Notation
NON-DOM: The System Identifier for this Notation
Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI
NON-DOM: set base uri
Apply the operation to two operands, and return the result
Sets the source
Get the notification sequence number
Set the notification sequence number
Get the notification type
Get the notification timestamp
Set the notification timestamp
Get the notification message
Get the user data
Set the user data
Returns a String representation of this notification
This method is called when a remote {@link javax
This method is called when a remote {@link javax
This method is called before the {@link javax
Adds a listener to this MBean
Removes a listener from this MBean
<p>Returns an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type
Adds a listener
Sends a notification
<p>This method is called by {@link #sendNotification sendNotification} for each listener in order to send the notification to that listener
<p>Fetch notifications that match the given listeners
<p>Discard this buffer
Add the given notification coming from the given MBean to the list iff it matches this filter's rules
<p>Removes a listener from this MBean
Invoked before sending the specified notification to the listener
Invoked before sending the specified notification to the listener
Enables all the notifications the type of which starts with the specified prefix to be sent to the listener
Removes the given prefix from the prefix list
Disables all notification types
Gets all the enabled notification types for this filter
Invoked when a JMX notification occurs
Returns the sequence number of the earliest notification still in the buffer
Returns the sequence number of the next notification available for querying
Returns the notifications resulting from the query, and the listeners they correspond to
Returns a string representation of the object
Return the Windows NT domain name for this <code>NTDomainPrincipal</code>
Return a string representation of this <code>NTDomainPrincipal</code>
Compares the specified Object with this <code>NTDomainPrincipal</code> for equality
Return a hash code for this <code>NTDomainPrincipal</code>
Initialize this <code>LoginModule</code>
Import underlying NT system identity information
<p> This method is called if the LoginContext's overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded)
<p> This method is called if the LoginContext's overall authentication failed
Logout the user
Return an integer representation of this <code>NTNumericCredential</code>
Return a string representation of this <code>NTNumericCredential</code>
Compares the specified Object with this <code>NTNumericCredential</code> for equality
Return a hash code for this <code>NTNumericCredential</code>
Return a string version of this <code>NTSid</code>
Return a string representation of this <code>NTSid</code>
Compares the specified Object with this <code>NTSid</code> for equality
Return a hash code for this <code>NTSid</code>
Return a string representation of this <code>NTSidDomainPrincipal</code>
Compares the specified Object with this <code>NTSidDomainPrincipal</code> for equality
Return a string representation of this <code>NTSidGroupPrincipal</code>
Compares the specified Object with this <code>NTSidGroupPrincipal</code> for equality
Return a string representation of this <code>NTSidPrimaryGroupPrincipal</code>
Compares the specified Object with this <code>NTSidPrimaryGroupPrincipal</code> for equality
Return a string representation of this <code>NTSidUserPrincipal</code>
Compares the specified Object with this <code>NTSidUserPrincipal</code> for equality
Get the username for the current NT user
Get the domain for the current NT user
Get a printable SID for the current NT user's domain
Get a printable SID for the current NT user
Get a printable primary group SID for the current NT user
Get the printable group SIDs for the current NT user
Get an impersonation token for the current NT user
Return the Windows NT username for this <code>NTPrincipal</code>
Return a string representation of this <code>NTPrincipal</code>
Compares the specified Object with this <code>NTUserPrincipal</code> for equality
Return a hash code for this <code>NTUserPrincipal</code>
Obtain the exception that is associated with this NullServant instance
Returns the value of the specified number as an {@code int}, which may involve rounding or truncation
Returns the value of the specified number as a {@code long}, which may involve rounding or truncation
Returns the value of the specified number as a {@code float}, which may involve rounding
Returns the value of the specified number as a {@code double}, which may involve rounding
Returns the value of the specified number as a {@code byte}, which may involve rounding or truncation
Returns the value of the specified number as a {@code short}, which may involve rounding or truncation
Formats a number and appends the resulting text to the given string buffer
Parses text from a string to produce a <code>Number</code>
Specialization of format
Specialization of format
Specialization of format
Specialization of format
Returns a Long if possible (e
Parses text from the beginning of the given string to produce a number
Returns true if this format will parse numbers as integers only
Sets whether or not numbers should be parsed as integers only
Returns a general-purpose number format for the current default {@link java
Returns a general-purpose number format for the specified locale
Returns a general-purpose number format for the current default {@link java
Returns a general-purpose number format for the specified locale
Returns an integer number format for the current default {@link java
Returns an integer number format for the specified locale
Returns a currency format for the current default {@link java
Returns a currency format for the specified locale
Returns a percentage format for the current default {@link java
Returns a percentage format for the specified locale
Returns an array of all locales for which the <code>get*Instance</code> methods of this class can return localized instances
Overrides hashCode
Overrides equals
Overrides Cloneable
Returns true if grouping is used in this format
Set whether or not grouping will be used in this format
Returns the maximum number of digits allowed in the integer portion of a number
Sets the maximum number of digits allowed in the integer portion of a number
Returns the minimum number of digits allowed in the integer portion of a number
Sets the minimum number of digits allowed in the integer portion of a number
Returns the maximum number of digits allowed in the fraction portion of a number
Sets the maximum number of digits allowed in the fraction portion of a number
Returns the minimum number of digits allowed in the fraction portion of a number
Sets the minimum number of digits allowed in the fraction portion of a number
Gets the currency used by this number format when formatting currency values
Sets the currency used by this number format when formatting currency values
Gets the {@link java
Sets the {@link java
Resolves instances being deserialized to the predefined constants
Returns a new <code>NumberFormat</code> instance which formats monetary values for the specified locale
Returns a new <code>NumberFormat</code> instance which formats integer values for the specified locale
Returns a new general-purpose <code>NumberFormat</code> instance for the specified locale
Returns a new <code>NumberFormat</code> instance which formats percentage values for the specified locale
Sets the format that dictates the legal values that can be edited and displayed
Returns whether this number of documents attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this number of intervening jobs attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this number up attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this number up supported attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a shaper for the provided unicode range
Returns a shaper for the provided Unicode range
Returns a contextual shaper for the provided unicode range(s)
Returns a contextual shaper for the provided Unicode range(s)
Returns a contextual shaper for the provided unicode range(s)
Returns a contextual shaper for the provided Unicode range(s)
Converts the digits in the text that occur between start and start + count
Converts the digits in the text that occur between start and start + count, using the provided context
Converts the digits in the text that occur between {@code start} and {@code start + count}, using the provided {@code context}
Returns a <code>boolean</code> indicating whether or not this shaper shapes contextually
Returns an <code>int</code> that ORs together the values for all the ranges that will be shaped
Returns a {@code Set} representing all the Unicode ranges in this {@code NumericShaper} that will be shaped
Returns a hash code for this shaper
Returns {@code true} if the specified object is an instance of <code>NumericShaper</code> and shapes identically to this one, regardless of the range representations, the bit mask or the enum
Returns a <code>String</code> that describes this shaper
Returns the number of <code>NamedValue</code> objects that have been added to this <code>NVList</code> object
Creates a new <code>NamedValue</code> object initialized with the given flag and adds it to the end of this <code>NVList</code> object
Creates a new <code>NamedValue</code> object initialized with the given name and flag, and adds it to the end of this <code>NVList</code> object
Creates a new <code>NamedValue</code> object initialized with the given name, value, and flag, and adds it to the end of this <code>NVList</code> object
Retrieves the <code>NamedValue</code> object at the given index
Removes the <code>NamedValue</code> object at the given index
Set the current catalog
Get the current catalog
Are we in an extension namespace?
The SAX <code>setDocumentLocator</code> method does nothing
The SAX <code>startDocument</code> method does nothing
The SAX <code>endDocument</code> method does nothing
The SAX <code>startElement</code> method recognizes elements from the plain catalog format and instantiates CatalogEntry objects for them
The SAX <code>endElement</code> method does nothing
The SAX <code>characters</code> method does nothing
The SAX <code>ignorableWhitespace</code> method does nothing
The SAX <code>processingInstruction</code> method does nothing
The SAX <code>skippedEntity</code> method does nothing
The SAX <code>startPrefixMapping</code> method does nothing
The SAX <code>endPrefixMapping</code> method does nothing
Performs this operation on the given arguments
Checks whether this object is an instance of a class that implements the given interface
Determines whether the two object references are equivalent, so far as the ORB can easily determine
Determines whether the server object for this object reference has been destroyed
Returns an ORB-internal identifier for this object reference
Returns a duplicate of this CORBA object reference
Signals that the caller is done using this object reference, so internal ORB resources associated with this object reference can be released
Obtains an <code>InterfaceDef</code> for the object implementation referenced by this object reference
Creates a <code>Request</code> instance for use in the Dynamic Invocation Interface
Creates a <code>Request</code> instance initialized with the given context, method name, list of arguments, and container for the method's return value
Creates a <code>Request</code> instance initialized with the given context, method name, list of arguments, container for the method's return value, list of possible exceptions, and list of context strings needing to be resolved
Returns the <code>Policy</code> object of the specified type which applies to this object
Retrieves the <code>DomainManagers</code> of this object
Returns a new <code>Object</code> with the given policies either replacing any existing policies in this <code>Object</code> or with the given policies added to the existing ones, depending on the value of the given <code>SetOverrideType</code> object
Returns the ORB associated with this adapter
Returns the IOR template of this adapter
Return the ID of the AdapterManager for this object adapter
Return the current state of this object adapter (see org
Change the current factory
Get the servant corresponding to the given objectId, if this is supported
Get the servant for the request given by the parameters
enter must be called before each request is invoked on a servant
exit must be called after each request has been completed
Must be called every time getInvocationServant is called after the request has completed
Create an instance of InvocationInfo that is appropriate for this Object adapter
Return the most derived interface for the given servant and objectId
Initialize this object adapter factory instance
Shutdown all object adapters and other state associated with this factory
Find the ObjectAdapter instance that corresponds to the given ObjectAdapterId
Return the number of elements in the adapter ID
Return an iterator that iterates over the components of this adapter ID
Get the adapter name simply as an array of strings
Called when an object has been changed
Sets the <code>Id</code> attribute
Returns the <code>Id</code> attribute
Sets the <code>MimeType</code> attribute
Returns the <code>MimeType</code> attribute
Sets the <code>Encoding</code> attribute
Returns the <code>Encoding</code> attribute
Adds child Node
Create a new instance of an ObjectCopier
Creates an object using the location or reference information specified
Creates a new object factory using the environment supplied
Reads from <code>input</code> and initalizes the value in this <code>ObjectHolder</code> object with the unmarshalled data
Marshals to <code>output</code> the value in this <code>ObjectHolder</code> object
Returns the TypeCode corresponding to the value held in this <code>ObjectHolder</code> object
Returns the codebase for this object reference
Read and return an object
Reads a byte of data
Reads into an array of bytes
Reads into an array of bytes
Skips n bytes of input
Returns the number of bytes that can be read without blocking
Closes the input stream
Read an object from the ObjectInputStream
This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor
Reads an "unshared" object from the ObjectInputStream
Read the non-static and non-transient fields of the current class from this stream
Reads the persistent fields from the stream and makes them available by name
Register an object to be validated before the graph is returned
Load the local class equivalent of the specified stream class description
Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class
This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization
Enable the stream to allow objects read from the stream to be replaced
The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers
Read a class descriptor from the serialization stream
Reads a byte of data
Reads into an array of bytes
Returns the number of bytes that can be read without blocking
Closes the input stream
Reads in a boolean
Reads an 8 bit byte
Reads an unsigned 8 bit byte
Reads a 16 bit char
Reads a 16 bit short
Reads an unsigned 16 bit short
Reads a 32 bit int
Reads a 64 bit long
Reads a 32 bit float
Reads a 64 bit double
Reads bytes, blocking until all bytes are read
Reads bytes, blocking until all bytes are read
Skips bytes
Reads in a line that has been terminated by a \n, \r, \r\n or EOF
Reads a String in <a href="DataInput
Get the ObjectStreamClass that describes the fields in the stream
Return true if the named field is defaulted and has no value in this stream
Get the value of the named boolean field from the persistent field
Get the value of the named byte field from the persistent field
Get the value of the named char field from the persistent field
Get the value of the named short field from the persistent field
Get the value of the named int field from the persistent field
Get the value of the named long field from the persistent field
Get the value of the named float field from the persistent field
Get the value of the named double field from the persistent field
Get the value of the named Object field from the persistent field
Validates the object
Compares the current object instance with another object instance
Returns the object name part
Returns the class part
Returns a string representing this ObjectInstance object
Return the object identifier for this Object key
Return the template for this object key
Create an ObjectKey from its octet sequence representation
Create an ObjectKeyTemplate from its representation in an InputStream
An ID used to determine how to perform operations on this ObjectKeyTemplate
Return the server ID for this template
Return the ORB ID for this template
Return the object adapter ID for this template
Compute an adapter ID for this template than includes all of the template information
The number of <code>Object</code>s in the list
Checks if the <code>Object</code> <code>item</code> is a member of this list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
<p>Return an instance of ObjectName that can be used anywhere an object obtained with {@link #ObjectName(String) new ObjectName(name)} can be used
<p>Return an instance of ObjectName that can be used anywhere an object obtained with {@link #ObjectName(String, String, String) new ObjectName(domain, key, value)} can be used
<p>Return an instance of ObjectName that can be used anywhere an object obtained with {@link #ObjectName(String, Hashtable) new ObjectName(domain, table)} can be used
<p>Return an instance of ObjectName that can be used anywhere the given object can be used
Checks whether the object name is a pattern
Checks whether the object name is a pattern on the domain part
Checks whether the object name is a pattern on the key properties
Checks whether the object name is a pattern on the key property list
Checks whether the object name is a pattern on the value part of at least one of the key properties
Checks whether the value associated with a key in a key property is a pattern
<p>Returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order
Returns the domain part
Obtains the value associated with a key in a key property
<p>Returns the key properties as a Hashtable
<p>Returns a string representation of the list of key properties specified at creation time
Returns a string representation of the list of key properties, in which the key properties are sorted in lexical order
<p>Returns a string representation of the object name
Compares the current object name with another object name
Returns a hash code for this object name
<p>Returns a quoted form of the given String, suitable for inclusion in an ObjectName
<p>Returns an unquoted form of the given String
<p>Test whether this ObjectName, which may be a pattern, matches another ObjectName
<p>Compares two ObjectName instances
Write an object to the underlying storage or stream
Writes a byte
Writes an array of bytes
Writes a sub array of bytes
Flushes the stream
Closes the stream
Specify stream protocol version to use when writing the stream
Write the specified object to the ObjectOutputStream
Method used by subclasses to override the default writeObject method
Writes an "unshared" object to the ObjectOutputStream
Write the non-static and non-transient fields of the current class to this stream
Retrieve the object used to buffer persistent fields to be written to the stream
Write the buffered fields to the stream
Reset will disregard the state of any objects already written to the stream
Subclasses may implement this method to allow class data to be stored in the stream
Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes
This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization
Enable the stream to do replacement of objects in the stream
The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream
Write the specified class descriptor to the ObjectOutputStream
Writes a byte
Writes an array of bytes
Writes a sub array of bytes
Flushes the stream
Drain any buffered data in ObjectOutputStream
Closes the stream
Writes a boolean
Writes an 8 bit byte
Writes a 16 bit short
Writes a 16 bit char
Writes a 32 bit int
Writes a 64 bit long
Writes a 32 bit float
Writes a 64 bit double
Writes a String as a sequence of bytes
Writes a String as a sequence of chars
Primitive data write of this String in <a href="DataInput
Put the value of the named boolean field into the persistent field
Put the value of the named byte field into the persistent field
Put the value of the named char field into the persistent field
Put the value of the named short field into the persistent field
Put the value of the named int field into the persistent field
Put the value of the named long field into the persistent field
Put the value of the named float field into the persistent field
Put the value of the named double field into the persistent field
Put the value of the named Object field into the persistent field
Write the data and fields to the specified ObjectOutput stream, which must be the same stream that produced this <code>PutField</code> object
Get an instance of the given object in this pool if available
Get an instance of the given object in this pool
Add an instance of the given object to the pool
make_object creates a CORBA object reference according to the data in this template, with the given repository ID and object ID
Read the data into a (presumably) empty ObjectReferenceFactoryImpl
Write the state to the OutputStream
Read the data into a (presumably) empty ORTImpl
Write the state to the OutputStream
Returns {@code true} if the arguments are equal to each other and {@code false} otherwise
Returns {@code true} if the arguments are deeply equal to each other and {@code false} otherwise
Returns the hash code of a non-{@code null} argument and 0 for a {@code null} argument
Generates a hash code for a sequence of input values
Returns the result of calling {@code toString} for a non-{@code null} argument and {@code "null"} for a {@code null} argument
Returns the result of calling {@code toString} on the first argument if the first argument is not {@code null} and returns the second argument otherwise
Returns 0 if the arguments are identical and {@code c
Checks that the specified object reference is not {@code null}
Checks that the specified object reference is not {@code null} and throws a customized {@link NullPointerException} if it is
Returns {@code true} if the provided reference is {@code null} otherwise returns {@code false}
Returns {@code true} if the provided reference is non-{@code null} otherwise returns {@code false}
Checks that the specified object reference is not {@code null} and throws a customized {@link NullPointerException} if it is
Pushes an item onto the top of this stack
Removes the object at the top of this stack and returns that object as the value of this function
Quickly pops a number of items from the stack
Looks at the object at the top of this stack without removing it from the stack
Looks at the object at the position the stack counting down n items
Sets an object at a the top of the statck
Tests if this stack is empty
Returns where an object is on this stack
Returns clone of current ObjectStack
Find the descriptor for a class that can be serialized
Returns the descriptor for any class, regardless of whether it implements {@link Serializable}
Returns the name of the class described by this descriptor
Return the serialVersionUID for this class
Return the class in the local VM that this version is mapped to
Return an array of the fields of this serializable class
Get the field of this class by name
Return a string describing this ObjectStreamClass
The name of the class described by this descriptor
Return the serialVersionUID for this class
Return the serialVersionUID for this class
Return the serialVersionUID string for this class
Return the actual (computed) serialVersionUID for this class
Return the actual (computed) serialVersionUID for this class
Return the actual (computed) serialVersionUID for this class
Return the class in the local VM that this version is mapped to
Return an array of the fields of this serializable class
Get the field of this class by name
Return a string describing this ObjectStreamClass_1_3_1
Get the name of this field
Get the type of the field
Returns character encoding of field type
Return the JVM type signature
Offset of field within instance data
Offset within instance data
Return true if this field has a primitive type
Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared
Compare this field with another <code>ObjectStreamField</code>
Return a string that describes this field
Must return the same value for all ObjectType instances
Translates a void into an object of internal type <code>type</code>
Expects an integer on the stack and pushes its string value by calling <code>Integer
Translates an object of this type to the external (Java) type denoted by <code>clazz</code>
Translates an external Java type into an Object type
If arr1 and arr2 are both arrays of the same component type, return an array of that component type that consists of the elements of arr1 followed by the elements of arr2
Get the length of the list
Get the length of the list
Append an object onto the vector
Append several Object values onto the vector
Append several slots onto the vector, but do not set the values
Inserts the specified object in this vector at the specified index
Remove all elements objects from the list
Removes the first occurrence of the argument from this vector
Deletes the component at the specified index
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Tell if the table contains the given Object
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Returns clone of current ObjectVector
Create the component
Marshals a binary representation of this <code>ObjID</code> to an <code>ObjectOutput</code> instance
Constructs and returns a new <code>ObjID</code> instance by unmarshalling a binary representation from an <code>ObjectInput</code> instance
Returns the hash code value for this object identifier, the object number
Compares the specified object with this <code>ObjID</code> for equality
Returns a string representation of this object identifier
Performs this operation on the given arguments
Performs this operation on the given arguments
Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set
Deletes an observer from the set of observers of this object
If this object has changed, as indicated by the <code>hasChanged</code> method, then notify all of its observers and then call the <code>clearChanged</code> method to indicate that this object has no longer changed
If this object has changed, as indicated by the <code>hasChanged</code> method, then notify all of its observers and then call the <code>clearChanged</code> method to indicate that this object has no longer changed
Clears the observer list so that this object no longer has any observers
Marks this <tt>Observable</tt> object as having been changed; the <tt>hasChanged</tt> method will now return <tt>true</tt>
Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the <tt>hasChanged</tt> method will now return <tt>false</tt>
Tests if this object has changed
Returns the number of observers of this <tt>Observable</tt> object
This method is called whenever the observed object is changed
Add this theme's custom entries to the defaults table
Return the name of this theme, "Ocean"
Returns the primary 1 color
Returns the primary 2 color
Returns the primary 3 color
Returns the secondary 1 color
Returns the secondary 2 color
Returns the secondary 3 color
Returns the black color
Returns the desktop color
Returns the inactive control text color
Returns the control text color
Returns the menu disabled foreground color
Returns the input stream of this <code>OctetStreamData</code>
Returns the URI String identifying the data object represented by this <code>OctetStreamData</code>
Returns the MIME type associated with the data object represented by this <code>OctetStreamData</code>
Gets a comparator that compares two {@code OffsetDateTime} instances based solely on the instant
Obtains the current date-time from the system clock in the default time-zone
Obtains the current date-time from the system clock in the specified time-zone
Obtains the current date-time from the specified clock
Obtains an instance of {@code OffsetDateTime} from a date, time and offset
Obtains an instance of {@code OffsetDateTime} from a date-time and offset
Obtains an instance of {@code OffsetDateTime} from a year, month, day, hour, minute, second, nanosecond and offset
Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and zone ID
Obtains an instance of {@code OffsetDateTime} from a temporal object
Obtains an instance of {@code OffsetDateTime} from a text string such as {@code 2007-12-03T10:15:30+01:00}
Obtains an instance of {@code OffsetDateTime} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this date-time as an {@code int}
Gets the value of the specified field from this date-time as a {@code long}
Gets the zone offset, such as '+01:00'
Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring that the result has the same local date-time
Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring that the result is at the same instant
Gets the {@code LocalDateTime} part of this date-time
Gets the {@code LocalDate} part of this date-time
Gets the year field
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Gets the day-of-month field
Gets the day-of-year field
Gets the day-of-week field, which is an enum {@code DayOfWeek}
Gets the {@code LocalTime} part of this date-time
Gets the hour-of-day field
Gets the minute-of-hour field
Gets the second-of-minute field
Gets the nano-of-second field
Returns an adjusted copy of this date-time
Returns a copy of this date-time with the specified field set to a new value
Returns a copy of this {@code OffsetDateTime} with the year altered
Returns a copy of this {@code OffsetDateTime} with the month-of-year altered
Returns a copy of this {@code OffsetDateTime} with the day-of-month altered
Returns a copy of this {@code OffsetDateTime} with the day-of-year altered
Returns a copy of this {@code OffsetDateTime} with the hour-of-day altered
Returns a copy of this {@code OffsetDateTime} with the minute-of-hour altered
Returns a copy of this {@code OffsetDateTime} with the second-of-minute altered
Returns a copy of this {@code OffsetDateTime} with the nano-of-second altered
Returns a copy of this {@code OffsetDateTime} with the time truncated
Returns a copy of this date-time with the specified amount added
Returns a copy of this date-time with the specified amount added
Returns a copy of this {@code OffsetDateTime} with the specified number of years added
Returns a copy of this {@code OffsetDateTime} with the specified number of months added
Returns a copy of this OffsetDateTime with the specified number of weeks added
Returns a copy of this OffsetDateTime with the specified number of days added
Returns a copy of this {@code OffsetDateTime} with the specified number of hours added
Returns a copy of this {@code OffsetDateTime} with the specified number of minutes added
Returns a copy of this {@code OffsetDateTime} with the specified number of seconds added
Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds added
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of years subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of months subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of weeks subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of days subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of hours subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of minutes subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of seconds subtracted
Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds subtracted
Queries this date-time using the specified query
Adjusts the specified temporal object to have the same offset, date and time as this object
Calculates the amount of time until another date-time in terms of the specified unit
Formats this date-time using the specified formatter
Combines this date-time with a time-zone to create a {@code ZonedDateTime} ensuring that the result has the same instant
Combines this date-time with a time-zone to create a {@code ZonedDateTime} trying to keep the same local date and time
Converts this date-time to an {@code OffsetTime}
Converts this date-time to a {@code ZonedDateTime} using the offset as the zone ID
Converts this date-time to an {@code Instant}
Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
Compares this date-time to another date-time
Checks if the instant of this date-time is after that of the specified date-time
Checks if the instant of this date-time is before that of the specified date-time
Checks if the instant of this date-time is equal to that of the specified date-time
Checks if this date-time is equal to another date-time
A hash code for this date-time
Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30+01:00}
Obtains the current time from the system clock in the default time-zone
Obtains the current time from the system clock in the specified time-zone
Obtains the current time from the specified clock
Obtains an instance of {@code OffsetTime} from a local time and an offset
Obtains an instance of {@code OffsetTime} from an hour, minute, second and nanosecond
Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID
Obtains an instance of {@code OffsetTime} from a temporal object
Obtains an instance of {@code OffsetTime} from a text string such as {@code 10:15:30+01:00}
Obtains an instance of {@code OffsetTime} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this time as an {@code int}
Gets the value of the specified field from this time as a {@code long}
Gets the zone offset, such as '+01:00'
Returns a copy of this {@code OffsetTime} with the specified offset ensuring that the result has the same local time
Returns a copy of this {@code OffsetTime} with the specified offset ensuring that the result is at the same instant on an implied day
Gets the {@code LocalTime} part of this date-time
Gets the hour-of-day field
Gets the minute-of-hour field
Gets the second-of-minute field
Gets the nano-of-second field
Returns an adjusted copy of this time
Returns a copy of this time with the specified field set to a new value
Returns a copy of this {@code OffsetTime} with the hour-of-day altered
Returns a copy of this {@code OffsetTime} with the minute-of-hour altered
Returns a copy of this {@code OffsetTime} with the second-of-minute altered
Returns a copy of this {@code OffsetTime} with the nano-of-second altered
Returns a copy of this {@code OffsetTime} with the time truncated
Returns a copy of this time with the specified amount added
Returns a copy of this time with the specified amount added
Returns a copy of this {@code OffsetTime} with the specified number of hours added
Returns a copy of this {@code OffsetTime} with the specified number of minutes added
Returns a copy of this {@code OffsetTime} with the specified number of seconds added
Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds added
Returns a copy of this time with the specified amount subtracted
Returns a copy of this time with the specified amount subtracted
Returns a copy of this {@code OffsetTime} with the specified number of hours subtracted
Returns a copy of this {@code OffsetTime} with the specified number of minutes subtracted
Returns a copy of this {@code OffsetTime} with the specified number of seconds subtracted
Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds subtracted
Queries this time using the specified query
Adjusts the specified temporal object to have the same offset and time as this object
Calculates the amount of time until another time in terms of the specified unit
Formats this time using the specified formatter
Combines this time with a date to create an {@code OffsetDateTime}
Compares this {@code OffsetTime} to another time
Checks if the instant of this {@code OffsetTime} is after that of the specified time applying both times to a common date
Checks if the instant of this {@code OffsetTime} is before that of the specified time applying both times to a common date
Checks if the instant of this {@code OffsetTime} is equal to that of the specified time applying both times to a common date
Checks if this time is equal to another time
A hash code for this time
Outputs this time as a {@code String}, such as {@code 10:15:30+01:00}
Returns a string representation of the oid's integer components in dot separated notation
Tests if two Oid objects represent the same Object identifier value
Returns the full ASN
A utility method to test if this Oid value is contained within the supplied Oid array
Returns a hashcode value for this Oid
Initialize the context values for this expression after it is cloned
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Get the next node via getFirstAttribute && getNextAttribute
Get a cloned iterator
Get a cloned Iterator that is reset to the beginning  of the query
Tells if this is a reverse axes
Get the current sub-context position
The number of nodes in the list
Count backwards one proximity position
Reset the iterator
Returns the axis being iterated, if it is known
Initialize the context values for this expression after it is cloned
Get the next node via getFirstAttribute && getNextAttribute
Returns the axis being iterated, if it is known
Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance is readable, <tt>false</tt> otherwise
Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance is writable, <tt>false</tt> otherwise
Returns <tt>true</tt> if the attribute described by this <tt>OpenMBeanAttributeInfo</tt> instance is accessed through a <tt>is<i>XXX</i></tt> getter (applies only to <tt>boolean</tt> and <tt>Boolean</tt> values), <tt>false</tt> otherwise
Compares the specified <var>obj</var> parameter with this <code>OpenMBeanAttributeInfo</code> instance for equality
Returns the hash code value for this <code>OpenMBeanAttributeInfo</code> instance
Returns a string representation of this <code>OpenMBeanAttributeInfo</code> instance
Returns the open type for the values of the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance
Returns the default value for the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance, if specified, or {@code null} otherwise
Returns an unmodifiable Set of legal values for the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance, if specified, or {@code null} otherwise
Returns the minimal value for the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance, if specified, or {@code null} otherwise
Returns the maximal value for the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance, if specified, or {@code null} otherwise
Returns {@code true} if this {@code OpenMBeanAttributeInfoSupport} instance specifies a non-null default value for the described attribute, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanAttributeInfoSupport} instance specifies a non-null set of legal values for the described attribute, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanAttributeInfoSupport} instance specifies a non-null minimal value for the described attribute, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanAttributeInfoSupport} instance specifies a non-null maximal value for the described attribute, {@code false} otherwise
Tests whether {@code obj} is a valid value for the attribute described by this {@code OpenMBeanAttributeInfoSupport} instance
Compares the specified {@code obj} parameter with this {@code OpenMBeanAttributeInfoSupport} instance for equality
<p>Returns the hash code value for this {@code OpenMBeanAttributeInfoSupport} instance
Returns a string representation of this {@code OpenMBeanAttributeInfoSupport} instance
Returns a human readable description of the constructor described by this <tt>OpenMBeanConstructorInfo</tt> instance
Returns the name of the constructor described by this <tt>OpenMBeanConstructorInfo</tt> instance
Returns an array of <tt>OpenMBeanParameterInfo</tt> instances describing each parameter in the signature of the constructor described by this <tt>OpenMBeanConstructorInfo</tt> instance
Compares the specified <var>obj</var> parameter with this <code>OpenMBeanConstructorInfo</code> instance for equality
Returns the hash code value for this <code>OpenMBeanConstructorInfo</code> instance
Returns a string representation of this <code>OpenMBeanConstructorInfo</code> instance
<p>Compares the specified {@code obj} parameter with this {@code OpenMBeanConstructorInfoSupport} instance for equality
<p>Returns the hash code value for this {@code OpenMBeanConstructorInfoSupport} instance
<p>Returns a string representation of this {@code OpenMBeanConstructorInfoSupport} instance
Returns the fully qualified Java class name of the open MBean instances this <tt>OpenMBeanInfo</tt> describes
Returns a human readable description of the type of open MBean instances this <tt>OpenMBeanInfo</tt> describes
Returns an array of <tt>OpenMBeanAttributeInfo</tt> instances describing each attribute in the open MBean described by this <tt>OpenMBeanInfo</tt> instance
Returns an array of <tt>OpenMBeanOperationInfo</tt> instances describing each operation in the open MBean described by this <tt>OpenMBeanInfo</tt> instance
Returns an array of <tt>OpenMBeanConstructorInfo</tt> instances describing each constructor in the open MBean described by this <tt>OpenMBeanInfo</tt> instance
Returns an array of <tt>MBeanNotificationInfo</tt> instances describing each notification emitted by the open MBean described by this <tt>OpenMBeanInfo</tt> instance
Compares the specified <var>obj</var> parameter with this <code>OpenMBeanInfo</code> instance for equality
Returns the hash code value for this <code>OpenMBeanInfo</code> instance
Returns a string representation of this <code>OpenMBeanInfo</code> instance
<p>Compares the specified {@code obj} parameter with this {@code OpenMBeanInfoSupport} instance for equality
<p>Returns the hash code value for this {@code OpenMBeanInfoSupport} instance
<p>Returns a string representation of this {@code OpenMBeanInfoSupport} instance
Returns a human readable description of the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Returns the name of the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Returns an array of <tt>OpenMBeanParameterInfo</tt> instances describing each parameter in the signature of the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Returns an <tt>int</tt> constant qualifying the impact of the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Returns the fully qualified Java class name of the values returned by the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Returns the <i>open type</i> of the values returned by the operation described by this <tt>OpenMBeanOperationInfo</tt> instance
Compares the specified <var>obj</var> parameter with this <code>OpenMBeanOperationInfo</code> instance for equality
Returns the hash code value for this <code>OpenMBeanOperationInfo</code> instance
Returns a string representation of this <code>OpenMBeanOperationInfo</code> instance
Returns the <i>open type</i> of the values returned by the operation described by this {@code OpenMBeanOperationInfo} instance
<p>Compares the specified {@code obj} parameter with this {@code OpenMBeanOperationInfoSupport} instance for equality
<p>Returns the hash code value for this {@code OpenMBeanOperationInfoSupport} instance
<p>Returns a string representation of this {@code OpenMBeanOperationInfoSupport} instance
Returns a human readable description of the parameter described by this <tt>OpenMBeanParameterInfo</tt> instance
Returns the name of the parameter described by this <tt>OpenMBeanParameterInfo</tt> instance
Returns the <i>open type</i> of the values of the parameter described by this <tt>OpenMBeanParameterInfo</tt> instance
Returns the default value for this parameter, if it has one, or <tt>null</tt> otherwise
Returns the set of legal values for this parameter, if it has one, or <tt>null</tt> otherwise
Returns the minimal value for this parameter, if it has one, or <tt>null</tt> otherwise
Returns the maximal value for this parameter, if it has one, or <tt>null</tt> otherwise
Returns <tt>true</tt> if this parameter has a specified default value, or <tt>false</tt> otherwise
Returns <tt>true</tt> if this parameter has a specified set of legal values, or <tt>false</tt> otherwise
Returns <tt>true</tt> if this parameter has a specified minimal value, or <tt>false</tt> otherwise
Returns <tt>true</tt> if this parameter has a specified maximal value, or <tt>false</tt> otherwise
Tests whether <var>obj</var> is a valid value for the parameter described by this <code>OpenMBeanParameterInfo</code> instance
Compares the specified <var>obj</var> parameter with this <code>OpenMBeanParameterInfo</code> instance for equality
Returns the hash code value for this <code>OpenMBeanParameterInfo</code> instance
Returns a string representation of this <code>OpenMBeanParameterInfo</code> instance
Returns the open type for the values of the parameter described by this {@code OpenMBeanParameterInfoSupport} instance
Returns the default value for the parameter described by this {@code OpenMBeanParameterInfoSupport} instance, if specified, or {@code null} otherwise
Returns an unmodifiable Set of legal values for the parameter described by this {@code OpenMBeanParameterInfoSupport} instance, if specified, or {@code null} otherwise
Returns the minimal value for the parameter described by this {@code OpenMBeanParameterInfoSupport} instance, if specified, or {@code null} otherwise
Returns the maximal value for the parameter described by this {@code OpenMBeanParameterInfoSupport} instance, if specified, or {@code null} otherwise
Returns {@code true} if this {@code OpenMBeanParameterInfoSupport} instance specifies a non-null default value for the described parameter, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanParameterInfoSupport} instance specifies a non-null set of legal values for the described parameter, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanParameterInfoSupport} instance specifies a non-null minimal value for the described parameter, {@code false} otherwise
Returns {@code true} if this {@code OpenMBeanParameterInfoSupport} instance specifies a non-null maximal value for the described parameter, {@code false} otherwise
Tests whether {@code obj} is a valid value for the parameter described by this {@code OpenMBeanParameterInfo} instance
<p>Compares the specified {@code obj} parameter with this {@code OpenMBeanParameterInfoSupport} instance for equality
<p>Returns the hash code value for this {@code OpenMBeanParameterInfoSupport} instance
Returns a string representation of this {@code OpenMBeanParameterInfoSupport} instance
Returns the fully qualified Java class name of the open data values this open type describes
Returns the name of this <code>OpenType</code> instance
Returns the text description of this <code>OpenType</code> instance
Returns <code>true</code> if the open data values this open type describes are arrays, <code>false</code> otherwise
Tests whether <var>obj</var> is a value for this open type
Compares the specified <code>obj</code> parameter with this open type instance for equality
Returns a string representation of this open type instance
Returns the operating system name
Returns the operating system architecture
Returns the operating system version
Returns the number of processors available to the Java virtual machine
Returns the system load average for the last minute
Returns the name of the method
Returns the string representation of the operation
Return the expression as a string for diagnostics
Return the expression as a string for diagnostics
Get the XPath as a list of tokens
Get the XPath as a list of tokens
Get size of the token queue
Get the opcode list that describes the XPath operations
Given an operation position, return the current op
Set the op at index to the given int
Given an operation position, return the end position, i
Given a location step position, return the end position, i
Given an operation position, return the end position, i
Given an FROM_stepType position, return the position of the first predicate, if there is one, or else this will point to the end of the FROM_stepType
Tell the user of an error, and probably throw an exception
Go to the first child of a given operation
Get the length of an operation
Given a location step, get the length of that step
Get the first child position of a given location step
Get the test type of the step, i
Get the namespace of the step
Get the local name of the step
Get the nth element
Sets the component at the specified index of this vector to be the specified object
Sets the label to be used for the option
Fetch the label associated with the option
Fetch the attributes associated with this option
String representation is the label
Sets the selected state
Fetches the selection state associated with this option
Convenience method to return the string associated with the <code>value</code> attribute
Returns an empty {@code Optional} instance
Returns an {@code Optional} with the specified present non-null value
Returns an {@code Optional} describing the specified value, if non-null, otherwise returns an empty {@code Optional}
If a value is present in this {@code Optional}, returns the value, otherwise throws {@code NoSuchElementException}
Return {@code true} if there is a value present, otherwise {@code false}
If a value is present, invoke the specified consumer with the value, otherwise do nothing
If a value is present, and the value matches the given predicate, return an {@code Optional} describing the value, otherwise return an empty {@code Optional}
If a value is present, apply the provided mapping function to it, and if the result is non-null, return an {@code Optional} describing the result
If a value is present, apply the provided {@code Optional}-bearing mapping function to it, return that result, otherwise return an empty {@code Optional}
Return the value if present, otherwise return {@code other}
Return the value if present, otherwise invoke {@code other} and return the result of that invocation
Return the contained value, if present, otherwise throw an exception to be created by the provided supplier
Indicates whether some other object is "equal to" this Optional
Returns the hash code value of the present value, if any, or 0 (zero) if no value is present
Returns a non-empty string representation of this Optional suitable for debugging
Returns an empty {@code OptionalDouble} instance
Return an {@code OptionalDouble} with the specified value present
If a value is present in this {@code OptionalDouble}, returns the value, otherwise throws {@code NoSuchElementException}
Return {@code true} if there is a value present, otherwise {@code false}
Have the specified consumer accept the value if a value is present, otherwise do nothing
Return the value if present, otherwise return {@code other}
Return the value if present, otherwise invoke {@code other} and return the result of that invocation
Return the contained value, if present, otherwise throw an exception to be created by the provided supplier
Indicates whether some other object is "equal to" this OptionalDouble
Returns the hash code value of the present value, if any, or 0 (zero) if no value is present
{@inheritDoc} Returns a non-empty string representation of this object suitable for debugging
Returns an empty {@code OptionalInt} instance
Return an {@code OptionalInt} with the specified value present
If a value is present in this {@code OptionalInt}, returns the value, otherwise throws {@code NoSuchElementException}
Return {@code true} if there is a value present, otherwise {@code false}
Have the specified consumer accept the value if a value is present, otherwise do nothing
Return the value if present, otherwise return {@code other}
Return the value if present, otherwise invoke {@code other} and return the result of that invocation
Return the contained value, if present, otherwise throw an exception to be created by the provided supplier
Indicates whether some other object is "equal to" this OptionalInt
Returns the hash code value of the present value, if any, or 0 (zero) if no value is present
{@inheritDoc} Returns a non-empty string representation of this object suitable for debugging
Returns an empty {@code OptionalLong} instance
Return an {@code OptionalLong} with the specified value present
If a value is present in this {@code OptionalLong}, returns the value, otherwise throws {@code NoSuchElementException}
Return {@code true} if there is a value present, otherwise {@code false}
Have the specified consumer accept the value if a value is present, otherwise do nothing
Return the value if present, otherwise return {@code other}
Return the value if present, otherwise invoke {@code other} and return the result of that invocation
Return the contained value, if present, otherwise throw an exception to be created by the provided supplier
Indicates whether some other object is "equal to" this OptionalLong
Returns the hash code value of the present value, if any, or 0 (zero) if no value is present
{@inheritDoc} Returns a non-empty string representation of this object suitable for debugging
Determines if the given option is supported and if so, the number of arguments the option takes
Requests the component representing the default value to have focus
Returns true if the user has supplied instances of Component for either the options or message
OR two expressions and return the boolean result
Evaluate this operation directly to a boolean
Returns the Presentation Manager for the current thread group, using the ThreadGroup-specific AppContext to hold it
Get the appropriate StubFactoryFactory
Handle a bad server id for the given object key
Return this ORB's transient server ID
Set the resolver used in this ORB
Get the resolver used in this ORB
Set the LocalResolver used in this ORB
Get the LocalResolver used in this ORB
Set the operation used in string_to_object calls
Get the operation used in string_to_object calls
Set the ServerRequestDispatcher that should be used for handling INS requests
Factory finders for the various parts of the IOR: tagged components, tagged profiles, and tagged profile templates
Returns the logger based on the category
get the log wrapper class (its type is dependent on the exceptionGroup) for the given log domain and exception group in this ORB instance
get the log wrapper class (its type is dependent on the exceptionGroup) for the given log domain and exception group in this ORB instance
Ensure that the Db directory exists
Go through the list of ORB Servers and initialize and start them up
Return the persistent-server-id of this server
Get the prefered code sets for connections
Return the persistent-server-id of this server
Get the prefered code sets for connections
The following methods are standard public CORBA ORB APIs
Get a Current pseudo-object
Create an NVList
Create an NVList corresponding to an OperationDef
Create a NamedValue
Create an ExceptionList
Create a ContextList
Get the default Context object
Create an Environment
Send multiple dynamic requests asynchronously
Find out if any of the deferred invocations have a response yet
Get the next request that has gotten a response
Notify response to ORB for get_next_response
Convert an object ref to a string
Convert a stringified object reference to the object it represents
Get the TypeCode for a primitive type
Create a TypeCode for a structure
Create a TypeCode for a union
Create a TypeCode for an enum
Create a TypeCode for an alias
Create a TypeCode for an exception
Create a TypeCode for an interface
Create a TypeCode for a string
Create a TypeCode for a wide string
Create a TypeCode for a sequence
Create a recursive TypeCode in a sequence
Create a TypeCode for an array
Create a new Any
Get a list of the initially available CORBA services
Resolve the stringified reference of one of the initially available CORBA services
If this operation is called with an id, <code>"Y"</code>, and an object, <code>YY</code>, then a subsequent call to <code>ORB
The following methods (introduced in POA / CORBA2
formal/99-10-07 p 159: "If destroy is called on an ORB that has  not been shut down, it will start the shutdown process and block until  the ORB has shut down before it destroys the ORB
Registers a value factory for a particular repository ID
Unregisters a value factory for a particular repository ID
Finds and returns a value factory for the given repository ID
This is the implementation of the public API used to connect  a servant-skeleton to the ORB
This method always returns false because the ORB never needs the  main thread to do work
This method does nothing
Set the resolver used in this ORB
Get the resolver used in this ORB
Set the LocalResolver used in this ORB
Get the LocalResolver used in this ORB
Set the operation used in string_to_object calls
Get the operation used in string_to_object calls
Called during ORB initialization
Called during ORB initialization
Return the ORB behind this ORBInitInfo
This attribute contains the arguments passed to ORB_init
This attribute is the ID of the ORB being initialized
This attribute is the IOP::CodecFactory
See orbos/99-12-02, Chapter 11, Dynamic Initial References on page 11-81
This operation is only valid during post_init
This operation is used to add a client-side request Interceptor to the list of client-side request Interceptors
This operation is used to add a server-side request Interceptor to the list of server-side request Interceptors
This operation is used to add an IOR Interceptor to the list of IOR Interceptors
A service calls allocate_slot_id to allocate a slot on PortableInterceptor::Current
Register a PolicyFactory for the given PolicyType
Returns the arguments passed to <code>ORB
Returns the ID of the ORB being initialized
Returns the <code>IOP
Identical to <code>ORB
Identical to <code>ORB
Used to add a client-side request Interceptor to the list of  client-side request Interceptors
Used to add a server-side request Interceptor to the list of  server-side request Interceptors
Used to add an IOR Interceptor to the list of IOR Interceptors
Called to allocate a slot on <code>PortableInterceptor
Registers a <code>PolicyFactory</code> for the given  <code>PolicyType</code>
Method used to cause ORB to activate the named adapter, if possible
Static method for writing a CORBA standard exception to an Any
Return default ValueHandler
Returns true if it was accurately determined that the remote ORB is a foreign (non-JavaSoft) ORB
Unmarshal a byte array to an integer
Marshal an integer to a byte array
Converts an Ascii Character into Hexadecimal digit
Static method for writing a CORBA standard exception to a stream
Static method for reading a CORBA standard exception from a stream
Get the class name corresponding to a particular repository Id
Return true if this repositoryId is a SystemException
Get the repository id corresponding to a particular class
Parse a version string such as "1
Compare two version arrays
Compare two version strings
Throws the CORBA equivalent of a java
Returns the maximum stream format version supported by our ValueHandler
This method is used to create untyped object references
This method obtains an IOR from a CORBA object reference
Obtains an IOR for the object reference obj, first connecting it to the ORB if necessary
Return the current version of this ORB
Returns the string table for class OrientationRequested
Returns the enumeration value table for class OrientationRequested
Returns the lowest integer value used by class OrientationRequested
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Given an OSF registry value, return the corresponding Entry
Returns the Java equivalent name
Get the OSF registry number for this code set
Is this a fixed or variable width code set?  (In CORBA terms, "non-byte-oriented" or a "byte-oriented" code set, respectively)
First checks reference equality since it's expected people will use the pre-defined constant Entries
Uses the registry number as the hash code
Returns whether this output device assigned attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the method specified for this output format
Sets the method for this output format
Returns the version for this output method
Sets the version for this output method
Returns the indentation specified
Returns true if indentation was specified
Sets the indentation
Sets the indentation on and off
Returns the specified encoding
Sets the encoding for this output method
Sets the encoding for this output method with an <code>EncodingInfo</code> instance
Returns an <code>EncodingInfo<code> instance for the encoding
Sets whether java encoding names are permitted
Returns whether java encoding names are permitted
Returns the specified media type, or null
Sets the media type
Sets the document type public and system identifiers
Returns the specified document type public identifier, or null
Returns the specified document type system identifier, or null
Returns true if comments should be ommited
Sets comment omitting on and off
Returns true if the DOCTYPE declaration should be ommited
Sets DOCTYPE declaration omitting on and off
Returns true if the XML document declaration should be ommited
Sets XML declaration omitting on and off
Returns true if the document type is standalone
Sets document DTD standalone
Returns a list of all the elements whose text node children should be output as CDATA, or null if no such elements were specified
Returns true if the text node children of the given elements should be output as CDATA
Sets the list of elements for which text node children should be output as CDATA
Returns a list of all the elements whose text node children should be output unescaped (no character references), or null if no such elements were specified
Returns true if the text node children of the given elements should be output unescaped
Sets the list of elements for which text node children should be output unescaped (no character references)
Returns a specific line separator to use
Sets the line separator
Returns true if the default behavior for this format is to preserve spaces
Sets space preserving as the default behavior
Return the selected line width for breaking up long lines
Sets the line width
Returns the preserveEmptyAttribute flag
Sets the preserveEmptyAttribute flag
Returns the last printable character based on the selected encoding
Determine the output method for the specified document
Returns the document type public identifier specified for this document, or null
Returns the document type system identifier specified for this document, or null
Returns the suitable media format for a document output with the specified method
Creates an empty OutputProperties with the property key/value defaults specified by a property file
Searches for the boolean property with the specified key in the property list
Searches for the int property with the specified key in the property list
Marshals a value type to the output stream
Marshals a value type to the output stream
Marshals a value type to the output stream
Marshals a value type to the output stream
Marshals a value object or a stub object
Returns the name of the character encoding being used by this stream
Writes a single character
Writes a portion of an array of characters
Writes a portion of a string
Flushes the stream
Returns the container that uses this layout manager
Indicates a child has changed its layout related information, which causes any cached calculations to be flushed
Adds the specified component to the layout
Removes the specified component from the layout
Adds the specified component to the layout, using the specified constraint object
Returns the preferred dimensions for this layout given the components in the specified target container
Returns the minimum dimensions needed to lay out the components contained in the specified target container
Returns the maximum dimensions needed to lay out the components contained in the specified target container
Returns the alignment along the x axis for the container
Returns the alignment along the y axis for the container
Called by the AWT when the specified container needs to be laid out
Adds an owner
Deletes an owner
Returns true if the given principal is an owner of the ACL
Obtain new instance of a class that implements Packer
Obtain new instance of a class that implements Unpacker
Get the set of this engine's properties
Takes a JarFile and converts it into a Pack200 archive
Takes a JarInputStream and converts it into a Pack200 archive
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events, added by the {@link #addPropertyChangeListener}
Get the set of this engine's properties
Read a Pack200 archive, and write the encoded JAR to a JarOutputStream
Read a Pack200 archive, and write the encoded JAR to a JarOutputStream
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events, added by the {@link #addPropertyChangeListener}
Return the name of this package
Return the title of the specification that this package implements
Returns the version number of the specification that this package implements
Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package
Return the title of this package
Return the version of this implementation
Returns the name of the organization, vendor or company that provided this implementation
Returns true if this package is sealed
Returns true if this package is sealed with respect to the specified code source url
Compare this package's specification version with a desired version
Find a package by name in the callers {@code ClassLoader} instance
Get all the packages currently known for the caller's {@code ClassLoader} instance
Return the hash code computed from the package name
Returns the string representation of this Package
{@inheritDoc}
Get all classes and interfaces in the package, filtered to the specified <a href="{@docRoot}/com/sun/javadoc/package-summary
Get all <a href="{@docRoot}/com/sun/javadoc/package-summary
Get included <a href="{@docRoot}/com/sun/javadoc/package-summary
Get included Exception classes in this package
Get included Error classes in this package
Get included enum types in this package
Get included interfaces in this package, omitting annotation types
Get included annotation types in this package
Get the annotations of this package
Lookup a class or interface within this package
Returns the fully qualified name of this package
Returns the simple name of this package
Returns the {@linkplain NestingKind#TOP_LEVEL top-level} classes and interfaces within this package
Returns {@code true} is this is an unnamed package and {@code false} otherwise
Returns {@code null} since a package is not enclosed by another element
Returns the mask indicating which bits in a pixel contain the specified color/alpha sample
Returns a mask array indicating which bits in a pixel contain the color and alpha samples
Creates a <code>SampleModel</code> with the specified width and height that has a data layout compatible with this <code>ColorModel</code>
Checks if the specified <code>SampleModel</code> is compatible with this <code>ColorModel</code>
Returns a {@link WritableRaster} representing the alpha channel of an image, extracted from the input <code>WritableRaster</code>
Tests if the specified <code>Object</code> is an instance of <code>PackedColorModel</code> and equals this <code>PackedColorModel</code>
Returns the number of pages in the set
Returns the <code>PageFormat</code> of the page specified by <code>pageIndex</code>
Returns the <code>Printable</code> instance responsible for rendering the page specified by <code>pageIndex</code>
Creates and returns a copy of this PageAttributes
Sets all of the attributes of this PageAttributes to the same values as the attributes of obj
Returns whether pages using these attributes will be rendered in color or monochrome
Specifies whether pages using these attributes will be rendered in color or monochrome
Returns the paper size for pages using these attributes
Specifies the desired paper size for pages using these attributes
Sets the paper size for pages using these attributes to the default size for the default locale
Returns the print orientation for pages using these attributes
Specifies the print orientation for pages using these attributes
Specifies the print orientation for pages using these attributes
Sets the print orientation for pages using these attributes to the default
Returns whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area
Specifies whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area
Returns the print quality for pages using these attributes
Specifies the print quality for pages using these attributes
Specifies the print quality for pages using these attributes
Sets the print quality for pages using these attributes to the default
Returns the print resolution for pages using these attributes
Specifies the desired print resolution for pages using these attributes
Specifies the desired cross feed and feed print resolutions in dots per inch for pages using these attributes
Sets the printer resolution for pages using these attributes to the default
Determines whether two PageAttributes are equal to each other
Returns a hash code value for this PageAttributes
Returns a string representation of this PageAttributes
Retrieves (an estimate of) the number of entries in the search result
Retrieves the server-generated cookie
Makes a copy of this <code>PageFormat</code> with the same contents as this <code>PageFormat</code>
Returns the width, in 1/72nds of an inch, of the page
Returns the height, in 1/72nds of an inch, of the page
Returns the x coordinate of the upper left point of the imageable area of the <code>Paper</code> object associated with this <code>PageFormat</code>
Returns the y coordinate of the upper left point of the imageable area of the <code>Paper</code> object associated with this <code>PageFormat</code>
Returns the width, in 1/72nds of an inch, of the imageable area of the page
Return the height, in 1/72nds of an inch, of the imageable area of the page
Returns a copy of the {@link Paper} object associated with this <code>PageFormat</code>
Sets the <code>Paper</code> object for this <code>PageFormat</code>
Sets the page orientation
Returns the orientation of this <code>PageFormat</code>
Returns a transformation matrix that translates user space rendering to the requested orientation of the page
Returns whether this page ranges attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this pages per minute attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this pages per minute color attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Creates and returns a {@link PaintContext} used to generate the color pattern
Releases the resources allocated for the operation
Returns the <code>ColorModel</code> of the output
Returns a <code>Raster</code> containing the colors generated for the graphics operation
<p>Renders to the given {@link java
Returns the rectangle representing the area which needs to be repainted in response to this event
Sets the rectangle representing the area which needs to be repainted in response to this event
Creates an image representing given image <code>src</code> using <code>IndexColorModel</code>
Creates an palette representing colors from given image <code>img</code>
Returns <code>true</code> if PaletteBuilder is able to create palette for given image type
Returns <code>true</code> if PaletteBuilder is able to create palette for given rendered image
Creates the Panel's peer
Gets the AccessibleContext associated with this Panel
Get the role of this object
Creates a copy of this <code>Paper</code> with the same contents as this <code>Paper</code>
Returns the height of the page in 1/72nds of an inch
Sets the width and height of this <code>Paper</code> object, which represents the properties of the page onto which printing occurs
Returns the width of the page in 1/72nds of an inch
Sets the imageable area of this <code>Paper</code>
Returns the x coordinate of the upper-left corner of this <code>Paper</code> object's imageable area
Returns the y coordinate of the upper-left corner of this <code>Paper</code> object's imageable area
Returns the width of this <code>Paper</code> object's imageable area
Returns the height of this <code>Paper</code> object's imageable area
Sets the type of justification
Sets the line spacing
Sets the indent on the first line
Set the cached properties from the attributes
Returns the number of views that this view is responsible for
Returns the view at a given <code>index</code>
Returns the next visual position for the cursor, in either the east or west direction
Returns the closest model position to <code>x</code>
Determines in which direction the next view lays
Fetches the constraining span to flow against for the given child index
Fetches the location along the flow axis that the flow span will start at
Create a <code>View</code> that should be used to hold a a row's worth of children in a flow
Returns the next tab stop position given a reference position
Gets the <code>Tabset</code> to be used in calculating tabs
Returns the size used by the views between <code>startOffset</code> and <code>endOffset</code>
Finds the next character in the document with a character in <code>string</code>, starting at offset <code>start</code>
Returns where the tabs are calculated from
Renders using the given rendering surface and area on that surface
Determines the desired alignment for this view along an axis
Breaks this view on the given axis at the given length
Gets the break weight for a given location
Calculate the needs for the paragraph along the minor axis
Gives notification from the document that attributes were changed in a location that this view is responsible for
Compares based on the executable and the index
Returns a hash code based on the executable's hash code and the index
Returns true if the parameter has a name according to the class file; returns false otherwise
Returns a string describing this parameter
Return the {@code Executable} which declares this parameter
Get the modifier flags for this the parameter represented by this {@code Parameter} object
Returns the name of the parameter
Returns a {@code Type} object that identifies the parameterized type for the parameter represented by this {@code Parameter} object
Returns a {@code Class} object that identifies the declared type for the parameter represented by this {@code Parameter} object
Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter
Returns {@code true} if this parameter is implicitly declared in source code; returns {@code false} otherwise
Returns {@code true} if this parameter is neither implicitly nor explicitly declared in source code; returns {@code false} otherwise
Returns {@code true} if this parameter represents a variable argument list; returns {@code false} otherwise
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a shallow copy of a <code>ParameterBlock</code>
Creates a copy of a <code>ParameterBlock</code>
Adds an image to end of the list of sources
Returns a source as a general Object
Replaces an entry in the list of source with a new source
Returns a source as a <code>RenderedImage</code>
Returns a source as a RenderableImage
Returns the number of source images
Returns the entire Vector of sources
Sets the entire Vector of sources to a given Vector
Clears the list of source images
Returns the number of parameters (not including source images)
Returns the entire Vector of parameters
Sets the entire Vector of parameters to a given Vector
Clears the list of parameters
Adds an object to the list of parameters
Adds a Byte to the list of parameters
Adds a Character to the list of parameters
Adds a Short to the list of parameters
Adds a Integer to the list of parameters
Adds a Long to the list of parameters
Adds a Float to the list of parameters
Adds a Double to the list of parameters
Replaces an Object in the list of parameters
Replaces an Object in the list of parameters with a Byte
Replaces an Object in the list of parameters with a Character
Replaces an Object in the list of parameters with a Short
Replaces an Object in the list of parameters with an Integer
Replaces an Object in the list of parameters with a Long
Replaces an Object in the list of parameters with a Float
Replaces an Object in the list of parameters with a Double
Gets a parameter as an object
A convenience method to return a parameter as a byte
A convenience method to return a parameter as a char
A convenience method to return a parameter as a short
A convenience method to return a parameter as an int
A convenience method to return a parameter as a long
A convenience method to return a parameter as a float
A convenience method to return a parameter as a double
Returns an array of Class objects describing the types of the parameters
Returns the formal type parameters of the type element in declaration order
Returns an array of {@code Type} objects representing the actual type arguments to this type
Returns the {@code Type} object representing the class or interface that declared this type
Returns a {@code Type} object representing the type that this type is a member of
Retrieves the number of parameters in the <code>PreparedStatement</code> object for which this <code>ParameterMetaData</code> object contains information
Retrieves whether null values are allowed in the designated parameter
Retrieves whether values for the designated parameter can be signed numbers
Retrieves the designated parameter's specified column size
Retrieves the designated parameter's number of digits to right of the decimal point
Retrieves the designated parameter's SQL type
Retrieves the designated parameter's database-specific type name
Retrieves the fully-qualified name of the Java class whose instances should be passed to the method <code>PreparedStatement
Retrieves the designated parameter's mode
Return the name of the parameter or type parameter associated with this <code>ParamTag</code>
Return the parameter comment associated with this <code>ParamTag</code>
Return true if this <code>ParamTag</code> corresponds to a type parameter
Returns a duplicate of a given node
Find the Document that this Node belongs to (the document in whose context the Node was created)
Test whether this node has any children
Obtain a NodeList enumerating all children of this node
The first child of this Node, or null if none
The last child of this Node, or null if none
Move one or more node(s) to our list of children
Remove a child from this Node
Make newChild occupy the location that oldChild used to have
NodeList method: Count the immediate children of this node
NodeList method: Return the Nth immediate child of this node, or null if the index is out of bounds
Create a NodeList to access children that is use by subclass elements that have methods named getLength() or item(int)
Override default behavior to call normalize() on this Node's children
DOM Level 3 WD- Experimental
Override default behavior so that if deep is true, children are also toggled
Override this method in subclass to hook in efficient internal data structure
Returns the position where the error was found
Retrieve the current parse position
Set the current parse position
Set the index at which a parse error occurred
Retrieve the index at which an error occurred, or -1 if the error index has not been set
Overrides equals
Returns a hash code for this ParsePosition
Return a string representation of this ParsePosition
Makes a TagElement
Called when PCDATA is encountered
Called when an HTML title tag is encountered
Called when an HTML comment is encountered
Called when an empty tag is encountered
Called when a start tag is encountered
Called when an end tag is encountered
An error has occurred
Invoke the error handler
Handle a start tag
Handle an end tag
Marks the first time a tag has been seen in a document
Parses th Document Declaration Type markup declaration
Parse markup declarations
Parse an HTML stream, given a DTD
Return the property name or prefix for which this action is applied
Return whether this action is for an exact match or a prefix match (true)
Return the field name in an object that is set with the result
Apply this action to props and return the result
Set a feature flag for the parser
Check a parser feature flag
Set a parser property
Get a parser property
Set the entity resolver
Return the current entity resolver
Set the DTD handler
Return the current DTD handler
Set the content handler
Return the current content handler
Set the error handler
Return the current error handler
Parse an XML document
Parse an XML document
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Adapter implementation method; do not call
Allows a parser to add parser specific features to be recognized and managed by the parser configuration
Set the state of a feature
Allows a parser to add parser specific properties to be recognized and managed by the parser configuration
setProperty
Returns the state of a feature
Returns the value of a property
Check a feature
Check a property
Create a new SAX parser using the `org
Create a new SAX parser object using the class name provided
Override this method if there is some needed initialization that takes place after argument parsing
Returns the user name
Returns the user password
Get the prompt
Return whether the password should be displayed as it is being typed
Set the retrieved password
Get the retrieved password
Clear the retrieved password
Renders the given range in the model as normal unselected text
Renders the given range in the model as selected text
Renders the echo character, or whatever graphic should be used to display the password characters
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Determines the preferred span for this view along an axis
Returns the number of the bank that contains the instrument whose location this <code>Patch</code> specifies
Returns the index, within a bank, of the instrument whose location this <code>Patch</code> specifies
Returns the file system that created this object
Tells whether or not this path is absolute
Returns the root component of this path as a {@code Path} object, or {@code null} if this path does not have a root component
Returns the name of the file or directory denoted by this path as a {@code Path} object
Returns the <em>parent path</em>, or {@code null} if this path does not have a parent
Returns the number of name elements in the path
Returns a name element of this path as a {@code Path} object
Returns a relative {@code Path} that is a subsequence of the name elements of this path
Tests if this path starts with the given path
Tests if this path starts with a {@code Path}, constructed by converting the given path string, in exactly the manner specified by the {@link #startsWith(Path) startsWith(Path)} method
Tests if this path ends with the given path
Tests if this path ends with a {@code Path}, constructed by converting the given path string, in exactly the manner specified by the {@link #endsWith(Path) endsWith(Path)} method
Returns a path that is this path with redundant name elements eliminated
Resolve the given path against this path
Converts a given path string to a {@code Path} and resolves it against this {@code Path} in exactly the manner specified by the {@link #resolve(Path) resolve} method
Resolves the given path against this path's {@link #getParent parent} path
Converts a given path string to a {@code Path} and resolves it against this path's {@link #getParent parent} path in exactly the manner specified by the {@link #resolveSibling(Path) resolveSibling} method
Constructs a relative path between this path and a given path
Returns a URI to represent this path
Returns a {@code Path} object representing the absolute path of this path
Returns the <em>real</em> path of an existing file
Returns a {@link File} object representing this path
Registers the file located by this path with a watch service
Registers the file located by this path with a watch service
Returns an iterator over the name elements of this path
Compares two abstract paths lexicographically
Tests this path for equality with the given object
Computes a hash code for this path
Returns the string representation of this path
Adds a point to the path by moving to the specified coordinates specified in double precision
Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision
Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates {@code (x2,y2)}, using the specified point {@code (x1,y1)} as a quadratic parametric control point
Adds a curved segment, defined by three new points, to the path by drawing a B&eacute;zier curve that intersects both the current coordinates and the specified coordinates {@code (x3,y3)}, using the specified points {@code (x1,y1)} and {@code (x2,y2)} as B&eacute;zier control points
Closes the current subpath by drawing a straight line back to the coordinates of the last {@code moveTo}
Appends the geometry of the specified {@code Shape} object to the path, possibly connecting the new geometry to the existing path segments with a line segment
Appends the geometry of the specified {@link PathIterator} object to the path, possibly connecting the new geometry to the existing path segments with a line segment
Returns the fill style winding rule
Sets the winding rule for this path to the specified value
Returns the coordinates most recently added to the end of the path as a {@link Point2D} object
Resets the path to empty
Transforms the geometry of this path using the specified {@link AffineTransform}
Returns a new {@code Shape} representing a transformed version of this {@code Path2D}
{@inheritDoc}
Tests if the specified coordinates are inside the closed boundary of the specified {@link PathIterator}
Tests if the specified {@link Point2D} is inside the closed boundary of the specified {@link PathIterator}
{@inheritDoc}
{@inheritDoc}
Tests if the specified rectangular area is entirely inside the closed boundary of the specified {@link PathIterator}
Tests if the specified {@link Rectangle2D} is entirely inside the closed boundary of the specified {@link PathIterator}
{@inheritDoc} <p> This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
{@inheritDoc} <p> This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
Tests if the interior of the specified {@link PathIterator} intersects the interior of a specified set of rectangular coordinates
Tests if the interior of the specified {@link PathIterator} intersects the interior of a specified {@link Rectangle2D}
{@inheritDoc} <p> This method object may conservatively return true in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
{@inheritDoc} <p> This method object may conservatively return true in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
{@inheritDoc} <p> The iterator for this class is not multi-threaded safe, which means that this {@code Path2D} class does not guarantee that modifications to the geometry of this {@code Path2D} object do not affect any iterations of that geometry that are already in process
Creates a new object of the same class as this object
{@inheritDoc}
Adds a point to the path by moving to the specified coordinates specified in float precision
{@inheritDoc}
Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in float precision
{@inheritDoc}
Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates {@code (x2,y2)}, using the specified point {@code (x1,y1)} as a quadratic parametric control point
{@inheritDoc}
Adds a curved segment, defined by three new points, to the path by drawing a B&eacute;zier curve that intersects both the current coordinates and the specified coordinates {@code (x3,y3)}, using the specified points {@code (x1,y1)} and {@code (x2,y2)} as B&eacute;zier control points
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} <p> The iterator for this class is not multi-threaded safe, which means that the {@code Path2D} class does not guarantee that modifications to the geometry of this {@code Path2D} object do not affect any iterations of that geometry that are already in process
Creates a new object of the same class as this object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} <p> The iterator for this class is not multi-threaded safe, which means that the {@code Path2D} class does not guarantee that modifications to the geometry of this {@code Path2D} object do not affect any iterations of that geometry that are already in process
Creates a new object of the same class as this object
Get the analysis bits for this path component, as defined in the WalkerFactory
Returns the winding rule for determining the interior of the path
Tests if the iteration is complete
Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction
Returns the coordinates and type of the current path segment in the iteration
Returns the coordinates and type of the current path segment in the iteration
Tells if given path matches this matcher's pattern
Converts a path string, or a sequence of strings that when joined form a path string, to a {@code Path}
Converts the given URI to a {@link Path} object
Compiles the given regular expression into a pattern
Compiles the given regular expression into a pattern with the given flags
Returns the regular expression from which this pattern was compiled
<p>Returns the string representation of this pattern
Creates a matcher that will match the given input against this pattern
Returns this pattern's match flags
Compiles the given regular expression and attempts to match the given input against it
Splits the given input sequence around matches of this pattern
Splits the given input sequence around matches of this pattern
Returns a literal pattern <code>String</code> for the specified <code>String</code>
Creates a predicate which can be used to match a string
Creates a stream from the given input sequence around matches of this pattern
Retrieves the error index
Retrieves the description of the error
Retrieves the erroneous regular-expression pattern
Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern
Returns the string table for class PDLOverrideSupported
Returns the enumeration value table for class PDLOverrideSupported
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Obtains a {@code Period} representing a number of years
Obtains a {@code Period} representing a number of months
Obtains a {@code Period} representing a number of weeks
Obtains a {@code Period} representing a number of days
Obtains a {@code Period} representing a number of years, months and days
Obtains an instance of {@code Period} from a temporal amount
Obtains a {@code Period} from a text string such as {@code PnYnMnD}
Obtains a {@code Period} consisting of the number of years, months, and days between two dates
Gets the value of the requested unit
Gets the set of units supported by this period
Gets the chronology of this period, which is the ISO calendar system
Checks if all three units of this period are zero
Checks if any of the three units of this period are negative
Gets the amount of years of this period
Gets the amount of months of this period
Gets the amount of days of this period
Returns a copy of this period with the specified amount of years
Returns a copy of this period with the specified amount of months
Returns a copy of this period with the specified amount of days
Returns a copy of this period with the specified period added
Returns a copy of this period with the specified years added
Returns a copy of this period with the specified months added
Returns a copy of this period with the specified days added
Returns a copy of this period with the specified period subtracted
Returns a copy of this period with the specified years subtracted
Returns a copy of this period with the specified months subtracted
Returns a copy of this period with the specified days subtracted
Returns a new instance with each element in this period multiplied by the specified scalar
Returns a new instance with each amount in this period negated
Returns a copy of this period with the years and months normalized
Gets the total number of months in this period
Adds this period to the specified temporal object
Subtracts this period from the specified temporal object
Checks if this period is equal to another period
A hash code for this period
Outputs this period as a {@code String}, such as {@code P6Y3M1D}
Implements the guard interface for a permission
Checks if the specified permission's actions are "implied by" this object's actions
Checks two Permission objects for equality
Returns the hash code value for this Permission object
Returns the name of this Permission
Returns the actions as a String
Returns an empty PermissionCollection for a given Permission object, or null if one is not defined
Returns a string describing this Permission
Adds a permission object to the current collection of permission objects
Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection
Returns an enumeration of all the Permission objects in the collection
Marks this PermissionCollection object as "readonly"
Returns true if this PermissionCollection object is marked as readonly
Returns a string describing this PermissionCollection object, providing information about all the permissions it contains
Adds a permission object to the PermissionCollection for the class the permission belongs to
Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the <i>permission</i> object
Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object
The <code>writeObject</code> is a single entry point to the persistence and is used by a <code>Encoder</code> in the traditional mode of delegation
Returns true if an <em>equivalent</em> copy of <code>oldInstance</code> may be created by applying a series of statements to <code>newInstance</code>
Returns an expression whose value is <code>oldInstance</code>
Produce a series of statements with side effects on <code>newInstance</code> so that the new instance becomes <em>equivalent</em> to <code>oldInstance</code>
Returns the next binding in the NamingContext
Destroys this BindingIterator by disconnecting from the ORB
Returns the remaining number of elements in the iterator
Instantiates thisMBean instance with the data found for the MBean in the persistent store
Captures the current state of this MBean instance and writes it out to the persistent store
Returns the PGP public key identifier of this <code>PGPData</code> as defined in <a href="http://www
Returns the PGP key material packet of this <code>PGPData</code> as defined in <a href="http://www
Returns an {@link Collections#unmodifiableList unmodifiable list} of {@link XMLStructure}s representing elements from an external namespace
Returns this reference object's referent
Adds a new unarrived party to this phaser
Adds the given number of new unarrived parties to this phaser
Arrives at this phaser, without waiting for others to arrive
Arrives at this phaser and deregisters from it without waiting for others to arrive
Arrives at this phaser and awaits others
Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
Awaits the phase of this phaser to advance from the given phase value, throwing {@code InterruptedException} if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing {@code InterruptedException} if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated
Forces this phaser to enter termination state
Returns the current phase number
Returns the number of parties registered at this phaser
Returns the number of registered parties that have arrived at the current phase of this phaser
Returns the number of registered parties that have not yet arrived at the current phase of this phaser
Returns the parent of this phaser, or {@code null} if none
Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent
Returns {@code true} if this phaser has been terminated
Overridable method to perform an action upon impending phase advance, and to control termination
Returns a string identifying this phaser, as well as its state
This method sets the slot data at the given slot id (index) in the Slot Table which is on the top of the SlotTableStack
This method gets the slot data at the given slot id (index) from the Slot Table which is on the top of the SlotTableStack
Complete the initialization of the PIHandler
Called when a new object adapter is created
Called whenever a state change occurs in an adapter manager
Called whenever a state change occurs in an object adapter that was not caused by an adapter manager state change
Called for pseudo-ops to temporarily disable portable interceptor hooks for calls on this thread
Called for pseudo-ops to re-enable portable interceptor hooks for calls on this thread
Called when the send_request or send_poll portable interception point is to be invoked for all appropriate client-side request interceptors
Called when the appropriate client ending interception point is to be invoked for all apporpriate client-side request interceptors
Called when a retry is needed after initiateClientPIRequest but before invokeClientPIRequest
Invoked when a request is about to be created
Invoked when a request is about to be cleaned up
Notifies PI of additional information for client-side interceptors
Notify PI of the MessageMediator for the request
Called when the appropriate server starting interception point is to be invoked for all appropriate server-side request interceptors
Called when the appropriate server intermediate interception point is to be invoked for all appropriate server-side request interceptors
Called when the appropriate server ending interception point is to be invoked for all appropriate server-side request interceptors
Notifies PI to start a new server request and set initial information for server-side interceptors
Notifies PI of additional information reqired for ServerRequestInfo
Notifies PI of additional information required for ServerRequestInfo
Notifies PI of additional information for server-side interceptors
Notifies PI of additional information for server-side interceptors
Notifies PI of additional information for server-side interceptors
Invoked when a request is about to be cleaned up
ptc/00-08-06 p 205: "When an application calls ORB::destroy, the ORB  1) waits for all requests in progress to complete  2) calls the Interceptor::destroy operation for each interceptor  3) completes destruction of the ORB" This must be called at the end of ORB
Called by ORBInitInfo when an interceptor needs to be registered
This is the implementation of standard API defined in org
This method registers the Policy Factory in the policyFactoryTable,  which is a HashMap
Returns this pipe's source channel
Returns this pipe's sink channel
Opens a pipe
Returns an operation set identifying this channel's supported operations
Returns an operation set identifying this channel's supported operations
Causes this piped input stream to be connected to the piped  output stream <code>src</code>
Receives a byte of data
Reads the next byte of data from this piped input stream
Reads up to <code>len</code> bytes of data from this piped input stream into an array of bytes
Returns the number of bytes that can be read from this input stream without blocking
Closes this piped input stream and releases any system resources associated with the stream
Connects this piped output stream to a receiver
Writes the specified <code>byte</code> to the piped output stream
Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this piped output stream
Flushes this output stream and forces any buffered output bytes to be written out
Closes this piped output stream and releases any system resources associated with this stream
Causes this piped reader to be connected to the piped  writer <code>src</code>
Reads the next character of data from this piped stream
Reads up to <code>len</code> characters of data from this piped stream into an array of characters
Tell whether this stream is ready to be read
Closes this piped stream and releases any system resources associated with the stream
Connects this piped writer to a receiver
Writes the specified <code>char</code> to the piped output stream
Writes <code>len</code> characters from the specified character array starting at offset <code>off</code> to this piped output stream
Flushes this output stream and forces any buffered output characters to be written out
Closes this piped output stream and releases any system resources associated with this stream
Request the PixelGrabber to start fetching the pixels
Request the PixelGrabber to abort the image fetch
Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered
Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has elapsed
Return the status of the pixels
Get the width of the pixel buffer (after adjusting for image width)
Get the height of the pixel buffer (after adjusting for image height)
Get the pixel buffer
Get the ColorModel for the pixels stored in the array
The setDimensions method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The setHints method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The setProperties method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The setColorModel method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels
The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels
Returns the status of the pixels
Creates a new PixelInterleavedSampleModel with the specified width and height
Creates a new PixelInterleavedSampleModel with a subset of the bands of this PixelInterleavedSampleModel
Returns the attribute's ASN
Returns the attribute's ASN
Returns the attribute's ASN
Compares this {@code PKCS12Attribute} and a specified object for equality
Returns the hashcode for this {@code PKCS12Attribute}
Returns a string representation of this {@code PKCS12Attribute}
Returns the key bytes, encoded according to the PKCS #8 standard
Returns the name of the encoding format associated with this key specification
Sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path
Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path
Returns a formatted string describing the parameters
Returns the built and validated certification path
Return a printable representation of this {@code PKIXCertPathBuilderResult}
Initializes the internal state of this {@code PKIXCertPathChecker}
Indicates if forward checking is supported
Returns an immutable {@code Set} of X
Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions
{@inheritDoc} <p>This implementation calls {@code check(cert, java
Returns a clone of this object
Returns the {@code TrustAnchor} describing the CA that served as a trust anchor for the certification path
Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm
Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable
Returns a copy of this object
Return a printable representation of this {@code PKIXCertPathValidatorResult}
Returns an immutable {@code Set} of the most-trusted CAs
Sets the {@code Set} of most-trusted CAs
Returns an immutable {@code Set} of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
Sets the {@code Set} of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing
Sets the list of {@code CertStore}s to be used in finding certificates and CRLs
Adds a {@code CertStore} to the end of the list of {@code CertStore}s used in finding certificates and CRLs
Returns an immutable {@code List} of {@code CertStore}s that are used to find certificates and CRLs
Sets the RevocationEnabled flag
Checks the RevocationEnabled flag
Sets the ExplicitPolicyRequired flag
Checks if explicit policy is required
Sets the PolicyMappingInhibited flag
Checks if policy mapping is inhibited
Sets state to determine if the any policy OID should be processed if it is included in a certificate
Checks whether the any policy OID should be processed if it is included in a certificate
Sets the PolicyQualifiersRejected flag
Gets the PolicyQualifiersRejected flag
Returns the time for which the validity of the certification path should be determined
Sets the time for which the validity of the certification path should be determined
Sets a {@code List} of additional certification path checkers
Returns the {@code List} of certification path checkers
Adds a {@code PKIXCertPathChecker} to the list of certification path checkers
Returns the signature provider's name, or {@code null} if not set
Sets the signature provider's name
Returns the required constraints on the target certificate
Sets the required constraints on the target certificate
Makes a copy of this {@code PKIXParameters} object
Returns a formatted string describing the parameters
Sets the URI that identifies the location of the OCSP responder
Gets the URI that identifies the location of the OCSP responder
Sets the OCSP responder's certificate
Gets the OCSP responder's certificate
Sets the optional OCSP request extensions
Gets the optional OCSP request extensions
Sets the OCSP responses
Gets the OCSP responses
Sets the revocation options
Gets the revocation options
Returns a list containing the exceptions that are ignored by the revocation checker when the {@link Option#SOFT_FAIL SOFT_FAIL} option is set
Inserts some content into the document
Gets the default root element for the document model
Creates the root element to be used to represent the default document structure
Get the paragraph element containing the given position
Updates document structure as a result of text insertion
Updates any document structure as a result of text removal
Returns the tab size set for the document, defaulting to 8
Renders a line of text, suppressing whitespace at the end and expanding any tabs
Renders the given range in the model as normal unselected text
Renders the given range in the model as selected text
Gives access to a buffer that can be used to fetch text from the associated document
Checks to see if the font metrics and longest line are up-to-date
Determines the preferred span for this view along an axis
Renders using the given rendering surface and area on that surface
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
Sets the size of the view
Returns the next tab stop position after a given reference position
Repaint the region of change covered by the given document event
Repaint the given line range
Determine the rectangle that represents the given line
Returns the list of the currently registered {@linkplain java
Gets the name of the log {@linkplain java
Sets the specified logger to the specified new {@linkplain java
Returns the name of the {@linkplain java
Returns an {@link ObjectName ObjectName} instance representing the object name of this platform managed object
Get the user-friendly name of this plug-in
Initialize the plug-in for a given compilation task
Apply the operation to two operands, and return the result
Evaluate this operation directly to a double
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump source file attribute to file stream in binary format
Sets the IHDR_bitDepth and IHDR_colorType variables
<code>create_POA</code> <b>Section 3
<code>find_POA</code> <b>Section 3
<code>destroy</code> <b>Section 3
<code>create_thread_policy</code> <b>Section 3
<code>create_lifespan_policy</code> <b>Section 3
<code>create_id_uniqueness_policy</code> <b>Section 3
<code>create_id_assignment_policy</code> <b>Section 3
<code>create_implicit_activation_policy</code> <b>Section 3
<code>create_servant_retention_policy</code> <b>Section 3
<code>create_request_processing_policy</code> <b>Section 3
<code>the_name</code> <b>Section 3
<code>the_parent</code> <b>Section 3
<code>the_children</code>
<code>the_POAManager</code> <b>Section 3
<code>the_activator</code> <b>Section 3
<code>the_activator</code> <b>Section 3
<code>get_servant_manager</code> <b>Section 3
<code>set_servant_manager</code> <b>Section 3
<code>get_servant</code> <b>Section 3
<code>set_servant</code> <b>Section 3
<code>activate_object</code> <b>Section 3
<code>activate_object_with_id</code> <b>Section 3
<code>deactivate_object</code> <b>3
<code>create_reference</code> <b>3
<code>create_reference_with_id</code> <b>3
<code>servant_to_id</code> <b>3
<code>servant_to_reference</code> <b>3
<code>reference_to_servant</code> <b>3
<code>reference_to_id</code> <b>3
<code>id_to_servant</code> <b>3
<code>id_to_reference</code> <b>3
<code>id</code> <b>11
Called from the subcontract to let this POA cleanup after an  invocation
<code>activate</code> <b>Spec: pages 3-14 thru 3-18</b>
<code>hold_requests</code> <b>Spec: pages 3-14 thru 3-18</b>
<code>discard_requests</code> <b>Spec: pages 3-14 thru 3-18</b>
<code>deactivate</code> <b>Spec: pages 3-14 thru 3-18</b> Note: INACTIVE is a permanent state
Added according to the spec CORBA V2
Activate the POAManager if no explicit state change has ever been previously invoked
This operation changes the state of the POA manager  to active, causing associated POAs to start processing requests
This operation changes the state of the POA manager  to holding, causing associated POAs to queue incoming requests
This operation changes the state of the POA manager  to discarding
This operation changes the state of the POA manager  to inactive, causing associated POAs to reject the requests that have not begun executing as well as as any new requests
This operation returns the state of the POA manager
This operation creates a new POA as a child of the  target POA
If the target POA is the parent of a child POA with  the specified name (relative to the target POA), that  child POA is returned
This operation destroys the POA and all descendant  POAs
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
These operations each return a reference to a policy  object with the specified value
This attribute identifies the POA relative to its  parent
This attribute identifies the parent of the POA
This attribute identifies the current set of all  child POAs of the POA
This attribute identifies the POA manager  associated with the POA
This attribute identifies the adapter activator  associated with the POA
This attribute identifies the adapter activator  associated with the POA
If the ServantRetentionPolicy of the POA is RETAIN,  then the ServantManager argument (imgr) shall support  the ServantActivator interface
This operation sets the default servant manager  associated with the POA
This operation returns the default servant associated  with the POA
This operation registers the specified servant with  the POA as the default servant
This operation generates an Object Id and enters  the Object Id and the specified servant in the  Active Object Map
This operation enters an association between the  specified Object Id and the specified servant in the  Active Object Map
This operation causes the ObjectId specified in the  oid parameter to be deactivated
This operation creates an object reference that  encapsulates a POA-generated Object Id value and  the specified interface repository id
This operation creates an object reference that  encapsulates the specified Object Id and interface  repository Id values
This operation has four possible behaviors
This operation requires the RETAIN policy and either  the UNIQUE_ID or IMPLICIT_ACTIVATION policies if  invoked outside the context of an operation dispatched  by this POA
If the POA has the RETAIN policy and the specified  object is present in the Active Object Map, this  operation returns the servant associated with that  object in the Active Object Map
This operation returns the Object Id value  encapsulated by the specified reference
If the POA has the RETAIN policy and the specified  ObjectId is in the Active Object Map, this operation  returns the servant associated with that object in  the Active Object Map
If an object with the specified Object Id value is  currently active, a reference encapsulating the  information used to activate the object is returned
This returns the unique id of the POA in the process in which it  is created
Return the policies object that was used to create this POAPolicyMediator
Return the subcontract ID to use in the IIOP profile in IORs created by this POAPolicyMediator's POA
Return the server ID to use in the IIOP profile in IORs created by this POAPolicyMediator's POA
Get the servant to use for an invocation with the given id and operation
Release a servant that was obtained from getInvocationServant
Etherealize all servants associated with this POAPolicyMediator
Delete everything in the active object map
Return the servant manager
Set the servant manager
Return the default servant
Set the default servant
Deactivate the object that is associated with the given id
Allocate a new, unique system ID
{@inheritDoc}
{@inheritDoc}
Returns the location of this point
Sets the location of the point to the specified location
Changes the point to have the specified location
Sets the location of this point to the specified double coordinates
Moves this point to the specified location in the {@code (x,y)} coordinate plane
Translates this point, at location {@code (x,y)}, by {@code dx} along the {@code x} axis and {@code dy} along the {@code y} axis so that it now represents the point {@code (x+dx,y+dy)}
Determines whether or not two points are equal
Returns a string representation of this point and its location in the {@code (x,y)} coordinate space
Returns the X coordinate of this <code>Point2D</code> in <code>double</code> precision
Returns the Y coordinate of this <code>Point2D</code> in <code>double</code> precision
Sets the location of this <code>Point2D</code> to the specified <code>double</code> coordinates
Sets the location of this <code>Point2D</code> to the same coordinates as the specified <code>Point2D</code> object
Returns the square of the distance between two points
Returns the distance between two points
Returns the square of the distance from this <code>Point2D</code> to a specified point
Returns the square of the distance from this <code>Point2D</code> to a specified <code>Point2D</code>
Returns the distance from this <code>Point2D</code> to a specified point
Returns the distance from this <code>Point2D</code> to a specified <code>Point2D</code>
Creates a new object of the same class and with the same contents as this object
Returns the hashcode for this <code>Point2D</code>
Determines whether or not two points are equal
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location of this <code>Point2D</code> to the specified <code>float</code> coordinates
Returns a <code>String</code> that represents the value of this <code>Point2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a <code>String</code> that represents the value of this <code>Point2D</code>
Returns the {@code GraphicsDevice} where the mouse pointer was at the moment this {@code PointerInfo} was created
Returns the {@code Point} that represents the coordinates of the pointer on the screen
Returns an instance of the appropriate interface derived from  <code>CORBA
Refreshes the policy object by re-reading all the policy files
Examines this <code>Policy</code> and returns the Permissions granted to the specified <code>Subject</code> and <code>CodeSource</code>
Returns the parent of this node, or {@code null} if this is the root node
Returns an iterator over the children of this node
Returns the depth of this node in the valid policy tree
Returns the valid policy represented by this node
Returns the set of policy qualifiers associated with the valid policy represented by this node
Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed
Returns the criticality indicator of the certificate policy extension in the most recently processed certificate
Returns the constant value that corresponds to the type of the policy object
Returns a copy of the <code>Policy</code> object
Destroys the <code>Policy</code> object
Returns the {@code policyQualifierId} field of this {@code PolicyQualifierInfo}
Returns the ASN
Returns the ASN
Return a printable representation of this {@code PolicyQualifierInfo}
Check whether the policy has granted a Permission to a ProtectionDomain
Refreshes/reloads the policy configuration
Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain
Resets this <code>Polygon</code> object to an empty polygon
Invalidates or flushes any internally-cached data that depends on the vertex coordinates of this <code>Polygon</code>
Translates the vertices of the <code>Polygon</code> by <code>deltaX</code> along the x axis and by <code>deltaY</code> along the y axis
Appends the specified coordinates to this <code>Polygon</code>
Gets the bounding box of this <code>Polygon</code>
Returns the bounds of this <code>Polygon</code>
Determines whether the specified {@link Point} is inside this <code>Polygon</code>
Determines whether the specified coordinates are inside this <code>Polygon</code>
Determines whether the specified coordinates are contained in this <code>Polygon</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iterator object that iterates along the boundary of this <code>Polygon</code> and provides access to the geometry of the outline of this <code>Polygon</code>
Returns an iterator object that iterates along the boundary of the <code>Shape</code> and provides access to the geometry of the outline of the <code>Shape</code>
Creates and returns a <code>Connection</code> object that is a handle for the physical connection that this <code>PooledConnection</code> object represents
Closes the physical connection that this <code>PooledConnection</code> object represents
Registers the given event listener so that it will be notified when an event occurs on this <code>PooledConnection</code> object
Removes the given event listener from the list of components that will be notified when an event occurs on this <code>PooledConnection</code> object
Registers a <code>StatementEventListener</code> with this <code>PooledConnection</code> object
Removes the specified <code>StatementEventListener</code> from the list of components that will be notified when the driver detects that a <code>PreparedStatement</code> has been closed or is invalid
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Makes the <code>Popup</code> visible
Hides and disposes of the <code>Popup</code>
Sets the <code>PopupFactory</code> that will be used to obtain <code>Popup</code>s
Returns the shared <code>PopupFactory</code> which can be used to obtain <code>Popup</code>s
Creates a <code>Popup</code> for the Component <code>owner</code> containing the Component <code>contents</code>
{@inheritDoc}
Creates the popup menu's peer
Shows the popup menu at the x, y position relative to an origin component
Gets the <code>AccessibleContext</code> associated with this <code>PopupMenu</code>
Get the role of this object
This method is called before the popup menu becomes visible
This method is called before the popup menu becomes invisible Note that a JPopupMenu can become invisible any time
This method is called when the popup menu is canceled
Shows the popup menu
Returns the <code>Popup</code> that will be responsible for displaying the <code>JPopupMenu</code>
Obtains the name of the port
Indicates whether the port is a source or a target for its mixer
Indicates whether this info object specified matches this one
Finalizes the equals method
Finalizes the hashCode method
Provides a <code>String</code> representation of the port
Makes a server object ready to receive remote calls
Returns a stub for the given server object
Deregisters a server object from the runtime, allowing the object to become available for garbage collection
Checks to ensure that an object of a remote or abstract interface type can be cast to a desired type
Makes a Remote object ready for remote communication
Delegation call for {@link javax
Delegation call for {@link javax
Delegation call for {@link javax
Delegation call for {@link javax
Delegation call for {@link javax
Gets the qualified name of the WSDL service name containing  the port being accessed
Gets the qualified name of the WSDL port being accessed
Gets the URI identifying the binding used by the port being accessed
Fetches the current offset within the document
string representation
Returns the owner of the file
Returns the group owner of the file
Returns the permissions of the file
Returns the name of the attribute view
Updates the file permissions
Updates the file group-owner
Returns the {@code String} representation of a set of permissions
Returns the set of permissions corresponding to a given {@code String} representation
Creates a {@link FileAttribute}, encapsulating a copy of the given file permissions, suitable for passing to the {@link java
Evaluates this predicate on the given argument
Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Returns a predicate that represents the logical negation of this predicate
Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Returns a predicate that tests if two arguments are equal according to {@link Objects#equals(Object, Object)}
Get a cloned PrdicatedNodeTest
Get the number of predicates that this walker has
Set the number of predicates that this walker has
Init predicate info
Get a predicate expression at the given index
Get the current sub-context position
Get the current sub-context position
Get the index of the last node that can be itterated to
Get the current sub-context position
Reset the proximity positions counts
Init the proximity position to zero for a forward axes
Count forward one proximity position
Tells if this is a reverse axes
Get which predicate is executing
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Diagnostics
Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator
Get the owning location path iterator
Set the location path iterator owner for this walker
Tell if this expression or it's subexpressions can traverse outside the current subtree
This will traverse the heararchy, calling the visitor for each member
Returns the preference node that emitted the event
Returns the key of the preference that was changed
Returns the new value for the preference
This method gets called when a preference is added, removed or when its value is changed
Returns the preference node from the calling user's preference tree that is associated (by convention) with the specified class's package
Returns the preference node from the system preference tree that is associated (by convention) with the specified class's package
Returns the root preference node for the calling user
Returns the root preference node for the system
Associates the specified value with the specified key in this preference node
Returns the value associated with the specified key in this preference node
Removes the value associated with the specified key in this preference node, if any
Removes all of the preferences (key-value associations) in this preference node
Associates a string representing the specified int value with the specified key in this preference node
Returns the int value represented by the string associated with the specified key in this preference node
Associates a string representing the specified long value with the specified key in this preference node
Returns the long value represented by the string associated with the specified key in this preference node
Associates a string representing the specified boolean value with the specified key in this preference node
Returns the boolean value represented by the string associated with the specified key in this preference node
Associates a string representing the specified float value with the specified key in this preference node
Returns the float value represented by the string associated with the specified key in this preference node
Associates a string representing the specified double value with the specified key in this preference node
Returns the double value represented by the string associated with the specified key in this preference node
Associates a string representing the specified byte array with the specified key in this preference node
Returns the byte array value represented by the string associated with the specified key in this preference node
Returns all of the keys that have an associated value in this preference node
Returns the names of the children of this preference node, relative to this node
Returns the parent of this preference node, or <tt>null</tt> if this is the root
Returns the named preference node in the same tree as this node, creating it and any of its ancestors if they do not already exist
Returns true if the named preference node exists in the same tree as this node
Removes this preference node and all of its descendants, invalidating any preferences contained in the removed nodes
Returns this preference node's name, relative to its parent
Returns this preference node's absolute path name
Returns <tt>true</tt> if this preference node is in the user preference tree, <tt>false</tt> if it's in the system preference tree
Returns a string representation of this preferences node, as if computed by the expression:<tt>(this
Forces any changes in the contents of this preference node and its descendants to the persistent store
Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store (from any VM) prior to the <tt>sync</tt> invocation
Registers the specified listener to receive <i>preference change events</i> for this preference node
Removes the specified preference change listener, so it no longer receives preference change events
Registers the specified listener to receive <i>node change events</i> for this node
Removes the specified <tt>NodeChangeListener</tt>, so it no longer receives change events
Emits on the specified output stream an XML document representing all of the preferences contained in this node (but not its descendants)
Emits an XML document representing all of the preferences contained in this node and all of its descendants
Imports all of the preferences represented by the XML document on the specified input stream
Returns the system root preference node
Returns the user root preference node corresponding to the calling user
For each String s that matches the prefix given by getPropertyName(), apply getOperation() to { suffix( s ), value } and add the result to an Object[] which forms the result of apply
Given a namespace, get the corrisponding prefix
Given a namespace, get the corresponding prefix, based on the context node
Return the base identifier
Given a namespace, get the corrisponding prefix
Given a namespace, get the corrisponding prefix
Return the base identifier
Executes the SQL query in this <code>PreparedStatement</code> object and returns the <code>ResultSet</code> object generated by the query
Executes the SQL statement in this <code>PreparedStatement</code> object, which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code>; or an SQL statement that returns nothing, such as a DDL statement
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to the given Java <code>boolean</code> value
Sets the designated parameter to the given Java <code>byte</code> value
Sets the designated parameter to the given Java <code>short</code> value
Sets the designated parameter to the given Java <code>int</code> value
Sets the designated parameter to the given Java <code>long</code> value
Sets the designated parameter to the given Java <code>float</code> value
Sets the designated parameter to the given Java <code>double</code> value
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given Java <code>String</code> value
Sets the designated parameter to the given Java array of bytes
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Clears the current parameter values immediately
Sets the value of the designated parameter with the given object
<p>Sets the value of the designated parameter using the given object
Executes the SQL statement in this <code>PreparedStatement</code> object, which may be any kind of SQL statement
Adds a set of parameters to this <code>PreparedStatement</code> object's batch of commands
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter to the given  <code>REF(&lt;structured-type&gt;)</code> value
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Retrieves a <code>ResultSetMetaData</code> object that contains information about the columns of the <code>ResultSet</code> object that will be returned when this <code>PreparedStatement</code> object is executed
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter to the given <code>java
Retrieves the number, types and properties of this <code>PreparedStatement</code> object's parameters
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
<p>Sets the value of the designated parameter with the given object
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter to the given input stream
Sets the designated parameter to the given input stream
Sets the designated parameter to the given <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>Reader</code> object
<p>Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Executes the SQL statement in this <code>PreparedStatement</code> object, which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code>; or an SQL statement that returns nothing, such as a DDL statement
Returns the string table for class PresentationDirection
Returns the enumeration value table for class PresentationDirection
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Get the ClassData for a particular class
Given a particular method, return a DynamicMethodMarshaller for that method
Return the registered StubFactoryFactory
Register the StubFactoryFactory
Equivalent to getStubFactoryFactory( true )
Returns the value of the com
Return the standard name of a stub (according to the RMI-IIOP specification and rmic)
Create a stub factory for stubs for the interface whose type is given by className
Return a Tie for the given class
Return whether or not this StubFactoryFactory creates StubFactory instances that create dynamic stubs and ties
Create a new dynamic stub
Return the repository ID information for all Stubs created by this stub factory
Get the class used to create this ClassData instance
Get the IDLNameTranslator for the class used to create this ClassData instance
Return the array of repository IDs for all of the remote interfaces implemented by this class
Get the InvocationHandlerFactory that is used to create an InvocationHandler for dynamic stubs of the type of the ClassData
Get the dictionary for this ClassData instance
Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception
Returns the next {@code int} element in the iteration
Performs the given action for each remaining element until all elements have been processed or the action throws an exception
{@inheritDoc}
{@inheritDoc}
Returns the next {@code long} element in the iteration
Performs the given action for each remaining element until all elements have been processed or the action throws an exception
{@inheritDoc}
{@inheritDoc}
Returns the next {@code double} element in the iteration
Performs the given action for each remaining element until all elements have been processed or the action throws an exception
{@inheritDoc}
{@inheritDoc}
Sets the name of this <code>Principal</code> object to the given value
Gets the name of this <code>Principal</code> object
Check if the specified <code>Subject</code> is implied by this object
Prints the page at the specified index into the specified {@link Graphics} context in the specified format
Called by any of the DTD handlers to enter DTD mode
Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content
Flush the output stream
Returns the <code>PrinterJob</code> that is controlling the current rendering request
Returns whether this printer info attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the <code>IOException</code> that terminated the print job
Returns the the cause of this exception (the <code>IOException</code> that terminated the print job)
Returns the string table for class PrinterIsAcceptingJobs
Returns the enumeration value table for class PrinterIsAcceptingJobs
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Creates and returns a <code>PrinterJob</code> which is initially associated with the default printer
A convenience method which looks up 2D print services
A convenience method which locates factories for stream print services which can image 2D graphics
Returns the service (printer) for this printer job
Associate this PrinterJob with a new PrintService
Calls <code>painter</code> to render the pages
Calls <code>painter</code> to render the pages in the specified <code>format</code>
Queries <code>document</code> for the number of pages and the <code>PageFormat</code> and <code>Printable</code> for each page held in the <code>Pageable</code> instance, <code>document</code>
Presents a dialog to the user for changing the properties of the print job
A convenience method which displays a cross-platform print dialog for all services which are capable of printing 2D graphics using the <code>Pageable</code> interface
Displays a dialog that allows modification of a <code>PageFormat</code> instance
A convenience method which displays a cross-platform page setup dialog
Clones the <code>PageFormat</code> argument and alters the clone to describe a default page size and orientation
Creates a new <code>PageFormat</code> instance and sets it to a default size and orientation
Calculates a <code>PageFormat</code> with values consistent with those supported by the current <code>PrintService</code> for this job (ie the value returned by <code>getPrintService()</code>) and media, printable area and orientation contained in <code>attributes</code>
Returns the clone of <code>page</code> with its settings adjusted to be compatible with the current printer of this <code>PrinterJob</code>
Prints a set of pages
Prints a set of pages using the settings in the attribute set
Sets the number of copies to be printed
Gets the number of copies to be printed
Gets the name of the printing user
Sets the name of the document to be printed
Gets the name of the document to be printed
Cancels a print job that is in progress
Returns <code>true</code> if a print job is in progress, but is going to be cancelled at the next opportunity; otherwise returns <code>false</code>
Returns whether this printer location attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer make and model attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer message from operator attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer more info attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer more info manufacturer attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns whether this printer resolution attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class PrinterState
Returns the enumeration value table for class PrinterState
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the string table for class PrinterStateReason
Returns the enumeration value table for class PrinterStateReason
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Adds the given printer state reason to this printer state reasons attribute, associating it with the given severity level
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Obtain an unmodifiable set view of the individual printer state reason attributes at the given severity level in this PrinterStateReasons attribute
Returns whether this printer name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns the PrintJob object from which this PrintGraphics object originated
Gets a Graphics object that will draw to the next page
Returns the dimensions of the page in pixels
Returns the resolution of the page in pixels per inch
Returns true if the last page will be printed first
Ends the print job and does any necessary cleanup
Ends this print job once it is no longer referenced
Called to notify the client that data has been successfully transferred to the print service, and the client may free local resources allocated for that data
Called to notify the client that the job completed successfully
Called to notify the client that the job failed to complete successfully and will have to be resubmitted
Called to notify the client that the job was canceled by user or program
Called to notify the client that no more events will be delivered
Called to notify the client that some possibly user rectifiable problem occurs (eg printer out of paper)
Determine the Print Job to which this print job event pertains
Determine the printing attributes that changed and their new values
Notifies the listener of a change in some print job attributes
Adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)
Adds all of the elements in the specified set to this attribute
Gets the reason for this event
Determines the <code>DocPrintJob</code> to which this print job event pertains
Called to notify the client that data has been successfully transferred to the print service, and the client may free local resources allocated for that data
Called to notify the client that the job completed successfully
Called to notify the client that the job failed to complete successfully and will have to be resubmitted
Called to notify the client that the job was canceled by a user or a program
Called to notify the client that no more events will be delivered
Called to notify the client that an error has occurred that the user might be able to fix
Returns the string table for class PrintQuality
Returns the enumeration value table for class PrintQuality
Returns the lowest integer value used by class PrintQuality
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)
Adds all of the elements in the specified set to this attribute
Returns a String name for this print service which may be used by applications to request a particular print service
Creates and returns a PrintJob capable of handling data from any of the supported document flavors
Registers a listener for events on this PrintService
Removes the print-service listener from this print service
Obtains this print service's set of printer description attributes giving this Print Service's status
Gets the value of the single specified service attribute
Determines the print data formats a client can specify when setting up a job for this <code>PrintService</code>
Determines if this print service supports a specific <code>DocFlavor</code>
Determines the printing attribute categories a client can specify when setting up a job for this print service
Determines whether a client can specify the given printing attribute category when setting up a job for this print service
Determines this print service's default printing attribute value in the given category
Determines the printing attribute values a client can specify in the given category when setting up a job for this print service
Determines whether a client can specify the given printing attribute value when setting up a job for this Print Service
Identifies the attributes that are unsupported for a print request in the context of a particular DocFlavor
Returns a factory for UI components which allow users to interact with the service in various roles
Determines if two services are referring to the same underlying service
This method should be implemented consistently with <code>equals(Object)</code>
Returns the print service
Determine the printing service attributes that changed and their new values
Called to notify a listener of an event in the print service
Adds the specified attribute value to this attribute set if it is not already present, first removing any existing value in the same attribute category as the specified attribute value (optional operation)
Adds all of the elements in the specified set to this attribute
Locates print services capable of printing the specified {@link DocFlavor}
Locates MultiDoc print Services capable of printing MultiDocs containing all the specified doc flavors
Locates the default print service for this environment
Allows an application to explicitly register a class that implements lookup services
Allows an application to directly register an instance of a class which implements a print service
Locates services that can be positively confirmed to support the combination of attributes and DocFlavors specified
Not called directly by applications
Not called directly by applications
Not called directly by applications
Flushes the stream
Closes the stream
Flushes the stream and checks its error state
Sets the error state of the stream to <code>true</code>
Clears the internal error state of this stream
Writes the specified byte to this stream
Writes <code>len</code> bytes from the specified byte array starting at offset <code>off</code> to this stream
Prints a boolean value
Prints a character
Prints an integer
Prints a long integer
Prints a floating-point number
Prints a double-precision floating-point number
Prints an array of characters
Prints a string
Prints an object
Terminates the current line by writing the line separator string
Prints a boolean and then terminate the line
Prints a character and then terminate the line
Prints an integer and then terminate the line
Prints a long and then terminate the line
Prints a float and then terminate the line
Prints a double and then terminate the line
Prints an array of characters and then terminate the line
Prints a String and then terminate the line
Prints an Object and then terminate the line
A convenience method to write a formatted string to this output stream using the specified format string and arguments
A convenience method to write a formatted string to this output stream using the specified format string and arguments
Writes a formatted string to this output stream using the specified format string and arguments
Writes a formatted string to this output stream using the specified format string and arguments
Appends the specified character sequence to this output stream
Appends a subsequence of the specified character sequence to this output stream
Appends the specified character to this output stream
Flushes the stream
Closes the stream and releases any system resources associated with it
Flushes the stream if it's not closed and checks its error state
Indicates that an error has occurred
Clears the error state of this stream
Writes a single character
Writes A Portion of an array of characters
Writes an array of characters
Writes a portion of a string
Writes a string
Prints a boolean value
Prints a character
Prints an integer
Prints a long integer
Prints a floating-point number
Prints a double-precision floating-point number
Prints an array of characters
Prints a string
Prints an object
Terminates the current line by writing the line separator string
Prints a boolean value and then terminates the line
Prints a character and then terminates the line
Prints an integer and then terminates the line
Prints a long integer and then terminates the line
Prints a floating-point number and then terminates the line
Prints a double-precision floating-point number and then terminates the line
Prints an array of characters and then terminates the line
Prints a String and then terminates the line
Prints an Object and then terminates the line
A convenience method to write a formatted string to this writer using the specified format string and arguments
A convenience method to write a formatted string to this writer using the specified format string and arguments
Writes a formatted string to this writer using the specified format string and arguments
Writes a formatted string to this writer using the specified format string and arguments
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Returns the comparator used to order the elements in this queue, or {@code null} if this queue uses the {@linkplain Comparable natural ordering} of its elements
Always returns {@code Integer
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Returns an array containing all of the elements in this queue
Atomically removes all of the elements from this queue
Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue
Returns a {@link Spliterator} over the elements in this queue
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Removes a single instance of the specified element from this queue, if it is present
Returns {@code true} if this queue contains the specified element
Returns an array containing all of the elements in this queue
Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue
Removes all of the elements from this priority queue
Returns the comparator used to order the elements in this queue, or {@code null} if this queue is sorted according to the {@linkplain Comparable natural ordering} of its elements
Creates a <em><a href="Spliterator
Returns the Class name of the Credential associated with this {@code PrivateCredentialPermission}
Returns the {@code Principal} classes and names associated with this {@code PrivateCredentialPermission}
Checks if this {@code PrivateCredentialPermission} implies the specified {@code Permission}
Checks two {@code PrivateCredentialPermission} objects for equality
Returns the hash code value for this object
Returns the "canonical string representation" of the actions
Return a homogeneous collection of PrivateCredentialPermissions in a {@code PermissionCollection}
This method returns whether the KeyResolverSpi is able to perform the requested action
Method engineLookupAndResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Method engineResolvePrivateKey
Performs the computation
Returns the exception thrown by the privileged computation that resulted in this {@code PrivilegedActionException}
Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this {@code PrivilegedActionException})
Performs the computation
Returns the output stream connected to the normal input of the subprocess
Returns the input stream connected to the normal output of the subprocess
Returns the input stream connected to the error output of the subprocess
Causes the current thread to wait, if necessary, until the process represented by this {@code Process} object has terminated
Causes the current thread to wait, if necessary, until the subprocess represented by this {@code Process} object has terminated, or the specified waiting time elapses
Returns the exit value for the subprocess
Kills the subprocess
Kills the subprocess
Tests whether the subprocess represented by this {@code Process} is alive
Sets this process builder's operating system program and arguments
Sets this process builder's operating system program and arguments
Returns this process builder's operating system program and arguments
Returns a string map view of this process builder's environment
Returns this process builder's working directory
Sets this process builder's working directory
Sets this process builder's standard input source
Sets this process builder's standard output destination
Sets this process builder's standard error destination
Sets this process builder's standard input source to a file
Sets this process builder's standard output destination to a file
Sets this process builder's standard error destination to a file
Returns this process builder's standard input source
Returns this process builder's standard output destination
Returns this process builder's standard error destination
Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process
Tells whether this process builder merges standard error and standard output
Sets this process builder's {@code redirectErrorStream} property
Starts a new process using the attributes of this process builder
Returns the type of this {@code Redirect}
Returns the {@link File} source or destination associated with this redirect, or {@code null} if there is no such file
Returns a redirect to read from the specified file
Returns a redirect to write to the specified file
Returns a redirect to append to the specified file
Compares the specified object with this {@code Redirect} for equality
Returns a hash code value for this {@code Redirect}
Returns the processor-specific options passed to the annotation processing tool
Returns the messager used to report errors, warnings, and other notices
Returns the filer used to create new source, class, or auxiliary files
Returns an implementation of some utility methods for operating on elements
Returns an implementation of some utility methods for operating on types
Returns the source version that any generated {@linkplain Filer#createSourceFile source} and {@linkplain Filer#createClassFile class} files should conform to
Returns the current locale or {@code null} if no locale is in effect
The target of this processing instruction
The content of this processing instruction
The content of this processing instruction
A short integer indicating what type of node this is
Returns the target
A PI's "target" states what processor channel the PI's data should be directed to
A PI's data content tells the processor what we actually want it to do
Change the data content of this PI
Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI
Returns the options recognized by this processor
Returns the names of the annotation types supported by this processor
Returns the latest source version supported by this annotation processor
Initializes the processor with the processing environment
Processes a set of annotation types on type elements originating from the prior round and returns whether or not these annotation types are claimed by this processor
Returns to the tool infrastructure an iterable of suggested completions to an annotation
Get the containing class or interface of this program element
Get the package that this program element is contained in
Get the fully qualified name of this program element
Get the modifier specifier integer
Get modifiers string
Get the annotations of this program element
Return true if this program element is public
Return true if this program element is protected
Return true if this program element is private
Return true if this program element is package private
Return true if this program element is static
Return true if this program element is final
Indicate the progress of the operation being monitored
Indicate that the operation is complete
Returns the minimum value -- the lower end of the progress value
Specifies the minimum value
Returns the maximum value -- the higher end of the progress value
Specifies the maximum value
Returns true if the user hits the Cancel button in the progress dialog
Specifies the amount of time to wait before deciding whether or not to popup a progress monitor
Returns the amount of time this object waits before deciding whether or not to popup a progress monitor
Specifies the amount of time it will take for the popup to appear
Returns the amount of time it will take for the popup to appear
Specifies the additional note that is displayed along with the progress message
Specifies the additional note that is displayed along with the progress message
Gets the <code>AccessibleContext</code> for the <code>ProgressMonitor</code>
Invoked when the target of the listener has changed its state
This method gets called when a bound property is changed
Gets the accessibleName property of this object
Gets the accessibleDescription property of this object
Gets the role of this object
Gets the state set of this object
Gets the Accessible parent of this object
Gets the 0-based index of this object in its accessible parent
Returns the number of accessible children of the object
Returns the specified Accessible child of the object
Gets the locale of the component
Gets the AccessibleComponent associated with this object that has a graphical representation
Gets the AccessibleValue associated with this object that supports a Numerical value
Gets the AccessibleText associated with this object presenting text on the display
Given a point in local coordinates, return the zero-based index of the character under that Point
Determines the bounding box of the character at the given index into the string
Returns the number of characters (valid indicies)
Returns the zero-based offset of the caret
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Returns the AttributeSet for a given character at a given index
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Get the ProgressMonitor object being used by this stream
Overrides <code>FilterInputStream
Overrides <code>FilterInputStream
Overrides <code>FilterInputStream
Overrides <code>FilterInputStream
Overrides <code>FilterInputStream
Overrides <code>FilterInputStream
Calls the <tt>Hashtable</tt> method {@code put}
Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format
Reads a property list (key and element pairs) from the input byte stream
Calls the {@code store(OutputStream out, String comments)} method and suppresses IOExceptions that were thrown
Writes this property list (key and element pairs) in this {@code Properties} table to the output character stream in a format suitable for using the {@link #load(java
Writes this property list (key and element pairs) in this {@code Properties} table to the output stream in a format suitable for loading into a {@code Properties} table using the {@link #load(InputStream) load(InputStream)} method
Loads all of the properties represented by the XML document on the specified input stream into this properties table
Emits an XML document representing all of the properties contained in this table
Emits an XML document representing all of the properties contained in this table, using the specified encoding
Searches for the property with the specified key in this property list
Searches for the property with the specified key in this property list
Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Returns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Prints this property list out to the specified output stream
Prints this property list out to the specified output stream
Gets the programmatic name of the property that was changed
Gets the new value for the property, expressed as an Object
Gets the old value for the property, expressed as an Object
Sets the propagationId object for the event
The "propagationId" field is reserved for future use
Returns a string representation of the object
This method gets called when a bound property is changed
Forwards the property change event to the listener delegate
Returns the name of the named property associated with the listener
Add a PropertyChangeListener to the listener list
Remove a PropertyChangeListener from the listener list
Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener()
Add a PropertyChangeListener for a specific property
Remove a PropertyChangeListener for a specific property
Returns an array of all the listeners which have been associated with the named property
Reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name
Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name
Reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name
Check if there are any listeners for a specific property, including those registered on all properties
Returns the Java type info for the property
Gets the method that should be used to read the property value
Sets the method that should be used to read the property value
Gets the method that should be used to write the property value
Sets the method that should be used to write the property value
Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed
Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed
Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed
Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed
Normally PropertyEditors will be found using the PropertyEditorManager
Gets any explicit PropertyEditor Class that has been registered for this property
Constructs an instance of a property editor using the current property editor class
Compares this <code>PropertyDescriptor</code> against the specified object
Returns a hash code value for the object
Set (or change) the object that is to be edited
Gets the property value
Determines whether this property editor is paintable
Paint a representation of the value into a given area of screen real estate
Returns a fragment of Java code that can be used to set a property to match the editors current state
Gets the property value as text
Set the property value by parsing a given String
If the property value must be one of a set of known tagged values, then this method should return an array of the tags
A PropertyEditor may choose to make available a full custom Component that edits its property value
Determines whether this property editor supports a custom editor
Adds a listener for the value change
Removes a listener for the value change
Registers an editor class to edit values of the given target class
Locate a value editor for a given target type
Gets the package names that will be searched for property editors
Change the list of package names that will be used for          finding property editors
Returns the bean that is used as the source of events
Sets the source bean
Set (or change) the object that is to be edited
Gets the value of the property
Determines whether the class will honor the paintValue method
Paint a representation of the value into a given area of screen real estate
This method is intended for use when generating Java code to set the value of the property
Gets the property value as a string suitable for presentation to a human to edit
Sets the property value by parsing a given String
If the property value must be one of a set of known tagged values, then this method should return an array of the tag values
A PropertyEditor may chose to make available a full custom Component that edits its property value
Determines whether the propertyEditor can provide a custom editor
Adds a listener for the value change
Removes a listener for the value change
Report that we have been modified to any interested listeners
public void reset(){ supportedProps
Return a map from field name to value
Checks if this PropertyPermission object "implies" the specified permission
Checks two PropertyPermission objects for equality
Returns the hash code value for this object
Returns the "canonical string representation" of the actions
Returns a new PermissionCollection object for storing PropertyPermission objects
Returns an <code>Enumeration</code> of the keys contained in this <code>ResourceBundle</code> and its parent bundles
Returns a <code>Set</code> of the keys contained <em>only</em> in this <code>ResourceBundle</code>
Gets the vetoed <code>PropertyChangeEvent</code>
Returns the CodeSource of this domain
Returns the ClassLoader of this domain
Returns an array of principals for this domain
Returns the static permissions granted to this domain
Check and see if this ProtectionDomain implies the permissions expressed in the Permission object
Convert a ProtectionDomain to a String
Returns the name of the protocol family
This method determines the type of an incoming message and dispatches it appropriately
Creates a new provider object
Creates a service delegate object
Creates a service delegate object
Creates an endpoint object with the provided binding and implementation object
Creates and publishes an endpoint object with the specified address and implementation object
read an EndpointReference from the infoset contained in <code>eprInfoset</code>
The getPort method returns a proxy
Factory method to create a <code>W3CEndpointReference</code>
Factory method to create a <code>W3CEndpointReference</code>
Creates and publishes an endpoint object with the specified address, implementation object and web service features
Creates an endpoint object with the provided binding, implementation object and web service features
Creates an endpoint object with the provided binding, implementation class, invoker and web service features
Returns the proxy type
Returns the socket address of the proxy, or {@code null} if its a direct connection
Constructs a string representation of this Proxy
Compares this object against the specified object
Returns a hashcode for this Proxy
Gets the system-wide proxy selector
Sets (or unsets) the system-wide proxy selector
Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at
Called to indicate that a connection could not be established to a proxy/socks server
Returns the message digest algorithm name
Returns the mask generation function algorithm name
Returns the parameters for the mask generation function
Returns the salt length in bits
Returns the value for the trailer field, i
[schema default]
[schema normalized value]
[schema specified]
Determines the extent to which the document has been validated
Determine the validity of the node with respect to the validation being attempted
A list of error codes generated from validation attempts
An item isomorphic to the type definition used to validate this element
If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple thype definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value
An item isomorphic to the attribute declaration used to validate this attribute
Copy PSVI properties from another psvi item
Deep-clone a document, including fixing ownerDoc for the cloned children
Retrieve information describing the abilities of this particular DOM implementation
Create an element with PSVI information
Create an element with PSVI information
Create an attribute with PSVI information
Create an attribute with PSVI information
The configuration used when <code>Document
NON-DOM: Obtain and return the single shared object
Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof
Introduced in DOM Level 2
[schema default]
[schema normalized value]
[schema specified]
Determines the extent to which the document has been validated
Determine the validity of the node with respect to the validation being attempted
A list of error codes generated from validation attempts
[nil]
[notation]
An item isomorphic to the type definition used to validate this element
If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple thype definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value
An item isomorphic to the element declaration used to validate this element
[schema information]
Copy PSVI properties from another psvi item
Provides the post schema validation item for the current element information item
Provides <code>AttributePSVI</code> given the index of an attribute information item in the current element's attribute list
Provides <code>AttributePSVI</code> given the namespace name and the local name of an attribute information item in the current element's attribute list
Normalize a public identifier
Encode a public identifier as a "publicid" URN
Decode a "publicid" URN into a public identifier
Reads the next byte of data from this input stream
Reads up to <code>len</code> bytes of data from this input stream into an array of bytes
Pushes back a byte by copying it to the front of the pushback buffer
Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer
Pushes back an array of bytes by copying it to the front of the pushback buffer
Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
Skips over and discards <code>n</code> bytes of data from this input stream
Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods, which it does not
Marks the current position in this input stream
Repositions this stream to the position at the time the <code>mark</code> method was last called on this input stream
Closes this input stream and releases any system resources associated with the stream
Reads a single character
Reads characters into a portion of an array
Pushes back a single character by copying it to the front of the pushback buffer
Pushes back a portion of an array of characters by copying it to the front of the pushback buffer
Pushes back an array of characters by copying it to the front of the pushback buffer
Tells whether this stream is ready to be read
Marks the present position in the stream
Resets the stream
Tells whether this stream supports the mark() operation, which it does not
Closes the stream and releases any system resources associated with it
Skips characters
Call corresponding visitor method(s)
Call corresponding visitor method(s)
Returns the namespace URI
Returns the namespace prefix
Returns the local part of the qualified name
Return the string representation of the qualified name, using the prefix if available, or the '{ns}foo' notation if not
Return the string representation of the qualified name using the the '{ns}foo' notation
Get the namespace of the qualified name
Get the local part of the qualified name
Return the cached hashcode of the qualified name
Override equals and agree that we're equal if the passed object is a string and it matches the name of the arg
Override equals and agree that we're equal if the passed object is a QName and it matches the name of the arg
Given a string, create and return a QName object
This function tells if a raw attribute name is a xmlns attribute
This function tells if a raw attribute name is a xmlns attribute
Returns the local name of the given node
Returns the local name of the given node
Returns the X coordinate of the start point in <code>double</code> in precision
Returns the Y coordinate of the start point in <code>double</code> precision
Returns the start point
Returns the X coordinate of the control point in <code>double</code> precision
Returns the Y coordinate of the control point in <code>double</code> precision
Returns the control point
Returns the X coordinate of the end point in <code>double</code> precision
Returns the Y coordinate of the end point in <code>double</code> precision
Returns the end point
Sets the location of the end points and control point of this curve to the specified <code>double</code> coordinates
Sets the location of the end points and control points of this <code>QuadCurve2D</code> to the <code>double</code> coordinates at the specified offset in the specified array
Sets the location of the end points and control point of this <code>QuadCurve2D</code> to the specified <code>Point2D</code> coordinates
Sets the location of the end points and control points of this <code>QuadCurve2D</code> to the coordinates of the <code>Point2D</code> objects at the specified offset in the specified array
Sets the location of the end points and control point of this <code>QuadCurve2D</code> to the same as those in the specified <code>QuadCurve2D</code>
Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points
Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points
Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index
Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index
Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this <code>QuadCurve2D</code>
Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this <code>QuadCurve2D</code>
Subdivides this <code>QuadCurve2D</code> and stores the resulting two subdivided curves into the <code>left</code> and <code>right</code> curve parameters
Subdivides the quadratic curve specified by the <code>src</code> parameter and stores the resulting two subdivided curves into the <code>left</code> and <code>right</code> curve parameters
Subdivides the quadratic curve specified by the coordinates stored in the <code>src</code> array at indices <code>srcoff</code> through <code>srcoff</code>&nbsp;+&nbsp;5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
Solves the quadratic whose coefficients are in the <code>eqn</code> array and places the non-complex roots back into the same array, returning the number of roots
Solves the quadratic whose coefficients are in the <code>eqn</code> array and places the non-complex roots into the <code>res</code> array, returning the number of roots
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iteration object that defines the boundary of the shape of this <code>QuadCurve2D</code>
Returns an iteration object that defines the boundary of the flattened shape of this <code>QuadCurve2D</code>
Creates a new object of the same class and with the same contents as this object
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location of the end points and control point of this curve to the specified {@code float} coordinates
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the fully qualified name of an element
Returns a query expression that is the conjunction of two other query expressions
Returns a query expression that is the disjunction of two other query expressions
Returns a query expression that represents a "greater than" constraint on two values
Returns a query expression that represents a "greater than or equal to" constraint on two values
Returns a query expression that represents a "less than or equal to" constraint on two values
Returns a query expression that represents a "less than" constraint on two values
Returns a query expression that represents an equality constraint on two values
Returns a query expression that represents the constraint that one value is between two other values
Returns a query expression that represents a matching constraint on a string argument
<p>Returns a new attribute expression
<p>Returns a new qualified attribute expression
<p>Returns a new class attribute expression which can be used in any Query call that expects a ValueExp
Returns a constraint that is the negation of its argument
Returns an expression constraining a value to be one of an explicit list
Returns a new string expression
Returns a numeric value expression that can be used in any Query call that expects a ValueExp
Returns a numeric value expression that can be used in any Query call that expects a ValueExp
Returns a numeric value expression that can be used in any Query call that expects a ValueExp
Returns a numeric value expression that can be used in any Query call that expects a ValueExp
Returns a numeric value expression that can be used in any Query call that expects a ValueExp
Returns a boolean value expression that can be used in any Query call that expects a ValueExp
Returns a binary expression representing the sum of two numeric values, or the concatenation of two string values
Returns a binary expression representing the product of two numeric values
Returns a binary expression representing the difference between two numeric values
Returns a binary expression representing the quotient of two numeric values
Returns a query expression that represents a matching constraint on a string argument
Returns a query expression that represents a matching constraint on a string argument
Returns a query expression that represents a matching constraint on a string argument
Returns a query expression that represents an inheritance constraint on an MBean class
<p>Sets the MBean server on which the query is to be performed
<p>Return the MBean server that was most recently given to the {@link #setMBeanServer setMBeanServer} method by this thread
Applies the QueryExp on an MBean
Sets the MBean server on which the query is to be performed
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning {@code true} upon success and throwing an {@code IllegalStateException} if no space is currently available
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
Retrieves and removes the head of this queue
Retrieves and removes the head of this queue, or returns {@code null} if this queue is empty
Retrieves, but does not remove, the head of this queue
Retrieves, but does not remove, the head of this queue, or returns {@code null} if this queue is empty
Returns whether this queued job count attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Apply the operation to two operands, and return the result
Creates and returns a {@link PaintContext} used to generate a circular radial color gradient pattern
Returns a copy of the center point of the radial gradient
Returns a copy of the focus point of the radial gradient
Returns the radius of the circle defining the radial gradient
Sets the seed of this random number generator using a single {@code long} seed
Generates the next pseudorandom number
Generates random bytes and places them into a user-supplied byte array
Returns the next pseudorandom, uniformly distributed {@code int} value from this random number generator's sequence
Returns a pseudorandom, uniformly distributed {@code int} value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence
Returns the next pseudorandom, uniformly distributed {@code long} value from this random number generator's sequence
Returns the next pseudorandom, uniformly distributed {@code boolean} value from this random number generator's sequence
Returns the next pseudorandom, uniformly distributed {@code float} value between {@code 0
Returns the next pseudorandom, uniformly distributed {@code double} value between {@code 0
Returns the next pseudorandom, Gaussian ("normally") distributed {@code double} value with mean {@code 0
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values
Returns an effectively unlimited stream of pseudorandom {@code int} values
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code int} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long} values
Returns an effectively unlimited stream of pseudorandom {@code long} values
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long}, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code long} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values, each between zero (inclusive) and one (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values, each between zero (inclusive) and one (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns the opaque file descriptor object associated with this stream
Returns the unique {@link java
Reads a byte of data from this file
Reads up to {@code len} bytes of data from this file into an array of bytes
Reads up to {@code b
Reads {@code b
Reads exactly {@code len} bytes from this file into the byte array, starting at the current file pointer
Attempts to skip over {@code n} bytes of input discarding the skipped bytes
Writes the specified byte to this file
Writes {@code b
Writes {@code len} bytes from the specified byte array starting at offset {@code off} to this file
Returns the current offset in this file
Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs
Returns the length of this file
Sets the length of this file
Closes this random access file stream and releases any system resources associated with the stream
Reads a {@code boolean} from this file
Reads a signed eight-bit value from this file
Reads an unsigned eight-bit number from this file
Reads a signed 16-bit number from this file
Reads an unsigned 16-bit number from this file
Reads a character from this file
Reads a signed 32-bit integer from this file
Reads a signed 64-bit integer from this file
Reads a {@code float} from this file
Reads a {@code double} from this file
Reads the next line of text from this file
Reads in a string from this file
Writes a {@code boolean} to the file as a one-byte value
Writes a {@code byte} to the file as a one-byte value
Writes a {@code short} to the file as two bytes, high byte first
Writes a {@code char} to the file as a two-byte value, high byte first
Writes an {@code int} to the file as four bytes, high byte first
Writes a {@code long} to the file as eight bytes, high byte first
Converts the float argument to an {@code int} using the {@code floatToIntBits} method in class {@code Float}, and then writes that {@code int} value to the file as a four-byte quantity, high byte first
Converts the double argument to a {@code long} using the {@code doubleToLongBits} method in class {@code Double}, and then writes that {@code long} value to the file as an eight-byte quantity, high byte first
Writes the string to the file as a sequence of bytes
Writes a string to the file as a sequence of characters
Writes a string to the file using <a href="DataInput
Node within which the Range begins
Offset within the starting node of the Range
Node within which the Range ends
Offset within the ending node of the Range
TRUE if the Range is collapsed
The deepest common ancestor container of the Range's two boundary-points
Sets the attributes describing the start of the Range
Sets the attributes describing the end of a Range
Sets the start position to be before a node
Sets the start position to be after a node
Sets the end position to be before a node
Sets the end of a Range to be after a node
Collapse a Range onto one of its boundary-points
Select a node and its contents
Select the contents within a node
Compare the boundary-points of two Ranges in a document
Removes the contents of a Range from the containing document or document fragment without returning a reference to the removed content
Moves the contents of a Range from the containing document or document fragment to a new DocumentFragment
Duplicates the contents of a Range
Inserts a node into the Document or DocumentFragment at the start of the Range
Reparents the contents of the Range to the given node and inserts the node at the position of the start of the Range
Produces a new Range whose boundary-points are equal to the boundary-points of the Range
Returns the contents of a Range as a string
Called to indicate that the Range is no longer in use and that the implementation may relinquish any resources associated with this Range
This function is called from the DOM
Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, and number of bands
Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, scanline stride, pixel stride, and band offsets
Creates a Raster based on a BandedSampleModel with the specified data type, width, height, and number of bands
Creates a Raster based on a BandedSampleModel with the specified data type, width, height, scanline stride, bank indices and band offsets
Creates a Raster based on a SinglePixelPackedSampleModel with the specified data type, width, height, and band masks
Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band
Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets
Creates a Raster based on a BandedSampleModel with the specified DataBuffer, width, height, scanline stride, bank indices, and band offsets
Creates a Raster based on a SinglePixelPackedSampleModel with the specified DataBuffer, width, height, scanline stride, and band masks
Creates a Raster based on a MultiPixelPackedSampleModel with the specified DataBuffer, width, height, and bits per pixel
Creates a Raster with the specified SampleModel and DataBuffer
Creates a WritableRaster with the specified SampleModel
Creates a WritableRaster with the specified SampleModel and DataBuffer
Returns the parent Raster (if any) of this Raster or null
Returns the X translation from the coordinate system of the SampleModel to that of the Raster
Returns the Y translation from the coordinate system of the SampleModel to that of the Raster
Create a compatible WritableRaster the same size as this Raster with the same SampleModel and a new initialized DataBuffer
Create a compatible WritableRaster with the specified size, a new SampleModel, and a new initialized DataBuffer
Create a compatible WritableRaster with location (minX, minY) and size (width, height) specified by rect, a new SampleModel, and a new initialized DataBuffer
Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer
Create a Raster with the same size, SampleModel and DataBuffer as this one, but with a different location
Returns a new Raster which shares all or part of this Raster's DataBuffer
Returns the bounding Rectangle of this Raster
Returns the minimum valid X coordinate of the Raster
Returns the minimum valid Y coordinate of the Raster
Returns the width in pixels of the Raster
Returns the height in pixels of the Raster
Returns the number of bands (samples per pixel) in this Raster
Returns the number of data elements needed to transfer one pixel  via the getDataElements and setDataElements methods
Returns the TransferType used to transfer pixels via the  getDataElements and setDataElements methods
Returns the DataBuffer associated with this Raster
Returns the SampleModel that describes the layout of the image data
Returns data for a single pixel in a primitive array of type TransferType
Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType
Returns the samples in an array of int for the specified pixel
Returns the samples in an array of float for the specified pixel
Returns the samples in an array of double for the specified pixel
Returns an int array containing all samples for a rectangle of pixels, one sample per array element
Returns a float array containing all samples for a rectangle of pixels, one sample per array element
Returns a double array containing all samples for a rectangle of pixels, one sample per array element
Returns the sample in a specified band for the pixel located at (x,y) as an int
Returns the sample in a specified band for the pixel located at (x,y) as a float
Returns the sample in a specified band for a pixel located at (x,y) as a double
Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element
Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element
Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element
Performs a single-input/single-output operation from a source Raster to a destination Raster
Returns the bounding box of the filtered destination Raster
Creates a zeroed destination Raster with the correct size and number of bands
Returns the location of the destination point given a point in the source Raster
Returns the rendering hints for this RasterOp
Serialize the characters without escaping
Retrieves one of this Rdn's value
Retrieves one of this Rdn's type
Returns this Rdn as a string represented in a format defined by <a href="http://www
Compares this Rdn with the specified Object for order
Compares the specified Object with this Rdn for equality
Returns the hash code of this RDN
Retrieves the {@link javax
Retrieves the number of attribute type/value pairs in this Rdn
Given the value of an attribute, returns a string escaped according to the rules specified in <a href="http://www
Given an attribute value string formated according to the rules specified in <a href="http://www
Converts a 'simplified' regular expression to a full regular expression
Sets match behaviour flags which alter the way RE does matching
Returns the current match behaviour flags
Sets the current regular expression program used by this matcher object
Returns the current regular expression program in use by this matcher object
Returns the number of parenthesized subexpressions available after a successful match
Gets the contents of a parenthesized subexpression after a successful match
Returns the start index of a given paren level
Returns the end index of a given paren level
Returns the length of a given paren level
Sets the start of a paren level
Sets the end of a paren level
Throws an Error representing an internal error condition probably resulting from a bug in the regular expression compiler (or possibly data corruption)
Try to match a string against a subset of nodes in the program
Match the current regular expression program against the current input string, starting at index i of the input string
Matches the current regular expression program against a character array, starting at a given index
Matches the current regular expression program against a character array, starting at a given index
Matches the current regular expression program against a String
Splits a string into an array of strings on regular expression boundaries
Substitutes a string for this regular expression in another string
Substitutes a string for this regular expression in another string
Returns an array of Strings, whose toString representation matches a regular expression
Attempts to read characters into the specified character buffer
Reads a sequence of bytes from this channel into the given buffer
Attempts to read characters into the specified character buffer
Reads a single character
Reads characters into an array
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark() operation
Marks the present position in the stream
Resets the stream
Closes the stream and releases any system resources associated with it
A utility method that computes the exact set of destination pixels that will be written during a particular decoding pass
Returns the lock used for reading
Returns the lock used for writing
Translates a real into an object of internal type <code>type</code>
Expects a real on the stack and pushes its string value by calling <code>Double
Expects a real on the stack and pushes a 0 if that number is 0
Expects a real on the stack and pushes a truncated integer value
Translates a real into a non-synthesized boolean
Expects a double on the stack and pushes a boxed double
Translates a real into the Java type denoted by <code>clazz</code>
Translates an external (primitive) Java type into a real
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Sends a MIDI message and time-stamp to this receiver
Indicates that the application has finished using the receiver, and that limited resources it requires may be released or made available
Main application entrypoint
Compiles a regular expression pattern into a program runnable by the pattern matcher class 'RE'
This attribute is used for the top of the rect
This attribute is used for the right of the rect
This attribute is used for the bottom of the rect
This attribute is used for the left of the rect
Returns the X coordinate of the bounding <code>Rectangle</code> in <code>double</code> precision
Returns the Y coordinate of the bounding <code>Rectangle</code> in <code>double</code> precision
Returns the width of the bounding <code>Rectangle</code> in <code>double</code> precision
Returns the height of the bounding <code>Rectangle</code> in <code>double</code> precision
Gets the bounding <code>Rectangle</code> of this <code>Rectangle</code>
{@inheritDoc}
Sets the bounding <code>Rectangle</code> of this <code>Rectangle</code> to match the specified <code>Rectangle</code>
Sets the bounding <code>Rectangle</code> of this <code>Rectangle</code> to the specified <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code>
Sets the bounds of this {@code Rectangle} to the integer bounds which encompass the specified {@code x}, {@code y}, {@code width}, and {@code height}
Sets the bounding <code>Rectangle</code> of this <code>Rectangle</code> to the specified <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code>
Returns the location of this <code>Rectangle</code>
Moves this <code>Rectangle</code> to the specified location
Moves this <code>Rectangle</code> to the specified location
Moves this <code>Rectangle</code> to the specified location
Translates this <code>Rectangle</code> the indicated distance, to the right along the X coordinate axis, and downward along the Y coordinate axis
Gets the size of this <code>Rectangle</code>, represented by the returned <code>Dimension</code>
Sets the size of this <code>Rectangle</code> to match the specified <code>Dimension</code>
Sets the size of this <code>Rectangle</code> to the specified width and height
Sets the size of this <code>Rectangle</code> to the specified width and height
Checks whether or not this <code>Rectangle</code> contains the specified <code>Point</code>
Checks whether or not this <code>Rectangle</code> contains the point at the specified location {@code (x,y)}
Checks whether or not this <code>Rectangle</code> entirely contains the specified <code>Rectangle</code>
Checks whether this <code>Rectangle</code> entirely contains the <code>Rectangle</code> at the specified location {@code (X,Y)} with the specified dimensions {@code (W,H)}
Checks whether or not this <code>Rectangle</code> contains the point at the specified location {@code (X,Y)}
Determines whether or not this <code>Rectangle</code> and the specified <code>Rectangle</code> intersect
Computes the intersection of this <code>Rectangle</code> with the specified <code>Rectangle</code>
Computes the union of this <code>Rectangle</code> with the specified <code>Rectangle</code>
Adds a point, specified by the integer arguments {@code newx,newy} to the bounds of this {@code Rectangle}
Adds the specified {@code Point} to the bounds of this {@code Rectangle}
Adds a <code>Rectangle</code> to this <code>Rectangle</code>
Resizes the <code>Rectangle</code> both horizontally and vertically
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Checks whether two rectangles are equal
Returns a <code>String</code> representing this <code>Rectangle</code> and its values
Sets the location and size of this <code>Rectangle2D</code> to the specified <code>double</code> values
Sets this <code>Rectangle2D</code> to be the same as the specified <code>Rectangle2D</code>
Tests if the specified line segment intersects the interior of this <code>Rectangle2D</code>
Tests if the specified line segment intersects the interior of this <code>Rectangle2D</code>
Determines where the specified coordinates lie with respect to this <code>Rectangle2D</code>
Determines where the specified {@link Point2D} lies with respect to this <code>Rectangle2D</code>
Sets the location and size of the outer bounds of this <code>Rectangle2D</code> to the specified rectangular values
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a new <code>Rectangle2D</code> object representing the intersection of this <code>Rectangle2D</code> with the specified <code>Rectangle2D</code>
Intersects the pair of specified source <code>Rectangle2D</code> objects and puts the result into the specified destination <code>Rectangle2D</code> object
Returns a new <code>Rectangle2D</code> object representing the union of this <code>Rectangle2D</code> with the specified <code>Rectangle2D</code>
Unions the pair of source <code>Rectangle2D</code> objects and puts the result into the specified destination <code>Rectangle2D</code> object
Adds a point, specified by the double precision arguments <code>newx</code> and <code>newy</code>, to this <code>Rectangle2D</code>
Adds the <code>Point2D</code> object <code>pt</code> to this <code>Rectangle2D</code>
Adds a <code>Rectangle2D</code> object to this <code>Rectangle2D</code>
Returns an iteration object that defines the boundary of this <code>Rectangle2D</code>
Returns an iteration object that defines the boundary of the flattened <code>Rectangle2D</code>
Returns the hashcode for this <code>Rectangle2D</code>
Determines whether or not the specified <code>Object</code> is equal to this <code>Rectangle2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location and size of this <code>Rectangle2D</code> to the specified <code>float</code> values
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the <code>String</code> representation of this <code>Rectangle2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the <code>String</code> representation of this <code>Rectangle2D</code>
Returns the X coordinate of the upper-left corner of the framing rectangle in <code>double</code> precision
Returns the Y coordinate of the upper-left corner of the framing rectangle in <code>double</code> precision
Returns the width of the framing rectangle in <code>double</code> precision
Returns the height of the framing rectangle in <code>double</code> precision
Returns the smallest X coordinate of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the smallest Y coordinate of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the largest X coordinate of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the largest Y coordinate of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the X coordinate of the center of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the Y coordinate of the center of the framing rectangle of the <code>Shape</code> in <code>double</code> precision
Returns the framing {@link Rectangle2D} that defines the overall shape of this object
Determines whether the <code>RectangularShape</code> is empty
Sets the location and size of the framing rectangle of this <code>Shape</code> to the specified rectangular values
Sets the location and size of the framing rectangle of this <code>Shape</code> to the specified {@link Point2D} and {@link Dimension2D}, respectively
Sets the framing rectangle of this <code>Shape</code> to be the specified <code>Rectangle2D</code>
Sets the diagonal of the framing rectangle of this <code>Shape</code> based on the two specified coordinates
Sets the diagonal of the framing rectangle of this <code>Shape</code> based on two specified <code>Point2D</code> objects
Sets the framing rectangle of this <code>Shape</code> based on the specified center point coordinates and corner point coordinates
Sets the framing rectangle of this <code>Shape</code> based on a specified center <code>Point2D</code> and corner <code>Point2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iterator object that iterates along the <code>Shape</code> object's boundary and provides access to a flattened view of the outline of the <code>Shape</code> object's geometry
Creates a new object of the same class and with the same contents as this object
The main computation performed by this task
Always returns {@code null}
Requires null completion value
Implements execution conventions for RecursiveActions
The main computation performed by this task
Implements execution conventions for RecursiveTask
Dumps the current program to a PrintWriter
Acquires the lock
Acquires the lock unless the current thread is {@linkplain Thread#interrupt interrupted}
Acquires the lock only if it is not held by another thread at the time of invocation
Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Attempts to release this lock
Returns a {@link Condition} instance for use with this {@link Lock} instance
Queries the number of holds on this lock by the current thread
Queries if this lock is held by the current thread
Queries if this lock is held by any thread
Returns {@code true} if this lock has fairness set true
Returns the thread that currently owns this lock, or {@code null} if not owned
Queries whether any threads are waiting to acquire this lock
Queries whether the given thread is waiting to acquire this lock
Returns an estimate of the number of threads waiting to acquire this lock
Returns a collection containing threads that may be waiting to acquire this lock
Queries whether any threads are waiting on the given condition associated with this lock
Returns an estimate of the number of threads waiting on the given condition associated with this lock
Returns a collection containing those threads that may be waiting on the given condition associated with this lock
Returns a string identifying this lock, as well as its lock state
Returns {@code true} if this lock has fairness set true
Returns the thread that currently owns the write lock, or {@code null} if not owned
Queries the number of read locks held for this lock
Queries if the write lock is held by any thread
Queries if the write lock is held by the current thread
Queries the number of reentrant write holds on this lock by the current thread
Queries the number of reentrant read holds on this lock by the current thread
Returns a collection containing threads that may be waiting to acquire the write lock
Returns a collection containing threads that may be waiting to acquire the read lock
Queries whether any threads are waiting to acquire the read or write lock
Queries whether the given thread is waiting to acquire either the read or write lock
Returns an estimate of the number of threads waiting to acquire either the read or write lock
Returns a collection containing threads that may be waiting to acquire either the read or write lock
Queries whether any threads are waiting on the given condition associated with the write lock
Returns an estimate of the number of threads waiting on the given condition associated with the write lock
Returns a collection containing those threads that may be waiting on the given condition associated with the write lock
Returns a string identifying this lock, as well as its lock state
Acquires the read lock
Acquires the read lock unless the current thread is {@linkplain Thread#interrupt interrupted}
Acquires the read lock only if the write lock is not held by another thread at the time of invocation
Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Attempts to release this lock
Throws {@code UnsupportedOperationException} because {@code ReadLocks} do not support conditions
Returns a string identifying this lock, as well as its lock state
Acquires the write lock
Acquires the write lock unless the current thread is {@linkplain Thread#interrupt interrupted}
Acquires the write lock only if it is not held by another thread at the time of invocation
Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Attempts to release this lock
Returns a {@link Condition} instance for use with this {@link Lock} instance
Returns a string identifying this lock, as well as its lock state
Queries if this write lock is held by the current thread
Queries the number of holds on this write lock by the current thread
Retrieves the fully-qualified SQL name of the SQL structured type that this <code>Ref</code> object references
Retrieves the referenced object and maps it to a Java type using the given type map
Retrieves the SQL structured type instance referenced by this <code>Ref</code> object
Sets the structured type value that this <code>Ref</code> object references to the given instance of <code>Object</code>
Retrieves the address type of this address
Retrieves the contents of this address
Determines whether obj is equal to this RefAddr
Computes the hash code of this address using its address type and contents
Generates the string representation of this address
Returns this reference object's referent
Clears this reference object
Tells whether or not this reference object has been enqueued, either by the program or by the garbage collector
Adds this reference object to the queue with which it is registered, if any
Retrieves the Reference of this object
Adds a reference to this reference list
Removes a reference from the <code>ReferenceList</code>
Returns the size of the <code>ReferenceList</code>
Indicates if the <code>ReferenceList</code> is empty
Returns an <code>Iterator</code> over all the <code>Reference</code>s contained in this <code>ReferenceList</code>
<code>DataReference</code> factory method
<code>KeyReference</code> factory method
Returns a read-only iterator over the nodes contained in this <code>NodeSetData</code> in <a href="http://www
Returns the input stream of this <code>ReferenceOctetStreamData</code>
Returns the URI String identifying the data object represented by this <code>ReferenceOctetStreamData</code>
Returns the MIME type associated with the data object represented by this <code>ReferenceOctetStreamData</code>
Polls this queue to see if a reference object is available
Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires
Removes the next reference object in this queue, blocking until one becomes available
Returns the string table for class ReferenceUriSchemesSupported
Returns the enumeration value table for class ReferenceUriSchemesSupported
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Retrieves information (such as URLs) related to this referral
Retrieves the context at which to continue the method
Retrieves the context at which to continue the method using environment properties
Discards the referral about to be processed
Retries the referral currently being processed
Returns the actual {@link Exception} thrown
Returns the actual {@link Exception} thrown
Determine if this {@code Object} is current
Update or extend the validity period for this {@code Object}
Returns true if the Region is a subregion of a Component, otherwise false
Returns the name of the region
Returns the name of the Region
Called when an object implementing this interface is added to the given <code>category</code> of the given <code>registry</code>
Called when an object implementing this interface is removed from the given <code>category</code> of the given <code>registry</code>
Returns the remote reference bound to the specified <code>name</code> in this registry
Binds a remote reference to the specified <code>name</code> in this registry
Removes the binding for the specified <code>name</code> in this registry
Replaces the binding for the specified <code>name</code> in this registry with the supplied remote reference
Returns an array of the names bound in this registry
Returns a "stub" for contacting a remote registry on the specified host and port
Constructs and exports a Registry on the specified port
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not
Represents this instence in String
Returns a option string
Return true if patterns are the same and the options are equivalent
Return the number of regular expression groups
Method that may be invoked by a {@link ThreadPoolExecutor} when {@link ThreadPoolExecutor#execute execute} cannot accept a task
Retrieves role value for given role name
Retrieves values of roles with given names
Returns the number of MBeans currently referenced in the given role
Returns all roles present in the relation
Returns all roles in the relation without checking read mode
Sets the given role
Sets the given roles
Callback used by the Relation Service when a MBean referenced in a role is unregistered
Retrieves MBeans referenced in the various roles of the relation
Returns name of associated relation type
Returns ObjectName of the Relation Service handling the relation
Returns relation identifier (used to uniquely identify the relation inside the Relation Service)
Returns the relation identifier of created/removed/updated relation
Returns the relation type name of created/removed/updated relation
Returns the ObjectName of the created/removed/updated relation
Returns the list of ObjectNames of MBeans expected to be unregistered due to a relation removal (only for relation removal)
Returns name of updated role of updated relation (only for role update)
Returns old value of updated role (only for role update)
Returns new value of updated role (only for role update)
Checks if the Relation Service is active
Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called
Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called
Creates a relation type (a RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service
Adds given object as a relation type
Retrieves names of all known relation types
Retrieves list of role infos (RoleInfo objects) of a given relation type
Retrieves role info for given role name of a given relation type
Removes given relation type from Relation Service
Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service
Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service
If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean
Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service
Checks if there is a relation identified in Relation Service with given relation id
Returns all the relation ids for all the relations handled by the Relation Service
Checks if given Role can be read in a relation of the given type
Checks if given Role can be set in a relation of given type
Sends a notification (RelationNotification) for a relation creation
Sends a notification (RelationNotification) for a role update in the given relation
Sends a notification (RelationNotification) for a relation removal
Handles update of the Relation Service role map for the update of given role in given relation
Removes given relation from the Relation Service
Purges the relations
Retrieves the relations where a given MBean is referenced
Retrieves the MBeans associated to given one in a relation
Returns the relation ids for relations of the given type
Retrieves role value for given role name in given relation
Retrieves values of roles with given names in given relation
Returns all roles present in the relation
Retrieves the number of MBeans currently referenced in the given role
Sets the given role in given relation
Sets the given roles in given relation
Retrieves MBeans referenced in the various roles of the relation
Returns name of associated relation type for given relation
Invoked when a JMX notification occurs
Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent
Checks if the Relation Service is active
Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called
Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called
Creates a relation type (RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service
Adds given object as a relation type
Retrieves names of all known relation types
Retrieves list of role infos (RoleInfo objects) of a given relation type
Retrieves role info for given role of a given relation type
Removes given relation type from Relation Service
Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service
Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service
If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean
Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service
Checks if there is a relation identified in Relation Service with given relation id
Returns all the relation ids for all the relations handled by the Relation Service
Checks if given Role can be read in a relation of the given type
Checks if given Role can be set in a relation of given type
Sends a notification (RelationNotification) for a relation creation
Sends a notification (RelationNotification) for a role update in the given relation
Sends a notification (RelationNotification) for a relation removal
Handles update of the Relation Service role map for the update of given role in given relation
Removes given relation from the Relation Service
Purges the relations
Retrieves the relations where a given MBean is referenced
Retrieves the MBeans associated to given one in a relation
Returns the relation ids for relations of the given type
Retrieves role value for given role name in given relation
Retrieves values of roles with given names in given relation
Returns all roles present in the relation
Retrieves the number of MBeans currently referenced in the given role
Sets the given role in given relation
Sets the given roles in given relation
Retrieves MBeans referenced in the various roles of the relation
Returns name of associated relation type for given relation
Retrieves role value for given role name
Retrieves values of roles with given names
Returns all roles present in the relation
Returns all roles in the relation without checking read mode
Returns the number of MBeans currently referenced in the given role
Sets the given role
Sets the given roles
Callback used by the Relation Service when a MBean referenced in a role is unregistered
Retrieves MBeans referenced in the various roles of the relation
Returns name of associated relation type
Returns ObjectName of the Relation Service handling the relation
Returns relation identifier (used to uniquely identify the relation inside the Relation Service)
Returns an internal flag specifying if the object is still handled by the Relation Service
Returns an internal flag specifying if the object is still handled by the Relation Service
<p>Specifies whether this relation is handled by the Relation Service
Returns the relation type name
Returns the list of role definitions (ArrayList of RoleInfo objects)
Returns the role info (RoleInfo object) for the given role info name (null if not found)
Returns the relation type name
Returns the list of role definitions (ArrayList of RoleInfo objects)
Returns the role info (RoleInfo object) for the given role info name (null if not found)
Add a role info
Return the output stream the stub/skeleton should put arguments/results into
Release the output stream; in some transports this would release the stream
Get the InputStream that the stub/skeleton should get results/arguments from
Release the input stream
Returns an output stream (may put out header information relating to the success of the call)
Do whatever it takes to execute the call
Allow cleanup after the remote call has completed
Returns the detail message, including the message from the cause, if any, of this exception
Returns the cause of this exception
Returns the remote reference for the remote object
Returns the stub for the remote object <code>obj</code> passed as a parameter
Returns a hashcode for a remote object
Compares two remote objects for equality
Returns a String that represents the value of this remote object
Processes a method invocation made on the encapsulating proxy instance, <code>proxy</code>, and returns the result
Invoke a method
Creates an appropriate call object for a new remote method invocation on this object
Executes the remote call
Allows the remote reference to clean up (or reuse) the connection
Returns the class name of the ref type to be serialized onto the stream 'out'
Returns a hashcode for a remote object
Compares two remote objects for equality
Returns a String that represents the reference of this remote object
Returns a string representation of the client host for the remote method invocation being processed in the current thread
Log RMI calls to the output stream <code>out</code>
Returns stream for the RMI call log
Throws {@link UnsupportedOperationException}
Returns a vector of RenderableImages that are the sources of image data for this RenderableImage
Gets a property from the property set of this image
Returns a list of names recognized by getProperty
Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results
Gets the width in user coordinate space
Gets the height in user coordinate space
Gets the minimum X coordinate of the rendering-independent image data
Gets the minimum Y coordinate of the rendering-independent image data
Creates a RenderedImage instance of this image with width w, and height h in pixels
Returnd a RenderedImage instance of this image with a default width and height in pixels
Creates a RenderedImage that represented a rendering of this image using a given RenderContext
Returns a vector of RenderableImages that are the sources of image data for this RenderableImage
Gets a property from the property set of this image
Return a list of names recognized by getProperty
Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results
Gets the width in user coordinate space
Gets the height in user coordinate space
Gets the minimum X coordinate of the rendering-independent image data
Gets the minimum Y coordinate of the rendering-independent image data
Change the current ParameterBlock of the operation, allowing editing of image rendering chains
Returns a reference to the current parameter block
Creates a RenderedImage instance of this image with width w, and height h in pixels
Gets a RenderedImage instance of this image with a default width and height in pixels
Creates a RenderedImage which represents this RenderableImageOp (including its Renderable sources) rendered according to the given RenderContext
Sets a new RenderContext to use for the next startProduction() call
Adds an ImageConsumer to the list of consumers interested in data for this image
Determine if an ImageConsumer is on the list of consumers currently interested in data for this image
Remove an ImageConsumer from the list of consumers interested in data for this image
Adds an ImageConsumer to the list of consumers interested in data for this image, and immediately starts delivery of the image data through the ImageConsumer interface
Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order
The runnable method for this class
Gets the rendering hints of this <code>RenderContext</code>
Sets the rendering hints of this <code>RenderContext</code>
Sets the current user-to-device AffineTransform contained in the RenderContext to a given transform
Modifies the current user-to-device transform by prepending another transform
Modifies the current user-to-device transform by prepending another transform
Modifies the current user-to-device transform by appending another transform
Modifies the current user-to-device transform by appending another transform
Gets the current user-to-device AffineTransform
Sets the current area of interest
Gets the ares of interest currently contained in the RenderContext
Makes a copy of a RenderContext
Returns a vector of RenderedImages that are the immediate sources of image data for this RenderedImage
Gets a property from the property set of this image
Returns an array of names recognized by {@link #getProperty(String) getProperty(String)} or <code>null</code>, if no property names are recognized
Returns the ColorModel associated with this image
Returns the SampleModel associated with this image
Returns the width of the RenderedImage
Returns the height of the RenderedImage
Returns the minimum X coordinate (inclusive) of the RenderedImage
Returns the minimum Y coordinate (inclusive) of the RenderedImage
Returns the number of tiles in the X direction
Returns the number of tiles in the Y direction
Returns the minimum tile index in the X direction
Returns the minimum tile index in the Y direction
Returns the tile width in pixels
Returns the tile height in pixels
Returns the X offset of the tile grid relative to the origin, i
Returns the Y offset of the tile grid relative to the origin, i
Returns tile (tileX, tileY)
Returns the image as one large tile (for tile based images this will require fetching the whole image and copying the image data over)
Computes and returns an arbitrary region of the RenderedImage
Computes an arbitrary rectangular region of the RenderedImage and copies it into a caller-supplied WritableRaster
Creates a RenderedImage representing the results of an imaging operation (or chain of operations) for a given ParameterBlock and RenderingHints
Specifies the value to display and whether or not the value should be portrayed as "currently selected"
Returns the component used to render the value
Returns the number of key-value mappings in this <code>RenderingHints</code>
Returns <code>true</code> if this <code>RenderingHints</code> contains no key-value mappings
Returns {@code true} if this {@code RenderingHints}  contains a mapping for the specified key
Returns true if this RenderingHints maps one or more keys to the specified value
Returns the value to which the specified key is mapped
Maps the specified {@code key} to the specified {@code value} in this {@code RenderingHints} object
Adds all of the keys and corresponding values from the specified <code>RenderingHints</code> object to this <code>RenderingHints</code> object
Clears this <code>RenderingHints</code> object of all key/value pairs
Removes the key and its corresponding value from this {@code RenderingHints} object
Copies all of the mappings from the specified {@code Map} to this {@code RenderingHints}
Returns a <code>Set</code> view of the Keys contained in this <code>RenderingHints</code>
Returns a <code>Collection</code> view of the values contained in this <code>RenderinHints</code>
Returns a <code>Set</code> view of the mappings contained in this <code>RenderingHints</code>
Compares the specified <code>Object</code> with this <code>RenderingHints</code> for equality
Returns the hash code value for this <code>RenderingHints</code>
Creates a clone of this <code>RenderingHints</code> object that has the same contents as this <code>RenderingHints</code> object
Returns a rather long string representation of the hashmap which contains the mappings of keys to values for this <code>RenderingHints</code> object
Returns true if the specified object is a valid value for this Key
Returns the private integer key that the subclass instantiated this Key with
The hash code for all Key objects will be the same as the system identity code of the object as defined by the System
The equals method for all Key objects will return the same result as the equality operator '=='
Return the RepaintManager for the calling thread given a Component
Return the RepaintManager for the calling thread given a JComponent
Set the RepaintManager that should be used for the calling thread
Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor
Remove a component from the list of invalid components
Add a component in the list of components that should be refreshed
Adds <code>window</code> to the list of <code>Component</code>s that need to be repainted
Adds <code>applet</code> to the list of <code>Component</code>s that need to be repainted
Return the current dirty region for a component
Mark a component completely dirty
Mark a component completely clean
Convenience method that returns true if <b>aComponent</b> will be completely painted during the next paintDirtyRegions()
Validate all of the components that have been marked invalid
Paint all of the components that have been marked dirty
Returns a string that displays and identifies this object's properties
Return the offscreen buffer that should be used as a double buffer with the component <code>c</code>
Return a volatile offscreen buffer that should be used as a double buffer with the specified component <code>c</code>
Set the maximum double buffer size
Returns the maximum double buffer size
Enables or disables double buffering in this RepaintManager
Returns true if this RepaintManager is double buffered
Indicates the <em>containing annotation type</em> for the repeatable annotation type
Passes along the properties from the source object after adding a property indicating the scale applied
Override the dimensions of the source image and pass the dimensions of the new scaled size to the ImageConsumer
Choose which rows and columns of the delivered byte pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary
Choose which rows and columns of the delivered int pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary
Returns the list of domains in which any MBean is currently registered
Stores an MBean associated with its object name in the repository
Checks whether an MBean of the name specified is already stored in the repository
Retrieves the MBean of the name specified from the repository
Selects and retrieves the list of MBeans whose names match the specified object name pattern and which match the specified query expression (optionally)
Removes an MBean from the repository
Gets the number of MBeans stored in the repository
Gets the name of the domain currently used by default in the repository
Called by {@link #addMBean}
Called by {@link #remove}
Checks to see if the FullValueDescription should be retrieved
Creates a repository ID for a sequence
Creates a repository ID for a sequence
Creates a repository ID for a normal Java Type
Creates a repository ID for a normal Java Type
Creates a repository ID for an IDL Java Type
Createa a repository ID for the type if it is either a java type or an IDL type
Convert strings with illegal IDL identifier characters
Returns the latest version RepositoryIdStrings instance
Returns the latest version RepositoryIdUtility instance
Typically the Repositoy is created within the ORBd VM but it can be independently started as well
Returns a copy of the current regular expression program in a character array that is exactly the right length to hold the program
Sets a new regular expression program to run
Retrieves the the target object reference
Retrieves the name of the method to be invoked
Retrieves the <code>NVList</code> object containing the arguments to the method being invoked
Retrieves the <code>NamedValue</code> object containing the return value for the method
Retrieves the <code>Environment</code> object for this request
Retrieves the <code>ExceptionList</code> object for this request
Retrieves the <code>ContextList</code> object for this request
Retrieves the <code>Context</code> object for this request
Sets this request's <code>Context</code> object to the one given
Creates an input argument and adds it to this <code>Request</code> object
Creates an input argument with the given name and adds it to this <code>Request</code> object
Adds an input/output argument to this <code>Request</code> object
Adds an input/output argument with the given name to this <code>Request</code> object
Adds an output argument to this <code>Request</code> object
Adds an output argument with the given name to this <code>Request</code> object
Sets the typecode for the return value of the method
Returns the <code>Any</code> object that contains the value for the result of the method
Makes a synchronous invocation using the information in the <code>Request</code> object
Makes a oneway invocation on the request
Makes an asynchronous invocation on the request
Allows the user to determine whether a response has been received for the invocation triggered earlier with the <code>send_deferred</code> method
Allows the user to access the response for the invocation triggered earlier with the <code>send_deferred</code> method
Register a ClientRequestDispatcher for a particular subcontract ID
Get the ClientRequestDispatcher for subcontract ID scid
Register a LocalClientRequestDispatcher for a particular subcontract ID
Get the LocalClientRequestDispatcher for subcontract ID scid
Register a CorbaServerRequestDispatcher for a particular subcontract ID
Get the CorbaServerRequestDispatcher for subcontract ID scid
Register a CorbaServerRequestDispatcher for handling an explicit object key name
Get the CorbaServerRequestDispatcher for a particular object key
Register an ObjectAdapterFactory for a particular subcontract ID
Get the ObjectAdapterFactory for a particular subcontract ID scid
Return the set of all ObjectAdapterFactory instances that are registered
Implementation for request_id() differs for client and server implementations
Implementation for operation() differs for client and server implementations
This method returns the list of arguments for the operation that was invoked
This method returns the list of exceptios  that was raised when the operation was invoked
This method returns the list of contexts for the DII operation
This method returns the list of operation_context for the DII operation
This method returns the result from the invoked DII operation
Implementation for response_expected() differs for client and server implementations
Defined in the Messaging specification
Describes the state of the result of the operation invocation
Implementation for forward_reference() differs for client and server implementations
Returns the data from the given slot of the PortableInterceptor::Current that is in the scope of the request
Implementation for get_request_service_context() differs for client and server implementations
Implementation for get_reply_service_context() differs for client and server implementations
Internal utility method to convert an NVList into a PI Parameter[]
Utility to wrap the given Exception in an Any object and return it
Utility method to look up a service context with the given id and convert it to an IOP
Utility method to add an IOP
Sets the number of interceptors whose starting interception points were successfully invoked on this client call
Returns the number of interceptors whose starting interception points were actually invoked on this client request
Sets which ending interception point should be called for each interceptor in the virtual flow stack
Retrieves the current ending point call type (see setEndingPointCall for more details)
Sets which intermediate interception point should be called for each interceptor in the virtual flow stack
Retrieves the current intermediate point call type (see setEndingPointCall for more details)
Sets which starting interception point should be called for each interceptor in the virtual flow stack
Retrieves the current starting point call type (see setStartingPointCall for more details)
Returns true if all interceptors' starting and ending points have already executed to completion, or false if not yet
Sets whether all interceotrs' starting and ending points have already been executed to completion
Sets the value to be returned by reply_status
Gets the current reply_status without doing an access check (available only to package and subclasses)
Stores the given ForwardRequest object for later analysis
Stores the given IOR for later forward request analysis
Retrieves the ForwardRequest object as a ForwardRequest exception
Retrieves the IOR of the ForwardRequest exception
Sets the exception to be returned by received_exception and received_exception_id
Sets the execution point that we are currently executing (starting points, intermediate points, or ending points)
Check whether the caller is allowed to access this method at this particular time
Returns an id that uniquely identifies an active request/reply  sequence
Returns the name of the operation being invoked
Returns an array of <code>Parameter</code> objects, containing the  arguments on the operation being invoked
Returns an array of <code>TypeCode</code> objects describing the  <code>TypeCode</code>s of the user exceptions that this operation  invocation may throw
Returns an array of <code>String</code> objects describing the  contexts that may be passed on this operation invocation
Returns an array of <code>String</code> objects containing the  contexts being sent on the request
Returns an any containing the result of the operation invocation
Indicates whether a response is expected
Defines how far the request shall progress before control is returned to the client
Describes the state of the result of the operation invocation
Contains the object to which the request will be forwarded, if the  <code>reply_status</code> attribute is <code>LOCATION_FORWARD</code>
Returns the data from the given slot of the  <code>PortableInterceptor
Returns a copy of the service context with the given ID that  is associated with the request
Returns a copy of the service context with the given ID that  is associated with the reply
Returns whether this requesting user name attribute is equivalent to the passed in object
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
specifies the policy value
Element's local name
Element's namespace name
Request wrapper bean name
wsdl:part name for the wrapper part
Initializes a ModelMBean object using ModelMBeanInfo passed in
Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors)
<p>Instantiates this MBean instance with the data found for the MBean in the persistent store
<p>Captures the current state of this MBean instance and writes it out to the persistent store
Returns the attributes, operations, constructors and notifications that this RequiredModelMBean exposes for management
Invokes a method on or through a RequiredModelMBean and returns the result of the method execution
Returns the value of a specific attribute defined for this ModelMBean
Returns the values of several attributes in the ModelMBean
Sets the value of a specific attribute of a named ModelMBean
Sets the values of an array of attributes of this ModelMBean
Registers an object which implements the NotificationListener interface as a listener
Removes a listener for Notifications from the RequiredModelMBean
Returns the array of Notifications always generated by the RequiredModelMBean
Return the Class Loader Repository used to perform class loading
Allows the MBean to perform any operations it needs before being registered in the MBean server
Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed
Allows the MBean to perform any operations it needs before being unregistered by the MBean server
Allows the MBean to perform any operations needed after having been unregistered in the MBean server
Returns the scale factors in the given array
Returns the offsets in the given array
Returns the number of scaling factors and offsets used in this RescaleOp
Rescales the source BufferedImage
Rescales the pixel data in the source Raster
Returns the bounding box of the rescaled destination image
Returns the bounding box of the rescaled destination Raster
Creates a zeroed destination image with the correct size and number of bands
Creates a zeroed-destination <code>Raster</code> with the correct size and number of bands, given this source
Returns the location of the destination point given a point in the source
Returns the rendering hints for this op
Get this resolution attribute's resolution values in the given units
Returns this resolution attribute's cross feed direction resolution in the given units
Returns this resolution attribute's feed direction resolution in the given units
Returns a string version of this resolution attribute in the given units
Determine whether this resolution attribute's value is less than or equal to the given resolution attribute's value
Returns whether this resolution attribute is equivalent to the passed in object
Returns a hash code value for this resolution attribute
Returns a string version of this resolution attribute
Returns this resolution attribute's cross feed direction resolution in units of dphi
Returns this resolution attribute's feed direction resolution in units of dphi
Partially resolves a name
Partially resolves a name
Return a local resolver that simply stores bindings in a map
Return a resolver that relies on configured values of ORBInitRef for data
Return a resolver that uses the proprietary bootstrap protocol to implement a resolver
Return a resolver composed of the two given resolvers
Method resolve
We resolve http URIs <I>without</I> fragment
Retrieves the remaining unresolved portion of the name
Retrieves the Object to which resolution was successful
Sets the remaining name field of this result to name
Adds components to the end of remaining name
Adds a single component to the end of remaining name
Sets the resolved Object field of this result to obj
Method engineResolve
Method engineCanResolve
Return the Catalog being used
SAX Parser API
SAX Parser API
SAX Parser API
SAX Parser API
SAX Parser API
SAX Parser API
SAX Parser API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DocumentHandler API
SAX DTDHandler API
SAX DTDHandler API
Implements the <code>resolveEntity</code> method for the SAX interface, using an underlying CatalogResolver to do the real work
Provide accessto the underlying Catalog
SAX XMLReader API
SAX XMLReader API
Implements the <code>resolveEntity</code> method for the SAX interface, using an underlying CatalogResolver to do the real work
SAX DTDHandler API
SAX DTDHandler API
SAX ContentHandler API
SAX ContentHandler API
The JNDI name of the resource
The name of the resource that the reference points to
The Java type of the resource
The authentication type to use for this resource
Indicates whether this resource can be shared between this component and other components
A product specific name that this resource should be mapped to
Description of this resource
Returns the base name of this bundle, if known, or {@code null} if unknown
Gets a string for the given key from this resource bundle or one of its parents
Gets a string array for the given key from this resource bundle or one of its parents
Gets an object for the given key from this resource bundle or one of its parents
Returns the locale of this resource bundle
Sets the parent bundle of this bundle
Gets a resource bundle using the specified base name, the default locale, and the caller's class loader
Returns a resource bundle using the specified base name, the default locale and the specified control
Gets a resource bundle using the specified base name and locale, and the caller's class loader
Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader
Gets a resource bundle using the specified base name, locale, and class loader
Returns a resource bundle using the specified base name, target locale, class loader and control
Removes all resource bundles from the cache that have been loaded using the caller's class loader
Removes all resource bundles from the cache that have been loaded using the given class loader
Gets an object for the given key from this resource bundle
Returns an enumeration of the keys
Determines whether the given <code>key</code> is contained in this <code>ResourceBundle</code> or its parent bundles
Returns a <code>Set</code> of all keys contained in this <code>ResourceBundle</code> and its parent bundles
Returns a <code>Set</code> of the keys contained <em>only</em> in this <code>ResourceBundle</code>
Returns a <code>ResourceBundle
Returns a <code>ResourceBundle
Returns a <code>List</code> of <code>String</code>s containing formats to be used to load resource bundles for the given <code>baseName</code>
Returns a <code>List</code> of <code>Locale</code>s as candidate locales for <code>baseName</code> and <code>locale</code>
Returns a <code>Locale</code> to be used as a fallback locale for further resource bundle searches by the <code>ResourceBundle
Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary
Returns the time-to-live (TTL) value for resource bundles that are loaded under this <code>ResourceBundle
Determines if the expired <code>bundle</code> in the cache needs to be reloaded based on the loading time given by <code>loadTime</code> or some other criteria
Converts the given <code>baseName</code> and <code>locale</code> to the bundle name
Converts the given <code>bundleName</code> to the form required by the {@link ClassLoader#getResource ClassLoader
Returns a {@code ResourceBundle
Retrieves the property from the environment, or from the provider resource file associated with the given context
Retrieves an enumeration of factory classes/object specified by a property
Retrieves a factory from a list of packages specified in a property
Method getInstance
Method getInstance
Method getInstance
Method getInstance
Registers a ResourceResolverSpi class
Registers a ResourceResolverSpi class at the beginning of the provider list
Registers a ResourceResolverSpi class
Registers a ResourceResolverSpi instance
This method registers the default resolvers
Method resolve
Method setProperty
Method getProperty
Method addProperties
Method getPropertyKeys
Method understandsProperty
This is the workhorse method used to resolve resources
This is the workhorse method used to resolve resources
Method engineSetProperty
Method engineGetProperty
Tells if the implementation does can be reused by several threads safely
This method helps the {@link ResourceResolver} to decide whether a {@link ResourceResolverSpi} is able to perform the requested action
This method helps the {@link ResourceResolver} to decide whether a {@link ResourceResolverSpi} is able to perform the requested action
Method engineGetPropertyKeys
Method understandsProperty
Fixes a platform dependent filename to standard URI form
Array used for multiple resource declarations
Specifies if this feature is enabled or disabled
{@inheritDoc}
Gets the contained response context
Gets the system-wide response cache
Sets (or unsets) the system-wide cache
Retrieve the cached response based on the requesting uri, request method and request headers
The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache
Called by the servant during a method invocation
Called by the servant during a method invocation
Element's local name
Element's namespace name
Response wrapper bean name
wsdl:part name for the wrapper part
Set the system identifier for this Result
Get the system identifier that was set with setSystemId
Moves the cursor forward one row from its current position
Releases this <code>ResultSet</code> object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
Reports whether the last column read had a value of SQL <code>NULL</code>
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>boolean</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>short</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>int</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>long</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>float</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>double</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> array in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of ASCII characters
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as as a stream of two-byte 3 characters
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a  stream of uninterpreted bytes
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>boolean</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>short</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>int</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>long</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>float</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>double</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> array in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of ASCII characters
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of two-byte Unicode characters
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of uninterpreted <code>byte</code>s
Retrieves the first warning reported by calls on this <code>ResultSet</code> object
Clears all warnings reported on this <code>ResultSet</code> object
Retrieves the name of the SQL cursor used by this <code>ResultSet</code> object
Retrieves the  number, types and properties of this <code>ResultSet</code> object's columns
<p>Gets the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language
<p>Gets the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language
Maps the given <code>ResultSet</code> column label to its <code>ResultSet</code> column index
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves whether the cursor is before the first row in this <code>ResultSet</code> object
Retrieves whether the cursor is after the last row in this <code>ResultSet</code> object
Retrieves whether the cursor is on the first row of this <code>ResultSet</code> object
Retrieves whether the cursor is on the last row of this <code>ResultSet</code> object
Moves the cursor to the front of this <code>ResultSet</code> object, just before the first row
Moves the cursor to the end of this <code>ResultSet</code> object, just after the last row
Moves the cursor to the first row in this <code>ResultSet</code> object
Moves the cursor to the last row in this <code>ResultSet</code> object
Retrieves the current row number
Moves the cursor to the given row number in this <code>ResultSet</code> object
Moves the cursor a relative number of rows, either positive or negative
Moves the cursor to the previous row in this <code>ResultSet</code> object
Gives a hint as to the direction in which the rows in this <code>ResultSet</code> object will be processed
Retrieves the fetch direction for this <code>ResultSet</code> object
Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this <code>ResultSet</code> object
Retrieves the fetch size for this <code>ResultSet</code> object
Retrieves the type of this <code>ResultSet</code> object
Retrieves the concurrency mode of this <code>ResultSet</code> object
Retrieves whether the current row has been updated
Retrieves whether the current row has had an insertion
Retrieves whether a row has been deleted
Updates the designated column with a <code>null</code> value
Updates the designated column with a <code>boolean</code> value
Updates the designated column with a <code>byte</code> value
Updates the designated column with a <code>short</code> value
Updates the designated column with an <code>int</code> value
Updates the designated column with a <code>long</code> value
Updates the designated column with a <code>float</code> value
Updates the designated column with a <code>double</code> value
Updates the designated column with a <code>java
Updates the designated column with a <code>String</code> value
Updates the designated column with a <code>byte</code> array value
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with an ascii stream value, which will have the specified number of bytes
Updates the designated column with a binary stream value, which will have the specified number of bytes
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column with an <code>Object</code> value
Updates the designated column with an <code>Object</code> value
Updates the designated column with a <code>null</code> value
Updates the designated column with a <code>boolean</code> value
Updates the designated column with a <code>byte</code> value
Updates the designated column with a <code>short</code> value
Updates the designated column with an <code>int</code> value
Updates the designated column with a <code>long</code> value
Updates the designated column with a <code>float </code> value
Updates the designated column with a <code>double</code> value
Updates the designated column with a <code>java
Updates the designated column with a <code>String</code> value
Updates the designated column with a byte array value
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with an ascii stream value, which will have the specified number of bytes
Updates the designated column with a binary stream value, which will have the specified number of bytes
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column with an <code>Object</code> value
Updates the designated column with an <code>Object</code> value
Inserts the contents of the insert row into this <code>ResultSet</code> object and into the database
Updates the underlying database with the new contents of the current row of this <code>ResultSet</code> object
Deletes the current row from this <code>ResultSet</code> object and from the underlying database
Refreshes the current row with its most recent value in the database
Cancels the updates made to the current row in this <code>ResultSet</code> object
Moves the cursor to the insert row
Moves the cursor to the remembered cursor position, usually the current row
Retrieves the <code>Statement</code> object that produced this <code>ResultSet</code> object
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Ref</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Blob</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Clob</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Array</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Ref</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Blob</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Clob</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Array</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Updates the designated column with a <code>RowId</code> value
Updates the designated column with a <code>RowId</code> value
Retrieves the holdability of this <code>ResultSet</code> object
Retrieves whether this <code>ResultSet</code> object has been closed
Updates the designated column with a <code>String</code> value
Updates the designated column with a <code>String</code> value
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>NClob</code> object in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>NClob</code> object in the Java programming language
Retrieves the value of the designated column in  the current row of  this <code>ResultSet</code> as a <code>java
Retrieves the value of the designated column in  the current row of  this <code>ResultSet</code> as a <code>java
Updates the designated column with a <code>java
Updates the designated column with a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column with an ascii stream value, which will have the specified number of bytes
Updates the designated column with a binary stream value, which will have the specified number of bytes
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column with an ascii stream value, which will have the specified number of bytes
Updates the designated column with a binary stream value, which will have the specified number of bytes
Updates the designated column with a character stream value, which will have the specified number of bytes
Updates the designated column using the given input stream, which will have the specified number of bytes
Updates the designated column using the given input stream, which will have the specified number of bytes
Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long
Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long
Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long
Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long
Updates the designated column with a character stream value
Updates the designated column with a character stream value
Updates the designated column with an ascii stream value
Updates the designated column with a binary stream value
Updates the designated column with a character stream value
Updates the designated column with an ascii stream value
Updates the designated column with a binary stream value
Updates the designated column with a character stream value
Updates the designated column using the given input stream
Updates the designated column using the given input stream
Updates the designated column using the given <code>Reader</code> object
Updates the designated column using the given <code>Reader</code> object
Updates the designated column using the given <code>Reader</code> The data will be read from the stream as needed until end-of-stream is reached
Updates the designated column using the given <code>Reader</code> object
<p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported
<p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported
Updates the designated column with an {@code Object} value
Updates the designated column with an {@code Object} value
Updates the designated column with an {@code Object} value
Updates the designated column with an {@code Object} value
Returns the number of columns in this <code>ResultSet</code> object
Indicates whether the designated column is automatically numbered
Indicates whether a column's case matters
Indicates whether the designated column can be used in a where clause
Indicates whether the designated column is a cash value
Indicates the nullability of values in the designated column
Indicates whether values in the designated column are signed numbers
Indicates the designated column's normal maximum width in characters
Gets the designated column's suggested title for use in printouts and displays
Get the designated column's name
Get the designated column's table's schema
Get the designated column's specified column size
Gets the designated column's number of digits to right of the decimal point
Gets the designated column's table name
Gets the designated column's table's catalog name
Retrieves the designated column's SQL type
Retrieves the designated column's database-specific type name
Indicates whether the designated column is definitely not writable
Indicates whether it is possible for a write on the designated column to succeed
Indicates whether a write on the designated column will definitely succeed
<p>Returns the fully-qualified name of the Java class whose instances are manufactured if the method <code>ResultSet
Translates a result tree to object of internal type <code>type</code>
Expects an result tree on the stack and pushes a boolean
Expects an result tree on the stack and pushes a string
Expects an result tree on the stack and pushes a real
Expects a result tree on the stack and pushes a boxed result tree
Expects a result tree on the stack and pushes a node-set (iterator)
Subsume result tree into ObjectType
Translates a result tree into a non-synthesized boolean
Translates a result tree to a Java type denoted by <code>clazz</code>
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Returns the class name of an internal type's external representation
Dump instruction as byte code to stream out
Read needed data (e
Set index of local variable containg the return address
Call corresponding visitor method(s)
Returns the retention policy
Main program entrypoint
Testing entrypoint
Returns an {@link java
Returns the URI of the referenced <code>KeyInfo</code> information
Dereferences the <code>KeyInfo</code> information referenced by this <code>RetrievalMethod</code> and applies the specified <code>Transform</code>s
Method engineResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Call corresponding visitor method(s)
Returns if the two Returnaddresses refer to the same target
Sample entry
Creates a RegularExpression instance
Character content
Obtains the name of this reverb type
Returns the early reflection delay time in microseconds
Returns the early reflection intensity in decibels
Returns the late reflection delay time in microseconds
Returns the late reflection intensity in decibels
Obtains the decay time, which is the amount of time over which the late reflections attenuate to effective zero
Indicates whether the specified object is equal to this reverb type, returning <code>true</code> if the objects are identical
Finalizes the hashcode method
Provides a <code>String</code> representation of the reverb type, including its name and its parameter settings
Set the root node of the TreeWalker
Detaches the walker from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Get the next node in document order on the axes
Tells if this is a reverse axes
Get the current sub-context position
Count backwards one proximity position
Get the number of nodes in this node list
Returns true if all the nodes in the iteration well be returned in document order
This attribute is used for the red value of the RGB color
This attribute is used for the green value of the RGB color
This attribute is used for the blue value of the RGB color
If the ColorModel is an IndexColorModel and the subclass has set the canFilterIndexColorModel flag to true, we substitute a filtered version of the color model here and wherever that original ColorModel object appears in the setPixels methods
Registers two ColorModel objects for substitution
Filters an IndexColorModel object by running each entry in its color tables through the filterRGB function that RGBImageFilter subclasses must provide
Filters a buffer of pixels in the default RGB ColorModel by passing them one by one through the filterRGB method
If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel
If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel, otherwise converts the buffer of integer pixels to the default RGB ColorModel and passes the converted buffer to the filterRGBPixels method to be converted one by one
Subclasses must specify a method to convert a single input pixel in the default RGB ColorModel to a single output pixel
Loads the class with the specified <code>name</code>
Loads a class from a codebase URL
Loads a class from a codebase URL path
Loads a class from a codebase URL path, optionally using the supplied loader
Loads a dynamic proxy class (see {@link java
Returns a class loader that loads classes from the given codebase URL path
Returns the annotation string (representing a location for the class definition) that RMI will use to annotate the class descriptor when marshalling objects of the given class
Returns the canonical instance of the default provider for the service provider interface {@link RMIClassLoaderSpi}
Returns the security context of the given class loader
Provides the implementation for {@link RMIClassLoader#loadClass(URL,String)}, {@link RMIClassLoader#loadClass(String,String)}, and {@link RMIClassLoader#loadClass(String,String,ClassLoader)}
Provides the implementation for {@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}
Provides the implementation for {@link RMIClassLoader#getClassLoader(String)}
Provides the implementation for {@link RMIClassLoader#getClassAnnotation(Class)}
Create a client socket connected to the specified host and port
<p>Returns the connection ID
<p>Closes this connection
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
Handles the method {@link javax
<p>Handles the method {@link javax
<p>Handles the {@link javax
<p>Retrieves notifications from the connector server
<p>Returns a string representation of this object
<p>Returns a string representation of this object
<p>The address of this connector
<p>Returns a client stub for this connector server
<p>Activates the connector server, that is starts listening for client connections
<p>Deactivates the connector server, that is, stops listening for client connections
The <code>failure</code> callback is invoked when the RMI runtime is unable to create a <code>ServerSocket</code> via the <code>RMISocketFactory</code>
<p>Returns an IIOP stub
<p>Creates a new client connection as an RMI object exported through IIOP
<p>Called by {@link #close()} to close the connector server by unexporting this object
<p>Returns a serializable stub for this {@link RMIServer} object
<p>Creates a new client connection as an RMI object exported through JRMP
<p>Called by {@link #close()} to close the connector server by unexporting this object
<p>The version of the RMI Connector Protocol understood by this connector server
<p>Makes a new connection through this RMI connector
<p>Exports this RMI object
Returns a remotable stub for this server object
<p>Sets the default <code>ClassLoader</code> for this connector server
<p>Gets the default <code>ClassLoader</code> used by this connector server
<p>Sets the <code>MBeanServer</code> to which this connector server is attached
<p>The <code>MBeanServer</code> to which this connector server is attached
<p>Creates a new client connection
<p>Creates a new client connection
<p>Closes a client connection made by {@link #makeClient makeClient}
<p>Returns the protocol string for this object
<p>Method called when a client connection created by {@link #makeClient makeClient} is closed
<p>Closes this connection server
<p>Called by {@link #close()} to close the connector server
Create a server socket on the specified port (port 0 indicates an anonymous port)
Creates a client socket connected to the specified host and port
Create a server socket on the specified port (port 0 indicates an anonymous port)
Set the global socket factory from which RMI gets sockets (if the remote object is not associated with a specific client and/or server socket factory)
Returns the socket factory set by the <code>setSocketFactory</code> method
Returns a reference to the default socket factory used by this RMI implementation
Sets the failure handler to be called by the RMI runtime if server socket creation fails
Returns the handler for socket creation failure set by the <code>setFailureHandler</code> method
Moves mouse pointer to given screen coordinates
Presses one or more mouse buttons
Releases one or more mouse buttons
Rotates the scroll wheel on wheel-equipped mice
Presses a given key
Releases a given key
Returns the color of a pixel at the given screen coordinates
Creates an image containing pixels read from the screen
Returns whether this Robot automatically invokes <code>waitForIdle</code> after generating an event
Sets whether this Robot automatically invokes <code>waitForIdle</code> after generating an event
Returns the number of milliseconds this Robot sleeps after generating an event
Sets the number of milliseconds this Robot sleeps after generating an event
Sleeps for the specified time
Waits until all events currently on the event queue have been processed
Returns a string representation of this Robot
Moves the mouse pointer to the specified screen location
Simulates a mouse press with the specified button(s)
Simulates a mouse release with the specified button(s)
Simulates mouse wheel action
Simulates a key press of the specified key
Simulates a key release of the specified key
Gets the RGB value of the specified pixel on screen
Gets the RGB values of the specified screen area as an array
Disposes the robot peer when it is not needed anymore
Retrieves role name
Retrieves role value
Sets role name
Sets role value
Returns a string describing the role
Clone the role object
Returns a string for the given role value
Returns the name of the role
Returns read access mode for the role (true if it is readable)
Returns write access mode for the role (true if it is writable)
Returns description text for the role
Returns minimum degree for corresponding role reference
Returns maximum degree for corresponding role reference
<p>Returns name of type of MBean expected to be referenced in corresponding role
Returns true if the <tt>value</tt> parameter is greater than or equal to the expected minimum degree, false otherwise
Returns true if the <tt>value</tt> parameter is lower than or equal to the expected maximum degree, false otherwise
Returns a string describing the role info
Return a view of this list as a {@code List<Role>}
Adds the Role specified as the last element of the list
Inserts the role specified as an element at the position specified
Sets the element at the position specified to be the role specified
Appends all the elements in the RoleList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleList specified
Inserts all of the elements in the RoleList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleList specified
Retrieves list of roles successfully accessed
Retrieves list of roles unsuccessfully accessed
Sets list of roles successfully accessed
Sets list of roles unsuccessfully accessed
Returns true if given value corresponds to a known role status, false otherwise
Retrieves role name
Retrieves role value
Retrieves problem type
Sets role name
Sets role value
Sets problem type
Clone this object
Return a string describing this object
Return a view of this list as a {@code List<RoleUnresolved>}
Adds the RoleUnresolved specified as the last element of the list
Inserts the unresolved role specified as an element at the position specified
Sets the element at the position specified to be the unresolved role specified
Appends all the elements in the RoleUnresolvedList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified
Inserts all of the elements in the RoleUnresolvedList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified
Command line options
Return the packages <a href="package-summary
Return the classes and interfaces <a href="package-summary
Return the <a href="package-summary
Return a PackageDoc for the specified package name
Return a ClassDoc for the specified class or interface name
Return this component's single JRootPane child
The "contentPane" is the primary container for application specific components
Returns the contentPane
A Container that manages the contentPane and in some cases a menu bar
Returns the layeredPane
The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it's always as big as the rootPane
Returns the glassPane
Returns {@code true} if types generated by this round will not be subject to a subsequent round of annotation processing; returns {@code false} otherwise
Returns {@code true} if an error was raised in the prior round of processing; returns {@code false} otherwise
Returns the root elements for annotation processing generated by the prior round
Returns the elements annotated with the given annotation type
Returns the elements annotated with the given annotation type
Returns the {@code RoundingMode} object corresponding to a legacy integer rounding mode constant in {@link BigDecimal}
Gets the width of the arc that rounds off the corners
Gets the height of the arc that rounds off the corners
Sets the location, size, and corner radii of this <code>RoundRectangle2D</code> to the specified <code>double</code> values
Sets this <code>RoundRectangle2D</code> to be the same as the specified <code>RoundRectangle2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns an iteration object that defines the boundary of this <code>RoundRectangle2D</code>
Returns the hashcode for this <code>RoundRectangle2D</code>
Determines whether or not the specified <code>Object</code> is equal to this <code>RoundRectangle2D</code>
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the location, size, and corner radii of this <code>RoundRectangle2D</code> to the specified <code>float</code> values
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns a <code>RowFilter</code> that uses a regular expression to determine which entries to include
Returns a <code>RowFilter</code> that includes entries that have at least one <code>Date</code> value meeting the specified criteria
Returns a <code>RowFilter</code> that includes entries that have at least one <code>Number</code> value meeting the specified criteria
Returns a <code>RowFilter</code> that includes entries if any of the supplied filters includes the entry
Returns a <code>RowFilter</code> that includes entries if all of the supplied filters include the entry
Returns a <code>RowFilter</code> that includes entries if the supplied filter does not include the entry
Returns true if the specified entry should be shown; returns false if the entry should be hidden
Returns the underlying model
Returns the number of values in the entry
Returns the value at the specified index
Returns the string value at the specified index
Returns the identifer (in the model) of the entry
Compares this <code>RowId</code> to the specified object
Returns an array of bytes representing the value of the SQL <code>ROWID</code> designated by this <code>java
Returns a String representing the value of the SQL ROWID designated by this <code>java
Returns a hash code value of this <code>RowId</code> object
Returns the rows that the TreePath instances in <code>path</code> are being displayed at
Retrieves the url property this <code>RowSet</code> object will use to create a connection if it uses the <code>DriverManager</code> instead of a <code>DataSource</code> object to establish the connection
Sets the URL this <code>RowSet</code> object will use when it uses the <code>DriverManager</code> to create a connection
Retrieves the logical name that identifies the data source for this <code>RowSet</code> object
Sets the data source name property for this <code>RowSet</code> object to the given <code>String</code>
Retrieves the username used to create a database connection for this <code>RowSet</code> object
Sets the username property for this <code>RowSet</code> object to the given <code>String</code>
Retrieves the password used to create a database connection
Sets the database password for this <code>RowSet</code> object to the given <code>String</code>
Retrieves the transaction isolation level set for this <code>RowSet</code> object
Sets the transaction isolation level for this <code>RowSet</code> object
Retrieves the <code>Map</code> object associated with this <code>RowSet</code> object, which specifies the custom mapping of SQL user-defined types, if any
Installs the given <code>java
Retrieves this <code>RowSet</code> object's command property
Sets this <code>RowSet</code> object's command property to the given SQL query
Retrieves whether this <code>RowSet</code> object is read-only
Sets whether this <code>RowSet</code> object is read-only to the given <code>boolean</code>
Retrieves the maximum number of bytes that may be returned for certain column values
Sets the maximum number of bytes that can be returned for a column value to the given number of bytes
Retrieves the maximum number of rows that this <code>RowSet</code> object can contain
Sets the maximum number of rows that this <code>RowSet</code> object can contain to the specified number
Retrieves whether escape processing is enabled for this <code>RowSet</code> object
Sets escape processing for this <code>RowSet</code> object on or off
Retrieves the maximum number of seconds the driver will wait for a statement to execute
Sets the maximum time the driver will wait for a statement to execute to the given number of seconds
Sets the type of this <code>RowSet</code> object to the given type
Sets the concurrency of this <code>RowSet</code> object to the given concurrency level
Sets the designated parameter in this <code>RowSet</code> object's SQL command to SQL <code>NULL</code>
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter in this <code>RowSet</code> object's SQL command to SQL <code>NULL</code>
Sets the designated parameter to SQL <code>NULL</code>
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>boolean</code> value
Sets the designated parameter to the given Java <code>boolean</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>byte</code> value
Sets the designated parameter to the given Java <code>byte</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>short</code> value
Sets the designated parameter to the given Java <code>short</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>int</code> value
Sets the designated parameter to the given Java <code>int</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>long</code> value
Sets the designated parameter to the given Java <code>long</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>float</code> value
Sets the designated parameter to the given Java <code>float</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>double</code> value
Sets the designated parameter to the given Java <code>double</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java <code>String</code> value
Sets the designated parameter to the given Java <code>String</code> value
Sets the designated parameter in this <code>RowSet</code> object's command to the given Java array of <code>byte</code> values
Sets the designated parameter to the given Java array of bytes
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter to the given input stream, which will have the specified number of bytes
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>java
Sets the designated parameter to the given <code>Reader</code> object, which is the given number of characters long
Sets the designated parameter in this <code>RowSet</code> object's command to the given input stream
Sets the designated parameter to the given input stream
Sets the designated parameter in this <code>RowSet</code> object's command to the given input stream
Sets the designated parameter to the given input stream
Sets the designated parameter in this <code>RowSet</code> object's command to the given <code>Reader</code> object
Sets the designated parameter to the given <code>Reader</code> object
Sets the designated parameter in this <code>RowSet</code> object's command to a <code>Reader</code> object
Sets the designated parameter in this <code>RowSet</code> object's command with the given Java <code>Object</code>
Sets the value of the designated parameter with the given object
Sets the designated parameter in this <code>RowSet</code> object's command with a Java <code>Object</code>
Sets the value of the designated parameter with the given object
Sets the value of the designated parameter with the given object
Sets the designated parameter in this <code>RowSet</code> object's command with a Java <code>Object</code>
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>Ref</code> value
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>Blob</code> value
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to a <code>InputStream</code> object
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>Clob</code> value
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>Array</code> value
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter in this <code>RowSet</code> object's command with the given  <code>java
Sets the designated parameter to the given <code>java
Clears the parameters set for this <code>RowSet</code> object's command
Fills this <code>RowSet</code> object with data
Registers the given listener so that it will be notified of events that occur on this <code>RowSet</code> object
Removes the specified listener from the list of components that will be notified when an event occurs on this <code>RowSet</code> object
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>java
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to the given <code>String</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to a <code>java
Sets the designated parameter to a <code>Reader</code> object
Sets the designated parameter to the given <code>java
<p>Creates a new instance of a CachedRowSet
<p>Creates a new instance of a FilteredRowSet
<p>Creates a new instance of a JdbcRowSet
<p>Creates a new instance of a JoinRowSet
<p>Creates a new instance of a WebRowSet
Retrieves the parameters that have been set for this <code>RowSet</code> object's command
Retrieves the <code>Connection</code> object that was passed to this <code>RowSet</code> object
Sets the given <code>RowSetMetaData</code> object as the <code>RowSetMetaData</code> object for this <code>RowSet</code> object
Retrieves a <code>ResultSet</code> object containing the original value of this <code>RowSet</code> object
Retrieves a <code>ResultSet</code> object containing the original value of the current row only
Notifies registered listeners that a <code>RowSet</code> object in the given <code>RowSetEvent</code> object has changed its entire contents
Notifies registered listeners that a <code>RowSet</code> object has had a change in one of its rows
Notifies registered listeners that a <code>RowSet</code> object's cursor has moved
Sets the number of columns in the <code>RowSet</code> object to the given number
Sets whether the designated column is automatically numbered, The default is for a <code>RowSet</code> object's columns not to be automatically numbered
Sets whether the designated column is case sensitive
Sets whether the designated column can be used in a where clause
Sets whether the designated column is a cash value
Sets whether the designated column's value can be set to <code>NULL</code>
Sets whether the designated column is a signed number
Sets the designated column's normal maximum width in chars to the given <code>int</code>
Sets the suggested column title for use in printouts and displays, if any, to the given <code>String</code>
Sets the name of the designated column to the given <code>String</code>
Sets the name of the designated column's table's schema, if any, to the given <code>String</code>
Sets the designated column's number of decimal digits to the given <code>int</code>
Sets the designated column's number of digits to the right of the decimal point to the given <code>int</code>
Sets the designated column's table name, if any, to the given <code>String</code>
Sets the designated column's table's catalog name, if any, to the given <code>String</code>
Sets the designated column's SQL type to the one given
Sets the designated column's type name that is specific to the data source, if any, to the given <code>String</code>
Sets to the given number the number of columns in the <code>RowSet</code> object for which this <code>RowSetMetaDataImpl</code> object was created
Sets whether the designated column is automatically numbered, thus read-only, to the given <code>boolean</code> value
Sets whether the name of the designated column is case sensitive to the given <code>boolean</code>
Sets whether a value stored in the designated column can be used in a <code>WHERE</code> clause to the given <code>boolean</code> value
Sets whether a value stored in the designated column is a cash value to the given <code>boolean</code>
Sets whether a value stored in the designated column can be set to <code>NULL</code> to the given constant from the interface <code>ResultSetMetaData</code>
Sets whether a value stored in the designated column is a signed number to the given <code>boolean</code>
Sets the normal maximum number of chars in the designated column to the given number
Sets the suggested column label for use in printouts and displays, if any, to <i>label</i>
Sets the column name of the designated column to the given name
Sets the designated column's table's schema name, if any, to <i>schemaName</i>
Sets the total number of decimal digits in a value stored in the designated column to the given number
Sets the number of digits to the right of the decimal point in a value stored in the designated column to the given number
Sets the name of the table from which the designated column was derived to the given table name
Sets the catalog name of the table from which the designated column was derived to <i>catalogName</i>
Sets the SQL type code for values stored in the designated column to the given type code from the class <code>java
Sets the type name used by the data source for values stored in the designated column to the given type name
Retrieves the number of columns in the <code>RowSet</code> object for which this <code>RowSetMetaDataImpl</code> object was created
Retrieves whether a value stored in the designated column is automatically numbered, and thus readonly
Indicates whether the case of the designated column's name matters
Indicates whether a value stored in the designated column can be used in a <code>WHERE</code> clause
Indicates whether a value stored in the designated column is a cash value
Retrieves a constant indicating whether it is possible to store a <code>NULL</code> value in the designated column
Indicates whether a value stored in the designated column is a signed number
Retrieves the normal maximum width in chars of the designated column
Retrieves the suggested column title for the designated column for use in printouts and displays
Retrieves the name of the designated column
Retrieves the schema name of the table from which the value in the designated column was derived
Retrieves the total number of digits for values stored in the designated column
Retrieves the number of digits to the right of the decimal point for values stored in the designated column
Retrieves the name of the table from which the value in the designated column was derived
Retrieves the catalog name of the table from which the value in the designated column was derived
Retrieves the type code (one of the <code>java
Retrieves the DBMS-specific type name for values stored in the designated column
Indicates whether the designated column is definitely not writable, thus readonly
Indicates whether it is possible for a write operation on the designated column to succeed
Indicates whether a write operation on the designated column will definitely succeed
Retrieves the fully-qualified name of the class in the Java programming language to which a value in the designated column will be mapped
Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy
Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does
<p>Creates a new instance of a <code>RowSetFactory</code> implementation
<p>Creates  a new instance of a <code>RowSetFactory</code> from the specified factory class name
Reads the new contents of the calling <code>RowSet</code> object
Retrieves the warning chained to this <code>RowSetWarning</code> object
Sets <i>warning</i> as the next warning, that is, the warning chained to this <code>RowSetWarning</code> object
Writes the changes in this <code>RowSetWriter</code> object's rowset back to the data source from which it got its data
Returns the underlying model
Reverses the sort order of the specified column
Returns the location of <code>index</code> in terms of the underlying model
Returns the location of <code>index</code> in terms of the view
Sets the current sort keys
Returns the current sort keys
Returns the number of rows in the view
Returns the number of rows in the underlying model
Invoked when the underlying model structure has completely changed
Invoked when the contents of the underlying model have completely changed
Invoked when rows have been inserted into the underlying model in the specified range (inclusive)
Invoked when rows have been deleted from the underlying model in the specified range (inclusive)
Invoked when rows have been changed in the underlying model between the specified range (inclusive)
Invoked when the column in the rows have been updated in the underlying model between the specified range
Adds a <code>RowSorterListener</code> to receive notification about this <code>RowSorter</code>
Removes a <code>RowSorterListener</code>
Notifies listener that the sort order has changed
Notifies listener that the mapping has changed
Returns the index of the column
Returns the sort order of the column
Returns the hash code for this <code>SortKey</code>
Returns true if this object equals the specified object
Returns the source of the event as a <code>RowSorter</code>
Returns the type of event
Returns the location of <code>index</code> in terms of the model prior to the sort
Returns the number of rows before the sort
Notification that the <code>RowSorter</code> has changed
Returns the modulus
Returns the keysize
Returns the public-exponent value
Returns the public exponent
Returns the primeP
Returns the primeQ
Returns the primeExponentP
Returns the primeExponentQ
Returns the crtCoefficient
Returns the otherPrimeInfo or null if there are only two prime factors (p and q)
Returns the public exponent
Returns the primeP
Returns the primeQ
Returns the primeExponentP
Returns the primeExponentQ
Returns the crtCoefficient
Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q)
Returns the prime
Returns the prime's exponent
Returns the prime's crtCoefficient
Returns the public exponent
Returns the primeP
Returns the primeQ
Returns the primeExponentP
Returns the primeExponentQ
Returns the crtCoefficient
Returns the public exponent
Returns the primeP
Returns the primeQ
Returns the primeExponentP
Returns the primeExponentQ
Returns the crtCoefficient
Returns the private exponent
Returns the modulus
Returns the private exponent
Returns the public exponent
Returns the modulus
Returns the public exponent
Get the MIME type of the data that this kit represents support for
Insert content from the given stream which is expected to be in a format appropriate for this kind of content handler
Write content from a document to the given stream in a format appropriate for this kind of content handler
Insert content from the given stream, which will be treated as plain text
Write content from a document to the given stream as plain text
Gets the table-based rules for the collation object
Returns a CollationElementIterator for the given String
Returns a CollationElementIterator for the given CharacterIterator
Compares the character data stored in two different strings based on the collation rules
Transforms the string into a series of characters that can be compared with CollationKey
Standard override; no change in semantics
Compares the equality of two collation objects
Generates the hash code for the table-based collation object
When an object implementing interface <code>Runnable</code> is used to create a thread, starting the thread causes the object's <code>run</code> method to be called in that separately executing thread
Sets this Future to the result of its computation unless it has been cancelled
Returns {@code true} if this task is periodic
Returns the actual {@link Error} thrown
Returns the actual {@link Error} thrown
Returns the actual {@link RuntimeException} thrown
Returns the actual {@link RuntimeException} thrown
Returns the name representing the running Java virtual machine
Returns the Java virtual machine implementation name
Returns the Java virtual machine implementation vendor
Returns the Java virtual machine implementation version
Returns the Java virtual machine specification name
Returns the Java virtual machine specification vendor
Returns the Java virtual machine specification version
Returns the version of the specification for the management interface implemented by the running Java virtual machine
Returns the Java class path that is used by the system class loader to search for class files
Returns the Java library path
Tests if the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files
Returns the boot class path that is used by the bootstrap class loader to search for class files
Returns the input arguments passed to the Java virtual machine which does not include the arguments to the <tt>main</tt> method
Returns the uptime of the Java virtual machine in milliseconds
Returns the start time of the Java virtual machine in milliseconds
Returns a map of names and values of all system properties
Returns the actual {@link RuntimeException} thrown
Returns the actual {@link RuntimeException} thrown
Creates a <code>MessageFactory</code> object for the given <code>String</code> protocol
Creates a <code>SOAPFactory</code> object for the given <code>String</code> protocol
Call corresponding visitor method(s)
Returns the width in pixels
Returns the height in pixels
Returns the total number of bands of image data
Returns the number of data elements needed to transfer a pixel  via the getDataElements and setDataElements methods
Returns the data type of the DataBuffer storing the pixel data
Returns the TransferType used to transfer pixels via the  getDataElements and setDataElements methods
Returns the samples for a specified pixel in an int array, one sample per array element
Returns data for a single pixel in a primitive array of type TransferType
Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType
Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType
Sets the data for a rectangle of pixels in the specified DataBuffer from a primitive array of type TransferType
Returns the samples for the specified pixel in an array of float
Returns the samples for the specified pixel in an array of double
Returns all samples for a rectangle of pixels in an int array, one sample per array element
Returns all samples for a rectangle of pixels in a float array, one sample per array element
Returns all samples for a rectangle of pixels in a double array, one sample per array element
Returns the sample in a specified band for the pixel located at (x,y) as an int
Returns the sample in a specified band for the pixel located at (x,y) as a float
Returns the sample in a specified band for a pixel located at (x,y) as a double
Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element
Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element
Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element
Sets a pixel in  the DataBuffer using an int array of samples for input
Sets a pixel in the DataBuffer using a float array of samples for input
Sets a pixel in the DataBuffer using a double array of samples for input
Sets all samples for a rectangle of pixels from an int array containing one sample per array element
Sets all samples for a rectangle of pixels from a float array containing one sample per array element
Sets all samples for a rectangle of pixels from a double array containing one sample per array element
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element
Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element
Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element
Creates a SampleModel which describes data in this SampleModel's  format, but with a different width and height
Creates a new SampleModel with a subset of the bands of this SampleModel
Creates a DataBuffer that corresponds to this SampleModel
Returns the size in bits of samples for all bands
Returns the size in bits of samples for the specified band
Creates a {@code SaslClient} using the parameters supplied
Creates a {@code SaslServer} for the specified mechanism
Gets an enumeration of known factories for producing {@code SaslClient}
Gets an enumeration of known factories for producing {@code SaslServer}
Returns the IANA-registered mechanism name of this SASL client
Determines whether this mechanism has an optional initial response
Evaluates the challenge data and generates a response
Determines whether the authentication exchange has completed
Unwraps a byte array received from the server
Wraps a byte array to be sent to the server
Retrieves the negotiated property
Disposes of any system resources or security-sensitive information the SaslClient might be using
Creates a SaslClient using the parameters supplied
Returns an array of names of mechanisms that match the specified mechanism selection policies
Returns the string representation of this exception
Returns the IANA-registered mechanism name of this SASL server
Evaluates the response data and generates a challenge
Determines whether the authentication exchange has completed
Reports the authorization ID in effect for the client of this session
Unwraps a byte array received from the client
Wraps a byte array to be sent to the client
Retrieves the negotiated property
Disposes of any system resources or security-sensitive information the SaslServer might be using
Creates a {@code SaslServer} using the parameters supplied
Returns an array of names of mechanisms that match the specified mechanism selection policies
Call corresponding visitor method(s)
Retrieves the generated ID for the savepoint that this <code>Savepoint</code> object represents
Retrieves the name of the savepoint that this <code>Savepoint</code> object represents
This class is only used internally so this method should never be called
adds processing instruction node to DOM
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
Lexical Handler method to create comment node in DOM tree
Set whether information about document source location should be maintained or not
Get the data or qualified name for the given node identity
Ask the CoRoutine parser to doTerminate and clear the reference
Ask the CoRoutine parser to doTerminate and clear the reference
Bind a IncrementalSAXSource to this DTM
getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model
Return this DTM's lexical handler
Return this DTM's EntityResolver
Return this DTM's DTDHandler
Return this DTM's ErrorHandler
Return this DTM's DeclHandler
Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www
Given a node handle, return its DOM-style node name
Given a node handle, return the XPath node name
5
A document type declaration information item has the following properties:     1
Get the next node identity value in the list, and call the iterator if it hasn't been added yet
Directly create SAX parser events from a subtree
Get the number of nodes that have been added
This method should try and build one or more nodes in the table
Construct the node map from the node
Get a new DTM ID beginning at the specified node index
Migrate a DTM built with an old DTMManager to a new DTMManager
Store the source location of the current node
Given a node handle, return its node value
Given a node handle, return its XPath-style localname
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
Given a namespace handle, return the prefix that the namespace decl is mapping
Retrieves an attribute node by by qualified name and namespace URI
Return the public identifier of the external subset, normalized as described in 4
Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to
Get the string-value of a node as a String object (see http://www
Determine if the string-value of a node is whitespace
Returns the <code>Element</code> whose <code>ID</code> is given by <code>elementId</code>
Get a prefix either from the qname or from the uri mapping, or just make one up!
Get a prefix either from the uri mapping, or just make one up!
Get a prefix either from the qname or from the uri mapping, or just make one up!
Set an ID string to node association in the ID table
Check whether accumulated text should be stripped; if not, append the appropriate flavor of text/cdata node
Resolve an external entity
Receive notification of a notation declaration
Receive notification of an unparsed entity declaration
Receive a Locator object for document events
Receive notification of the beginning of the document
Receive notification of the end of the document
Receive notification of the start of a Namespace mapping
Receive notification of the end of a Namespace mapping
Check if a declaration has already been made for a given prefix
Receive notification of the start of an element
Receive notification of the end of an element
Receive notification of character data inside an element
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Receive notification of a skipped entity
Receive notification of a parser warning
Receive notification of a recoverable parser error
Report a fatal XML parsing error
Report an element type declaration
Report an attribute type declaration
Report an internal entity declaration
Report a parsed external entity declaration
Report the start of DTD declarations, if any
Report the end of DTD declarations
Report the beginning of an entity in content
Report the end of an entity
Report the start of a CDATA section
Report the end of a CDATA section
Report an XML comment anywhere in the document
Set a run time property for this DTM instance
Retrieve the SourceLocator associated with a specific node
Override DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
Return the node type from the expanded type
Get a prefix either from the uri mapping, or just make one up!
Override SAX2DTM
Receive notification of the end of an element
Report an XML comment anywhere in the document
Receive notification of the beginning of the document
Receive notification of the end of the document
Construct the node map from the node
Check whether accumulated text should be stripped; if not, append the appropriate flavor of text/cdata node
Override the processingInstruction() interface in SAX2DTM2
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
The optimized version of DTMDefaultBase
Override SAX2DTM
The optimized version of SAX2DTM
The optimized version of SAX2DTM
Override SAX2DTM
The optimized version of SAX2DTM
Returns the string value of the entire tree
The optimized version of SAX2DTM
Given a node handle, return its node value
Copy the String value of a Text node to a SerializationHandler
Copy an Element node to a SerializationHandler
Copy  namespace nodes
Return the next namespace node following the given base node
Copy  attribute nodes from an element 
Copy an Attribute node to a SerializationHandler
Setting start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Set the node type of the parent that we're looking for
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Return the node at the given position
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
True if this iterator has a reversed axis
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Return the index of the last node in this iterator
True if this iterator has a reversed axis
Returns a deep copy of this iterator
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Resets the iterator to the last start node
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Get the next node in the iteration
Get start to END should 'close' the iterator, i
True if this iterator has a reversed axis
Returns a deep copy of this iterator
Set start to END should 'close' the iterator, i
Resets the iterator to the last start node
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Return the node at the given position
Returns the position of the last node within the iteration, as defined by XPath
Set start to END should 'close' the iterator, i
Tell if this node identity is a descendant
Get the next node in the iteration
Reset
Get the next node in the iteration
Get the next node in the iteration
Given a DTM, find the owning document node
Given a node handle, find the owning document node, using DTM semantics (Document owns itself) rather than DOM semantics (Document has no owner)
Given a node identifier, find the owning document node
Receive notification of the beginning of a new RTF document
Receive notification of the end of the document
"Tail-pruning" support for RTFs
"Tail-pruning" support for RTFs
Used to report a {@link SAXException}to the {@link XMLReporter} registered with this handler
Parses an XML qualified name, and places the resulting prefix and local name in the provided String array
Set the Catalog for which parsing is being performed
Set the XML SAX Parser Factory
Set the XML SAX Parser Class
Get the parser factory currently in use
Get the parser class currently in use
Set the SAXCatalogParser class for the given namespace/root element type
Get the SAXCatalogParser class for the given namespace/root element type
Parse an XML Catalog file
Parse an XML Catalog stream
The SAX <code>setDocumentLocator</code> method
The SAX <code>startDocument</code> method
The SAX <code>endDocument</code> method
The SAX <code>startElement</code> method
The SAX2 <code>startElement</code> method
The SAX <code>endElement</code> method
The SAX2 <code>endElement</code> method
The SAX <code>characters</code> method
The SAX <code>ignorableWhitespace</code> method
The SAX <code>processingInstruction</code> method
The SAX <code>startPrefixMapping</code> method
The SAX <code>endPrefixMapping</code> method
The SAX <code>skippedentity</code> method
Return a detail message for this exception
Return the embedded exception, if any
Return the cause of the exception
Override toString to pick up any embedded exception
Define the origin of the document from which the tree was built
Returns the origin of the document from which the tree was built
Lookup a namespace URI from a prefix starting at node
Returns 'true' if a specific node is an element (of any type)
Returns 'true' if a specific node is an attribute (of any type)
Returns the number of nodes in the tree (used for indexing)
Part of the DOM interface - no function here
Returns true if node1 comes before node2 in document order
Create an org
Create an org
Create an org
Create an org
Encapsulates an iterator in an OrderedIterator to ensure node order
Returns singleton iterator containg the document root Works for them main document (mark == 0)
Get mapping from DOM namespace types to external namespace types
Returns the namespace type of a specific node
Returns the internal type associated with an expanded QName
Returns the internal type associated with an expanded QName
Get mapping from DOM element/attribute types to external types
Get mapping from external element/attribute types to DOM types
Get mapping from DOM namespace types to external namespace types
Get mapping from external namespace types to DOM namespace types
Migrate a DTM built with an old DTMManager to a new DTMManager
Return the node identity for a given id String
Return true if the input source is DOMSource
Find out whether or not to strip whitespace nodes
SAX2: Receive notification of character data
SAX2: Receive notification of the beginning of a document
SAX2: Receive notification of the end of a document
Specialized interface used by DOM2SAX
SAX2: Receive notification of the beginning of an element
SAX2: Receive notification of the end of an element
SAX2: Receive notification of a processing instruction
SAX2: Receive notification of ignorable whitespace in element content
SAX2: Begin the scope of a prefix-URI Namespace mapping
SAX2: Report an XML comment anywhere in the document
Prints the whole tree to standard output
Returns the name of a node (attribute or element)
Returns the namespace URI to which a node belongs
Returns the attribute node of a given type (if any) for an element
Returns the value of a given attribute type of a given element
This method is for testing/debugging only
Returns an iterator with all the children of a given node
Returns an iterator with all children of a specific type for a given node (element)
This is a shortcut to the iterators that implement the supported XPath axes (only namespace::) is not supported
Similar to getAxisIterator, but this one returns an iterator containing nodes of a typed axis (ex
Do not think that this returns an iterator for the namespace axis
Returns an iterator with all descendants of a node that are of a given type
Returns the nth descendant of a node
Copy the string value of a node directly to an output handler
Copy a node-set to an output handler
Copy the whole tree to an output handler
Performs a deep copy (ref
Performs a shallow copy (ref
Returns a node' defined language for a node (if any)
Returns an instance of the DOMBuilder inner class This class will consume the input document through a SAX2 interface and populate the tree
Return a SerializationHandler for output handling
Return a instance of a DOM class to be used as an RTF
Return a instance of a DOM class to be used as an RTF
Return the attributes map
The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Returns a deep copy of this iterator
True if this iterator has a reversed axis
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Set start to END should 'close' the iterator, i
Get the next node in the iteration
Sets the public identifier
Sets the system identifier
Sets the byte stream
Sets the character stream
Sets the encoding of the stream
Formats a message with the specified arguments using the given locale information
Get the public identifier of the entity where the exception occurred
Get the system identifier of the entity where the exception occurred
The line number of the end of the text where the exception occurred
The column number of the end of the text where the exception occurred
Override toString to provide more detailed error message
<p>Reset this <code>SAXParser</code> to its original configuration
<p>Parse the content of the given {@link java
<p>Parse the content of the given {@link java
Parse the content of the given {@link java
Parse the content of the given {@link java
Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified {@link org
Parse the content described by the giving Uniform Resource Identifier (URI) as XML using the specified {@link org
Parse the content of the file specified as XML using the specified {@link org
Parse the content of the file specified as XML using the specified {@link org
Parse the content given {@link org
Parse the content given {@link org
Returns the SAX parser that is encapsultated by the implementation of this class
Returns the {@link org
Indicates whether or not this parser is configured to understand namespaces
Indicates whether or not this parser is configured to validate XML documents
<p>Sets the particular property in the underlying implementation of {@link org
<p>Returns the particular property requested for in the underlying implementation of {@link org
<p>Get a reference to the the {@link Schema} being used by the XML processor
<p>Get the XInclude processing mode for this parser
Obtain a new instance of a <code>SAXParserFactory</code>
<p>Obtain a new instance of a <code>SAXParserFactory</code> from class name
<p>Creates a new instance of a SAXParser using the currently configured factory parameters
Specifies that the parser produced by this code will provide support for XML namespaces
Specifies that the parser produced by this code will validate documents as they are parsed
Indicates whether or not the factory is configured to produce parsers which are namespace aware
Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse
<p>Sets the particular feature in the underlying implementation of org
<p>Returns the particular property requested for in the underlying implementation of org
Gets the {@link Schema} object specified through the {@link #setSchema(Schema schema)} method
<p>Set the {@link Schema} to be used by parsers created from this factory
<p>Set state of XInclude processing
<p>Get state of XInclude processing
Creates a new instance of <code>SAXParser</code> using the currently configured factory parameters
Sets the particular feature in the underlying implementation of org
returns the particular property requested for in the underlying implementation of org
Returns the XMLReader that is encapsulated by the implementation of this class
Gets the XInclude processing mode for this parser
Sets the particular property in the underlying implementation of org
returns the particular property requested for in the underlying implementation of org
Override SAXParser's setFeature method to track the initial state of features
Override SAXParser's setProperty method to track the initial state of properties
Set the target to be a SAX2 {@link org
Get the {@link org
Set the SAX2 {@link org
Get a SAX2 {@link org
Method setSystemId Set the systemID that may be used in association with the {@link org
Get the system identifier that was set with setSystemId
Set the XMLReader to be used for the Source
Get the XMLReader to be used for the Source
Set the SAX InputSource to be used for the Source
Get the SAX InputSource to be used for the Source
Set the system identifier for this Source
<p>Get the base ID (URI or system ID) from where URIs will be resolved
Attempt to obtain a SAX InputSource object from a Source object
Return the public identifier for the current document event
Return the system identifier for the current document event
Return the line number where the current document event ends
Return the column number where the current document event ends
Get a TransformerHandler object that can process SAX ContentHandler events into a Result, based on the transformation instructions specified by the argument
Get a TransformerHandler object that can process SAX ContentHandler events into a Result, based on the Templates argument
Get a TransformerHandler object that can process SAX ContentHandler events into a Result
Get a TemplatesHandler object that can process SAX ContentHandler events into a Templates object
Create an XMLFilter that uses the given Source as the transformation instructions
Create an XMLFilter, based on the Templates argument
Closes this scanner
Returns the <code>IOException</code> last thrown by this <code>Scanner</code>'s underlying <code>Readable</code>
Returns the <code>Pattern</code> this <code>Scanner</code> is currently using to match delimiters
Sets this scanner's delimiting pattern to the specified pattern
Sets this scanner's delimiting pattern to a pattern constructed from the specified <code>String</code>
Returns this scanner's locale
Sets this scanner's locale to the specified locale
Returns this scanner's default radix
Sets this scanner's default radix to the specified radix
Returns the match result of the last scanning operation performed by this scanner
<p>Returns the string representation of this <code>Scanner</code>
Returns true if this scanner has another token in its input
Finds and returns the next complete token from this scanner
The remove operation is not supported by this implementation of <code>Iterator</code>
Returns true if the next token matches the pattern constructed from the specified string
Returns the next token if it matches the pattern constructed from the specified string
Returns true if the next complete token matches the specified pattern
Returns the next token if it matches the specified pattern
Returns true if there is another line in the input of this scanner
Advances this scanner past the current line and returns the input that was skipped
Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Attempts to find the next occurrence of the specified pattern ignoring delimiters
Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Attempts to find the next occurrence of the specified pattern
Skips input that matches the specified pattern, ignoring delimiters
Skips input that matches a pattern constructed from the specified string
Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false"
Scans the next token of the input into a boolean value and returns that value
Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the {@link #nextByte} method
Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the {@link #nextByte} method
Scans the next token of the input as a <tt>byte</tt>
Scans the next token of the input as a <tt>byte</tt>
Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the {@link #nextShort} method
Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the {@link #nextShort} method
Scans the next token of the input as a <tt>short</tt>
Scans the next token of the input as a <tt>short</tt>
Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the {@link #nextInt} method
Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the {@link #nextInt} method
Scans the next token of the input as an <tt>int</tt>
Scans the next token of the input as an <tt>int</tt>
Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the {@link #nextLong} method
Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the {@link #nextLong} method
Scans the next token of the input as a <tt>long</tt>
Scans the next token of the input as a <tt>long</tt>
Returns true if the next token in this scanner's input can be interpreted as a float value using the {@link #nextFloat} method
Scans the next token of the input as a <tt>float</tt>
Returns true if the next token in this scanner's input can be interpreted as a double value using the {@link #nextDouble} method
Scans the next token of the input as a <tt>double</tt>
Returns true if the next token in this scanner's input can be interpreted as a <code>BigInteger</code> in the default radix using the {@link #nextBigInteger} method
Returns true if the next token in this scanner's input can be interpreted as a <code>BigInteger</code> in the specified radix using the {@link #nextBigInteger} method
Scans the next token of the input as a {@link java
Scans the next token of the input as a {@link java
Returns true if the next token in this scanner's input can be interpreted as a <code>BigDecimal</code> using the {@link #nextBigDecimal} method
Scans the next token of the input as a {@link java
Resets this scanner
Reads a sequence of bytes from this channel into a subsequence of the given buffers
Reads a sequence of bytes from this channel into the given buffers
Creates and executes a one-shot action that becomes enabled after the given delay
Creates and executes a ScheduledFuture that becomes enabled after the given delay
Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after {@code initialDelay} then {@code initialDelay+period}, then {@code initialDelay + 2 * period}, and so on
Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
Modifies or replaces the task used to execute a runnable
Modifies or replaces the task used to execute a callable
Executes {@code command} with zero required delay
Sets the policy on whether to continue executing existing periodic tasks even when this executor has been {@code shutdown}
Gets the policy on whether to continue executing existing periodic tasks even when this executor has been {@code shutdown}
Sets the policy on whether to execute existing delayed tasks even when this executor has been {@code shutdown}
Gets the policy on whether to execute existing delayed tasks even when this executor has been {@code shutdown}
Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
Returns the task queue used by this executor
Creates a new {@link Validator} for this {@link Schema}
Creates a new {@link ValidatorHandler} for this {@link Schema}
The end of the document
A comment
A processing instruction
Character content
The start of an element
An empty element
The end of an element
Ignorable whitespace
The start of a CDATA section
The end of a CDATA section
Returns the DOM document object
Delegates to SchemaParsingConfig
Delegates to SchemaParsingConfig
Delegates to SchemaParsingConfig
Delegates to SchemaParsingConfig
Delegates to SchemaParsingConfig
Delegates parsing to SchemaParsingConfig
Reset SchemaParsingConfig
ResetNodePool on SchemaParsingConfig
Get a default instance of SchemaDVFactory implementation
Get an instance of SchemaDVFactory implementation
Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType
get all built-in simple types, which are stored in a SymbolHash keyed by the name
Create a new simple type which is derived by restriction from another simple type
Create a new simple type which is derived by list from another simple type
Create a new simple type which is derived by union from a list of other simple types
Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the          ur-types and if all simple types should be derived from a          complex type, so as of now we ignore the fact that anySimpleType          is derived from anyType, and pass 'null' as the base of          anySimpleType
get all built-in simple types, which are stored in a hashtable keyed by the name
<p>Lookup an implementation of the <code>SchemaFactory</code> that supports the specified schema language and return it
<p>Obtain a new instance of a <code>SchemaFactory</code> from class name
<p>Is specified schema supported by this <code>SchemaFactory</code>?</p>
Look up the value of a feature flag
<p>Set a feature for this <code>SchemaFactory</code>, {@link Schema}s created by this factory, and by extension, {@link Validator}s and {@link ValidatorHandler}s created by those {@link Schema}s
Set the value of a property
Look up the value of a property
Sets the {@link ErrorHandler} to receive errors encountered during the <code>newSchema</code> method invocation
Gets the current {@link ErrorHandler} set to this {@link SchemaFactory}
Sets the {@link LSResourceResolver} to customize resource resolution when parsing schemas
Gets the current {@link LSResourceResolver} set to this {@link SchemaFactory}
<p>Parses the specified source as a schema and returns it as a schema
<p>Parses the specified <code>File</code> as a schema and returns it as a <code>Schema</code>
<p>Parses the specified <code>URL</code> as a schema and returns it as a <code>Schema</code>
Parses the specified source(s) as a schema and returns it as a schema
Creates a special {@link Schema} object
Creates a new {@link SchemaFactory} object for the specified schema language
Returns this grammar's target namespace
register one global attribute
register one global attribute group
register one global element
register one global group
register one global notation
register one global type
register one global complex type
register one global simple type
register one identity constraint
get one global attribute
get one global attribute group
get one global element
get one global group
get one global notation
get one global type
get one identity constraint
get one identity constraint
add one complex type decl: for later constraint checking
add a group redefined by restriction: for later constraint checking
[schema namespace]
[schema components]: a list of top-level components, i
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
[document location]
Return an <code>XSModel</code> that represents components in this schema grammar
This method takes a set of Strings, as stored in a NamespaceSupport object, and "fools" the object into thinking that this is one unified context
This method returns an array of Strings, as would be stored in a NamespaceSupport object
Decides where the schema file (of the given namespace URI) will be written, and return it as a {@link Result} object
Returns the state of a feature
Set the state of a feature
Returns the value of a property
setProperty
Set the locale to use for messages
Sets the input source for the document to parse
Parses the document in a pull parsing fashion
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Reset all components before parsing
Configures the XML 1
Configures the XML 1
Check a feature
Check a property
Reset all XML 1
Reset all XML 1
Returns the enclosing scope
Returns the innermost type element containing the position of this scope
Returns the innermost executable element containing the position of this scope
Returns the elements directly contained in this scope
Associates a <code>Bindings</code> instance with a particular scope in this <code>ScriptContext</code>
Gets the <code>Bindings</code>  associated with the given scope in this <code>ScriptContext</code>
Sets the value of an attribute in a given scope
Gets the value of an attribute in a given scope
Remove an attribute in a given scope
Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order
Get the lowest scope in which an attribute is defined
Returns the <code>Writer</code> for scripts to use when displaying output
Returns the <code>Writer</code> used to display error output
Sets the <code>Writer</code> for scripts to use when displaying output
Sets the <code>Writer</code> used to display error output
Returns a <code>Reader</code> to be used by the script to read input
Sets the <code>Reader</code> for scripts to read input 
Returns immutable <code>List</code> of all the valid values for scope in the ScriptContext
Causes the immediate execution of the script whose source is the String passed as the first argument
Same as <code>eval(String, ScriptContext)</code> where the source of the script is read from a <code>Reader</code>
Executes the specified script
Same as <code>eval(String)</code> except that the source of the script is provided as a <code>Reader</code>
Executes the script using the <code>Bindings</code> argument as the <code>ENGINE_SCOPE</code> <code>Bindings</code> of the <code>ScriptEngine</code> during the script execution
Same as <code>eval(String, Bindings)</code> except that the source of the script is provided as a <code>Reader</code>
Sets a key/value pair in the state of the ScriptEngine that may either create a Java Language Binding to be used in the execution of scripts or be used in some other way, depending on whether the key is reserved
Retrieves a value set in the state of this engine
Returns a scope of named values
Sets a scope of named values to be used by scripts
Returns an uninitialized <code>Bindings</code>
Returns the default <code>ScriptContext</code> of the <code>ScriptEngine</code> whose Bindings, Reader and Writers are used for script executions when no <code>ScriptContext</code> is specified
Sets the default <code>ScriptContext</code> of the <code>ScriptEngine</code> whose Bindings, Reader and Writers are used for script executions when no <code>ScriptContext</code> is specified
Returns a <code>ScriptEngineFactory</code> for the class to which this <code>ScriptEngine</code> belongs
Returns the full  name of the <code>ScriptEngine</code>
Returns the version of the <code>ScriptEngine</code>
Returns an immutable list of filename extensions, which generally identify scripts written in the language supported by this <code>ScriptEngine</code>
Returns an immutable list of mimetypes, associated with scripts that can be executed by the engine
Returns an immutable list of  short names for the <code>ScriptEngine</code>, which may be used to identify the <code>ScriptEngine</code> by the <code>ScriptEngineManager</code>
Returns the name of the scripting language supported by this <code>ScriptEngine</code>
Returns the version of the scripting language supported by this <code>ScriptEngine</code>
Returns the value of an attribute whose meaning may be implementation-specific
Returns a String which can be used to invoke a method of a  Java object using the syntax of the supported scripting language
Returns a String that can be used as a statement to display the specified String  using the syntax of the supported scripting language
Returns a valid scripting language executable program with given statements
Returns an instance of the <code>ScriptEngine</code> associated with this <code>ScriptEngineFactory</code>
<code>setBindings</code> stores the specified <code>Bindings</code> in the <code>globalScope</code> field
<code>getBindings</code> returns the value of the <code>globalScope</code> field
Sets the specified key/value pair in the Global Scope
Gets the value for the specified key in the Global Scope
Looks up and creates a <code>ScriptEngine</code> for a given  name
Look up and create a <code>ScriptEngine</code> for a given extension
Look up and create a <code>ScriptEngine</code> for a given mime type
Returns a list whose elements are instances of all the <code>ScriptEngineFactory</code> classes found by the discovery mechanism
Registers a <code>ScriptEngineFactory</code> to handle a language name
Registers a <code>ScriptEngineFactory</code> to handle a mime type
Registers a <code>ScriptEngineFactory</code> to handle an extension
Returns a message containing the String passed to a constructor as well as line and column numbers and filename if any of these are known
Get the line number on which an error occurred
Get the column number on which an error occurred
Get the source of the script causing the error
Returns the preferred size of the viewport for a view component
Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation
Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation
Return true if a viewport should always force the width of this <code>Scrollable</code> to match the width of the viewport
Return true if a viewport should always force the height of this Scrollable to match the height of the viewport
Creates the <code>Scrollbar</code>'s peer
Returns the orientation of this scroll bar
Sets the orientation for this scroll bar
Gets the current value of this scroll bar
Sets the value of this scroll bar to the specified value
Gets the minimum value of this scroll bar
Sets the minimum value of this scroll bar
Gets the maximum value of this scroll bar
Sets the maximum value of this scroll bar
Gets the visible amount of this scroll bar
Sets the visible amount of this scroll bar
Sets the unit increment for this scroll bar
Gets the unit increment for this scrollbar
Sets the block increment for this scroll bar
Gets the block increment of this scroll bar
Sets the values of four properties for this scroll bar: <code>value</code>, <code>visibleAmount</code>, <code>minimum</code>, and <code>maximum</code>
Returns true if the value is in the process of changing as a result of actions being taken by the user
Sets the <code>valueIsAdjusting</code> property
Adds the specified adjustment listener to receive instances of <code>AdjustmentEvent</code> from this scroll bar
Removes the specified adjustment listener so that it no longer receives instances of <code>AdjustmentEvent</code> from this scroll bar
Returns an array of all the adjustment listeners registered on this scrollbar
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Scrollbar</code>
Processes events on this scroll bar
Processes adjustment events occurring on this scrollbar by dispatching them to any registered <code>AdjustmentListener</code> objects
Returns a string representing the state of this <code>Scrollbar</code>
Gets the <code>AccessibleContext</code> associated with this <code>Scrollbar</code>
Get the state set of this object
Get the role of this object
Get the <code>AccessibleValue</code> associated with this object
Get the accessible value of this object
Set the value of this object as a Number
Get the minimum accessible value of this object
Get the maximum accessible value of this object
Sets the parameters for the scrollbar
Sets the line increment of the scrollbar
Sets the page increment of the scrollbar
Adds the specified component to this scroll pane container
Returns the display policy for the scrollbars
Returns the current size of the scroll pane's view port
Returns the height that would be occupied by a horizontal scrollbar, which is independent of whether it is currently displayed by the scroll pane or not
Returns the width that would be occupied by a vertical scrollbar, which is independent of whether it is currently displayed by the scroll pane or not
Returns the <code>ScrollPaneAdjustable</code> object which represents the state of the vertical scrollbar
Returns the <code>ScrollPaneAdjustable</code> object which represents the state of the horizontal scrollbar
Scrolls to the specified position within the child component
Scrolls to the specified position within the child component
Returns the current x,y position within the child which is displayed at the 0,0 location of the scrolled panel's view port
Sets the layout manager for this container
Lays out this container by resizing its child to its preferred size
Prints the component in this scroll pane
Creates the scroll pane's peer
Returns a string representing the state of this <code>ScrollPane</code>
Process mouse wheel events that are delivered to this <code>ScrollPane</code> by scrolling an appropriate amount
If wheel scrolling is enabled, we return true for MouseWheelEvents
Enables/disables scrolling in response to movement of the mouse wheel
Indicates whether or not scrolling will take place in response to the mouse wheel
Gets the AccessibleContext associated with this ScrollPane
Get the role of this object
Returns the orientation of this scrollbar
This method should <strong>NOT</strong> be called by user code
This method should <strong>NOT</strong> be called by user code
This method should <strong>NOT</strong> be called by user code
Sets the <code>valueIsAdjusting</code> property
Returns true if the value is in the process of changing as a result of actions being taken by the user
Sets the value of this scrollbar to the specified value
Adds the specified adjustment listener to receive adjustment events from this <code>ScrollPaneAdjustable</code>
Removes the specified adjustment listener so that it no longer receives adjustment events from this <code>ScrollPaneAdjustable</code>
Returns an array of all the adjustment listeners registered on this <code>ScrollPaneAdjustable</code>
Returns a string representation of this scrollbar and its values
Returns a string representing the state of this scrollbar
This method is invoked after the ScrollPaneLayout is set as the LayoutManager of a <code>JScrollPane</code>
Removes an existing component
Adds the specified component to the layout
Removes the specified component from the layout
Returns the vertical scrollbar-display policy
Sets the vertical scrollbar-display policy
Returns the horizontal scrollbar-display policy
Sets the horizontal scrollbar-display policy
Returns the <code>JViewport</code> object that displays the scrollable contents
Returns the <code>JScrollBar</code> object that handles horizontal scrolling
Returns the <code>JScrollBar</code> object that handles vertical scrolling
Returns the <code>JViewport</code> object that is the row header
Returns the <code>JViewport</code> object that is the column header
Returns the <code>Component</code> at the specified corner
The preferred size of a <code>ScrollPane</code> is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies
The minimum size of a <code>ScrollPane</code> is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER
Lays out the scrollpane
Returns the bounds of the border around the specified scroll pane's viewport
Returns the height of the horizontal scroll bar
Returns the width of the vertical scroll bar
Sets the scroll position of the child
Called when the child component changes its size
Sets the unit increment of one of the scroll pane's adjustables
Sets the value for one of the scroll pane's adjustables
Retrieves the search scope of these SearchControls
Retrieves the time limit of these SearchControls in milliseconds
Determines whether links will be dereferenced during the search
Determines whether objects will be returned as part of the result
Retrieves the maximum number of entries that will be returned as a result of the search
Retrieves the attributes that will be returned as part of the search
Sets the search scope to one of: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE
Sets the time limit of these SearchControls in milliseconds
Enables/disables link dereferencing during the search
Enables/disables returning objects returned as part of the result
Sets the maximum number of entries to be returned as a result of the search
Specifies the attributes that will be returned as part of the search
Retrieves the attributes in this search result
Sets the attributes of this search result to <code>attrs</code>
Generates the string representation of this SearchResult
Blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread
Unblocks the execution of the thread blocked by the {@link #enter} method and exits the secondary loop
This method returns whether the KeyResolverSpi is able to perform the requested action
Method engineLookupAndResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Method engineResolvePrivateKey
Returns the cipher suite in use on the original connection that retrieved the network resource
Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource
Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache
Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource
Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource
Converts an array of bytes into an instance of class Class, with an optional CodeSource
Converts a {@link java
Returns the permissions for the given CodeSource object
Opens the directory identified by the given path, returning a {@code SecureDirectoryStream} to iterate over the entries in the directory
Opens or creates a file in this directory, returning a seekable byte channel to access the file
Deletes a file
Deletes a directory
Move a file from this directory to another directory
Returns a new file attribute view to access the file attributes of this directory
Returns a new file attribute view to access the file attributes of a file in this directory
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
Returns the provider of this SecureRandom object
Returns the name of the algorithm implemented by this SecureRandom object
Reseeds this random object
Reseeds this random object, using the eight bytes contained in the given {@code long seed}
Generates a user-specified number of random bytes
Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)
Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
Returns a {@code SecureRandom} object that was selected by using the algorithms/providers specified in the {@code securerandom
Reseeds this random object
Generates a user-specified number of random bytes
Returns the given number of seed bytes
Gets a specified property for an algorithm
Adds a new provider, at a specified position
Adds a provider to the next position available
Removes the provider with the specified name
Returns an array containing all the installed providers
Returns the provider installed with the specified name, if any
Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed
Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed
Gets a security property value
Sets a security property value
Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e
Tests if there is a security check in progress
Returns the current execution stack as an array of classes
Returns the class loader of the most recently executing method from a class defined using a non-system class loader
Returns the class of the most recently executing method from a class defined using a non-system class loader
Returns the stack depth of the specified class
Returns the stack depth of the most recently executing method from a class defined using a non-system class loader
Tests if a method from a class with the specified         name is on the execution stack
Basically, tests if a method from a class defined using a          class loader is on the execution stack
Creates an object that encapsulates the current execution environment
Throws a <code>SecurityException</code> if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect
Throws a <code>SecurityException</code> if the specified security context is denied access to the resource specified by the given permission
Throws a <code>SecurityException</code> if the calling thread is not allowed to create a new class loader
Throws a <code>SecurityException</code> if the calling thread is not allowed to modify the thread argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to modify the thread group argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
Throws a <code>SecurityException</code> if the calling thread is not allowed to create a subprocess
Throws a <code>SecurityException</code> if the calling thread is not allowed to dynamic link the library code specified by the string argument file
Throws a <code>SecurityException</code> if the calling thread is not allowed to read from the specified file descriptor
Throws a <code>SecurityException</code> if the calling thread is not allowed to read the file specified by the string argument
Throws a <code>SecurityException</code> if the specified security context is not allowed to read the file specified by the string argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to write to the specified file descriptor
Throws a <code>SecurityException</code> if the calling thread is not allowed to write to the file specified by the string argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to delete the specified file
Throws a <code>SecurityException</code> if the calling thread is not allowed to open a socket connection to the specified host and port number
Throws a <code>SecurityException</code> if the specified security context is not allowed to open a socket connection to the specified host and port number
Throws a <code>SecurityException</code> if the calling thread is not allowed to wait for a connection request on the specified local port number
Throws a <code>SecurityException</code> if the calling thread is not permitted to accept a socket connection from the specified host and port number
Throws a <code>SecurityException</code> if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
Throws a <code>SecurityException</code> if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
Throws a <code>SecurityException</code> if the calling thread is not allowed to access or modify the system properties
Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system property with the specified <code>key</code> name
Returns <code>false</code> if the calling thread is not trusted to bring up the top-level window indicated by the <code>window</code> argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to initiate a print job request
Throws a <code>SecurityException</code> if the calling thread is not allowed to access the system clipboard
Throws a <code>SecurityException</code> if the calling thread is not allowed to access the AWT event queue
Throws a <code>SecurityException</code> if the calling thread is not allowed to access the package specified by the argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to define classes in the package specified by the argument
Throws a <code>SecurityException</code> if the calling thread is not allowed to set the socket factory used by <code>ServerSocket</code> or <code>Socket</code>, or the stream handler factory used by <code>URL</code>
Throws a <code>SecurityException</code> if the calling thread is not allowed to access members
Determines whether the permission with the specified permission target name should be granted or denied
Returns the thread group into which to instantiate any new thread being created at the time this is being called
Return an instance of this class
Return resource using the same classloader for the ObjectFactory by default or bootclassloader when Security Manager is in place
Gets a resource bundle using the specified base name, the default locale, and the caller's class loader
Gets a resource bundle using the specified base name and locale, and the caller's class loader
Strip off path from an URI
Check the protocol used in the systemId against allowed protocols
Read JAXP system property in this order: system property, $java
Reads a sequence of bytes from this channel into the given buffer
Writes a sequence of bytes to this channel from the given buffer
Returns this channel's position
Sets this channel's position
Returns the current size of entity to which this channel is connected
Truncates the entity, to which this channel is connected, to the given size
Get the label of the <code>@see</code> tag
Get the package doc when <code>@see</code> references only a package
Get the class or interface name of the <code>@see</code> reference
Get the class doc referenced by the class name part of @see
Get the field, constructor or method substring of the <code>@see</code> reference
Get the member doc for the field, constructor or method referenced by <code>@see</code>
Flag to indicate that partial returns are valid
Flag to indicate that partial returns are valid
Converts a segment into a String
Sets the position to getBeginIndex() and returns the character at that position
Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and returns the character at that position
Gets the character at the current position (as returned by getIndex())
Increments the iterator's index by one and returns the character at the new index
Decrements the iterator's index by one and returns the character at the new index
Sets the position to the specified position in the text and returns that character
Returns the start index of the text
Returns the end index of the text
Returns the current index
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a shallow copy
Since this is a variable length instruction, it may shift the following instructions which then need to update their position
Dump instruction as byte code to stream out
Read needed data (e
Set branch target for `i'th case
Returns the provider that created this channel
Returns an <a href="SelectionKey
Tells whether or not this channel is currently registered with any selectors
Retrieves the key representing the channel's registration with the given selector
Registers this channel with the given selector, returning a selection key
Registers this channel with the given selector, returning a selection key
Adjusts this channel's blocking mode
Tells whether or not every I/O operation on this channel will block until it completes
Retrieves the object upon which the {@link #configureBlocking configureBlocking} and {@link #register register} methods synchronize
Returns the channel for which this key was created
Returns the selector for which this key was created
Tells whether or not this key is valid
Requests that the registration of this key's channel with its selector be cancelled
Retrieves this key's interest set
Sets this key's interest set to the given value
Retrieves this key's ready-operation set
Tests whether this key's channel is ready for reading
Tests whether this key's channel is ready for writing
Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation
Tests whether this key's channel is ready to accept a new socket connection
Attaches the given object to this key
Retrieves the current attachment
Opens a selector
Tells whether or not this selector is open
Returns the provider that created this channel
Returns this selector's key set
Returns this selector's selected-key set
Selects a set of keys whose corresponding channels are ready for I/O operations
Selects a set of keys whose corresponding channels are ready for I/O operations
Selects a set of keys whose corresponding channels are ready for I/O operations
Causes the first selection operation that has not yet returned to return immediately
Closes this selector
Returns the system-wide default selector provider for this invocation of the Java virtual machine
Opens a datagram channel
Opens a datagram channel
Opens a pipe
Opens a selector
Opens a server-socket channel
Opens a socket channel
Returns the channel inherited from the entity that created this Java virtual machine
Returns the next node in the set and advances the position of the iterator in the set
Return the first node out of the nodeset, if this expression is a nodeset expression
Get the index of the last node that can be itterated to
Acquires a permit from this semaphore, blocking until one is available, or the thread is {@linkplain Thread#interrupt interrupted}
Acquires a permit from this semaphore, blocking until one is available
Acquires a permit from this semaphore, only if one is available at the time of invocation
Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Releases a permit, returning it to the semaphore
Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is {@linkplain Thread#interrupt interrupted}
Acquires the given number of permits from this semaphore, blocking until all are available
Acquires the given number of permits from this semaphore, only if all are available at the time of invocation
Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been {@linkplain Thread#interrupt interrupted}
Releases the given number of permits, returning them to the semaphore
Returns the current number of permits available in this semaphore
Acquires and returns all permits that are immediately available
Shrinks the number of available permits by the indicated reduction
Returns {@code true} if this semaphore has fairness set true
Queries whether any threads are waiting to acquire
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a string identifying this semaphore, as well as its state
Obtains the timing division type for this sequence
Obtains the timing resolution for this sequence
Creates a new, initially empty track as part of this sequence
Removes the specified track from the sequence
Obtains an array containing all the tracks in this sequence
Obtains the duration of this sequence, expressed in microseconds
Obtains the duration of this sequence, expressed in MIDI ticks
Obtains a list of patches referenced in this sequence
Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream
Reads the next byte of data from this input stream
Reads up to <code>len</code> bytes of data from this input stream into an array of bytes
Closes this input stream and releases any system resources associated with the stream
Sets the current sequence on which the sequencer operates
Sets the current sequence on which the sequencer operates
Obtains the sequence on which the Sequencer is currently operating
Starts playback of the MIDI data in the currently loaded sequence
Stops recording, if active, and playback of the currently loaded sequence, if any
Indicates whether the Sequencer is currently running
Starts recording and playback of MIDI data
Stops recording, if active
Indicates whether the Sequencer is currently recording
Prepares the specified track for recording events received on a particular channel
Disables recording to the specified track
Obtains the current tempo, expressed in beats per minute
Sets the tempo in beats per minute
Obtains the current tempo, expressed in microseconds per quarter note
Sets the tempo in microseconds per quarter note
Scales the sequencer's actual playback tempo by the factor provided
Returns the current tempo factor for the sequencer
Obtains the length of the current sequence, expressed in MIDI ticks, or 0 if no sequence is set
Obtains the current position in the sequence, expressed in MIDI ticks
Sets the current sequencer position in MIDI ticks
Obtains the length of the current sequence, expressed in microseconds, or 0 if no sequence is set
Obtains the current position in the sequence, expressed in microseconds
Sets the current position in the sequence, expressed in microseconds
Sets the source of timing information used by this sequencer
Obtains the current master synchronization mode for this sequencer
Obtains the set of master synchronization modes supported by this sequencer
Sets the slave synchronization mode for the sequencer
Obtains the current slave synchronization mode for this sequencer
Obtains the set of slave synchronization modes supported by the sequencer
Sets the mute state for a track
Obtains the current mute state for a track
Sets the solo state for a track
Obtains the current solo state for a track
Registers a meta-event listener to receive notification whenever a meta-event is encountered in the sequence and processed by the sequencer
Removes the specified meta-event listener from this sequencer's list of registered listeners, if in fact the listener is registered
Registers a controller event listener to receive notification whenever the sequencer processes a control-change event of the requested type or types
Removes a controller event listener's interest in one or more types of controller event
Sets the first MIDI tick that will be played in the loop
Obtains the start position of the loop, in MIDI ticks
Sets the last MIDI tick that will be played in the loop
Obtains the end position of the loop, in MIDI ticks
Sets the number of repetitions of the loop for playback
Obtains the number of repetitions for playback
Determines whether two objects are equal
Finalizes the hashcode method
Provides this synchronization mode's name as the string representation of the mode
This method frees the {@code SeriableArray} object and releases the resources that it holds
Returns a new array that is a copy of this <code>SerialArray</code> object
Returns a new array that is a copy of this <code>SerialArray</code> object, using the given type map for the custom mapping of each element when the elements are SQL UDTs
Returns a new array that is a copy of a slice of this <code>SerialArray</code> object, starting with the element at the given index and containing the given number of consecutive elements
Returns a new array that is a copy of a slice of this <code>SerialArray</code> object, starting with the element at the given index and containing the given number of consecutive elements
Retrieves the SQL type of the elements in this <code>SerialArray</code> object
Retrieves the DBMS-specific type name for the elements in this <code>SerialArray</code> object
Retrieves a <code>ResultSet</code> object holding the elements of the subarray that starts at index <i>index</i> and contains up to <i>count</i> successive elements
Retrieves a <code>ResultSet</code> object that contains all of the elements of the SQL <code>ARRAY</code> value represented by this <code>SerialArray</code> object
Retrieves a <code>ResultSet</code> object that contains all of the elements in the <code>ARRAY</code> value that this <code>SerialArray</code> object represents
Retrieves a result set holding the elements of the subarray that starts at Retrieves a <code>ResultSet</code> object that contains a subarray of the elements in this <code>SerialArray</code> object, starting at index <i>index</i> and containing up to <i>count</i> successive elements
Compares this SerialArray to the specified object
Returns a hash code for this SerialArray
Returns a clone of this {@code SerialArray}
Copies the specified number of bytes, starting at the given position, from this <code>SerialBlob</code> object to another array of bytes
Retrieves the number of bytes in this <code>SerialBlob</code> object's array of bytes
Returns this <code>SerialBlob</code> object as an input stream
Returns the position in this <code>SerialBlob</code> object where the given pattern of bytes begins, starting the search at the specified position
Returns the position in this <code>SerialBlob</code> object where the given <code>Blob</code> object begins, starting the search at the specified position
Writes the given array of bytes to the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at position <code>pos</code>, and returns the number of bytes written
Writes all or part of the given <code>byte</code> array to the <code>BLOB</code> value that this <code>Blob</code> object represents and returns the number of bytes written
Retrieves a stream that can be used to write to the <code>BLOB</code> value that this <code>Blob</code> object represents
Truncates the <code>BLOB</code> value that this <code>Blob</code> object represents to be <code>len</code> bytes in length
Returns an <code>InputStream</code> object that contains a partial {@code Blob} value, starting with the byte specified by pos, which is length bytes in length
This method frees the {@code SeriableBlob} object and releases the resources that it holds
Compares this SerialBlob to the specified object
Returns a hash code for this {@code SerialBlob}
Returns a clone of this {@code SerialBlob}
Retrieves the number of characters in this <code>SerialClob</code> object's array of characters
Returns this <code>SerialClob</code> object's data as a stream of Unicode characters
Retrieves the <code>CLOB</code> value designated by this <code>SerialClob</code> object as an ascii stream
Returns a copy of the substring contained in this <code>SerialClob</code> object, starting at the given position and continuing for the specified number or characters
Returns the position in this <code>SerialClob</code> object where the given <code>String</code> object begins, starting the search at the specified position
Returns the position in this <code>SerialClob</code> object where the given <code>Clob</code> signature begins, starting the search at the specified position
Writes the given Java <code>String</code> to the <code>CLOB</code> value that this <code>SerialClob</code> object represents, at the position <code>pos</code>
Writes <code>len</code> characters of <code>str</code>, starting at character <code>offset</code>, to the <code>CLOB</code> value that this <code>Clob</code> represents
Retrieves a stream to be used to write Ascii characters to the <code>CLOB</code> value that this <code>SerialClob</code> object represents, starting at position <code>pos</code>
Retrieves a stream to be used to write a stream of Unicode characters to the <code>CLOB</code> value that this <code>SerialClob</code> object represents, at position <code>pos</code>
Truncates the <code>CLOB</code> value that this <code>SerialClob</code> object represents so that it has a length of <code>len</code> characters
Returns a {@code Reader} object that contains a partial {@code SerialClob} value, starting with the character specified by pos, which is length characters in length
This method frees the {@code SeriableClob} object and releases the resources that it holds
Compares this SerialClob to the specified object
Returns a hash code for this {@code SerialClob}
Returns a clone of this {@code SerialClob}
Returns a new URL that is a copy of this <code>SerialDatalink</code> object
Compares this {@code SerialDatalink} to the specified object
Returns a hash code for this {@code SerialDatalink}
Returns a clone of this {@code SerialDatalink}
Return the serializable field name
Return the field type string
Return the ClassDoc for field type
Return the field comment
Compares this Object with the specified Object for order
Return the saved public identifier
Return the saved system identifier
Return the saved line number (1-based)
Return the saved column number (1-based)
Set the public identifier for this locator
Set the system identifier for this locator
Set the line number for this locator (1-based)
Set the column number for this locator (1-based)
Set the SAX Content handler that the serializer sends its output to
Notify that the serializer should take this DOM node as input to be serialized
Turns special character escaping on/off
Set the number of spaces to indent for each indentation level
Set the transformer associated with the serializer
Get the transformer associated with the serializer
Used only by TransformerSnapshotImpl to restore the serialization to a previous state
Flush any pending events currently queued up in the serializer
Default behavior is to expand DTD entities, that is the initall default value is true
Specify if the output will be treated as a standalone  property
Get the name of the class that captured this lambda
Get the name of the invoked type to which this lambda has been converted
Get the name of the primary method for the functional interface to which this lambda has been converted
Get the signature of the primary method for the functional interface to which this lambda has been converted
Get the name of the class containing the implementation method
Get the name of the implementation method
Get the signature of the implementation method
Get the method handle kind (see {@link MethodHandleInfo}) of the implementation method
Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site
Get the count of dynamic arguments to the lambda capture site
Get a dynamic argument to the lambda capture site
Specifies an output stream to which the document should be serialized
Get the output stream where the events will be serialized to
Specifies a writer to which the document should be serialized
Get the character stream where the events will be serialized to
Specifies an output format for this serializer
Returns the output format properties for this serializer
Return a {@link ContentHandler} interface to provide SAX input to
Return a {@link DOMSerializer} interface into this serializer
This method resets the serializer
To fire off the end element trace event
Report the characters trace event
Receive notification of a comment
If at runtime, when the qname of the attribute is known, another prefix is specified for the attribute, then we can patch or hack the name with this method
Returns the local name of a qualified name
Receive an object for locating the origin of SAX document events
Adds the given attribute to the set of collected attributes , but only if there is a currently open element
Adds the given attribute to the set of attributes, even if there is no currently open element
Adds  the given attribute to the set of collected attributes, but only if there is a currently open element
Adds the given xsl:attribute to the set of collected attributes, but only if there is a currently open element
Add the given attributes to the currently collected ones
Return a {@link ContentHandler} interface into this serializer
Report the end of an entity
Flush and close the underlying java
Initialize global variables
Returns the character encoding to be used in the output document
Sets the character encoding coming from the xsl:output encoding stylesheet attribute
Sets the value coming from the xsl:output omit-xml-declaration stylesheet attribute
Returns the previously set value of the value to be used as the public identifier in the document type declaration (DTD)
Set the value coming from the xsl:output doctype-public stylesheet attribute
Returns the previously set value of the value to be used as the system identifier in the document type declaration (DTD)
Set the value coming from the xsl:output doctype-system stylesheet attribute
Set the value coming from the xsl:output doctype-public and doctype-system stylesheet properties
Sets the value coming from the xsl:output standalone stylesheet attribute
Sets the XSL standalone attribute, but does not remember if this is a default or explicite setting
Gets the XSL standalone attribute
Gets the mediatype the media-type or MIME type associated with the output document
Gets the version of the output format
Sets the value coming from the xsl:output version attribute
Sets the value coming from the xsl:output media-type stylesheet attribute
Sets the indentation amount
Sets the value coming from the xsl:output indent stylesheet attribute
Sets the isStandalone property
This method is used when a prefix/uri namespace mapping is indicated after the element was started with a startElement() and before and endElement()
Return a {@link DOMSerializer} interface into this serializer
Push a boolean state based on if the name of the current element is found in the list of qnames
Returns the local name of a qualified name
Some users of the serializer may need the current namespace mappings
Returns the prefix currently pointing to the given URI (if any)
Returns the URI of an element or attribute
Returns the URI of prefix (if any)
Entity reference event
Sets the transformer associated with this serializer
Gets the transformer associated with this serializer
This method gets the nodes value as a String and uses that String as if it were an input character notification
To fire off start entity trace event
Report the CDATA trace event
Report the comment trace event
To fire off end entity trace event
To fire off start document trace  event
To fire off end document trace event
Report the start element trace event
To fire off the PI trace event
To fire off the entity reference trace event
Receive notification of the beginning of a document
This method handles what needs to be done at a startDocument() call, whether from an external caller, or internally called in the serializer
This method is used to set the source locator, which might be used to generated an error message
Used only by TransformerSnapshotImpl to restore the serialization to a previous state
This method adds an attribute the the current element, but should not be used for an xsl:attribute child
If set to false the serializer does not expand DTD entities, but leaves them as is, the default value is true
Returns a serializer for the specified output method
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
The lookup table for error messages
Tell if trace listeners are present
Fire startDocument, endDocument events
Fire startElement, endElement events
Fire characters, cdata events
Fire processingInstruction events
Fire comment and entity ref events
Returns an <code>Object</code> that is a copy of this <code>SerialJavaObject</code> object
Returns an array of <code>Field</code> objects that contains each field of the object that this helper class is serializing
Compares this SerialJavaObject to the specified object
Returns a hash code for this SerialJavaObject
Returns a clone of this {@code SerialJavaObject}
Returns a string describing the base type name of the <code>Ref</code>
Returns an <code>Object</code> representing the SQL structured type to which this <code>SerialRef</code> object refers
Returns an <code>Object</code> representing the SQL structured type to which this <code>SerialRef</code> object refers
Sets the SQL structured type that this <code>SerialRef</code> object references to the given <code>Object</code> object
Compares this SerialRef to the specified object
Returns a hash code for this {@code SerialRef}
Returns a clone of this {@code SerialRef}
Retrieves the SQL type name for this <code>SerialStruct</code> object
Retrieves an array of <code>Object</code> values containing the attributes of the SQL structured type that this <code>SerialStruct</code> object represents
Retrieves the attributes for the SQL structured type that this <code>SerialStruct</code> represents as an array of <code>Object</code> values, using the given type map for custom mapping if appropriate
Compares this SerialStruct to the specified object
Returns a hash code for this {@code SerialStruct}
Returns a clone of this {@code SerialStruct}
Gets the ORB vendor-specific implementation of <code>PortableServer::Servant</code>
Supports the Java ORB portability interfaces by providing a method for classes that support ORB portability through delegation to set their delegate
Allows the servant to obtain the object reference for the target CORBA object it is incarnating for that request
Allows the servant to obtain the object reference for the target CORBA Object it is incarnating for that request
Returns the instance of the ORB currently associated with the <code>Servant</code> (convenience method)
Allows easy execution of common methods, equivalent to <code>PortableServer::Current:get_POA</code>
Allows easy execution of common methods, equivalent to calling <code>PortableServer::Current::get_object_id</code>
Returns the root POA from the ORB instance associated with the servant
Checks to see if the specified <code>repository_id</code> is present on the list returned by <code>_all_interfaces()</code> or is the <code>repository_id</code> for the generic CORBA Object
Checks for the existence of an <code>Object</code>
Returns an <code>InterfaceDef</code> object as a <code>CORBA::Object</code> that defines the runtime type of the <code>CORBA::Object</code> implemented by the <code>Servant</code>
Used by the ORB to obtain complete type information from the servant
This operation is invoked by the POA whenever the  POA receives a request for an object that is not  currently active, assuming the POA has the  USE_SERVANT_MANAGER and RETAIN policies
This operation is invoked whenever a servant for  an object is deactivated, assuming the POA has  the USE_SERVANT_MANAGER and RETAIN policies
Return the default servant caching policy
This operations is used to get a servant that will be used to process the request that caused preinvoke to be called
This operation is invoked whenener a servant completes a request
specifies the policy value
Returns the detail message, including the message from the cause, if any, of this exception
Returns the cause of this exception
Tells that a new request message is received
Tells that a response is sent out for a received request
Called by this class to tell an implementation to do stop
Terminates this object
Write information to standard out only
Write error message to standard out and standard err
Write final message to log(s) and then terminate by calling System
This method is used to obtain the registered ports for an ORB
Explicitly check the MBeanPermission for the current access control context
Shutdown this server
Install the server
Uninstall the server
Shutdown this server
Install the server
Uninstall the server
Creates a client stub object for the supplied Remote object
Returns the hostname of the current client
Retrieves the name of the operation being invoked
Throws an <code>org
Specifies method parameter types and retrieves "in" and "inout" argument values
Specifies method parameter types and retrieves "in" and "inout" argument values
Specifies any return value for the call
Throws an <code>org
The DIR may call set_exception at any time to return an exception to the client
Throws an <code>org
Returns the context information specified in IDL for the operation when the operation is not an attribute access and the operation's IDL definition contains a context expression; otherwise it returns a nil <code>Context</code> reference
This method coordinates the processing of a message received on the server side
This is called from the ORB after the DynamicImplementation
This is called from the ORB after the DynamicImplementation
Any containing the exception to be returned to the client
The opaque object_id describing the target of the operation invocation
The opaque identifier for the object adapter
The RepositoryID for the most derived interface of the servant
Returns the policy in effect for this operation for the given policy type
Allows an Interceptor to set a slot in the Current that is in the scope of the request
Returns true if the servant is the given RepositoryId, false if it is not
Allows Interceptors to add service contexts to the request
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
See ServerRequestInfo for javadocs
Overridden from RequestInfoImpl
Stores the various sources of information used for this info object
Stores the various sources of information used for this info object
Stores the various sources of information used for this info object
Stores the various sources of information used for this info object
Sets the exception to be returned by received_exception and received_exception_id
Stores the various sources of information used for this info object
Overridden from RequestInfoImpl
See description for RequestInfoImpl
Returns an any which contains the exception to be returned to  the client
Returns the opaque <code>object_id</code> describing the target of  the operation invocation
Returns the opaque identifier for the object adapter
Returns the server ID that was specified on ORB::init using the -ORBServerId argument
Returns the ID that was used to create the ORB
Returns the sequence of strings that identifies the object adapter instance that is handling this request
Returns the repository id for the most derived interface of the  servant
Returns the policy in effect for this operation for the given  policy type
Allows an Interceptor to set a slot in the  <code>PortableInterceptor
Returns true if the servant is the given repository id,  false if it is not
Allows Interceptors to add service contexts to the request
Allows the interceptor to process service context information
Allows an Interceptor to query request information after all the  information, including operation parameters, are available
Allows an Interceptor to query reply information and modify the  reply service context after the target operation has been invoked  and before the reply is returned to the client
Allows an Interceptor to query the exception information and modify  the reply service context before the exception is thrown to the client
Allows an Interceptor to query the information available when a  request results in something other than a normal reply or an  exception
Binds the {@code ServerSocket} to a specific address (IP address and port number)
Binds the {@code ServerSocket} to a specific address (IP address and port number)
Returns the local address of this server socket
Returns the port number on which this socket is listening
Returns the address of the endpoint this socket is bound to
Listens for a connection to be made to this socket and accepts it
Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket
Closes this socket
Returns the unique {@link java
Returns the binding state of the ServerSocket
Returns the closed state of the ServerSocket
Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the specified timeout, in milliseconds
Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} socket option
Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled
Returns the implementation address and implementation port of this socket as a {@code String}
Sets the server socket implementation factory for the application
Sets a default proposed value for the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for sockets accepted from this {@code ServerSocket}
Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for this {@code ServerSocket}, that is the proposed buffer size that will be used for Sockets accepted from this {@code ServerSocket}
Sets performance preferences for this ServerSocket
Opens a server-socket channel
Returns an operation set identifying this channel's supported operations
Binds the channel's socket to a local address and configures the socket to listen for connections
Binds the channel's socket to a local address and configures the socket to listen for connections
Retrieves a server socket associated with this channel
Accepts a connection made to this channel's socket
{@inheritDoc} <p> If there is a security manager set, its {@code checkConnect} method is called with the local address and {@code -1} as its arguments to see if the operation is allowed
Verify whether the server definition is valid
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
Creates a new port for the service
Creates a <code>Dispatch</code> instance for use with objects of the client's choosing
Creates a <code>Dispatch</code> instance for use with objects of the client's choosing
Creates a <code>Dispatch</code> instance for use with objects of the client's choosing
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Gets the name of this service
Returns an <code>Iterator</code> for the list of <code>QName</code>s of service endpoints grouped by this service
Gets the location of the WSDL document for this Service
Returns the configured handler resolver
Sets the <code>HandlerResolver</code> for this <code>Service</code> instance
Returns the executor for this <code>Service</code>instance
Sets the executor for this <code>Service</code> instance
Creates a <code>Service</code> instance
Creates a <code>Service</code> instance
Creates a <code>Service</code> instance
Creates a <code>Service</code> instance
Factory method used to create a ServiceContext object by unmarshalling it from the InputStream
Register the ServiceContext class so that it will be recognized by the read method
Write the service contexts to the output stream
Add a service context to the stream, if there is not already a service context in this object with the same id as sc
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
The <code>getPort</code> method returns a proxy
Creates a new port for the service
Creates a <code>Dispatch</code> instance for use with objects of the user's choosing
Creates a <code>Dispatch</code> instance for use with objects of the user's choosing
Creates a <code>Dispatch</code> instance for use with objects of the user's choosing
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Creates a <code>Dispatch</code> instance for use with JAXB generated objects
Gets the name of this service
Returns an <code>Iterator</code> for the list of <code>QName</code>s of service endpoints grouped by this service
Gets the location of the WSDL document for this Service
Returns the configured handler resolver
Sets the <code>HandlerResolver</code> for this <code>Service</code> instance
Returns the executor for this <code>Service</code>instance
Sets the executor for this <code>Service</code> instance
Marshals the value in this <code>ServiceInformationHolder</code> object's <code>value</code> field to the output stream <code>out</code>
Reads unmarshalled data from the input stream <code>in</code> and assigns it to the <code>value</code> field in this <code>ServiceInformationHolder</code> object
Retrieves the <code>TypeCode</code> object that corresponds to the value held in this <code>ServiceInformationHolder</code> object's <code>value</code> field
Clear this loader's provider cache so that all providers will be reloaded
Lazily loads the available providers of this loader's service
Creates a new service loader for the given service type and class loader
Creates a new service loader for the given service type, using the current thread's {@linkplain java
Creates a new service loader for the given service type, using the extension class loader
Returns a string describing this service
Service mode
Checks if this Kerberos service permission object "implies" the specified permission
Checks two ServicePermission objects for equality
Returns the hash code value for this object
Returns the canonical string representation of the actions
Returns a PermissionCollection object for storing ServicePermission objects
Searches for implementations of a particular service class using the given class loader
Locates and incrementally instantiates the available providers of a given service using the context class loader
Returns an <code>Iterator</code> of <code>Class</code> objects indicating the current set of categories
Adds a service provider object to the registry
Adds a service provider object to the registry
Adds a set of service provider objects, taken from an <code>Iterator</code> to the registry
Removes a service provider object from the given category
Removes a service provider object from all categories that contain it
Returns <code>true</code> if <code>provider</code> is currently registered
Returns an <code>Iterator</code> containing all registered service providers in the given category
Returns an <code>Iterator</code> containing service provider objects within a given category that satisfy a criterion imposed by the supplied <code>ServiceRegistry
Returns the currently registered service provider object that is of the given class type
Sets a pairwise ordering between two service provider objects within a given category
Sets a pairwise ordering between two service provider objects within a given category
Deregisters all service provider object currently registered under the given category
Deregisters all currently registered service providers from all categories
Finalizes this object prior to garbage collection
Returns <code>true</code> if the given <code>provider</code> object matches the criterion defined by this <code>Filter</code>
Presents a dialog to the user for selecting a print service (printer)
Get a UI object which may be cast to the requested UI type by the application and used in its user interface
Given a UI role obtained from this factory obtain the UI types available from this factory which implement this role
Returns the number of elements in this set (its cardinality)
Returns <tt>true</tt> if this set contains no elements
Returns <tt>true</tt> if this set contains the specified element
Returns an iterator over the elements in this set
Returns an array containing all of the elements in this set
Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
Adds the specified element to this set if it is not already present (optional operation)
Removes the specified element from this set if it is present (optional operation)
Returns <tt>true</tt> if this set contains all of the elements of the specified collection
Adds all of the elements in the specified collection to this set if they're not already present (optional operation)
Retains only the elements in this set that are contained in the specified collection (optional operation)
Removes from this set all of its elements that are contained in the specified collection (optional operation)
Removes all of the elements from this set (optional operation)
Compares the specified object with this set for equality
Returns the hash code value for this set
Creates a {@code Spliterator} over the elements in this set
Obtain this set-of-integer attribute's members in canonical array form
Determine if this set-of-integer attribute contains the given value
Determine if this set-of-integer attribute contains the given integer attribute's value
Determine the smallest integer in this set-of-integer attribute that is greater than the given value
Returns whether this set-of-integer attribute is equivalent to the passed in object
Returns a hash code value for this set-of-integer attribute
Returns a string value corresponding to this set-of-integer attribute
Retrieves the value of this <code>SetOverrideType</code> instance
Converts the given <code>int</code> to the corresponding <code>SetOverrideType</code> instance
Returns the string table for class Severity
Returns the enumeration value table for class Severity
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Returns a hashcode value for the specified symbol
Returns a hashcode value for the specified symbol information
Returns an integer {@link Rectangle} that completely encloses the <code>Shape</code>
Returns a high precision and more accurate bounding box of the <code>Shape</code> than the <code>getBounds</code> method
Tests if the specified coordinates are inside the boundary of the <code>Shape</code>, as described by the <a href="{@docRoot}/java/awt/Shape
Tests if a specified {@link Point2D} is inside the boundary of the <code>Shape</code>, as described by the <a href="{@docRoot}/java/awt/Shape
Tests if the interior of the <code>Shape</code> intersects the interior of a specified rectangular area
Tests if the interior of the <code>Shape</code> intersects the interior of a specified <code>Rectangle2D</code>
Tests if the interior of the <code>Shape</code> entirely contains the specified rectangular area
Tests if the interior of the <code>Shape</code> entirely contains the specified <code>Rectangle2D</code>
Returns an iterator object that iterates along the <code>Shape</code> boundary and provides access to the geometry of the <code>Shape</code> outline
Returns an iterator object that iterates along the <code>Shape</code> boundary and provides access to a flattened view of the <code>Shape</code> outline geometry
Returns the ascent of this <code>ShapeGraphicAttribute</code>
Returns the descent of this <code>ShapeGraphicAttribute</code>
Returns the advance of this <code>ShapeGraphicAttribute</code>
{@inheritDoc}
Returns a {@link Rectangle2D} that encloses all of the bits drawn by this <code>ShapeGraphicAttribute</code> relative to the rendering position
Return a {@link java
Returns a hashcode for this <code>ShapeGraphicAttribute</code>
Compares this <code>ShapeGraphicAttribute</code> to the specified <code>Object</code>
Compares this <code>ShapeGraphicAttribute</code> to the specified <code>ShapeGraphicAttribute</code>
Returns the string table for class SheetCollate
Returns the enumeration value table for class SheetCollate
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a new {@code String} object representing the specified {@code short}
Parses the string argument as a signed {@code short} in the radix specified by the second argument
Parses the string argument as a signed decimal {@code short}
Returns a {@code Short} object holding the value extracted from the specified {@code String} when parsed with the radix given by the second argument
Returns a {@code Short} object holding the value given by the specified {@code String}
Returns a {@code Short} instance representing the specified {@code short} value
Decodes a {@code String} into a {@code Short}
Returns the value of this {@code Short} as a {@code byte} after a narrowing primitive conversion
Returns the value of this {@code Short} as a {@code short}
Returns the value of this {@code Short} as an {@code int} after a widening primitive conversion
Returns the value of this {@code Short} as a {@code long} after a widening primitive conversion
Returns the value of this {@code Short} as a {@code float} after a widening primitive conversion
Returns the value of this {@code Short} as a {@code double} after a widening primitive conversion
Returns a {@code String} object representing this {@code Short}'s value
Returns a hash code for this {@code Short}; equal to the result of invoking {@code intValue()}
Returns a hash code for a {@code short} value; compatible with {@code Short
Compares this object to the specified object
Compares two {@code Short} objects numerically
Compares two {@code short} values numerically
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified {@code short} value
Converts the argument to an {@code int} by an unsigned conversion
Converts the argument to a {@code long} by an unsigned conversion
Allocates a new short buffer
Wraps a short array into a buffer
Wraps a short array into a buffer
Creates a new short buffer whose content is a shared subsequence of this buffer's content
Creates a new short buffer that shares this buffer's content
Creates a new, read-only short buffer that shares this buffer's content
Relative <i>get</i> method
Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Absolute <i>get</i> method
Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>get</i> method
Relative bulk <i>get</i> method
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this buffer is backed by an accessible short array
Returns the short array that backs this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>
Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>
Tells whether or not this short buffer is direct
Returns a string summarizing the state of this buffer
Returns the current hash code of this buffer
Tells whether or not this buffer is equal to another object
Compares this buffer to another
Retrieves this buffer's byte order
Reads from <code>input</code> and initalizes the value in this <code>ShortHolder</code> object with the unmarshalled data
Marshals to <code>output</code> the value in this <code>ShortHolder</code> object
Returns the TypeCode corresponding to the value held in this <code>ShortHolder</code> object
The number of <code>unsigned short</code>s in the list
Checks if the <code>unsigned short</code> <code>item</code> is a member of this list
Returns the <code>index</code>th item in the collection
The number of <code>Objects</code> in the list
Checks if the <code>unsigned short</code> <code>item</code> is a member of this list
Returns the lookup table data by reference
Returns an array of samples of a pixel, translated with the lookup table
Returns an array of samples of a pixel, translated with the lookup table
Sets the parameters for a MIDI message that takes no data bytes
Sets the  parameters for a MIDI message that takes one or two data bytes
Sets the short message parameters for a  channel message which takes up to two data bytes
Obtains the MIDI channel associated with this event
Obtains the MIDI command associated with this event
Obtains the first data byte in the message
Obtains the second data byte in the message
Creates a new object of the same class and with the same contents as this object
Retrieves the number of data bytes associated with a particular status byte value
Returns the string table for class Sides
Returns the enumeration value table for class Sides
Get the printing attribute class which is to be used as the "category" for this printing attribute value
Get the name of the category of which this attribute value is an instance
Returns a Signature object that implements the specified signature algorithm
Returns a Signature object that implements the specified signature algorithm
Returns a Signature object that implements the specified signature algorithm
Returns the provider of this signature object
Initializes this object for verification
Initializes this object for verification, using the public key from the given certificate
Initialize this object for signing
Initialize this object for signing
Returns the signature bytes of all the data updated
Finishes the signature operation and stores the resulting signature bytes in the provided buffer {@code outbuf}, starting at {@code offset}
Verifies the passed-in signature
Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
Updates the data to be signed or verified by a byte
Updates the data to be signed or verified, using the specified array of bytes
Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset
Updates the data to be signed or verified using the specified ByteBuffer
Returns the name of the algorithm for this signature object
Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used
Sets the specified algorithm parameter to the specified value
Initializes this signature engine with the specified parameter set
Returns the parameters used with this signature object
Gets the value of the specified algorithm parameter
Returns a clone if the implementation is cloneable
Proxy method for {@link java
Proxy method for {@link java
Method getJCEProviderName
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Returns the URI representation of Transformation algorithm
Registers implementing class of the SignatureAlgorithm with algorithmURI
Registers implementing class of the Transform algorithm with algorithmURI
This method registers the default algorithms
Method getBaseNamespace
Method getBaseLocalName
Returns the URI representation of <code>Transformation algorithm</code>
Proxy method for {@link java
Method engineGetJCEProviderName
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link java
Proxy method for {@link javax
Proxy method for {@link java
Method engineInitVerify
Proxy method for {@link java
Proxy method for {@link java
Method engineGetContextFromElement
Method engineSetHMACOutputLength
Method engineGetURI
Method engineGetJCEAlgorithmString
Method engineGetJCEProviderName
Method engineSetHMACOutputLength
Method engineInitSign
Converts an ASN
Converts a XML Signature ECDSA Value to an ASN
Returns the algorithm-specific input parameters of this <code>SignatureMethod</code>
Returns the Id of this <code>SignatureProperties</code>
Returns an {@link java
Returns the target URI of this <code>SignatureProperty</code>
Returns the Id of this <code>SignatureProperty</code>
Returns an {@link java
Initializes this signature object with the specified public key for verification operations
Initializes this signature object with the specified private key for signing operations
Initializes this signature object with the specified private key and source of randomness for signing operations
Updates the data to be signed or verified using the specified byte
Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset
Updates the data to be signed or verified using the specified ByteBuffer
Returns the signature bytes of all the data updated so far
Finishes this signature operation and stores the resulting signature bytes in the provided buffer {@code outbuf}, starting at {@code offset}
Verifies the passed-in signature
Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
Sets the specified algorithm parameter to the specified value
<p>This method is overridden by providers to initialize this signature engine with the specified parameter set
<p>This method is overridden by providers to return the parameters used with this signature engine, or null if this signature engine does not use any parameters
Gets the value of the specified algorithm parameter
Returns a clone if the implementation is cloneable
Returns the canonicalization method of this <code>SignedInfo</code>
Returns the signature method of this <code>SignedInfo</code>
Returns an {@link java
Returns the optional <code>Id</code> attribute of this <code>SignedInfo</code>
Returns the canonicalized signed info bytes after a signing or validation operation
Retrieves the encapsulated object
Retrieves the signature on the signed object, in the form of a byte array
Retrieves the name of the signature algorithm
Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine
Returns this signer's private key
Sets the key pair (public key and private key) for this signer
Returns a string of information about the signer
The default action for visit methods
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
Checks whether the set of attributes is empty
Gets a count of the number of attributes
Tells whether a given attribute is defined
Compares two attribute sets
Makes a copy of the attributes
Gets the names of the attributes in the set
Gets the value of an attribute
Checks whether the attribute list contains a specified attribute name/value pair
Checks whether the attribute list contains all the specified name/value pairs
Adds an attribute to the list
Adds a set of attributes to the list
Removes an attribute from the list
Removes a set of attributes from the list
Removes a set of attributes from the list
Gets the resolving parent
Sets the resolving parent
Clones a set of attributes
Returns a hashcode for this set of attributes
Compares this object to the specified object
Converts the attribute set to a String
Deny knowledge about the class and customizer of the bean
Deny knowledge of properties
Deny knowledge of a default property
Deny knowledge of event sets
Deny knowledge of a default event
Deny knowledge of methods
Claim there are no other relevant BeanInfo objects
Claim there are no icons available
This is a utility method to help in loading icon images
Sets the specified key/value in the underlying <code>map</code> field
<code>putAll</code> is implemented using <code>Map
{@inheritDoc}
Returns <tt>true</tt> if this map contains a mapping for the specified key
{@inheritDoc}
{@inheritDoc}
Returns the value to which this map maps the specified key
{@inheritDoc}
{@inheritDoc}
Removes the mapping for this key from this map if it is present (optional operation)
{@inheritDoc}
{@inheritDoc}
Check that the specified content is valid according to this content model
Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies
Returns the beginning date of the 100-year period 2-digit years are interpreted as being within
Formats the given <code>Date</code> into a date/time string and appends the result to the given <code>StringBuffer</code>
Formats an Object producing an <code>AttributedCharacterIterator</code>
Parses text from a string to produce a <code>Date</code>
Returns a pattern string describing this date format
Returns a localized pattern string describing this date format
Applies the given pattern string to this date format
Applies the given localized pattern string to this date format
Gets a copy of the date and time format symbols of this date format
Sets the date and time format symbols of this date format
Creates a copy of this <code>SimpleDateFormat</code>
Returns the hash code value for this <code>SimpleDateFormat</code> object
Compares the given object with this <code>SimpleDateFormat</code> for equality
Determines the doc flavor in which this doc object will supply its piece of print data
Obtains the set of printing attributes for this doc object
Obtains a reader for extracting character print data from this doc
Obtains an input stream for extracting byte print data from this doc
The default action for visit methods
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}, unless the element is a {@code RESOURCE_VARIABLE} in which case {@code visitUnknown} is called
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
This implementation calls {@code defaultAction}
Invoked for a directory before entries in the directory are visited
Invoked for a file in a directory
Invoked for a file that could not be visited
Invoked for a directory after entries in the directory, and all of their descendants, have been visited
Format the given LogRecord
This implementation always throws {@linkplain UnsupportedOperationException}
This implementation always throws {@linkplain UnsupportedOperationException}
Wraps the result of {@linkplain #getCharContent} in a Reader
This implementation always throws {@linkplain UnsupportedOperationException}
Wraps the result of openOutputStream in a Writer
This implementation returns {@code 0L}
This implementation does nothing
This implementation compares the path of its URI to the given simple name
This implementation returns {@code null}
This implementation returns {@code null}
Returns the encoding of the current entity
Dispatch the character content of a node to an output handler
Return the node identity from a node handle
Return the node handle from a node identity
We only need to override the endDocument, characters, and setEscaping interfaces
The DTM interfaces are not used in this class
Sets a <code>Bindings</code> of attributes for the given scope
Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order
Gets the value of an attribute in a given scope
Remove an attribute in a given scope
Sets the value of an attribute in a given scope
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Get the lowest scope in which an attribute is defined
Returns the value of the <code>engineScope</code> field if specified scope is <code>ENGINE_SCOPE</code>
{@inheritDoc}
Sets the daylight saving time starting year
Sets the daylight saving time start rule
Sets the daylight saving time start rule to a fixed date within a month
Sets the daylight saving time start rule to a weekday before or after the given date within a month, e
Sets the daylight saving time end rule
Sets the daylight saving time end rule to a fixed date within a month
Sets the daylight saving time end rule to a weekday before or after the given date within a month, e
Returns the offset of this time zone from UTC at the given time
Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time
Gets the GMT offset for this time zone
Sets the base time zone offset to GMT
Sets the amount of time in milliseconds that the clock is advanced during daylight saving time
Returns the amount of time in milliseconds that the clock is advanced during daylight saving time
Queries if this time zone uses daylight saving time
Returns {@code true} if this {@code SimpleTimeZone} observes Daylight Saving Time
Queries if the given date is in daylight saving time
Returns a clone of this <code>SimpleTimeZone</code> instance
Generates the hash code for the SimpleDateFormat object
Compares the equality of two <code>SimpleTimeZone</code> objects
Returns <code>true</code> if this zone has the same rules and offset as another zone
Returns a string representation of this time zone
Tests whether <var>obj</var> is a value for this <code>SimpleType</code> instance
Compares the specified <code>obj</code> parameter with this <code>SimpleType</code> instance for equality
Returns the hash code value for this <code>SimpleType</code> instance
Returns a string representation of this <code>SimpleType</code> instance
Replace an object read from an {@link java
The default action for visit methods
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
{@inheritDoc} This implementation calls {@code defaultAction}
This implementation visits a {@code UnionType} by calling {@code defaultAction}
This implementation visits an {@code IntersectionType} by calling {@code defaultAction}
This method returns whether the KeyResolverSpi is able to perform the requested action
Method engineLookupAndResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Method engineResolvePrivateKey
Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods
Creates a new SinglePixelPackedSampleModel with the specified width and height
Creates a DataBuffer that corresponds to this SinglePixelPackedSampleModel
Returns the number of bits per sample for all bands
Returns the number of bits per sample for the specified band
Returns the offset (in data array elements) of pixel (x,y)
Returns the bit offsets into the data array element representing  a pixel for all bands
Returns the bit masks for all bands
Returns the scanline stride of this SinglePixelPackedSampleModel
This creates a new SinglePixelPackedSampleModel with a subset of the bands of this SinglePixelPackedSampleModel
Returns data for a single pixel in a primitive array of type TransferType
Returns all samples in for the specified pixel in an int array
Returns all samples for the specified rectangle of pixels in an int array, one sample per array element
Returns as int the sample in a specified band for the pixel located at (x,y)
Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element
Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType
Sets a pixel in the DataBuffer using an int array of samples for input
Sets all samples for a rectangle of pixels from an int array containing one sample per array element
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element
Returns the model's selection
Sets the model's selected index to <I>index</I>
Clears the selection (to -1)
Returns true if the selection model currently has a selected value
Adds <I>listener</I> as a listener to changes in the model
Removes <I>listener</I> as a listener to changes in the model
Override the value of <tt>_node</tt> only when this object was constructed using the empty constructor
Dump instruction as short code to stream out
Read needed data (e
Call corresponding visitor method(s)
Get this two-dimensional size attribute's dimensions in the given units as floating-point values
Returns this two-dimensional size attribute's X dimension in the given units as a floating-point value
Returns this two-dimensional size attribute's Y dimension in the given units as a floating-point value
Returns a string version of this two-dimensional size attribute in the given units
Returns whether this two-dimensional size attribute is equivalent to the passed in object
Returns a hash code value for this two-dimensional size attribute
Returns a string version of this two-dimensional size attribute
Returns this two-dimensional size attribute's X dimension in units of micrometers (&#181;m)
Returns this two-dimensional size attribute's Y dimension in units of micrometers (&#181;m)
Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment
Determines the total space necessary to place a set of components end-to-end
Determines the total space necessary to align a set of components
Creates a set of offset/span pairs representing how to lay out a set of components end-to-end
Creates a set of offset/span pairs representing how to lay out a set of components end-to-end
Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments
Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments
Adjust a specified array of sizes by a given amount
Resets this <code>SizeSequence</code> object, using the data in the <code>sizes</code> argument
Returns the size of all entries
Returns the start position for the specified entry
Returns the index of the entry that corresponds to the specified position
Returns the size of the specified entry
Sets the size of the specified entry
Adds a contiguous group of entries to this <code>SizeSequence</code>
Removes a contiguous group of entries from this <code>SizeSequence</code>
Unmarshals arguments, calls the actual remote object implementation, and marshals the return value or any exception
Returns the operations supported by the skeleton
This method sets the slot data at the given slot id (index)
This method get the slot data for the given slot id (index)
<p>Set a feature for this <code>SmartTransformerFactory</code> and <code>Transformer</code>s or <code>Template</code>s created by this factory
javax
Create a Transformer object that copies the input document to the result
Create a Transformer object that from the input stylesheet Uses the com
Create a Templates object that from the input stylesheet Uses the com
Get a TemplatesHandler object that can process SAX ContentHandler events into a Templates object
Get a TransformerHandler object that can process SAX ContentHandler events based on a copy transformer
Get a TransformerHandler object that can process SAX ContentHandler events based on a transformer specified by the stylesheet Source
Get a TransformerHandler object that can process SAX ContentHandler events based on a transformer specified by the stylesheet Source
Create an XMLFilter that uses the given source as the transformation instructions
Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level
Method called by the dispatcher in order to control the access at an SNMP pdu Level
Enable SNMP V1 and V2 set requests
Disable SNMP V1 and V2 set requests
The SNMP V1 and V2 set requests authorization status
Method called by the dispatcher in order to control the access at an SNMP pdu Level
Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level
Returns the PDU to use for the response
Returns an enumeration of the entries in this ACL
Returns ann enumeration of community strings
Returns the name of the ACL
Returns the read permission instance used
Returns the write permission instance used
Get the default name for the ACL file
Sets the full path of the file containing the ACL information
Resets this ACL to the values contained in the configuration file
Returns the full path of the file used to get ACL information
Checks whether or not the specified host has <CODE>READ</CODE> access
Checks whether or not the specified host and community have <CODE>READ</CODE> access
Checks whether or not a community string is defined
Checks whether or not the specified host has <CODE>WRITE</CODE> access
Checks whether or not the specified host and community have <CODE>WRITE</CODE> access
Returns an enumeration of trap destinations
Returns an enumeration of trap communities for a given host
Returns an enumeration of inform destinations
Returns an enumeration of inform communities for a given host
Gets the number of managers that have been processed by this SNMP protocol adaptor  since its creation
Gets the number of managers currently being processed by this SNMP protocol adaptor
Gets the maximum number of managers that this SNMP protocol adaptor can process concurrently
Sets the maximum number of managers this SNMP protocol adaptor can process concurrently
Returns the Ip address based ACL used by this SNMP protocol adaptor
Returns the port used by this SNMP protocol adaptor for sending traps
Sets the port used by this SNMP protocol adaptor for sending traps
Sets the port used by this SNMP protocol adaptor for sending traps
Returns the port used by this SNMP protocol adaptor for sending inform requests
Sets the port used by this SNMP protocol adaptor for sending inform requests
Returns the protocol of this SNMP protocol adaptor
Returns the buffer size of this SNMP protocol adaptor
Sets the buffer size of this SNMP protocol adaptor
Gets the number of times to try sending an inform request before giving up
Changes the maximun number of times to try sending an inform request before giving up
Gets the timeout to wait for an inform response from the manager
Changes the timeout to wait for an inform response from the manager
Returns the message factory of this SNMP protocol adaptor
Sets the message factory of this SNMP protocol adaptor
Set the user-data factory of this SNMP protocol adaptor
Get the user-data factory associated with this SNMP protocol adaptor
Returns <CODE>true</CODE> if authentication traps are enabled
Sets the flag indicating if traps need to be sent in case of authentication failure
Returns <code>true</code> if this SNMP protocol adaptor sends a response in case of authentication failure
Sets the flag indicating if responses need to be sent in case of authentication failure
Returns the enterprise OID
Sets the enterprise OID
Returns the names of the MIBs available in this SNMP protocol adaptor
Returns the <CODE>snmpOutTraps</CODE> value defined in MIB-II
Returns the <CODE>snmpOutGetResponses</CODE> value defined in MIB-II
Returns the <CODE>snmpOutGenErrs</CODE> value defined in MIB-II
Returns the <CODE>snmpOutBadValues</CODE> value defined in MIB-II
Returns the <CODE>snmpOutNoSuchNames</CODE> value defined in MIB-II
Returns the <CODE>snmpOutTooBigs</CODE> value defined in MIB-II
Returns the <CODE>snmpInASNParseErrs</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadCommunityUses</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadCommunityNames</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadVersions</CODE> value defined in MIB-II
Returns the <CODE>snmpOutPkts</CODE> value defined in MIB-II
Returns the <CODE>snmpInPkts</CODE> value defined in MIB-II
Returns the <CODE>snmpInGetRequests</CODE> value defined in MIB-II
Returns the <CODE>snmpInGetNexts</CODE> value defined in MIB-II
Returns the <CODE>snmpInSetRequests</CODE> value defined in MIB-II
Returns the <CODE>snmpInTotalSetVars</CODE> value defined in MIB-II
Returns the <CODE>snmpInTotalReqVars</CODE> value defined in MIB-II
Returns the <CODE>snmpSilentDrops</CODE> value defined in RFC 1907 NMPv2-MIB 
Returns the <CODE>snmpProxyDrops</CODE> value defined in RFC 1907 NMPv2-MIB 
Allows the MBean to perform any operations it needs before being registered in the MBean server
Not used in this context
Not used in this context
Not used in this context
Adds a new MIB in the SNMP MIB handler
Adds a new MIB in the SNMP MIB handler
Adds a new MIB in the SNMP MIB handler
Adds a new MIB in the SNMP MIB handler
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Creates the datagram socket
Return the actual port to which the adaptor is bound
Closes the datagram socket
Reads a packet from the datagram socket and creates a request handler which decodes and processes the request
Not used in this context
The number of times the communicator server will attempt to bind before giving up
Stops this SNMP protocol adaptor
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V2 trap format
Sends a trap using SNMP V2 trap format
Sends a trap using SNMP V2 trap format
Sends a trap using SNMP V2 trap format
Send the specified trap PDU to the passed <CODE>InetAddress</CODE>
Send the specified trap PDU to the passed <CODE>SnmpPeer</CODE>
Sends an inform using SNMP V2 inform request format
Sends an inform using SNMP V2 inform request format
Sends an inform using SNMP V2 inform request format
Method that maps an SNMP error status in the passed protocolVersion according to the provided pdu type
Finalizer of the SNMP protocol adaptor objects
Returns the Ip address based ACL used by this SNMP protocol adaptor
Returns the port used by this SNMP protocol adaptor for sending traps
Sets the port used by this SNMP protocol adaptor for sending traps
Returns the port used by this SNMP protocol adaptor for sending inform requests
Sets the port used by this SNMP protocol adaptor for sending inform requests
Gets the number of managers that have been processed by this SNMP protocol adaptor since its creation
Gets the number of managers currently being processed by this SNMP protocol adaptor
Gets the maximum number of managers that this SNMP protocol adaptor can process concurrently
Sets the maximum number of managers this SNMP protocol adaptor can process concurrently
Returns the protocol of this SNMP protocol adaptor
Returns the buffer size of this SNMP protocol adaptor
Sets the buffer size of this SNMP protocol adaptor
Gets the number of times to try sending an inform request before giving up
Changes the maximun number of times to try sending an inform request before giving up
Gets the timeout to wait for an inform response from the manager
Changes the timeout to wait for an inform response from the manager
Returns the message factory of this SNMP protocol adaptor
Sets the message factory of this SNMP protocol adaptor
Set the user-data factory of this SNMP protocol adaptor
Get the user-data factory associated with this SNMP protocol adaptor
Returns <CODE>true</CODE> if authentication traps are enabled
Sets the flag indicating if traps need to be sent in case of authentication failure
Returns <code>true</code> if this SNMP protocol adaptor sends a response in case of authentication failure
Sets the flag indicating if responses need to be sent in case of authentication failure
Returns the enterprise OID
Sets the enterprise OID
Returns the names of the MIBs available in this SNMP protocol adaptor
Returns the <CODE>snmpOutTraps</CODE> value defined in MIB-II
Returns the <CODE>snmpOutGetResponses</CODE> value defined in MIB-II
Returns the <CODE>snmpOutGenErrs</CODE> value defined in MIB-II
Returns the <CODE>snmpOutBadValues</CODE> value defined in MIB-II
Returns the <CODE>snmpOutNoSuchNames</CODE> value defined in MIB-II
Returns the <CODE>snmpOutTooBigs</CODE> value defined in MIB-II
Returns the <CODE>snmpInASNParseErrs</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadCommunityUses</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadCommunityNames</CODE> value defined in MIB-II
Returns the <CODE>snmpInBadVersions</CODE> value defined in MIB-II
Returns the <CODE>snmpOutPkts</CODE> value defined in MIB-II
Returns the <CODE>snmpInPkts</CODE> value defined in MIB-II
Returns the <CODE>snmpInGetRequests</CODE> value defined in MIB-II
Returns the <CODE>snmpInGetNexts</CODE> value defined in MIB-II
Returns the <CODE>snmpInSetRequests</CODE> value defined in MIB-II
Returns the <CODE>snmpInTotalSetVars</CODE> value defined in MIB-II
Returns the <CODE>snmpInTotalReqVars</CODE> value defined in MIB-II
Returns the <CODE>snmpSilentDrops</CODE> value defined in rfc 1907 NMPv2-MIB 
Returns the <CODE>snmpProxyDrops</CODE> value defined in rfc 1907 NMPv2-MIB 
Adds a new MIB in the SNMP MIB handler
Adds a new MIB in the SNMP MIB handler
Removes the specified MIB from the SNMP protocol adaptor
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V1 trap format
Sends a trap using SNMP V2 trap format
Sends a trap using SNMP V2 trap format
Sends a trap using SNMP V2 trap format
Send the specified trap PDU to the passed <CODE>InetAddress</CODE>
Send the specified trap PDU to the passed <CODE>SnmpPeer</CODE>
Sends an inform using SNMP V2 inform request format
Sends an inform using SNMP V2 inform request format
Sends an inform using SNMP V2 inform request format
Returns a textual description of the type object
Returns the counter value of this <CODE>SnmpCounter64</CODE>
Converts the counter value to its <CODE>Long</CODE> form
Converts the counter value to its integer form
Converts the counter value to its <CODE>Integer</CODE> form
Converts the counter value to its <CODE>String</CODE> form
Converts the counter value to its <CODE>SnmpOid</CODE> form
Extracts the counter from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skips the counter value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpCounter64</CODE> to another OID
Performs a clone action
Clones the <CODE>SnmpCounter64</CODE> object, making a copy of its data
Returns a textual description of the type object
Gets the engine time in seconds
Gets the engine Id
Gets the engine boot number
Gets the Usm key handler
The engine instantiation method
The engine instantiation method
If a string of the format &lt;address&gt;:&lt;port&gt;:&lt;IANA number&gt; has been provided at creation time, this string is returned
Returns a string format engine Id
Returns a binary engine Id
Generates an engine Id based on the passed array
Generates an engine Id that is unique to the host the agent is running on
Translates an engine Id in an SnmpOid format
<P>Generates a unique engine Id
Idem { @link com
Generates a unique engine Id
Generates a unique engine Id
Generates a unique engine Id
Generates a unique engine Id
Generates an engine Id based on an InetAddress
Generates an engine Id based on an InetAddress
Tests <CODE>SnmpEngineId</CODE> instance equality
Gets the engine time in seconds
Gets the engine Id
Gets the Usm key handler
Gets the engine Lcd
Gets the engine boot number
Access Control will check the oids
Access Control will not check the oids
Access Control check or not the oids
Returns the Message Processing Sub System
Sets the Message Processing Sub System
Returns the Security Sub System
Sets the Security Sub System
Sets the Access Control Sub System
Returns the Access Control Sub System
Checks the passed msg flags according to the rules specified in RFC 2572
Sets the file to use for SNMP Runtime Lcd
Gets the file to use for SNMP Runtime Lcd
Sets a customized user ACL
Gets the customized user ACL
Activate SNMP V3 encryption
Deactivate SNMP V3 encryption
Check if encryption is activated
Set the engine Id
Get the engine Id
Initializes the MIB (with no registration of the MBeans into the MBean server)
Initializes the MIB but each single MBean representing the MIB is inserted into the MBean server
Gets the root object identifier of the MIB
Processes a <CODE>get</CODE> operation
Checks if a <CODE>set</CODE> operation can be performed
Processes a <CODE>set</CODE> operation
Processes a <CODE>getNext</CODE> operation
Processes a <CODE>getBulk</CODE> operation
Returns a textual description of the type object
Construct an attribute value (as returned by Attribute::getValue()) from an SnmpValue
Construct an SnmpValue from an Attribute value as returned by Attribute::getValue()
Return the name of the attribute corresponding to the SNMP variable identified by the given <code>id</code>
Check the access rights for a SET operation
Check the access rights for a GET operation
Execute an SNMP GET request
Get the value of an SNMP variable
Execute an SNMP SET request
Set the value of an SNMP variable
Checks whether an SNMP SET request can be successfully performed
Checks whether a SET operation can be performed on a given SNMP variable
Once the incoming request decoded, returns the decoded security parameters
Tests if a report is expected
Tests if a response is expected
Tells this request that no response will be sent
Gets the incoming request principal
Gets the incoming request security level
Gets the incoming request security model
Gets the incoming request context name
Gets the incoming request context engine Id
Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs
Encodes the response message to send and puts the result in the specified byte array
Decodes the specified bytes and initializes the request with the incoming message
Initializes the response to send with the passed Pdu
Gets the request PDU encoded in the received message
Returns a stringified form of the received message
Returns a stringified form of the message to send
Returns the source address
Returns the source port
Gets the incoming response security parameters
Call this method in order to reuse <CODE>SnmpOutgoingRequest</CODE> cache
Gets the incoming response security level
Gets the incoming response security model
Gets the incoming response context name
Decodes the specified bytes and initializes itself with the received response
Gets the request PDU encoded in the received response
Returns the response request Id
Returns a stringified form of the message to send
Gets the number of Object Identifiers the index is made of
Gets the index as a vector of Object Identifiers
Compares two indexes for equality
Compares two indexes
Returns a <CODE>String</CODE> representation of the index
This callback is invoked when a manager responds to an SNMP inform request
This callback is invoked when a manager does not respond within the specified timeout value to the SNMP inform request
This callback is invoked when any form of internal error occurs
Gets the request id (invoke identifier) of the current inform request
Gets the current status of the inform request
Indicates whether or not the inform request was aborted
Indicates whether or not the inform request is in progress
Indicates whether or not the inform request result is available
Gets the status associated with the <CODE>SnmpVarBindList</CODE>
Gets the index
Gets the maximum number of tries before declaring that the manager is not responding
Gets the number of tries performed for the current inform request
Gets absolute time in milliseconds (based on epoch time) when the next polling activity will begin
Gets absolute time in milliseconds (based on epoch time) before which an inform response is expected from a manager
Gets the <CODE>SnmpVarBindList</CODE> of the inform response
Used in synchronous mode only
Cancels the active inform request and removes itself from the polling list
Notifies the registered client about the completion of an operation
Finalizer of the <CODE>SnmpInformRequest</CODE> objects
Returns the <CODE>String</CODE> representation of an error code
Gives a status report of the request
Returns the long value of this <CODE>SnmpInt</CODE>
Converts the integer value to its <CODE>Long</CODE> form
Converts the integer value to its integer form
Converts the integer value to its <CODE>Integer</CODE> form
Converts the integer value to its <CODE>String</CODE> form
Converts the integer value to its <CODE>SnmpOid</CODE> form
Extracts the integer from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skips the integer value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpInt</CODE> to another OID
Performs a clone action
Clones the <CODE>SnmpInt</CODE> object, making a copy of its data
Returns a textual description of the type object
Converts the address value to its byte array form
Converts the address to its <CODE>String</CODE> form
Extracts the ip address from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skips the address value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpIpAddress</CODE> to another OID
Returns a textual description of the type object
Returns the number of time the engine rebooted
Returns the engine Id located in the Lcd
Persists the number of reboots
Persists the engine Id
Adds an Lcd model
Removes an Lcd model
Gets an Lcd model
Encodes this message and puts the result in the specified byte array
Returns the associated request ID
Decodes the specified bytes and initializes this message
Initializes this message with the specified <CODE>pdu</CODE>
Gets the PDU encoded in this message
Dumps this message in a string
<p> This callback should return the OID associated to the group identified by the given <code>groupName</code>
<p> This callback should return the ObjectName associated to the group identified by the given <code>groupName</code>
<p> Register an SNMP group and its metadata node in the MIB
<p> Register an SNMP Table metadata node in the MIB
Returns a registered SNMP Table metadata node
Processes a <CODE>get</CODE> operation
Processes a <CODE>set</CODE> operation
Checks if a <CODE>set</CODE> operation can be performed
Processes a <CODE>getNext</CODE> operation
Processes a <CODE>getBulk</CODE> operation
Gets the root object identifier of the MIB
Initializes the MIB (with no registration of the MBeans into the MBean server)
Initializes the MIB but each single MBean representing the MIB is inserted into the MBean server
Not used in this context
Not used in this context
Not used in this context
Processes a <CODE>get</CODE> operation
Processes a <CODE>getNext</CODE> operation
Processes a <CODE>getBulk</CODE> operation
Processes a <CODE>set</CODE> operation
Checks if a <CODE>set</CODE> operation can be performed
Gets the root object identifier of the MIB
Gets the reference to the MBean server in which the SNMP MIB is registered
Gets the reference to the SNMP protocol adaptor to which the MIB is bound
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and adds this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and adds this new MIB in the SNMP MIB handler
Gets the object name of the SNMP protocol adaptor to which the MIB is bound
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Indicates whether or not the MIB module is bound to a SNMP protocol adaptor
Gets the MIB name
This is a factory method for creating new SnmpMibRequest objects
This is a factory method for creating new SnmpMibRequest objects
Processes a <CODE>get</CODE> operation
Processes a <CODE>getNext</CODE> operation
Processes a <CODE>getBulk</CODE> operation
Processes a <CODE>set</CODE> operation
Checks if a <CODE>set</CODE> operation can be performed
Gets the reference to the MBean server in which the SNMP MIB is registered
Gets the reference to the SNMP protocol adaptor to which the MIB is bound
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and adds this new MIB in the SNMP MIB handler
Gets the object name of the SNMP protocol adaptor to which the MIB is bound
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Sets the reference to the SNMP protocol adaptor through which the MIB will be SNMP accessible and add this new MIB in the SNMP MIB handler associated to the specified <CODE>name</CODE>
Indicates whether or not the MIB module is bound to a SNMP protocol adaptor
Gets the MIB name
Tells whether the given arc identifies a variable (scalar object) in this entry
Tells whether the given arc identifies a readable scalar object in this entry
Get the next OID arc corresponding to a readable scalar variable
Checks whether the given OID arc identifies a variable (columnar object)
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Tells whether the given arc identifies a table in this group
Tells whether the given arc identifies a variable (scalar object) in this group
Tells whether the given arc identifies a readable scalar object in this group
Gets the table identified by the given `arc'
Checks whether the given OID arc identifies a variable (scalar object)
Tell whether the given OID arc identifies a sub-tree leading to a nested SNMP sub-group
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Register an OID arc that identifies a scalar object or a table
Adds a new MIB in the SNMP MIB handler
Adds a new MIB in the SNMP MIB handler
Adds a new contextualized MIB in the SNMP MIB handler
Adds a new contextualized MIB in the SNMP MIB handler
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Removes the specified MIB from the SNMP protocol adaptor
Get the next OID arc corresponding to a readable scalar variable, a branch leading to a subgroub, or a table
Get the next OID arc corresponding to a readable scalar variable, a branch leading to a subgroub, or a table, possibly skipping over those arcs that must not or cannot be returned
Hook for subclasses
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Sorts the specified integer array
Computes the root OID of the MIB
This will give the first element greater than <CODE>value</CODE> in a sorted array
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Computes the root OID of the MIB
Registers a specific node in the tree
Returns the list of varbind to be handled by the SNMP mib node
Returns the vector of varbind to be handled by the SNMP mib node
Returns the SNMP protocol version of the original request
Returns the SNMP protocol version of the original request
Returns the local engine
Gets the incoming request principal
Gets the incoming request security level
Gets the incoming request security model
Gets the incoming request context name
Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs
Returns a handle on a user allocated contextual object
Returns the varbind index that should be embedded in an SnmpStatusException for this particular varbind
Adds a varbind to this request sublist
Returns the number of elements (varbinds) in this request sublist
Returns the SNMP PDU attached to the request
Return the list of varbind to be handled by the SNMP MIB node
Return the list of varbind to be handled by the SNMP MIB node
Return the part of the OID identifying the table entry involved
Indicate whether the entry involved is a new entry
Return the varbind that holds the RowStatus variable
This method should be called when a status exception needs to be raised for a given varbind of an SNMP GET request
This method should be called when a status exception needs to be raised for a given varbind of an SNMP SET request
This method should be called when a status exception needs to be raised when checking a given varbind for an SNMP SET request
This method is invoked when the creation of a new entry is requested by a remote SNMP manager
Tell whether the specific version of this metadata generated by <code>mibgen</code> requires entries to be registered with the MBeanServer
Tell whether a new entry should be created when a SET operation is received for an entry that does not exist yet
This method lets you dynamically switch the creation policy
Return <code>true</code> if the conceptual row contains a columnar object used to control creation/deletion of rows in this table
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Add a new entry in this <CODE>SnmpMibTable</CODE>
Add a new entry in this <CODE>SnmpMibTable</CODE>
Remove the specified entry from the table
Remove the specified entry from the table
Remove the specified entry from the table
Get the entry corresponding to the specified rowOid
Get the ObjectName of the entry corresponding to the specified rowOid
Return the entries stored in this table <CODE>SnmpMibTable</CODE>
Get the size of the table
Enable to add an SNMP entry listener to this <CODE>SnmpMibTable</CODE>
Enable to remove an SNMP entry listener from this <CODE>SnmpMibTable</CODE>
Return a <CODE>NotificationInfo</CODE> object containing the notification class and the notification type sent by the <CODE>SnmpMibTable</CODE>
Register the factory through which table entries should be created when remote entry creation is enabled
Return true if the columnar object identified by <code>var</code> is used to control the addition/deletion of rows in this table
Return the RowStatus code value specified in this request
Map the value of the <code>vbstatus</code> varbind to the corresponding RowStatus code defined in {@link com
Set the control variable to the specified <code>newStatus</code> value
Tell whether the specified row is ready and can be put in the <i>notInService</i> state
Check whether the control variable of the given row can be switched to the new specified <code>newStatus</code>
Check whether the specified row can be removed from the table
Remove a table row upon a remote manager request
This method takes care of initial RowStatus handling during the check() phase of a SET request
This method takes care of final RowStatus handling during the set() phase of a SET request
Return the next OID arc corresponding to a readable columnar object in the underlying entry OBJECT-TYPE, possibly skipping over those objects that must not or cannot be returned
Hook for subclasses
Get the <CODE>SnmpOid</CODE> index of the row that follows the given <CODE>oid</CODE> in the table
Return the first entry OID registered in the table
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
This method is used internally and is implemented by the <CODE>SnmpMibTable</CODE> subclasses generated by <CODE>mibgen</CODE>
Return true if the entry identified by the given OID index is contained in this table
Returns the sub system that manages this model
A human readable model name
Returns the encoded SNMP version present in the passed byte array
Returns the associated request ID
Encodes this message and puts the result in the specified byte array
Decodes the specified bytes and initializes this message
Initializes this message with the specified <CODE>pdu</CODE>
Gets the PDU encoded in this message
Dumps the content of a byte buffer using hexadecimal form
Dumps this message in a string
For SNMP Runtime private use only
For SNMP Runtime private use only
This method is called when a call is to be sent to the network
This method is called when a call is received from the network
This method is called when a response is received from the network
This method is called to instantiate a pdu according to the passed pdu type and parameters
This method is called to encode a full scoped pdu that has not been encrypted
This method is called to encode a full scoped pdu that as been encrypted
This method returns a decoded scoped pdu
This method returns an encoded scoped pdu
In order to change the behavior of the translator, set it
Returns the current translator
Attaches the security sub system to this sub system
Gets the attached security sub system
This method is called when a call is received from the network
This method is called when a call is to be sent to the network
This method is called to instantiate a pdu according to the passed pdu type and parameters
This method is called when a call is received from the network
This method is called to encode a full scoped pdu that as not been encrypted
This method is called to encode a full scoped pdu that as been encrypted
This method returns a decoded scoped pdu
This method returns an encoded scoped pdu
Returns the request or message Id contained in the passed message
Returns the response max message size
Returns the message flags
Returns the message security model
Returns the message security level
Returns an encoded representation of security parameters contained in the passed msg
Returns the message security parameters
Returns the message context Engine Id
Returns the message context name
Returns the raw message context name
Returns the message accesscontext name
Returns the message encrypted pdu or null if no encryption
Set the context name of the passed message
Set the context engine Id of the passed message
Returns the tag value of this <CODE>SnmpNull</CODE>
Converts the <CODE>NULL</CODE> value to its ASN
Converts the <CODE>NULL</CODE> value to its <CODE>SnmpOid</CODE> form
Performs a clone action
Clones the <CODE>SnmpNull</CODE> object, making a copy of its data
Returns a textual description of the type object
Checks if this <CODE>SnmpNull</CODE> object corresponds to a <CODE>noSuchObject</CODE> value
Checks if this <CODE>SnmpNull</CODE> object corresponds to a <CODE>noSuchInstance</CODE> value
Checks if this <CODE>SnmpNull</CODE> object corresponds to an <CODE>endOfMibView</CODE> value
Gets the number of components in this OID
Returns a copy of the components array of this <CODE>SnmpOid</CODE>
Returns the components array of this <CODE>SnmpOid</CODE>
Returns the value of the OID arc found at the requested position in the <CODE>components</CODE> array
Converts the OID value to its <CODE>Long</CODE> form
Converts the OID value to its <CODE>Integer</CODE> form
Converts the OID value to its <CODE>String</CODE> form
Converts the OID value to its <CODE>Boolean</CODE> form
Converts the OID value to its array of <CODE>Bytes</CODE> form
Converts the OID value to its <CODE>SnmpOid</CODE> form
Extracts the OID from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skips the OID value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpOid</CODE> to another OID
Performs a clone action
Clones the <CODE>SnmpOid</CODE> object, making a copy of its data
Inserts a subid at the beginning of this <CODE>SnmpOid</CODE>
Inserts a subid at the beginning of this <CODE>SnmpOid</CODE>
Appends the specified <CODE>SnmpOid</CODE> to the end of this <CODE>SnmpOid</CODE>
Appends the specified long to the end of this <CODE>SnmpOid</CODE>
Adds the specified dot-formatted OID <CODE>String</CODE> to the end of this <CODE>SnmpOid</CODE>
Adds the specified array of longs to the end of this <CODE>SnmpOid</CODE>
Checks the validity of the OID
Checks whether the specified <CODE>Object</CODE> is equal to this <CODE>SnmpOid</CODE>
The hashCode is computed from the OID components
Compares two OIDs lexicographically
Resolves a MIB variable <CODE>String</CODE> with the MIB database
Returns a textual description of the type object
Returns the MIB table used for resolving MIB variable names
Sets the MIB table to use for resolving MIB variable names
Converts an OID index converted string back to a DisplayString
Adds an <CODE>SnmpOidTable</CODE> object in this <CODE>SnmpOidDatabase</CODE>
Removes an <CODE>SnmpOidTable</CODE> object from this <CODE>SnmpOidDatabase</CODE>
Removes all the <CODE>SnmpOidTable</CODE> objects from this <CODE>SnmpOidDatabase</CODE>
Searches for a MIB variable given its logical name and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable
Searches for a MIB variable given its OID and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable
Returns a list that can be used to traverse all the entries of the <CODE>SnmpOidTable</CODE> objects of this <CODE>SnmpOidDatabase</CODE>
Adds a <CODE>SnmpOidTable</CODE> object in this <CODE>SnmpOidDatabase</CODE>
Removes a <CODE>SnmpOidTable</CODE> object from this <CODE>SnmpOidDatabase</CODE>
Searches for a MIB variable given its logical name and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable
Searches for a MIB variable given its OID and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable
Returns a list that can be used to traverse all the entries of the <CODE>SnmpOidTable</CODE> objects of this <CODE>SnmpOidDatabase</CODE>
Removes all <CODE>SnmpOidTable</CODE> objects from this <CODE>SnmpOidDatabase</CODE>
Gets the logical name of the MIB variable
Gets the OID of the MIB variable
Gets the type of the MIB variable
Searches for a MIB variable given its logical name and returns an {@link com
Searches for a MIB variable given its OID and returns an {@link com
Returns a list that can be used to traverse all the entries this <CODE>SnmpOidTable</CODE>
Searches for a MIB variable given its logical name and returns an {@link com
Searches for a MIB variable given its OID and returns an {@link com
Returns a list that can be used to traverse all the entries in this <CODE>SnmpOidTable</CODE>
Loads a list of variables into the storage area, which is kept in memory
Checks if the specified <CODE>Object</CODE> is equal to this <CODE>SnmpOidTableSupport</CODE>
Returns the name identifying this <CODE>SnmpOidTableSupport</CODE> object
Converts the opaque to its <CODE>String</CODE> form, that is, a string of bytes expressed in hexadecimal form
Returns a textual description of the type object
Returns the cached security data used when marshalling the call as a secure one
Encodes the message to send and puts the result in the specified byte array
Initializes the message to send with the passed Pdu
Returns a stringified form of the message to send
Gets the community to be used when issuing <CODE>get</CODE> operations
Sets the community string to use when performing <CODE>get</CODE> operations
Gets the community to be used when issuing <CODE>set</CODE> operations
Sets the community to be used when issuing <CODE>set</CODE> operations
Gets the community to be used when issuing <CODE>inform</CODE> requests
Sets the community string to use when performing <CODE>inform</CODE> requests
Checks whether parameters are in place for an SNMP <CODE>set</CODE> operation
Compares two objects
Clones the object and its content
For SNMP Runtime internal use only
Checks whether parameters are in place for an SNMP <CODE>set</CODE> operation
Returns the version of the protocol to use
Sets the version of the protocol to be used
Returns the <CODE>String</CODE> representation of a PDU type
Implements the <CODE>SnmpPduBulkType</CODE> interface
Implements the <CODE>SnmpPduBulkType</CODE> interface
Implements the <CODE>SnmpPduBulkType</CODE> interface
Implements the <CODE>SnmpPduBulkType</CODE> interface
Implements the <CODE>SnmpAckPdu</CODE> interface
The <CODE>max-repetitions</CODE> setter
The <CODE>non-repeaters</CODE> setter
The <CODE>max-repetitions</CODE> getter
The <CODE>non-repeaters</CODE> getter
Decodes the specified <CODE>SnmpMsg</CODE> and returns the resulting <CODE>SnmpPdu</CODE>
Encodes the specified <CODE>SnmpPdu</CODE> and returns the resulting <CODE>SnmpMsg</CODE>
Calls {@link com
Encodes the specified <CODE>SnmpPdu</CODE> and returns the resulting <CODE>SnmpMsg</CODE>
Implements <CODE>SnmpPduRequestType</CODE> interface
Implements <CODE>SnmpPduRequestType</CODE> interface
Implements <CODE>SnmpPduRequestType</CODE> interface
Implements <CODE>SnmpPduRequestType</CODE> interface
Implements <CODE>SnmpAckPdu</CODE> interface
Error index setter
Error status setter
Error index getter
Error status getter
Sets a specific IP address to which the peer will communicate
Returns the dot-formatted IP address string (for example 171
Specifies the list of addresses to be used
Causes all subsequent requests to go to the new address obtained from the specified list of alternate addresses
Determines whether an SNMP <CODE>set</CODE> operation is allowed with this peer object
Gets the list of alternate <CODE>InetAddress</CODE> configured for this peer
Gets the <CODE>InetAddress</CODE> object for this peer
Gets the destination port number of the peer to which SNMP requests are to be sent
Changes the port address of the destination for the request
Gets the timeout to wait for a response from the peer
Changes the timeout to wait for a response from the peer
Gets the number of times to try before giving up
Changes the maximun number of times to try before giving up
Gets the name specified in the constructor while creating this object
Returns the <CODE>String</CODE> representation for this <CODE>SnmpPeer</CODE>
Gets the maximum number of variable bindings that can be sent to a peer
Configures the maximum number of variable bindings that can be sent to a peer
Sets the <CODE>SnmpParams</CODE> object associated with the peer
Gets the <CODE>SnmpParams</CODE> object associated with the peer
Gets the maximum request packet size that is currently used
Configures the maximum packet size that can be used when generating an SNMP request
Finalizer of the <CODE>SnmpPeer</CODE> objects
Gets the minimum round trip time for a packet with the peer
Gets the maximum round trip time for a packet with the peer
Gets the average round trip time for a packet with the peer
Reads the Java DMK property list from a file and adds the read properties as system properties
The <CODE>max-repetitions</CODE> setter
The <CODE>non-repeaters</CODE> setter
The <CODE>max-repetitions</CODE> getter
The <CODE>non-repeaters</CODE> getter
Generates the pdu to use for response
Error index setter
Error status setter
Error index getter
Error status getter
Generates the pdu to use for response
Called when a request is to be sent to the network
Called when a response is to be sent to the network
Called when a request is received from the network
Called when a response is received from the network
Instantiate an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation
Release the previously created cache
BER encoding of security parameters
BER decoding of security parameters
Principal coded inside the security parameters
Instantiates an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation
To release the previously created cache
Called when a request is to be sent to the network
Called when a response is to be sent to the network
Called when a request is received from the network
Called when a response is received from the network
Returns the value of the scalar object identified by the given OID arc
Sets the value of the scalar object identified by the given OID arc
Checks that the new desired value of the scalar object identified by the given OID arc is valid
Generic handling of the <CODE>get</CODE> operation
Generic handling of the <CODE>set</CODE> operation
Generic handling of the <CODE>check</CODE> operation
Return the error status
Returns the index of the error
Converts the string value to its <CODE> InetAddress </CODE> form
Converts the specified binary string into a character string
Converts the specified hexadecimal string into a character string
Returns the bytes array of this <CODE>SnmpString</CODE>
Converts the string value to its array of <CODE>Bytes</CODE> form
Converts the string value to its <CODE>String</CODE> form
Converts the string value to its <CODE>SnmpOid</CODE> form
Extracts the string from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skips the string value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpString</CODE> to another OID
Performs a clone action
Clones the <CODE>SnmpString</CODE> object, making a copy of its data
Returns a textual description of the type object
Extracts the fixed-string from an index OID and returns its value converted as an <CODE>SnmpOid</CODE>
Scans an index OID, skip the string value and returns the position of the next value
Appends an <CODE>SnmpOid</CODE> representing an <CODE>SnmpStringFixed</CODE> to another OID
Returns the associated engine
Adds a model to this sub system
Removes a model from this sub system
Gets a model from this sub system
Returns the set of model Ids that have been registered within the sub system
Returns the set of model names that have been registered within the sub system
This method is called by the SNMP runtime after a new entry has been added to the table
This method is called by the SNMP runtime after a new entry has been removed from the table
This method is called by the SNMP runtime whenever a new entry creation is requested by a remote manager
Gets the entry object
Gets the ObjectName of the entry
Creates a new entry in the table
Returns the entry located at the given position in the table
Returns the number of entries registered in the table
This method lets you dynamically switch the creation policy
Tells whether a new entry should be created when a SET operation is received for an entry that does not exist yet
Tells whether the metadata object to which this table is linked requires entries to be registered
Builds an entry SnmpIndex from its row OID
Builds an SnmpOid from an SnmpIndex object
Builds the default ObjectName of an entry from the SnmpIndex identifying this entry
This callback is called by  the associated metadata object when a new table entry has been registered in the table metadata
This callback is called by  the associated metadata object when a new table entry has been removed from the table metadata
Enables to add an SNMP entry listener to this <CODE>SnmpMibTable</CODE>
Enables to remove an SNMP entry listener from this <CODE>SnmpMibTable</CODE>
Returns a <CODE>NotificationInfo</CODE> object containing the notification class and the notification type sent by the <CODE>SnmpMibTable</CODE>
Builds an SnmpIndex object from the index part of an OID
Returns the metadata object associated with this table
Allocates an ArrayList for storing table entries
Add an entry in this table
Add an entry in this table
Remove an entry from this table
Returns the entries in the table
Binds this table with its associated metadata, registering itself as an SnmpTableEntryFactory
Parses the specified long value with time units and returns a <CODE>String</CODE> of the form <CODE>d days hh:mm:ss</CODE>
Converts the timeticks value to its <CODE>String</CODE> form
Returns a textual description of the type object
Returns the number of <CODE>SnmpVarBind</CODE> successfully encoded before the exception was thrown
Translates a binary representation in an ASCII one
Translates a binary representation in an ASCII one
Translates a stringified representation in a binary one
Returns a textual description of the type object
Called by the <CODE>SnmpAdaptorServer</CODE> adaptor
Called by the <CODE>SnmpAdaptorServer</CODE> adaptor
Translate a password to a key
Localize the passed key using the passed <CODE>SnmpEngineId</CODE>
Localize the passed privacy key using the passed <CODE>SnmpEngineId</CODE>
Calculate the delta parameter needed when processing key change
Calculate the delta parameter needed when processing key change for a privacy algorithm
Encodes this message and puts the result in the specified byte array
Decodes the specified bytes and initializes this message
Returns the associated request Id
Initializes this message with the specified <CODE>pdu</CODE>
Gets the PDU encoded in this message
Dumps this message in a string
Returns a <CODE>String</CODE> form containing ASN
Returns the value encoded as an OID
Returns a textual description of the object
Same as clone, but you cannot perform cloning using this object because clone is protected
This method returns <CODE>false</CODE> by default and is redefined in the {@link com
This method returns <CODE>false</CODE> by default and is redefined in the {@link com
This method returns <CODE>false</CODE> by default and is redefined in the {@link com
Returns the complete OID part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpOid</CODE> part associated with this <CODE>SnmpVarBind</CODE> with the specified OID
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpValue</CODE> part associated with this <CODE>SnmpVarBind</CODE> with the specified value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpCounter64</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified counter 64 value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpInt</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified integer value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpCounter</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified counter value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpGauge</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified gauge value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpTimeticks</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified timeticks value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpOid</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified OID value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpIpAddress</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified ipAddress value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpString</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified string value
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpOpaque</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified bytes array values
Returns the value part associated with this <CODE>SnmpVarBind</CODE>
Sets the <CODE>SnmpStringFixed</CODE> value part associated with this <CODE>SnmpVarBind</CODE> with the specified string value
Consults the MIB table storage to resolve the name to its OID type structure
Returns the status of the value associated with this <CODE>SnmpVarBind</CODE> as an integer
Returns the status of the value associated with this <CODE>SnmpVarBind</CODE> as a <CODE>String</CODE>
Checks whether the object contains a valid accessible value
Checks whether the value associated with this <CODE>SnmpVarBind</CODE> is unspecified
Clears the value associated with this <CODE>SnmpVarBind</CODE> and sets the status to <CODE>stValueUnspecified</CODE>
Checks whether the OID for this variable completely matches the OID part of the specified <CODE>SnmpVarBind</CODE> object
Adds an instance part to the OID in the <CODE>SnmpOid</CODE> object
Adds an instance part to the OID in the <CODE>SnmpOid</CODE> object
Adds an instance part to the OID in the <CODE>SnmpOid</CODE> object
Inserts a sub-id at the beginning of the OID of this <CODE>SnmpVarBind</CODE>
Appends the specified <CODE>SnmpOid</CODE> to the end of the OID of this <CODE>SnmpVarBind</CODE>
Determines whether the <CODE>SnmpVarBind</CODE> has an SNMP exception (generated by agent in response to a request)
Clones and copies the OID and value part from another <CODE>SnmpVarBind</CODE> object
Clones and copies only the value part from another <CODE>SnmpVarBind</CODE> object
Clones the SNMP variable
Clones the SNMP variable (including value)
Returns the printable ASCII representation for the corresponding variable value
Set the value to {@link #noSuchObject}
Set the value to {@link #noSuchInstance}
Set the value to {@link #endOfMibView}
Returns the printable ASCII representation of this <CODE>SnmpVarBind</CODE>
Gets the <CODE>timestamp</CODE> associated with this <CODE>SnmpVarBindList</CODE>
Records the <CODE>sysUpTime</CODE> and the actual time when this <CODE>SnmpVarBindList</CODE> was changed or created
Gets an <CODE>SnmpVarBind</CODE> object
Gets the number of elements in this list
This is a convenience function that returns an enumeration
Replaces the current variable binding list of <CODE>SnmpVarBind</CODE> with the new specified variable binding list of <CODE>SnmpVarBind</CODE> objects
Replaces the current variable binding list of <CODE>SnmpVarBind</CODE> objects with the new variable binding list of <CODE>SnmpVarBind</CODE> objects
Appends an <CODE>SnmpVarBindList</CODE> at the end of the current <CODE>SnmpVarBindList</CODE> object
Removes all the <CODE>SnmpVarBind</CODE> objects of the given <CODE>SnmpVarBindList</CODE> from the existing <CODE>SnmpVarBindList</CODE>
Replaces an element at a specified location with the new element
Prepares a vector of <CODE>SnmpVarBindList</CODE> from an array of SNMP MIB variables and instances
Removes the array of SNMP MIB variables and instances from the existing <CODE>SnmpVarBindList</CODE>
Adds an array of MIB variable names to the list
Removes the array of SNMP MIB variables from the existing <CODE>SnmpVarBindList</CODE>
Creates an <CODE>SnmpVarBind</CODE> object from the given MIB variable and appends it to the existing <CODE>SnmpVarBindList</CODE>
Removes the <CODE>SnmpVarBind</CODE> object corresponding to the given MIB variable from the existing <CODE>SnmpVarBindList</CODE>
Appends the given <CODE>SnmpVarBind</CODE> object to the existing <CODE>SnmpVarBindList</CODE>
Removes the given <CODE>SnmpVarBind</CODE> object from the existing <CODE>SnmpVarBindList</CODE>
Adds the string as an instance part to all OIDs in this list
Adds elements in the specified <CODE>SnmpVarBindList</CODE> to this list
Returns <CODE>false</CODE> if any of the variables does not contain a valid value
Returns <CODE>true</CODE> if there is a value that is not specified
Splits the <CODE>SnmpVarBindList</CODE>
Gives the index of an OID in the <CODE>SnmpVarBindList</CODE>
Gives the index of an OID in the <CODE>SnmpVarBindList</CODE>
Gives the index of an OID in the <CODE>SnmpVarBindList</CODE>
Clones the <CODE>SnmpVarBindList</CODE>
Clones the <CODE>SnmpVarBindList</CODE>
Clones the <CODE>SnmpVarBindList</CODE>
Copies the <CODE>SnmpVarBindList</CODE> into a plain vector of <CODE>SnmpVarBind</CODE> objects
Returns a <CODE>String</CODE> containing the ASCII representation of all OIDs in the list
Constructs a <CODE>String</CODE> containing details of each <CODE>SnmpVarBindList</CODE> (oid+value)
Finalizer of the <CODE>SnmpVarBindList</CODE> objects
Gets the roles played by the SOAP binding instance
Sets the roles played by the SOAP binding instance
Returns <code>true</code> if the use of MTOM is enabled
Enables or disables use of MTOM
Gets the SAAJ <code>SOAPFactory</code> instance used by this SOAP binding
Gets the SAAJ <code>MessageFactory</code> instance used by this SOAP binding
Creates a new <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code> object
Creates a new <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code> object
Creates a new <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code> object
Creates a new  <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code> object
Creates a new <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code> object
Indicates whether a <code>SOAPFault</code> object exists in this <code>SOAPBody</code> object
Returns the <code>SOAPFault</code> object in this <code>SOAPBody</code> object
Creates a new <code>SOAPBodyElement</code> object with the specified name and adds it to this <code>SOAPBody</code> object
Creates a new <code>SOAPBodyElement</code> object with the specified QName and adds it to this <code>SOAPBody</code> object
Adds the root node of the DOM <code>{@link org
Creates a new DOM <code>{@link org
Sends the given message to the specified endpoint and blocks until it has returned the response
Gets a message from a specific endpoint and blocks until it receives,
Closes this <code>SOAPConnection</code> object
Creates an instance of the default <code>SOAPConnectionFactory</code> object
Create a new <code>SOAPConnection</code>
Creates a new <code>SOAPElement</code> object initialized with the given <code>Name</code> object and adds the new element to this <code>SOAPElement</code> object
Creates a new <code>SOAPElement</code> object initialized with the given <code>QName</code> object and adds the new element to this <code>SOAPElement</code>  object
Creates a new <code>SOAPElement</code> object initialized with the specified local name and adds the new element to this <code>SOAPElement</code> object
Creates a new <code>SOAPElement</code> object initialized with the specified local name and prefix and adds the new element to this <code>SOAPElement</code> object
Creates a new <code>SOAPElement</code> object initialized with the specified local name, prefix, and URI and adds the new element to this <code>SOAPElement</code> object
Add a <code>SOAPElement</code> as a child of this <code>SOAPElement</code> instance
Detaches all children of this <code>SOAPElement</code>
Creates a new <code>Text</code> object initialized with the given <code>String</code> and adds it to this <code>SOAPElement</code> object
Adds an attribute with the specified name and value to this <code>SOAPElement</code> object
Adds an attribute with the specified name and value to this <code>SOAPElement</code> object
Adds a namespace declaration with the specified prefix and URI to this <code>SOAPElement</code> object
Returns the value of the attribute with the specified name
Returns the value of the attribute with the specified qname
Returns an <code>Iterator</code> over all of the attribute <code>Name</code> objects in this <code>SOAPElement</code> object
Returns an <code>Iterator</code> over all of the attributes in this <code>SOAPElement</code>  as <code>QName</code> objects
Returns the URI of the namespace that has the given prefix
Returns an <code>Iterator</code> over the namespace prefix <code>String</code>s declared by this element
Returns an <code>Iterator</code> over the namespace prefix <code>String</code>s visible to this element
Creates a <code>QName</code> whose namespace URI is the one associated with the parameter, <code>prefix</code>, in the context of this <code>SOAPElement</code>
Returns the name of this <code>SOAPElement</code> object
Returns the qname of this <code>SOAPElement</code> object
Changes the name of this <code>Element</code> to <code>newName</code> if possible
Removes the attribute with the specified name
Removes the attribute with the specified qname
Removes the namespace declaration corresponding to the given prefix
Returns an <code>Iterator</code> over all the immediate child {@link Node}s of this element
Returns an <code>Iterator</code> over all the immediate child {@link Node}s of this element with the specified name
Returns an <code>Iterator</code> over all the immediate child {@link Node}s of this element with the specified qname
Sets the encoding style for this <code>SOAPElement</code> object to one specified
Returns the encoding style for this <code>SOAPElement</code> object
Create a <code>SOAPElement</code> object initialized with the given <code>Name</code> object
Create a <code>SOAPElement</code> object initialized with the given local name
Create a new <code>SOAPElement</code> object with the given local name, prefix and uri
Creates a new instance of <code>SOAPElementFactory</code>
Creates a new <code>Name</code> object initialized with the given local name, namespace prefix, and namespace URI
Creates a new <code>Name</code> object initialized with the given local name
Returns the <code>SOAPHeader</code> object for this <code>SOAPEnvelope</code> object
Returns the <code>SOAPBody</code> object associated with this <code>SOAPEnvelope</code> object
Creates a <code>SOAPHeader</code> object and sets it as the <code>SOAPHeader</code> object for this <code>SOAPEnvelope</code> object
Creates a <code>SOAPBody</code> object and sets it as the <code>SOAPBody</code> object for this <code>SOAPEnvelope</code> object
Returns the detail message for this <code>SOAPException</code> object
Returns the <code>Throwable</code> object embedded in this <code>SOAPException</code> if there is one
Initializes the <code>cause</code> field of this <code>SOAPException</code> object with the given <code>Throwable</code> object
Creates a <code>SOAPElement</code> object from an existing DOM <code>Element</code>
Creates a <code>SOAPElement</code> object initialized with the given <code>Name</code> object
Creates a <code>SOAPElement</code> object initialized with the given <code>QName</code> object
Creates a <code>SOAPElement</code> object initialized with the given local name
Creates a new <code>SOAPElement</code> object with the given local name, prefix and uri
Creates a new <code>Detail</code> object which serves as a container for <code>DetailEntry</code> objects
Creates a new <code>SOAPFault</code> object initialized with the given <code>reasonText</code>  and <code>faultCode</code>
Creates a new default <code>SOAPFault</code> object
Creates a new <code>Name</code> object initialized with the given local name, namespace prefix, and namespace URI
Creates a new <code>Name</code> object initialized with the given local name
Creates a new <code>SOAPFactory</code> object that is an instance of the default implementation (SOAP 1
Creates a new <code>SOAPFactory</code> object that is an instance of the specified implementation, this method uses the SAAJMetaFactory to locate the implementation class and create the SOAPFactory instance
Sets this <code>SOAPFault</code> object with the given fault code
Sets this <code>SOAPFault</code> object with the given fault code
Sets this <code>SOAPFault</code> object with the give fault code
Gets the mandatory SOAP 1
Gets the fault code for this <code>SOAPFault</code> object as a <code>QName</code> object
Gets the Subcodes for this <code>SOAPFault</code> as an iterator over <code>QNames</code>
Removes any Subcodes that may be contained by this <code>SOAPFault</code>
Adds a Subcode to the end of the sequence of Subcodes contained by this <code>SOAPFault</code>
Gets the fault code for this <code>SOAPFault</code> object
Sets this <code>SOAPFault</code> object with the given fault actor
Gets the fault actor for this <code>SOAPFault</code> object
Sets the fault string for this <code>SOAPFault</code> object to the given string
Sets the fault string for this <code>SOAPFault</code> object to the given string and localized to the given locale
Gets the fault string for this <code>SOAPFault</code> object
Gets the locale of the fault string for this <code>SOAPFault</code> object
Returns true if this <code>SOAPFault</code> has a <code>Detail</code> subelement and false otherwise
Returns the optional detail element for this <code>SOAPFault</code> object
Creates an optional <code>Detail</code> object and sets it as the <code>Detail</code> object for this <code>SOAPFault</code> object
Returns an <code>Iterator</code> over a distinct sequence of <code>Locale</code>s for which there are associated Reason Text items
Returns an <code>Iterator</code> over a sequence of <code>String</code> objects containing all of the Reason Text items for this <code>SOAPFault</code>
Returns the Reason Text associated with the given <code>Locale</code>
Appends or replaces a Reason Text item containing the specified text message and an <i>xml:lang</i> derived from <code>locale</code>
Returns the optional Node element value for this <code>SOAPFault</code> object
Creates or replaces any existing Node element value for this <code>SOAPFault</code> object
Returns the optional Role element value for this <code>SOAPFault</code> object
Creates or replaces any existing Role element value for this <code>SOAPFault</code> object
Gets the embedded <code>SOAPFault</code> instance
Gets the header blocks that can be processed by this Handler  instance
Creates a new <code>SOAPHeaderElement</code> object initialized with the specified name and adds it to this <code>SOAPHeader</code> object
Creates a new <code>SOAPHeaderElement</code> object initialized with the specified qname and adds it to this <code>SOAPHeader</code> object
Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects in this <code>SOAPHeader</code> object that have the specified <i>actor</i> and that have a MustUnderstand attribute whose value is equivalent to <code>true</code>
Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects in this <code>SOAPHeader</code> object that have the specified <i>actor</i>
Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects in this <code>SOAPHeader</code> object that have the specified <i>actor</i> and detaches them from this <code>SOAPHeader</code> object
Creates a new NotUnderstood <code>SOAPHeaderElement</code> object initialized with the specified name and adds it to this <code>SOAPHeader</code> object
Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized with the specified List of supported SOAP URIs and adds it to this <code>SOAPHeader</code> object
Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized with the specified array of supported SOAP URIs and adds it to this <code>SOAPHeader</code> object
Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized with the specified supported SOAP URI and adds it to this <code>SOAPHeader</code> object
Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects in this <code>SOAPHeader</code> object
Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects in this <code>SOAPHeader</code> object and detaches them from this <code>SOAPHeader</code> object
Sets the actor associated with this <code>SOAPHeaderElement</code> object to the specified actor
Sets the <code>Role</code> associated with this <code>SOAPHeaderElement</code> object to the specified <code>Role</code>
Returns the uri of the <i>actor</i> attribute of this <code>SOAPHeaderElement</code>
Returns the value of the <i>Role</i> attribute of this <code>SOAPHeaderElement</code>
Sets the mustUnderstand attribute for this <code>SOAPHeaderElement</code> object to be either true or false
Returns the boolean value of the mustUnderstand attribute for this <code>SOAPHeaderElement</code>
Sets the <i>relay</i> attribute for this <code>SOAPHeaderElement</code> to be either true or false
Returns the boolean value of the <i>relay</i> attribute for this <code>SOAPHeaderElement</code>
Sets the description of this <code>SOAPMessage</code> object's content with the given description
Retrieves a description of this <code>SOAPMessage</code> object's content
Gets the SOAP part of this <code>SOAPMessage</code> object
Gets the SOAP Body contained in this <code>SOAPMessage</code> object
Gets the SOAP Header contained in this <code>SOAPMessage</code> object
Removes all <code>AttachmentPart</code> objects that have been added to this <code>SOAPMessage</code> object
Gets a count of the number of attachments in this message
Retrieves all the <code>AttachmentPart</code> objects that are part of this <code>SOAPMessage</code> object
Retrieves all the <code>AttachmentPart</code> objects that have header entries that match the specified headers
Removes all the <code>AttachmentPart</code> objects that have header entries that match the specified headers
Returns an <code>AttachmentPart</code> object that is associated with an attachment that is referenced by this <code>SOAPElement</code> or <code>null</code> if no such attachment exists
Adds the given <code>AttachmentPart</code> object to this <code>SOAPMessage</code> object
Creates a new empty <code>AttachmentPart</code> object
Creates an <code>AttachmentPart</code> object and populates it using the given <code>DataHandler</code> object
Returns all the transport-specific MIME headers for this <code>SOAPMessage</code> object in a transport-independent fashion
Creates an <code>AttachmentPart</code> object and populates it with the specified data of the specified content type
Updates this <code>SOAPMessage</code> object with all the changes that have been made to it
Indicates whether this <code>SOAPMessage</code> object needs to have the method <code>saveChanges</code> called on it
Writes this <code>SOAPMessage</code> object to the given output stream
Associates the specified value with the specified property
Retrieves value of the specified property
Gets the <code>SOAPMessage</code> from this message context
Sets the SOAPMessage in this message context
Gets headers that have a particular qualified name from the message in the  message context
Gets the SOAP actor roles associated with an execution  of the handler chain
Gets the <code>SOAPEnvelope</code> object associated with this <code>SOAPPart</code> object
Retrieves the value of the MIME header whose name is "Content-Id"
Retrieves the value of the MIME header whose name is "Content-Location"
Sets the value of the MIME header named "Content-Id" to the given <code>String</code>
Sets the value of the MIME header "Content-Location" to the given <code>String</code>
Removes all MIME headers that match the given name
Removes all the <code>MimeHeader</code> objects for this <code>SOAPEnvelope</code> object
Gets all the values of the <code>MimeHeader</code> object in this <code>SOAPPart</code> object that is identified by the given <code>String</code>
Changes the first header entry that matches the given header name so that its value is the given value, adding a new header with the given name and value if no existing header is a match
Creates a <code>MimeHeader</code> object with the specified name and value and adds it to this <code>SOAPPart</code> object
Retrieves all the headers for this <code>SOAPPart</code> object as an iterator over the <code>MimeHeader</code> objects
Retrieves all <code>MimeHeader</code> objects that match a name in the given array
Retrieves all <code>MimeHeader</code> objects whose name does not match a name in the given array
Sets the content of the <code>SOAPEnvelope</code> object with the data from the given <code>Source</code> object
Returns the content of the SOAPEnvelope as a JAXP <code>Source</code> object
Connects this socket to the server
Connects this socket to the server with a specified timeout value
Binds the socket to a local address
Returns the address to which the socket is connected
Gets the local address to which the socket is bound
Returns the remote port number to which this socket is connected
Returns the local port number to which this socket is bound
Returns the address of the endpoint this socket is connected to, or {@code null} if it is unconnected
Returns the address of the endpoint this socket is bound to
Returns the unique {@link java
Returns an input stream for this socket
Returns an output stream for this socket
Enable/disable {@link SocketOptions#TCP_NODELAY TCP_NODELAY} (disable/enable Nagle's algorithm)
Tests if {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled
Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the specified linger time in seconds
Returns setting for {@link SocketOptions#SO_LINGER SO_LINGER}
Send one byte of urgent data on the socket
Enable/disable {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded
Tests if {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} is enabled
Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}  with the specified timeout, in milliseconds
Returns setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
Sets the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option to the specified value for this {@code Socket}
Get value of the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option for this {@code Socket}, that is the buffer size used by the platform for output on this {@code Socket}
Sets the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option to the specified value for this {@code Socket}
Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for this {@code Socket}, that is the buffer size used by the platform for input on this {@code Socket}
Enable/disable {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE}
Tests if {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled
Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket
Gets traffic class or type-of-service in the IP header for packets sent from this Socket <p> As the underlying network implementation may ignore the traffic class or type-of-service set using {@link #setTrafficClass(int)} this method may return a different value than was previously set using the {@link #setTrafficClass(int)} method on this Socket
Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} socket option
Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled
Closes this socket
Places the input stream for this socket at "end of stream"
Disables the output stream for this socket
Converts this socket to a {@code String}
Returns the connection state of the socket
Returns the binding state of the socket
Returns the closed state of the socket
Returns whether the read-half of the socket connection is closed
Returns whether the write-half of the socket connection is closed
Sets the client socket implementation factory for the application
Sets performance preferences for this socket
Opens a socket channel
Opens a socket channel and connects it to a remote address
Returns an operation set identifying this channel's supported operations
Shutdown the connection for reading without closing the channel
Shutdown the connection for writing without closing the channel
Retrieves a socket associated with this channel
Tells whether or not this channel's network socket is connected
Tells whether or not a connection operation is in progress on this channel
Connects this channel's socket
Finishes the process of connecting a socket channel
Returns the remote address to which this channel's socket is connected
{@inheritDoc} <p> If there is a security manager set, its {@code checkConnect} method is called with the local address and {@code -1} as its arguments to see if the operation is allowed
Close this output stream
Format and publish a <tt>LogRecord</tt>
Creates either a stream or a datagram socket
Connects this socket to the specified port on the named host
Connects this socket to the specified port number on the specified host
Connects this socket to the specified port number on the specified host
Binds this socket to the specified local IP address and port number
Sets the maximum queue length for incoming connection indications (a request to connect) to the {@code count} argument
Accepts a connection
Returns an input stream for this socket
Returns an output stream for this socket
Returns the number of bytes that can be read from this socket without blocking
Closes this socket
Places the input stream for this socket at "end of stream"
Disables the output stream for this socket
Returns the value of this socket's {@code fd} field
Returns the value of this socket's {@code address} field
Returns the value of this socket's {@code port} field
Returns whether or not this SocketImpl supports sending urgent data
Send one byte of urgent data on the socket
Returns the value of this socket's {@code localport} field
Returns the address and port of this socket as a {@code String}
Sets performance preferences for this socket
Creates a new {@code SocketImpl} instance
Returns the name of the socket option
Returns the type of the socket option value
Enable/disable the option specified by <I>optID</I>
Fetch the value of an option
Note:it is possible for this to be called more than once
Sets the writeLock for this connection
It is possible for a Close Connection to have been sent here, but we will not check for this
Wake up the outstanding requests on the connection, and hand them COMM_FAILURE exception with a given minor code
The following methods are for dealing with Connection cleaning for better scalability of servers in high network load conditions
Send a CancelRequest message
Checks if this socket permission object "implies" the specified permission
Checks two SocketPermission objects for equality
Returns the hash code value for this object
Returns the canonical string representation of the actions
Returns a new PermissionCollection object for storing SocketPermission objects
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
Returns whether or not the border is opaque
Returns this reference object's referent
Initialize this <code>LoginModule</code>
Authenticate the user (first phase)
Commit the authentication (second phase)
Abort the authentication (second phase)
Logout the user <p> This method removes the Principals associated with the <code>Subject</code>
Return the user's group identification number (GID) for this <code>SolarisNumericGroupPrincipal</code>
Return the user's group identification number (GID) for this <code>SolarisNumericGroupPrincipal</code> as a long
Return whether this group identification number (GID) represents the primary group to which this user belongs
Return a string representation of this <code>SolarisNumericGroupPrincipal</code>
Compares the specified Object with this <code>SolarisNumericGroupPrincipal</code> for equality
Return a hash code for this <code>SolarisNumericGroupPrincipal</code>
Return the user identification number (UID) for this <code>SolarisNumericUserPrincipal</code>
Return the user identification number (UID) for this <code>SolarisNumericUserPrincipal</code> as a long
Return a string representation of this <code>SolarisNumericUserPrincipal</code>
Compares the specified Object with this <code>SolarisNumericUserPrincipal</code> for equality
Return a hash code for this <code>SolarisNumericUserPrincipal</code>
Return the Unix username for this <code>SolarisPrincipal</code>
Return a string representation of this <code>SolarisPrincipal</code>
Compares the specified Object with this <code>SolarisPrincipal</code> for equality
Return a hash code for this <code>SolarisPrincipal</code>
Get the username for the current Solaris user
Get the UID for the current Solaris user
Get the GID for the current Solaris user
Get the supplementary groups for the current Solaris user
Returns the comparator used to order the keys in this map, or {@code null} if this map uses the {@linkplain Comparable natural ordering} of its keys
Returns a view of the portion of this map whose keys range from {@code fromKey}, inclusive, to {@code toKey}, exclusive
Returns a view of the portion of this map whose keys are strictly less than {@code toKey}
Returns a view of the portion of this map whose keys are greater than or equal to {@code fromKey}
Returns the first (lowest) key currently in this map
Returns the last (highest) key currently in this map
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns the comparator used to order the elements in this set, or <tt>null</tt> if this set uses the {@linkplain Comparable natural ordering} of its elements
Returns a view of the portion of this set whose elements range from <tt>fromElement</tt>, inclusive, to <tt>toElement</tt>, exclusive
Returns a view of the portion of this set whose elements are strictly less than <tt>toElement</tt>
Returns a view of the portion of this set whose elements are greater than or equal to <tt>fromElement</tt>
Returns the first (lowest) element currently in this set
Returns the last (highest) element currently in this set
Creates a {@code Spliterator} over the elements in this sorted set
Returns the Component that should receive the focus after aComponent
Returns the Component that should receive the focus before aComponent
Returns the first Component in the traversal cycle
Returns the last Component in the traversal cycle
Returns the default Component to focus
Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly
Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly
Sets the Comparator which will be used to sort the Components in a focus traversal cycle
Returns the Comparator which will be used to sort the Components in a focus traversal cycle
Determines whether a Component is an acceptable choice as the new focus owner
Clone a <code>SortingIterator</code> by cloning its source iterator and then sharing the factory and the array of <code>NodeSortRecords</code>
Retrieves the attribute ID of the sort key
Determines the sort order
Retrieves the matching rule ID used to order the attribute values
Determines if the search results have been successfully sorted
Retrieves the LDAP result code of the sort operation
Retrieves the ID of the attribute that caused the sort to fail
Retrieves the NamingException appropriate for the result code
Obtains the name of the sound bank
Obtains the version string for the sound bank
Obtains a <code>string</code> naming the company that provides the sound bank
Obtains a textual description of the sound bank, suitable for display
Extracts a list of non-Instrument resources contained in the sound bank
Obtains a list of instruments contained in this sound bank
Obtains an <code>Instrument</code> from the given <code>Patch</code>
Obtains a soundbank object from the URL provided
Obtains a soundbank object from the {@code InputStream} provided
Obtains a soundbank object from the {@code File} provided
Obtains the sound bank that contains this <code>SoundbankResource</code>
Obtains the name of the resource
Obtains the class used by this sample to represent its data
Obtains the sampled audio that is stored in this <code>SoundbankResource</code>
Set the system identifier for this Source
Get the system identifier that was set with setSystemId
Opens the line with the specified format and suggested buffer size, causing the line to acquire any required system resources and become operational
Opens the line with the specified format, causing the line to acquire any required system resources and become operational
Writes audio data to the mixer via this source data line
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump source file attribute to file stream in binary format
This interface is used to plug external document loaders into XSLTC (used with the <xsl:include> and <xsl:import> elements
Return the public identifier for the current document event
Return the system identifier for the current document event
Return the line number where the current document event ends
Return the character position where the current document event ends
The source file
The line in the source file
The column in the source file
Convert the source position to the form "Filename:line"
Gets the starting position of tree within file
Gets the ending position of tree within file
Reset the list of SourceTree objects that this manager manages
Set an object that will be used to resolve URIs used in document(), etc
Get the object that will be used to resolve URIs used in document(), etc
Given a document, find the URL associated with that document
This will be called by the processor when it encounters an xsl:include, xsl:import, or document() function
JJK: Support  <?xalan:doc_cache_off?> kluge in ElemForEach
Put the source tree root node in the document cache
Given a Source object, find the node associated with it
Get the source tree from the a base URL and a URL string
Get the source tree from the input source
Try to create a DOM source tree from the input source
This method returns the SAX2 parser to use with the InputSource obtained from this URI
Returns the latest source version that can be modeled
Returns the latest source version fully supported by the current execution environment
Returns whether or not {@code name} is a syntactically valid identifier (simple name) or keyword in the latest source version
Returns whether or not {@code name} is a syntactically valid  qualified name in the latest source version
Returns whether or not {@code s} is a keyword or literal in the  latest source version
Changes the lower limit for Dates in this sequence
Returns the first <code>Date</code> in the sequence
Changes the upper limit for <code>Date</code>s in this sequence
Returns the last <code>Date</code> in the sequence
Changes the size of the date value change computed by the <code>nextValue</code> and <code>previousValue</code> methods
Returns the <code>Calendar</code> field that is added to or subtracted from by the <code>nextValue</code> and <code>previousValue</code> methods
Returns the next <code>Date</code> in the sequence, or <code>null</code> if the next date is after <code>end</code>
Returns the previous <code>Date</code> in the sequence, or <code>null</code> if the previous date is before <code>start</code>
Returns the current element in this sequence of <code>Date</code>s
Returns the current element in this sequence of <code>Date</code>s
Sets the current <code>Date</code> for this sequence
Returns the <code>List</code> that defines the sequence for this model
Changes the list that defines this sequence and resets the index of the models <code>value</code> to zero
Returns the current element of the sequence
Changes the current element of the sequence and notifies <code>ChangeListeners</code>
Returns the next legal value of the underlying sequence or <code>null</code> if value is already the last element
Returns the previous element of the underlying sequence or <code>null</code> if value is already the first element
The <i>current element</i> of the sequence
Changes current value of the model, typically this value is displayed by the <code>editor</code> part of a  <code>JSpinner</code>
Return the object in the sequence that comes after the object returned by <code>getValue()</code>
Return the object in the sequence that comes before the object returned by <code>getValue()</code>
Adds a <code>ChangeListener</code> to the model's listener list
Removes a <code>ChangeListener</code> from the model's listener list
Changes the lower bound for numbers in this sequence
Returns the first number in this sequence
Changes the upper bound for numbers in this sequence
Returns the last number in the sequence
Changes the size of the value change computed by the <code>getNextValue</code> and <code>getPreviousValue</code> methods
Returns the size of the value change computed by the <code>getNextValue</code> and <code>getPreviousValue</code> methods
Returns the next number in the sequence
Returns the previous number in the sequence
Returns the value of the current element of the sequence
Returns the value of the current element of the sequence
Sets the current value for this sequence
Returns the {@code SplashScreen} object used for Java startup splash screen control on systems that support display
Changes the splash screen image
Returns the current splash screen image
Returns the bounds of the splash screen window as a {@link Rectangle}
Returns the size of the splash screen window as a {@link Dimension}
Creates a graphics context (as a {@link Graphics2D} object) for the splash screen overlay image, which allows you to draw over the splash screen
Updates the splash window with current contents of the overlay image
Hides the splash screen, closes the window, and releases all associated resources
Determines whether the splash screen is visible
If a remaining element exists, performs the given action on it, returning {@code true}; else returns {@code false}
Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator
Returns an estimate of the number of elements that would be encountered by a {@link #forEachRemaining} traversal, or returns {@link Long#MAX_VALUE} if infinite, unknown, or too expensive to compute
Convenience method that returns {@link #estimateSize()} if this Spliterator is {@link #SIZED}, else {@code -1}
Returns a set of characteristics of this Spliterator and its elements
Returns {@code true} if this Spliterator's {@link #characteristics} contain all of the given characteristics
If this Spliterator's source is {@link #SORTED} by a {@link Comparator}, returns that {@code Comparator}
If a remaining element exists, performs the given action on it, returning {@code true}; else returns {@code false}
Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates an empty {@code Spliterator} <p>The empty spliterator reports {@link Spliterator#SIZED} and {@link Spliterator#SUBSIZED}
Creates an empty {@code Spliterator
Creates an empty {@code Spliterator
Creates an empty {@code Spliterator
Creates a {@code Spliterator} covering the elements of a given array, using a customized set of spliterator characteristics
Creates a {@code Spliterator} covering a range of elements of a given array, using a customized set of spliterator characteristics
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator} using the given collection's {@link java
Creates a {@code Spliterator} using a given {@code Iterator} as the source of elements, and with a given initially reported size
Creates a {@code Spliterator} using a given {@code Iterator} as the source of elements, with no initial size estimate
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates a {@code Spliterator
Creates an {@code Iterator} from a {@code Spliterator}
Creates an {@code PrimitiveIterator
Creates an {@code PrimitiveIterator
Creates an {@code PrimitiveIterator
{@inheritDoc} This implementation permits limited parallelism
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} This implementation permits limited parallelism
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} This implementation permits limited parallelism
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} This implementation permits limited parallelism
{@inheritDoc}
{@inheritDoc}
Messaged to relayout the JSplitPane based on the preferred size of the children components
Sets the location of the divider to location
Returns the location of the divider
Returns the minimum possible location of the divider
Returns the maximum possible location of the divider
Messaged after the JSplitPane the receiver is providing the look and feel for paints its children
Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance
Returns a pseudorandom {@code int} value
Returns a pseudorandom {@code int} value between zero (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code int} value between the specified origin (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code long} value
Returns a pseudorandom {@code long} value between zero (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code long} value between the specified origin (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code double} value between zero (inclusive) and one (exclusive)
Returns a pseudorandom {@code double} value between 0
Returns a pseudorandom {@code double} value between the specified origin (inclusive) and bound (exclusive)
Returns a pseudorandom {@code boolean} value
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values from this generator and/or one split from it
Returns an effectively unlimited stream of pseudorandom {@code int} values from this generator and/or one split from it
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code int} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long} values from this generator and/or one split from it
Returns an effectively unlimited stream of pseudorandom {@code long} values from this generator and/or one split from it
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code long} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive)
Returns the <em>minimum</em> value of this <code>Spring</code>
Returns the <em>preferred</em> value of this <code>Spring</code>
Returns the <em>maximum</em> value of this <code>Spring</code>
Returns the current <em>value</em> of this <code>Spring</code>
Sets the current <em>value</em> of this <code>Spring</code> to <code>value</code>
Returns a strut -- a spring whose <em>minimum</em>, <em>preferred</em>, and <em>maximum</em> values each have the value <code>pref</code>
Returns a spring whose <em>minimum</em>, <em>preferred</em>, and <em>maximum</em> values have the values: <code>min</code>, <code>pref</code>, and <code>max</code> respectively
Returns <code>-s</code>: a spring running in the opposite direction to <code>s</code>
Returns <code>s1+s2</code>: a spring representing <code>s1</code> and <code>s2</code> in series
Returns <code>max(s1, s2)</code>: a spring whose value is always greater than (or equal to)         the values of both <code>s1</code> and <code>s2</code>
Returns a spring whose <em>minimum</em>, <em>preferred</em>, <em>maximum</em> and <em>value</em> properties are each multiples of the properties of the argument spring, <code>s</code>
Returns a spring whose <em>minimum</em>, <em>preferred</em>, <em>maximum</em> and <em>value</em> properties are defined by the widths of the <em>minimumSize</em>, <em>preferredSize</em>, <em>maximumSize</em> and <em>size</em> properties of the supplied component
Returns a spring whose <em>minimum</em>, <em>preferred</em>, <em>maximum</em> and <em>value</em> properties are defined by the heights of the <em>minimumSize</em>, <em>preferredSize</em>, <em>maximumSize</em> and <em>size</em> properties of the supplied component
Has no effect, since this layout manager does not use a per-component string
Removes the constraints associated with the specified component
If <code>constraints</code> is an instance of <code>SpringLayout
Returns 0
Returns 0
Links edge <code>e1</code> of component <code>c1</code> to edge <code>e2</code> of component <code>c2</code>, with a fixed distance between the edges
Links edge <code>e1</code> of component <code>c1</code> to edge <code>e2</code> of component <code>c2</code>
Returns the constraints for the specified component
Returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent
Sets the <code>x</code> property, which controls the <code>x</code> value of a component's location
Returns the value of the <code>x</code> property
Sets the <code>y</code> property, which controls the <code>y</code> value of a component's location
Returns the value of the <code>y</code> property
Sets the <code>width</code> property, which controls the width of a component
Returns the value of the <code>width</code> property
Sets the <code>height</code> property, which controls the height of a component
Returns the value of the <code>height</code> property
Sets the spring controlling the specified edge
Returns the value of the specified edge, which may be a derived value, or even <code>null</code>
Returns the list of client info properties that could not be set
Returns the fully-qualified name of the SQL user-defined type that this object represents
Populates this object with data read from the database
Writes this object to the given SQL data stream, converting it back to its SQL value in the data source
Retrieves the SQLState for this <code>SQLException</code> object
Retrieves the vendor-specific exception code for this <code>SQLException</code> object
Retrieves the exception chained to this <code>SQLException</code> object by setNextException(SQLException ex)
Adds an <code>SQLException</code> object to the end of the chain
Returns an iterator over the chained SQLExceptions
Reads the next attribute in the stream and returns it as a <code>String</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>boolean</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>byte</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>short</code> in the Java programming language
Reads the next attribute in the stream and returns it as an <code>int</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>long</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>float</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>double</code> in the Java programming language
Reads the next attribute in the stream and returns it as a <code>java
Reads the next attribute in the stream and returns it as an array of bytes in the Java programming language
Reads the next attribute in the stream and returns it as a <code>java
Reads the next attribute in the stream and returns it as a <code>java
Reads the next attribute in the stream and returns it as a <code>java
Reads the next attribute in the stream and returns it as a stream of Unicode characters
Reads the next attribute in the stream and returns it as a stream of ASCII characters
Reads the next attribute in the stream and returns it as a stream of uninterpreted bytes
Reads the datum at the head of the stream and returns it as an <code>Object</code> in the Java programming language
Reads an SQL <code>REF</code> value from the stream and returns it as a <code>Ref</code> object in the Java programming language
Reads an SQL <code>BLOB</code> value from the stream and returns it as a <code>Blob</code> object in the Java programming language
Reads an SQL <code>CLOB</code> value from the stream and returns it as a <code>Clob</code> object in the Java programming language
Reads an SQL <code>ARRAY</code> value from the stream and returns it as an <code>Array</code> object in the Java programming language
Retrieves whether the last value read was SQL <code>NULL</code>
Reads an SQL <code>DATALINK</code> value from the stream and returns it as a <code>java
Reads an SQL <code>NCLOB</code> value from the stream and returns it as a <code>NClob</code> object in the Java programming language
Reads the next attribute in the stream and returns it as a <code>String</code> in the Java programming language
Reads an SQL <code>XML</code> value from the stream and returns it as a <code>SQLXML</code> object in the Java programming language
Reads an SQL <code>ROWID</code> value from the stream and returns it as a <code>RowId</code> object in the Java programming language
Reads the next attribute in the stream and returns it as an {@code Object} in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>String</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>boolean</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>byte</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>short</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as an <code>int</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>long</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>float</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>double</code> in the Java programming language
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>java
Retrieves the next attribute in this <code>SQLInputImpl</code> object as an array of bytes
Retrieves the next attribute in this <code>SQLInputImpl</code> as a <code>java
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>java
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a <code>java
Retrieves the next attribute in this <code>SQLInputImpl</code> object as a stream of Unicode characters
Returns the next attribute in this <code>SQLInputImpl</code> object as a stream of ASCII characters
Returns the next attribute in this <code>SQLInputImpl</code> object as a stream of uninterpreted bytes
Retrieves the value at the head of this <code>SQLInputImpl</code> object as an <code>Object</code> in the Java programming language
Retrieves the value at the head of this <code>SQLInputImpl</code> object as a <code>Ref</code> object in the Java programming language
Retrieves the <code>BLOB</code> value at the head of this <code>SQLInputImpl</code> object as a <code>Blob</code> object in the Java programming language
Retrieves the <code>CLOB</code> value at the head of this <code>SQLInputImpl</code> object as a <code>Clob</code> object in the Java programming language
Reads an SQL <code>ARRAY</code> value from the stream and returns it as an <code>Array</code> object in the Java programming language
Ascertains whether the last value read from this <code>SQLInputImpl</code> object was <code>null</code>
Reads an SQL <code>DATALINK</code> value from the stream and returns it as an <code>URL</code> object in the Java programming language
Reads an SQL <code>NCLOB</code> value from the stream and returns it as a <code>Clob</code> object in the Java programming language
Reads the next attribute in the stream and returns it as a <code>String</code> in the Java programming language
Reads an SQL <code>XML</code> value from the stream and returns it as a <code>SQLXML</code> object in the Java programming language
Reads an SQL <code>ROWID</code> value from the stream and returns it as a <code>RowId</code> object in the Java programming language
Writes the next attribute to the stream as a <code>String</code> in the Java programming language
Writes the next attribute to the stream as a Java boolean
Writes the next attribute to the stream as a Java byte
Writes the next attribute to the stream as a Java short
Writes the next attribute to the stream as a Java int
Writes the next attribute to the stream as a Java long
Writes the next attribute to the stream as a Java float
Writes the next attribute to the stream as a Java double
Writes the next attribute to the stream as a java
Writes the next attribute to the stream as an array of bytes
Writes the next attribute to the stream as a java
Writes the next attribute to the stream as a java
Writes the next attribute to the stream as a java
Writes the next attribute to the stream as a stream of Unicode characters
Writes the next attribute to the stream as a stream of ASCII characters
Writes the next attribute to the stream as a stream of uninterpreted bytes
Writes to the stream the data contained in the given <code>SQLData</code> object
Writes an SQL <code>REF</code> value to the stream
Writes an SQL <code>BLOB</code> value to the stream
Writes an SQL <code>CLOB</code> value to the stream
Writes an SQL structured type value to the stream
Writes an SQL <code>ARRAY</code> value to the stream
Writes a SQL <code>DATALINK</code> value to the stream
Writes the next attribute to the stream as a <code>String</code> in the Java programming language
Writes an SQL <code>NCLOB</code> value to the stream
Writes an SQL <code>ROWID</code> value to the stream
Writes an SQL <code>XML</code> value to the stream
Writes to the stream the data contained in the given object
Writes a <code>String</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>boolean</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>byte</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>short</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes an <code>int</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>long</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>float</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>double</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>java
Writes an array of <code>bytes</code> in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>java
Writes a <code>java
Writes a <code>java
Writes a stream of Unicode characters to this <code>SQLOutputImpl</code> object
Writes a stream of ASCII characters to this <code>SQLOutputImpl</code> object
Writes a stream of uninterpreted bytes to this <code>SQLOutputImpl</code> object
Writes to the stream the data contained in the given <code>SQLData</code> object
Writes a <code>Ref</code> object in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>Blob</code> object in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>Clob</code> object in the Java programming language to this <code>SQLOutputImpl</code> object
Writes a <code>Struct</code> object in the Java programming language to this <code>SQLOutputImpl</code> object
Writes an <code>Array</code> object in the Java programming language to this <code>SQLOutputImpl</code> object
Writes an <code>java
Writes the next attribute to the stream as a <code>String</code> in the Java programming language
Writes an SQL <code>NCLOB</code> value to the stream
Writes an SQL <code>ROWID</code> value to the stream
Writes an SQL <code>XML</code> value to the stream
Returns the {@code SQLType} name that represents a SQL data type
Returns the name of the vendor that supports this data type
Returns the vendor specific type number for the data type
Retrieves the warning chained to this <code>SQLWarning</code> object by <code>setNextWarning</code>
Adds a <code>SQLWarning</code> object to the end of the chain
This method closes this object and releases the resources that it held
Retrieves the XML value designated by this SQLXML instance as a stream
Retrieves a stream that can be used to write the XML value that this SQLXML instance represents
Retrieves the XML value designated by this SQLXML instance as a java
Retrieves a stream to be used to write the XML value that this SQLXML instance represents
Returns a string representation of the XML value designated by this SQLXML instance
Sets the XML value designated by this SQLXML instance to the given String representation
Returns a Source for reading the XML value designated by this SQLXML instance
Returns a Result for setting the XML value designated by this SQLXML instance
<p>Creates an SSL socket
<p>Indicates whether some other object is "equal to" this one
<p>Returns a hash code value for this <code>SslRMIClientSocketFactory</code>
<p>Returns the names of the cipher suites enabled on SSL connections accepted by server sockets created by this factory, or <code>null</code> if this factory uses the cipher suites that are enabled by default
<p>Returns the names of the protocol versions enabled on SSL connections accepted by server sockets created by this factory, or <code>null</code> if this factory uses the protocol versions that are enabled by default
<p>Returns <code>true</code> if client authentication is required on SSL connections accepted by server sockets created by this factory
<p>Creates a server socket that accepts SSL connections configured according to this factory's SSL socket configuration parameters
<p>Indicates whether some other object is "equal to" this one
<p>Returns a hash code value for this <code>SslRMIServerSocketFactory</code>
Pushes an item onto the top of this stack
Removes the object at the top of this stack and returns that object as the value of this function
Looks at the object at the top of this stack without removing it from the stack
Tests if this stack is empty
Returns the 1-based position where an object is on this stack
Dump line number table attribute to file stream in binary format
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump stack map entry
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump type entries to file
Returns the name of the source file containing the execution point represented by this stack trace element
Returns the line number of the source line containing the execution point represented by this stack trace element
Returns the fully qualified name of the class containing the execution point represented by this stack trace element
Returns the name of the method containing the execution point represented by this stack trace element
Returns true if the method containing the execution point represented by this stack trace element is a native method
Returns a string representation of this stack trace element
Returns true if the specified object is another {@code StackTraceElement} instance representing the same execution point as this instance
Returns a hash code value for this stack trace element
Exclusively acquires the lock, blocking if necessary until available
Exclusively acquires the lock if it is immediately available
Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
Non-exclusively acquires the lock, blocking if necessary until available
Non-exclusively acquires the lock if it is immediately available
Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
Returns a stamp that can later be validated, or zero if exclusively locked
Returns true if the lock has not been exclusively acquired since issuance of the given stamp
If the lock state matches the given stamp, releases the exclusive lock
If the lock state matches the given stamp, releases the non-exclusive lock
If the lock state matches the given stamp, releases the corresponding mode of the lock
If the lock state matches the given stamp, performs one of the following actions
If the lock state matches the given stamp, performs one of the following actions
If the lock state matches the given stamp then, if the stamp represents holding a lock, releases it and returns an observation stamp
Releases the write lock if it is held, without requiring a stamp value
Releases one hold of the read lock if it is held, without requiring a stamp value
Returns {@code true} if the lock is currently held exclusively
Returns {@code true} if the lock is currently held non-exclusively
Queries the number of read locks held for this lock
Returns a string identifying this lock, as well as its lock state
Returns a plain {@link Lock} view of this StampedLock in which the {@link Lock#lock} method is mapped to {@link #readLock}, and similarly for other methods
Returns a plain {@link Lock} view of this StampedLock in which the {@link Lock#lock} method is mapped to {@link #writeLock}, and similarly for other methods
Returns a {@link ReadWriteLock} view of this StampedLock in which the {@link ReadWriteLock#readLock()} method is mapped to {@link #asReadLock()}, and {@link ReadWriteLock#writeLock()} to {@link #asWriteLock()}
<p>Sends a notification
Compares two file objects and return true if they represent the same canonical file, zip file entry, or entry in any file system based container
Gets file objects representing the given files
Gets file objects representing the given files
Gets file objects representing the given file names
Gets file objects representing the given file names
Associates the given path with the given location
Gets the path associated with the given location
Gets a location object with the given name
<p>Replace the implementation object wrapped in this object
Get the implementation of this Standard MBean (or MXBean)
Get the Management Interface of this Standard MBean (or MXBean)
Get the class of the implementation of this Standard MBean (or MXBean)
Get the {@link MBeanInfo} for this MBean
Customization hook: Get the className that will be used in the MBeanInfo returned by this MBean
Customization hook: Get the description that will be used in the MBeanInfo returned by this MBean
<p>Customization hook: Get the description that will be used in the MBeanFeatureInfo returned by this MBean
Customization hook: Get the description that will be used in the MBeanAttributeInfo returned by this MBean
Customization hook: Get the description that will be used in the MBeanConstructorInfo returned by this MBean
Customization hook: Get the description that will be used for the  <var>sequence</var> MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean
Customization hook: Get the name that will be used for the <var>sequence</var> MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean
Customization hook: Get the description that will be used in the MBeanOperationInfo returned by this MBean
Customization hook: Get the <var>impact</var> flag of the operation that will be used in the MBeanOperationInfo returned by this MBean
Customization hook: Get the name that will be used for the <var>sequence</var> MBeanParameterInfo of the MBeanOperationInfo returned by this MBean
Customization hook: Get the description that will be used for the  <var>sequence</var> MBeanParameterInfo of the MBeanOperationInfo returned by this MBean
Customization hook: Get the MBeanConstructorInfo[] that will be used in the MBeanInfo returned by this MBean
Customization hook: Return the MBeanInfo cached for this object
Customization hook: cache the MBeanInfo built for this object
<p>Allows the MBean to perform any operations it needs before being registered in the MBean server
<p>Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed
<p>Allows the MBean to perform any operations it needs before being unregistered by the MBean server
<p>Allows the MBean to perform any operations needed after having been unregistered in the MBean server
Configures the pipeline
Check a feature
Check a property
Returns the system ID of the XML data
Returns the encoding style of the XML data
Returns true if CharacterEncodingScheme was set in the encoding declaration of the document
Returns if this XML is standalone
Returns true if the standalone attribute was set in the encoding declaration of the document
Returns the version of XML of this XML stream
Get the name of this event
Returns an Iterator of non-namespace declared attributes declared on this START_ELEMENT, returns an empty iterator if there are no attributes
Returns an Iterator of namespaces declared on this element
Returns the attribute referred to by this name
Gets a read-only namespace context
Gets the value that the prefix is bound to in the context of this element
Retrieves the StartTLS request's object identifier string
Retrieves the StartTLS request's ASN
Creates an extended response object that corresponds to the LDAP StartTLS extended request
Retrieves the StartTLS response's object identifier string
Retrieves the StartTLS response's ASN
Overrides the default list of cipher suites enabled for use on the TLS connection
Sets the hostname verifier used by <tt>negotiate()</tt> after the TLS handshake has completed and the default hostname verification has failed
Negotiates a TLS session using the default SSL socket factory
Negotiates a TLS session using an SSL socket factory
Closes the TLS connection gracefully and reverts back to the underlying connection
Gets the post-edit state of the StateEditable object and ends the edit
Tells the edited object to apply the state prior to the edit
Tells the edited object to apply the state after the edit
Gets the presentation name for this edit
Remove redundant key/values in state hashtables
Upon receiving this message the receiver should place any relevant state into <EM>state</EM>
Upon receiving this message the receiver should extract any relevant state out of <EM>state</EM>
Add a new transition (old,in,guard,act,new) to the state engine
Add a transition with a guard that always evaluates to true
Set the default transition and action for a state
Equivalent to setDefault( oldState, act, newState ) where act is an action that does nothing
Euaivalent to setDefault( oldState, oldState )
Set the default action used in this state engine
Called after all transitions have been added to the state engine
Create an instance of a FSM that uses this state engine
Retrieves the state of an object for binding
Executes the given SQL statement, which returns a single <code>ResultSet</code> object
Executes the given SQL statement, which may be an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement or an SQL statement that returns nothing, such as an SQL DDL statement
Releases this <code>Statement</code> object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
Retrieves the maximum number of bytes that can be returned for character and binary column values in a <code>ResultSet</code> object produced by this <code>Statement</code> object
Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a <code>ResultSet</code> object produced by this <code>Statement</code> object
Retrieves the maximum number of rows that a <code>ResultSet</code> object produced by this <code>Statement</code> object can contain
Sets the limit for the maximum number of rows that any <code>ResultSet</code> object  generated by this <code>Statement</code> object can contain to the given number
Sets escape processing on or off
Retrieves the number of seconds the driver will wait for a <code>Statement</code> object to execute
Sets the number of seconds the driver will wait for a <code>Statement</code> object to execute to the given number of seconds
Cancels this <code>Statement</code> object if both the DBMS and driver support aborting an SQL statement
Retrieves the first warning reported by calls on this <code>Statement</code> object
Clears all the warnings reported on this <code>Statement</code> object
Sets the SQL cursor name to the given <code>String</code>, which will be used by subsequent <code>Statement</code> object <code>execute</code> methods
Executes the given SQL statement, which may return multiple results
Retrieves the current result as a <code>ResultSet</code> object
Retrieves the current result as an update count;  if the result is a <code>ResultSet</code> object or there are no more results, -1  is returned
Moves to this <code>Statement</code> object's next result, returns <code>true</code> if it is a <code>ResultSet</code> object, and implicitly closes any current <code>ResultSet</code> object(s) obtained with the method <code>getResultSet</code>
Gives the driver a hint as to the direction in which rows will be processed in <code>ResultSet</code> objects created using this <code>Statement</code> object
Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this <code>Statement</code> object
Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for <code>ResultSet</code> objects generated by this <code>Statement</code>
Retrieves the number of result set rows that is the default fetch size for <code>ResultSet</code> objects generated from this <code>Statement</code> object
Retrieves the result set concurrency for <code>ResultSet</code> objects generated by this <code>Statement</code> object
Retrieves the result set type for <code>ResultSet</code> objects generated by this <code>Statement</code> object
Adds the given SQL command to the current list of commands for this <code>Statement</code> object
Empties this <code>Statement</code> object's current list of SQL commands
Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts
Retrieves the <code>Connection</code> object that produced this <code>Statement</code> object
Moves to this <code>Statement</code> object's next result, deals with any current <code>ResultSet</code> object(s) according  to the instructions specified by the given flag, and returns <code>true</code> if the next result is a <code>ResultSet</code> object
Retrieves any auto-generated keys created as a result of executing this <code>Statement</code> object
Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this <code>Statement</code> object should be made available for retrieval
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval
Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Retrieves the result set holdability for <code>ResultSet</code> objects generated by this <code>Statement</code> object
Retrieves whether this <code>Statement</code> object has been closed
Requests that a <code>Statement</code> be pooled or not pooled
Returns a  value indicating whether the <code>Statement</code> is poolable or not
Specifies that this {@code Statement} will be closed when all its dependent result sets are closed
Returns a value indicating whether this {@code Statement} will be closed when all its dependent result sets are closed
Retrieves the current result as an update count; if the result is a <code>ResultSet</code> object or there are no more results, -1  is returned
Sets the limit for the maximum number of rows that any <code>ResultSet</code> object  generated by this <code>Statement</code> object can contain to the given number
Retrieves the maximum number of rows that a <code>ResultSet</code> object produced by this <code>Statement</code> object can contain
Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts
Executes the given SQL statement, which may be an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement or an SQL statement that returns nothing, such as an SQL DDL statement
Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this <code>Statement</code> object should be made available for retrieval
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
Returns the <code>PreparedStatement</code> that is being closed or is invalid <p>
Returns the <code>SQLException</code> the driver is about to throw <p>
The driver calls this method on all <code>StatementEventListener</code>s registered on the connection when it detects that a <code>PreparedStatement</code> is closed
The driver calls this method on all <code>StatementEventListener</code>s registered on the connection when it detects that a <code>PreparedStatement</code> is invalid
Gets the value from the StatisticsAccumulator, the value will be a formatted  String with the computed statistics based on the samples accumulated in the  Statistics Accumulator
Clears the state on Statistics Accumulator, After this call all samples are  treated fresh and the old sample computations are disregarded
Gets the statistics accumulator associated with StatisticMonitoredAttribute
<p> User will use this method to just register a sample with the StatisticsAccumulator
Computes the Standard Statistic Results based on the samples collected  so far and provides the complete value as a formatted String
Users can extend StatisticsAccumulator to provide the complete  Stats in the format they prefer, if the default format doesn't suffice
If users choose to custom format the stats
We use a derived Standard Deviation formula to compute SD
This is an internal API to test StatisticsAccumulator
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
<p>Get the <code>XMLEventWriter</code> used by this <code>StAXResult</code>
<p>Get the <code>XMLStreamWriter</code> used by this <code>StAXResult</code>
<p>In the context of a <code>StAXResult</code>, it is not appropriate to explicitly set the system identifier
<p>The returned system identifier is always <code>null</code>
<p>Get the <code>XMLEventReader</code> used by this <code>StAXSource</code>
<p>Get the <code>XMLStreamReader</code> used by this <code>StAXSource</code>
<p>In the context of a <code>StAXSource</code>, it is not appropriate to explicitly set the system identifier
<p>Get the system identifier used by this <code>StAXSource</code>
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
This class is only used internally so this method should never be called
Calculate the local name or psuedo name of the node that this pattern will test, for hash table lookup optimization
Get the local name or psuedo name of the node that this pattern will test, for hash table lookup optimization
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Set the reference to nodetest and predicate for parent or ancestor
Get the reference to nodetest and predicate for parent or ancestor
Set the list of predicate expressions for this pattern step
Tell if this expression or it's subexpressions can traverse outside the current subtree
Get a predicate expression
Get the number of predicates for this match pattern step
Set the predicates for this match pattern step
Static calc of match score
Execute this pattern step, including predicates
Execute this pattern step, including predicates
Execute an expression in the XPath runtime context, and return the result of the expression
Get the proximity position index of the current node based on this node test
Get the count of the nodes that match the test, which is the proximity position of the last node that can pass this test in the sub context selection
Execute the match pattern step relative to another step
Execute the predicates on this step to determine if the current node should be filtered or accepted
Get the string represenentation of this step for diagnostic purposes
Get the match score of the given node
Set the axis that this step should follow
Get the axis that this step follows
Call the visitors on the subtree
Method addResolver
Method addKeyStore
Method addCertificate
Method getIterator
Method getIterator
Call corresponding visitor method(s)
Returns a stream consisting of the elements of this stream that match the given predicate
Returns a stream consisting of the results of applying the given function to the elements of this stream
Returns an {@code IntStream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code LongStream} consisting of the results of applying the given function to the elements of this stream
Returns a {@code DoubleStream} consisting of the results of applying the given function to the elements of this stream
Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns an {@code IntStream} consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns an {@code LongStream} consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns an {@code DoubleStream} consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element
Returns a stream consisting of the distinct elements (according to {@link Object#equals(Object)}) of this stream
Returns a stream consisting of the elements of this stream, sorted according to natural order
Returns a stream consisting of the elements of this stream, sorted according to the provided {@code Comparator}
Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream
Returns a stream consisting of the elements of this stream, truncated to be no longer than {@code maxSize} in length
Returns a stream consisting of the remaining elements of this stream after discarding the first {@code n} elements of the stream
Performs an action for each element of this stream
Performs an action for each element of this stream, in the encounter order of the stream if the stream has a defined encounter order
Returns an array containing the elements of this stream
Returns an array containing the elements of this stream, using the provided {@code generator} function to allocate the returned array, as well as any additional arrays that might be required for a partitioned execution or for resizing
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Performs a <a href="package-summary
Returns the minimum element of this stream according to the provided {@code Comparator}
Returns the maximum element of this stream according to the provided {@code Comparator}
Returns the count of elements in this stream
Returns whether any elements of this stream match the provided predicate
Returns whether all elements of this stream match the provided predicate
Returns whether no elements of this stream match the provided predicate
Returns an {@link Optional} describing the first element of this stream, or an empty {@code Optional} if the stream is empty
Returns an {@link Optional} describing some element of the stream, or an empty {@code Optional} if the stream is empty
Returns a builder for a {@code Stream}
Returns an empty sequential {@code Stream}
Returns a sequential {@code Stream} containing a single element
Returns a sequential ordered stream whose elements are the specified values
Returns an infinite sequential ordered {@code Stream} produced by iterative application of a function {@code f} to an initial element {@code seed}, producing a {@code Stream} consisting of {@code seed}, {@code f(seed)}, {@code f(f(seed))}, etc
Returns an infinite sequential unordered stream where each element is generated by the provided {@code Supplier}
Creates a lazily concatenated stream whose elements are all the elements of the first stream followed by all the elements of the second stream
Adds an element to the stream being built
Adds an element to the stream being built
Builds the stream, transitioning this builder to the built state
Reads data from <code>istream</code> and initalizes the <code>value</code> field of the Holder with the unmarshalled data
Marshals to <code>ostream</code> the value in the <code>value</code> field of the Holder
Retrieves the <code>TypeCode</code> object corresponding to the value in the <code>value</code> field of the Holder
Tests whether the current state is part of this stream
Change the output stream
Set (or change) the character encoding used by this <tt>Handler</tt>
Format and publish a <tt>LogRecord</tt>
Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>
Flush any buffered messages
Close the current output stream
Gets the output stream
Returns the document format emitted by this print service
Disposes this <code>StreamPrintService</code>
Returns a <code>boolean</code> indicating whether or not this <code>StreamPrintService</code> has been disposed
Locates factories for print services that can be used with a print job to output a stream of data in the format specified by {@code outputMimeType}
Queries the factory for the document format that is emitted by printers obtained from this factory
Queries the factory for the document flavors that can be accepted by printers obtained from this factory
Returns a <code>StreamPrintService</code> that can print to the specified output stream
Set the parent of this instance
Get the parent of this instance
Set the ByteStream that is to be written to
Get the byte stream that was set with setOutputStream
Set the writer that is to receive the result
Get the character stream that was set with setWriter
Set the systemID that may be used in association with the byte or character stream, or, if neither is set, use this value as a writeable URI (probably a file name)
<p>Set the system ID from a <code>File</code> reference
Get the system identifier that was set with setSystemId
Set the byte stream to be used as input
Get the byte stream that was set with setByteStream
Set the input to be a character reader
Get the character stream that was set with setReader
Set the public identifier for this Source
Get the public identifier that was set with setPublicId
Set the system identifier for this Source
Get the system identifier that was set with setSystemId
Set the system ID from a File reference
Creates a new sequential or parallel {@code Stream} from a {@code Spliterator}
Creates a new sequential or parallel {@code Stream} from a {@code Supplier} of {@code Spliterator}
Creates a new sequential or parallel {@code IntStream} from a {@code Spliterator
Creates a new sequential or parallel {@code IntStream} from a {@code Supplier} of {@code Spliterator
Creates a new sequential or parallel {@code LongStream} from a {@code Spliterator
Creates a new sequential or parallel {@code LongStream} from a {@code Supplier} of {@code Spliterator
Creates a new sequential or parallel {@code DoubleStream} from a {@code Spliterator
Creates a new sequential or parallel {@code DoubleStream} from a {@code Supplier} of {@code Spliterator
Resets this tokenizer's syntax table so that all characters are "ordinary
Specifies that all characters <i>c</i> in the range <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code> are word constituents
Specifies that all characters <i>c</i> in the range <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code> are white space characters
Specifies that all characters <i>c</i> in the range <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code> are "ordinary" in this tokenizer
Specifies that the character argument is "ordinary" in this tokenizer
Specified that the character argument starts a single-line comment
Specifies that matching pairs of this character delimit string constants in this tokenizer
Specifies that numbers should be parsed by this tokenizer
Determines whether or not ends of line are treated as tokens
Determines whether or not the tokenizer recognizes C-style comments
Determines whether or not the tokenizer recognizes C++-style comments
Determines whether or not word token are automatically lowercased
Parses the next token from the input stream of this tokenizer
Causes the next call to the {@code nextToken} method of this tokenizer to return the current value in the {@code ttype} field, and not to modify the value in the {@code nval} or {@code sval} field
Return the current line number
Returns the string representation of the current stream token and the line number it occurs on
Returns the trigonometric sine of an angle
Returns the trigonometric cosine of an angle
Returns the trigonometric tangent of an angle
Returns the arc sine of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2
Returns the arc cosine of a value; the returned angle is in the range 0
Returns the arc tangent of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2
Converts an angle measured in degrees to an approximately equivalent angle measured in radians
Converts an angle measured in radians to an approximately equivalent angle measured in degrees
Returns Euler's number <i>e</i> raised to the power of a {@code double} value
Returns the natural logarithm (base <i>e</i>) of a {@code double} value
Returns the base 10 logarithm of a {@code double} value
Returns the correctly rounded positive square root of a {@code double} value
Returns the cube root of a {@code double} value
Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
Returns the smallest (closest to negative infinity) {@code double} value that is greater than or equal to the argument and is equal to a mathematical integer
Returns the largest (closest to positive infinity) {@code double} value that is less than or equal to the argument and is equal to a mathematical integer
Returns the {@code double} value that is closest in value to the argument and is equal to a mathematical integer
Returns the angle <i>theta</i> from the conversion of rectangular coordinates ({@code x},&nbsp;{@code y}) to polar coordinates (r,&nbsp;<i>theta</i>)
Returns the value of the first argument raised to the power of the second argument
Returns the closest {@code int} to the argument, with ties rounding to positive infinity
Returns the closest {@code long} to the argument, with ties rounding to positive infinity
Returns a {@code double} value with a positive sign, greater than or equal to {@code 0
Returns the sum of its arguments, throwing an exception if the result overflows an {@code int}
Returns the sum of its arguments, throwing an exception if the result overflows a {@code long}
Returns the difference of the arguments, throwing an exception if the result overflows an {@code int}
Returns the difference of the arguments, throwing an exception if the result overflows a {@code long}
Returns the product of the arguments, throwing an exception if the result overflows an {@code int}
Returns the product of the arguments, throwing an exception if the result overflows a {@code long}
Returns the value of the {@code long} argument; throwing an exception if the value overflows an {@code int}
Returns the largest (closest to positive infinity) {@code int} value that is less than or equal to the algebraic quotient
Returns the largest (closest to positive infinity) {@code long} value that is less than or equal to the algebraic quotient
Returns the floor modulus of the {@code int} arguments
Returns the floor modulus of the {@code long} arguments
Returns the absolute value of an {@code int} value
Returns the absolute value of a {@code long} value
Returns the absolute value of a {@code float} value
Returns the absolute value of a {@code double} value
Returns the greater of two {@code int} values
Returns the greater of two {@code long} values
Returns the greater of two {@code float} values
Returns the greater of two {@code double} values
Returns the smaller of two {@code int} values
Returns the smaller of two {@code long} values
Returns the smaller of two {@code float} values
Returns the smaller of two {@code double} values
Returns the size of an ulp of the argument
Returns the size of an ulp of the argument
Returns the signum function of the argument; zero if the argument is zero, 1
Returns the signum function of the argument; zero if the argument is zero, 1
Returns the hyperbolic sine of a {@code double} value
Returns the hyperbolic cosine of a {@code double} value
Returns the hyperbolic tangent of a {@code double} value
Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>) without intermediate overflow or underflow
Returns <i>e</i><sup>x</sup>&nbsp;-1
Returns the natural logarithm of the sum of the argument and 1
Returns the first floating-point argument with the sign of the second floating-point argument
Returns the first floating-point argument with the sign of the second floating-point argument
Returns the unbiased exponent used in the representation of a {@code float}
Returns the unbiased exponent used in the representation of a {@code double}
Returns the floating-point number adjacent to the first argument in the direction of the second argument
Returns the floating-point number adjacent to the first argument in the direction of the second argument
Returns the floating-point value adjacent to {@code d} in the direction of positive infinity
Returns the floating-point value adjacent to {@code f} in the direction of positive infinity
Returns the floating-point value adjacent to {@code d} in the direction of negative infinity
Returns the floating-point value adjacent to {@code f} in the direction of negative infinity
Returns {@code d} &times; 2<sup>{@code scaleFactor}</sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
Returns {@code f} &times; 2<sup>{@code scaleFactor}</sup> rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
Returns the length of this string
Returns {@code true} if, and only if, {@link #length()} is {@code 0}
Returns the {@code char} value at the specified index
Returns the character (Unicode code point) at the specified index
Returns the character (Unicode code point) before the specified index
Returns the number of Unicode code points in the specified text range of this {@code String}
Returns the index within this {@code String} that is offset from the given {@code index} by {@code codePointOffset} code points
Copies characters from this string into the destination character array
Copies characters from this string into the destination byte array
Encodes this {@code String} into a sequence of bytes using the named charset, storing the result into a new byte array
Encodes this {@code String} into a sequence of bytes using the given {@linkplain java
Encodes this {@code String} into a sequence of bytes using the platform's default charset, storing the result into a new byte array
Compares this string to the specified object
Compares this string to the specified {@code StringBuffer}
Compares this string to the specified {@code CharSequence}
Compares this {@code String} to another {@code String}, ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically, ignoring case differences
Tests if two string regions are equal
Tests if two string regions are equal
Tests if the substring of this string beginning at the specified index starts with the specified prefix
Tests if this string starts with the specified prefix
Tests if this string ends with the specified suffix
Returns a hash code for this string
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
Returns the index within this string of the last occurrence of the specified character
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
Returns the index within this string of the last occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index
Returns a string that is a substring of this string
Returns a string that is a substring of this string
Returns a character sequence that is a subsequence of this sequence
Concatenates the specified string to the end of this string
Returns a string resulting from replacing all occurrences of {@code oldChar} in this string with {@code newChar}
Tells whether or not this string matches the given <a href="
Returns true if and only if this string contains the specified sequence of char values
Replaces the first substring of this string that matches the given <a href="
Replaces each substring of this string that matches the given <a href="
Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence
Splits this string around matches of the given <a href="
Splits this string around matches of the given <a href="
Returns a new String composed of copies of the {@code CharSequence elements} joined together with a copy of the specified {@code delimiter}
Returns a new {@code String} composed of copies of the {@code CharSequence elements} joined together with a copy of the specified {@code delimiter}
Converts all of the characters in this {@code String} to lower case using the rules of the given {@code Locale}
Converts all of the characters in this {@code String} to lower case using the rules of the default locale
Converts all of the characters in this {@code String} to upper case using the rules of the given {@code Locale}
Converts all of the characters in this {@code String} to upper case using the rules of the default locale
Returns a string whose value is this string, with any leading and trailing whitespace removed
This object (which is already a string!) is itself returned
Converts this string to a new character array
Returns a formatted string using the specified format string and arguments
Returns a formatted string using the specified locale, format string, and arguments
Returns the string representation of the {@code Object} argument
Returns the string representation of the {@code char} array argument
Returns the string representation of a specific subarray of the {@code char} array argument
Equivalent to {@link #valueOf(char[], int, int)}
Equivalent to {@link #valueOf(char[])}
Returns the string representation of the {@code boolean} argument
Returns the string representation of the {@code char} argument
Returns the string representation of the {@code int} argument
Returns the string representation of the {@code long} argument
Returns the string representation of the {@code float} argument
Returns the string representation of the {@code double} argument
Returns a canonical representation for the string object
Appends the specified {@code StringBuffer} to this sequence
Appends the specified {@code CharSequence} to this sequence
Reads the next byte of data from this input stream
Reads up to <code>len</code> bytes of data from this input stream into an array of bytes
Skips <code>n</code> bytes of input from this input stream
Returns the number of bytes that can be read from the input stream without blocking
Resets the input stream to begin reading from the first character of this input stream's underlying buffer
Get the first free instance of a string buffer, or create one if there are no free instances
Return a string buffer back to the pool
Appends the specified {@code StringBuffer} to this sequence
Reset this iterator to point to a new string
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Compares the equality of two StringCharacterIterator objects
Computes a hashcode for this iterator
Creates a copy of this iterator
Returns the length of the content
Inserts a string into the content
Removes part of the content
Retrieves a portion of the content
Retrieves a portion of the content
Creates a position within the content that will track change as the content is mutated
Returns a Vector containing instances of UndoPosRef for the Positions in the range <code>offset</code> to <code>offset</code> + <code>length</code>
Resets the location for all the UndoPosRef instances in <code>positions</code>
Checks that "content" string is valid string value
Reads the unmarshalled data from <code>input</code> and assigns it to the <code>value</code> field of this <code>StringHolder</code> object
Marshals the value held by this <code>StringHolder</code> object to the output stream  <code>output</code>
Retrieves the <code>TypeCode</code> object that corresponds to the value held in this <code>StringHolder</code> object
Sets the sequence of characters to be used when determining the string representation of this {@code StringJoiner} and no elements have been added yet, that is, when it is empty
Returns the current value, consisting of the {@code prefix}, the values added so far separated by the {@code delimiter}, and the {@code suffix}, unless no elements have been added in which case, the {@code prefix + suffix} or the {@code emptyValue} characters are returned
Adds a copy of the given {@code CharSequence} value as the next element of the {@code StringJoiner} value
Adds the contents of the given {@code StringJoiner} without prefix and suffix as the next element if it is non-empty
Returns the length of the {@code String} representation of this {@code StringJoiner}
The number of <code>GenericString</code>s in the list
Checks if the <code>GenericString</code> <code>item</code> is a member of this list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
The number of <code>Objects</code> in the list
Checks if the <code>GenericString</code> <code>item</code> is a member of this list
Starts the string monitor
Stops the string monitor
Gets the derived gauge of the specified object, if this object is contained in the set of observed MBeans, or <code>null</code> otherwise
Gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed MBeans, or <code>0</code> otherwise
Returns the derived gauge of the first object in the set of observed MBeans
Gets the derived gauge timestamp of the first object in the set of observed MBeans
Gets the string to compare with the observed attribute common to all observed MBeans
Sets the string to compare with the observed attribute common to all observed MBeans
Gets the matching notification's on/off switch value common to all observed MBeans
Sets the matching notification's on/off switch value common to all observed MBeans
Gets the differing notification's on/off switch value common to all observed MBeans
Sets the differing notification's on/off switch value common to all observed MBeans
Returns a <CODE>NotificationInfo</CODE> object containing the name of the Java class of the notification and the notification types sent by the string monitor
Gets the derived gauge
Gets the derived gauge timestamp
Gets the derived gauge for the specified MBean
Gets the derived gauge timestamp for the specified MBean
Gets the string to compare with the observed attribute
Sets the string to compare with the observed attribute
Gets the matching notification's on/off switch value
Sets the matching notification's on/off switch value
Gets the differing notification's on/off switch value
Sets the differing notification's on/off switch value
Reads a single character
Reads characters into a portion of an array
Skips the specified number of characters in the stream
Tells whether this stream is ready to be read
Tells whether this stream supports the mark() operation, which it does
Marks the present position in the stream
Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked
Closes the stream and releases any system resources associated with it
Retrieves the contents of this address
Returns an array of flavors in which this <code>Transferable</code> can provide the data
Returns whether the requested flavor is supported by this <code>Transferable</code>
Returns the <code>Transferable</code>'s data in the requested <code>DataFlavor</code> if possible
Get the length of the list
Append a string onto the vector
Tell if the table contains the given string
Tell if the table contains the given string
Tell if the table contains the given string
Return array of keys in the table
Tests if there are more tokens available from this tokenizer's string
Returns the next token from this string tokenizer
Returns the next token in this string tokenizer's string
Returns the same value as the <code>hasMoreTokens</code> method
Returns the same value as the <code>nextToken</code> method, except that its declared return value is <code>Object</code> rather than <code>String</code>
Calculates the number of times that this tokenizer's <code>nextToken</code> method can be called before it generates an exception
Get the length of the list
Append a string onto the vector
Tell if the table contains the given string
Remove the given string and its value from this table
Tell if the table contains the given string
Tell if the table contains the given string in the value
Get the nth element
Tell if the table contains the given string
Tell if the table contains the given string
Get the length of the list
Get the length of the list
Append a StringToStringTable object onto the vector
Given a string, find the last added occurance value that matches the key
Given a string, find out if there is a value in this table that matches the key
Remove the last element
Get the nth element
Tell if the table contains the given StringToStringTable
Translates a string into an object of internal type <code>type</code>
Translates a string into a synthesized boolean
Translates a string into a real by calling stringToReal() from the basis library
Translates a string into a non-synthesized boolean
Expects a string on the stack and pushes a boxed string
Translates a internal string into an external (Java) string
Translates an external (primitive) Java type into a string
Translates an object of this type to its boxed representation
Translates an object of this type to its unboxed representation
Returns the class name of an internal type's external representation
Returns the string represented by the <CODE>StringValueExp</CODE> instance
Returns the string representing the object
Sets the MBean server on which the query is to be performed
Applies the ValueExp on a MBean
The value of a PI must not contain the substring "?>"
Get the length of the list
Get the length of the list
Append a string onto the vector
Get the nth element
Tell if the table contains the given string
Tell if the table contains the given string
Tell if the table contains the given string
Pop the tail of this vector
Get the string at the tail of this vector without popping
Write a single character
Write a portion of an array of characters
Write a string
Write a portion of a string
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Return the buffer's current value as a string
Return the string buffer itself
Flush the stream
Closing a <tt>StringWriter</tt> has no effect
Returns an outline <code>Shape</code> which encloses the area that should be painted when the <code>Shape</code> is stroked according to the rules defined by the object implementing the <code>Stroke</code> interface
Paints the border for the specified component with the specified position and size
Reinitializes the {@code insets} parameter with this border's current insets
Returns the {@link BasicStroke} object used to stroke a shape during the border rendering
Returns the {@link Paint} object used to generate a color during the border rendering
Retrieves the SQL type name of the SQL structured type that this <code>Struct</code> object represents
Produces the ordered values of the attributes of the SQL structured type that this <code>Struct</code> object represents
Produces the ordered values of the attributes of the SQL structured type that this <code>Struct</code> object represents
Returns a hash code value for the object which is the same for all stubs that represent the same remote object
Compares two stubs for equality
Returns a string representation of this stub
Connects this stub to an ORB
Use implicit activation to get an object reference for the servant
Given any Tie, return the corresponding object refernce, activating the Servant if necessary
This also gets the delegate from a Servant by using Servant
Connect the stub to the orb if necessary
Delegation call for {@link Stub#hashCode}
Delegation call for {@link Stub#equals}
Delegation call for {@link Stub#toString}
Delegation call for {@link Stub#connect}
Delegation call for <a href="{@docRoot}/serialized-form
Delegation call for <a href="{@docRoot}/serialized-form
Returns a hash code value for the object which is the same for all stubs that represent the same remote object
Compares two stubs for equality
Returns a string representation of this stub
Connects this stub to an ORB
Serialization method to restore the IOR state
Serialization method to save the IOR state
Returns the stub classname for the given interface name
Invoke the given method with the args and return the result
Returns a hash code value for the object which is the same for all stubs that represent the same remote object
Returns a string representation of this stub
Fetches the name of the style
Adds a listener to track whenever an attribute has been changed
Removes a listener that was tracking attribute changes
Returns the string representation
Gets the BidiLevel setting
Sets the BidiLevel
Gets the component setting from the attribute list
Sets the component attribute
Gets the icon setting from the attribute list
Sets the icon attribute
Gets the font family setting from the attribute list
Sets the font attribute
Gets the font size setting from the attribute list
Sets the font size attribute
Checks whether the bold attribute is set
Sets the bold attribute
Checks whether the italic attribute is set
Sets the italic attribute
Checks whether the underline attribute is set
Checks whether the strikethrough attribute is set
Checks whether the superscript attribute is set
Checks whether the subscript attribute is set
Sets the underline attribute
Sets the strikethrough attribute
Sets the superscript attribute
Sets the subscript attribute
Gets the foreground color setting from the attribute list
Sets the foreground color
Gets the background color setting from the attribute list
Sets the background color
Gets the first line indent setting
Sets the first line indent
Gets the right indent setting
Sets right indent
Gets the left indent setting
Sets left indent
Gets the line spacing setting
Sets line spacing
Gets the space above setting
Sets space above
Gets the space below setting
Sets space below
Gets the alignment setting
Sets alignment
Gets the TabSet
Sets the TabSet
Returns default AttributeContext shared by all documents that don't bother to define/supply their own context
Adds a new style into the style hierarchy
Removes a named style previously added to the document
Fetches a named style previously added to the document
Fetches the names of the styles defined
Adds a listener to track when styles are added or removed
Removes a listener that was tracking styles being added or removed
Returns an array of all the <code>ChangeListener</code>s added to this StyleContext with addChangeListener()
Gets the font from an attribute set
Takes a set of attributes and turn it into a foreground color specification
Takes a set of attributes and turn it into a background color specification
Gets a new font
Returns font metrics for a font
Adds an attribute to the given set, and returns the new representative set
Adds a set of attributes to the element
Removes an attribute from the set
Removes a set of attributes for the element
Removes a set of attributes for the element
Fetches an empty AttributeSet
Returns a set no longer needed by the MutableAttributeSet implementation
Returns the maximum number of key/value pairs to try and compress into unique/immutable sets
Create a compact set of attributes that might be shared
Create a large set of attributes that should trade off space for time
Converts a StyleContext to a String
Context-specific handling of writing out attributes
Context-specific handling of reading in attributes
Writes a set of attributes to the given object stream for the purpose of serialization
Reads a set of attributes from the given object input stream that have been previously written out with <code>writeAttributeSet</code>
Registers an object as a static object that is being used as a key in attribute sets
Returns the object previously registered with <code>registerStaticAttributeKey</code>
Returns the String that <code>key</code> will be registered with
Returns a string showing the key/value pairs
Returns a hashcode for this set of attributes
Compares this object to the specified object
Clones a set of attributes
Gets the number of attributes that are defined
Checks whether a given attribute is defined
Checks whether two attribute sets are equal
Copies a set of attributes
Gets the value of an attribute
Gets the names of all attributes
Checks whether a given attribute name/value is defined
Checks whether the attribute set contains all of the given attributes
If not overriden, the resolving parent defaults to the parent element
Converts the style to a string
Fetches the name of the style
Changes the name of the style
Adds a change listener
Removes a change listener
Returns an array of all the <code>ChangeListener</code>s added to this NamedStyle with addChangeListener()
Notifies all listeners that have registered interest for notification on this event type
Return an array of all the listeners of the given type that were added to this model
Gets the number of attributes that are defined
Checks whether a given attribute is defined
Checks whether two attribute sets are equal
Copies a set of attributes
Gets the value of an attribute
Gets the names of all attributes
Checks whether a given attribute name/value is defined
Checks whether the element contains all the attributes
Gets attributes from the parent
Adds an attribute
Adds a set of attributes to the element
Removes an attribute from the set
Removes a set of attributes for the element
Removes a set of attributes for the element
Sets the resolving parent
Adds a new style into the logical style hierarchy
Removes a named style previously added to the document
Fetches a named style previously added
Changes the content element attributes used for the given range of existing content in the document
Sets paragraph attributes
Sets the logical style to use for the paragraph at the given position
Gets a logical style for a given position in a paragraph
Gets the element that represents the paragraph that encloses the given offset within the document
Gets the element that represents the character that is at the given offset within the document
Takes a set of attributes and turn it into a foreground color specification
Takes a set of attributes and turn it into a background color specification
Takes a set of attributes and turn it into a font specification
Gets the input attributes for the pane
Fetches the element representing the current run of character attributes for the caret
Fetches the command list for the editor
Creates an uninitialized text storage model that is appropriate for this type of editor
Called when the kit is being installed into a JEditorPane
Called when the kit is being removed from the JEditorPane
Fetches a factory that is suitable for producing views of any models that are produced by this kit
Creates a copy of the editor kit
Copies the key/values in <code>element</code>s AttributeSet into <code>set</code>
Gets the target editor for an action
Gets the document associated with an editor pane
Gets the editor kit associated with an editor pane
Applies the given attributes to character content
Applies the given attributes to paragraphs
Sets the font family
Sets the font size
Sets the foreground color
Sets the alignment
Toggles the bold attribute
Toggles the italic attribute
Toggles the Underline attribute
This specifies the style sheet language for this style sheet
<code>false</code> if the style sheet is applied to the document
<code>false</code> if the style sheet is applied to the document
The node that associates this style sheet with the document
For style sheet languages that support the concept of style sheet inclusion, this attribute represents the including style sheet, if one exists
If the style sheet is a linked style sheet, the value of its attribute is its location
The advisory title
The intended destination media for style information
The number of <code>StyleSheets</code> in the list
Used to retrieve a style sheet by ordinal index
Get the object that will be used to resolve URIs in href in xml-stylesheet processing instruction
Get the object that will be used to resolve URIs in href in xml-stylesheet processing instruction
Return the last stylesheet found that match the constraints
Handle the xml-stylesheet processing instruction
The spec notes that "The xml-stylesheet processing instruction is allowed only in the prolog of an XML document
Added additional getter and setter methods for the Base Id to fix bugzilla bug 24187
Get the length of the list
Append a byte onto the vector
Wipe it out
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Get the length of the list
Set the length of the list
Append a int onto the vector
Wipe it out
Sets the component at the specified index of this vector to be the specified object
Get the nth element
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method
Return the internal m_map0 array
Return the m_map double array
Get the number of nodes in the node list, which, in the XSLT 1 based counting system, is the last index position
Get the current sub-context position
Set this {@code Subject} to be read-only
Query whether this {@code Subject} is read-only
Get the {@code Subject} associated with the provided {@code AccessControlContext}
Perform work as a particular {@code Subject}
Perform work as a particular {@code Subject}
Perform privileged work as a particular {@code Subject}
Perform privileged work as a particular {@code Subject}
Return the {@code Set} of Principals associated with this {@code Subject}
Return a {@code Set} of Principals associated with this {@code Subject} that are instances or subclasses of the specified {@code Class}
Return the {@code Set} of public credentials held by this {@code Subject}
Return the {@code Set} of private credentials held by this {@code Subject}
Return a {@code Set} of public credentials associated with this {@code Subject} that are instances or subclasses of the specified {@code Class}
Return a {@code Set} of private credentials associated with this {@code Subject} that are instances or subclasses of the specified {@code Class}
Compares the specified Object with this {@code Subject} for equality
Return the String representation of this {@code Subject}
Returns a hashcode for this {@code Subject}
Check if the connector server creator can assume the identity of each principal in the authenticated subject, i
Get the {@code Subject} associated with this {@code SubjectDomainCombiner}
Update the relevant ProtectionDomains with the Principals from the {@code Subject} associated with this {@code SubjectDomainCombiner}
clear the internal registry of substitutionGroup information
add a list of substitution group information
get all elements that can substitute the given element, according to the spec, we shouldn't consider the {block} constraints
Return the MBeanInstantiator associated to this MBeanServer
Tell whether {@link MBeanServerInterceptor}s are enabled on this object
Return the MBeanServerInterceptor
Set the MBeanServerInterceptor
<p>Return the MBeanServerDelegate representing the MBeanServer
Gets a result
Returns the names of the supported annotation types
Returns the supported options
Returns the latest supported source version
The set of warnings that are to be suppressed by the compiler in the annotated element
Call corresponding visitor method(s)
{@inheritDoc} <p> If {@link #isNotifyOnEDT} is {@code true} and called off the <i>Event Dispatch Thread</i> this implementation uses {@code SwingUtilities
Returns {@code notifyOnEDT} property
Return true if <code>a</code> contains <code>b</code>
Return the rectangle (0,0,bounds
Returns the first <code>Window </code> ancestor of <code>c</code>, or {@code null} if <code>c</code> is not contained inside a <code>Window</code>
Convert a <code>aPoint</code> in <code>source</code> coordinate system to <code>destination</code> coordinate system
Convert the point <code>(x,y)</code> in <code>source</code> coordinate system to <code>destination</code> coordinate system
Convert the rectangle <code>aRectangle</code> in <code>source</code> coordinate system to <code>destination</code> coordinate system
Convenience method for searching above <code>comp</code> in the component hierarchy and returns the first object of class <code>c</code> it finds
Convenience method for searching above <code>comp</code> in the component hierarchy and returns the first object of <code>name</code> it finds
Returns the deepest visible descendent Component of <code>parent</code> that contains the location <code>x</code>, <code>y</code>
Returns a MouseEvent similar to <code>sourceEvent</code> except that its x and y members have been converted to <code>destination</code>'s coordinate system
Convert a point from a component's coordinate system to screen coordinates
Convert a point from a screen coordinates to a component's coordinate system
Returns the first <code>Window </code> ancestor of <code>c</code>, or {@code null} if <code>c</code> is not contained inside a <code>Window</code>
Return <code>true</code> if a component <code>a</code> descends from a component <code>b</code>
Convenience to calculate the intersection of two rectangles without allocating a new rectangle
Convenience method that calculates the union of two rectangles without allocating a new rectangle
Convenience returning an array of rect representing the regions within <code>rectA</code> that do not overlap with <code>rectB</code>
Returns true if the mouse event specifies the left mouse button
Returns true if the mouse event specifies the middle mouse button
Returns true if the mouse event specifies the right mouse button
Compute the width of the string using a font with the specified "metrics" (sizes)
Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string
Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string
Paints a component to the specified <code>Graphics</code>
Paints a component to the specified <code>Graphics</code>
A simple minded look and feel change: ask each node in the tree to <code>updateUI()</code> -- that is, to initialize its UI property with the current look and feel
Causes <i>doRun
Causes <code>doRun
Returns true if the current thread is an AWT event dispatching thread
Get the index of this object in its accessible parent
Returns the <code>Accessible</code> child contained at the local coordinate <code>Point</code>, if one exists
Get the state of this object
Returns the number of accessible children in the object
Return the nth Accessible child of the object
Return the child <code>Component</code> of the specified <code>Component</code> that is the focus owner, if any
If c is a JRootPane descendant return its JRootPane ancestor
Returns the root component for the current component tree
Process the key bindings for the <code>Component</code> associated with <code>event</code>
Invokes <code>actionPerformed</code> on <code>action</code> if <code>action</code> is enabled (and non-{@code null})
Convenience method to change the UI InputMap for <code>component</code> to <code>uiInputMap</code>
Convenience method to change the UI ActionMap for <code>component</code> to <code>uiActionMap</code>
Returns the InputMap provided by the UI for condition <code>condition</code> in component <code>component</code>
Returns the ActionMap provided by the UI in component <code>component</code>
Stores the position and size of the inner painting area of the specified component in <code>r</code> and returns <code>r</code>
Returns the first ancestor of the {@code component} which is not an instance of {@link JLayer}
Returns the first {@code JViewport}'s descendant which is not an instance of {@code JLayer}
Registers delegate RepaintManager for {@code JComponent}
Sets vsyncRequested state for the {@code rootContainer}
Checks if vsync painting is requested for {@code rootContainer}
Returns delegate {@code RepaintManager} for {@code component} hierarchy
Computes a result, or throws an exception if unable to do so
Sets this {@code Future} to the result of computation unless it has been cancelled
Sends data chunks to the {@link #process} method
Receives data chunks from the {@code publish} method asynchronously on the <i>Event Dispatch Thread</i>
Executed on the <i>Event Dispatch Thread</i> after the {@code doInBackground} method is finished
Sets the {@code progress} bound property
Returns the {@code progress} bound property
Schedules this {@code SwingWorker} for execution on a <i>worker</i> thread
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} <p> Note: calling {@code get} on the <i>Event Dispatch Thread</i> blocks <i>all</i> events, including repaints, from being processed until this {@code SwingWorker} is complete
{@inheritDoc} <p> Please refer to {@link #get} for more details
Adds a {@code PropertyChangeListener} to the listener list
Removes a {@code PropertyChangeListener} from the listener list
Reports a bound property update to any registered listeners
Returns the {@code PropertyChangeSupport} for this {@code SwingWorker}
Returns the {@code SwingWorker} state bound property
Determines if this switch point has been invalidated yet
Returns a method handle which always delegates either to the target or the fallback
Sets all of the given switch points into the invalid state
Printing this token out
Adds the key/value mapping to the key table
Get the value associated with the given key
Get the number of key/value pairs stored in this table
Add all values to the given array
Return key/value pairs of all entries in the map
Make a clone of this object
Remove all key/value association
Returns a hashcode value for the specified key
Increases the capacity of and internally reorganizes this SymbolHash, in order to accommodate and access its entries more efficiently
Randomly selects a new hash function and reorganizes this SymbolHash in order to more evenly distribute its entries across the table
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Returns a hashcode value for the specified symbol
Returns a hashcode value for the specified symbol information
Increases the capacity of and internally reorganizes this SymbolTable, in order to accommodate and access its entries more efficiently
Randomly selects a new hash function and reorganizes this SymbolTable in order to more evenly distribute its entries across the table
Returns true if the symbol table already contains the specified symbol
Returns true if the symbol table already contains the specified symbol
Wait (possibly forever) until successful passage
Wait at most msecs to pass; report whether passed
Potentially enable others to pass
Adds the the given synchronization provider to the factory register
Returns the <code>SyncFactory</code> singleton
Removes the designated currently registered synchronization provider from the Factory SPI register
Returns the <code>SyncProvider</code> instance identified by <i>providerID</i>
Returns an Enumeration of currently registered synchronization providers
Sets the logging object to be used by the <code>SyncProvider</code> implementation provided by the <code>SyncFactory</code>
Sets the logging object that is used by <code>SyncProvider</code> implementations provided by the <code>SyncFactory</code> SPI
Returns the logging object for applications to retrieve synchronization events posted by SyncProvider implementations
Sets the initial JNDI context from which SyncProvider implementations can be retrieved from a JNDI namespace <p>  This method checks to see that there is an {@code SQLPermission} object  which grants the permission {@code setSyncFactory} before allowing the method to succeed
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Adds the specified symbol to the symbol table and returns a reference to the unique symbol
Returns true if the symbol table already contains the specified symbol
Returns true if the symbol table already contains the specified symbol
Adds the specified element to this queue, waiting if necessary for another thread to receive it
Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it
Inserts the specified element into this queue, if another thread is waiting to receive it
Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it
Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it
Retrieves and removes the head of this queue, if another thread is currently making an element available
Always returns {@code true}
Always returns zero
Always returns zero
Does nothing
Always returns {@code false}
Always returns {@code false}
Returns {@code false} unless the given collection is empty
Always returns {@code false}
Always returns {@code false}
Always returns {@code null}
Returns an empty iterator in which {@code hasNext} always returns {@code false}
Returns an empty spliterator in which calls to {@link java
Returns a zero-length array
Sets the zeroeth element of the specified array to {@code null} (if the array has non-zero length) and returns it
Returns the unique identifier for this <code>SyncProvider</code> object
Returns a <code>javax
Returns a <code>javax
Returns a constant indicating the grade of synchronization a <code>RowSet</code> object can expect from this <code>SyncProvider</code> object
Sets a lock on the underlying data source at the level indicated by <i>datasource_lock</i>
Returns the current data source lock severity level active in this <code>SyncProvider</code> implementation
Returns whether this <code>SyncProvider</code> implementation can perform synchronization between a <code>RowSet</code> object and the SQL <code>VIEW</code> in the data source from which the <code>RowSet</code> object got its data
Returns the release version of this <code>SyncProvider</code> instance
Returns the vendor name of this <code>SyncProvider</code> instance
Retrieves the <code>SyncResolver</code> object that has been set for this <code>SyncProviderException</code> object, or if none has been set, an instance of the default <code>SyncResolver</code> implementation included in the reference implementation
Sets the <code>SyncResolver</code> object for this <code>SyncProviderException</code> object to the one supplied
Retrieves the conflict status of the current row of this <code>SyncResolver</code>, which indicates the operation the <code>RowSet</code> object was attempting when the conflict occurred
Retrieves the value in the designated column in the current row of this <code>SyncResolver</code> object, which is the value in the data source that caused a conflict
Retrieves the value in the designated column in the current row of this <code>SyncResolver</code> object, which is the value in the data source that caused a conflict
Sets <i>obj</i> as the value in column <i>index</i> in the current row of the <code>RowSet</code> object that is being synchronized
Sets <i>obj</i> as the value in column <i>columnName</i> in the current row of the <code>RowSet</code> object that is being synchronized
Moves the cursor down from its current position to the next row that contains a conflict value
Moves the cursor up from its current position to the previous conflict row in this <code>SyncResolver</code> object
Method to acquire a Sync without ever throwing an InterruptedException
Set the source file line number for this element
Get the source file line number for this element
Set the QName for the syntax tree node
Set the QName for the SyntaxTreeNode
Set the QName for the SyntaxTreeNode
Set the attributes for this SyntaxTreeNode
Returns a value for an attribute from the source element
Returns a list of all attributes declared for the element represented by this syntax tree node
Sets the prefix mapping for the namespaces that were declared in this element
Returns a Map containing the prefix mappings that were declared for this element
Adds a single prefix mapping to this syntax tree node
Returns any namespace URI that is in scope for a given prefix
Returns any namespace prefix that is mapped to a prefix in the current scope
Set this node's parser
Returns this node's XSLT parser
Set this syntax tree node's parent node, if unset
Returns this syntax tree node's parent node
Returns 'true' if this syntax tree node is the Sentinal node
Get the import precedence of this element
Get the Stylesheet node that represents the <xsl:stylesheet/> element that this node occured under
Get the Template node that represents the <xsl:template/> element that this node occured under
Returns a reference to the XSLTC (XSLT compiler) in use
Returns the XSLT parser's symbol table
Parse the contents of this syntax tree nodes (child nodes, XPath expressions, patterns and functions)
Parse all children of this syntax tree node
Add a node to the current scope and return name of a variable or parameter if the node represents a variable or a parameter
Type check the children of this node
Call typeCheck() on all child syntax tree nodes
Translate this abstract syntax tree node into JVM bytecodes
Call translate() on all child syntax tree nodes
Utility method used by parameters and variables to store result trees
Returns true if this expression/instruction depends on the context
Return true if any of the expressions/instructions in the contents of this node is context dependent
Adds a child node to this syntax tree node
Inserts the first child node of this syntax tree node
Removed a child node of this syntax tree node
Returns a List containing all the child nodes of this node
Tells you if this node has any child nodes
Returns the number of children this node has
Returns an Iterator of all child nodes of this node
Returns a child node at a given position
Returns this element's last child
Displays the contents of this syntax tree node (to stdout)
Displays the contents of this syntax tree node (to stdout)
Set the indentation level for debug output
Report an error to the parser
Report a recoverable error to the parser
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Returns the default icon
Returns the Icon to use for painting the button
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the Icon used in calculating the preferred/minimum/maximum size
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc} Overridden to ensure that ButtonHandler is created prior to any of the other installXXX methods, since several of them reference buttonHandler
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Paints the currently selected item
Returns the default size of an empty display area of the combo box using the current renderer and font
Returns the hosting component containing the region
Returns the Region identifying this state
Returns the style associated with this Region
Returns the state of the widget, which is a bitmask of the values defined in <code>SynthConstants</code>
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
This method gets called when a bound property is changed on the associated JTextComponent
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Obtains the maximum number of notes that this synthesizer can sound simultaneously
Obtains the processing latency incurred by this synthesizer, expressed in microseconds
Obtains the set of MIDI channels controlled by this synthesizer
Obtains the current status of the voices produced by this synthesizer
Informs the caller whether this synthesizer is capable of loading instruments from the specified soundbank
Makes a particular instrument available for synthesis
Unloads a particular instrument
Remaps an instrument
Obtains the default soundbank for the synthesizer, if one exists
Obtains a list of instruments that come with the synthesizer
Obtains a list of the instruments that are currently loaded onto this <code>Synthesizer</code>
Loads onto the <code>Synthesizer</code> all instruments contained in the specified <code>Soundbank</code>
Unloads all instruments contained in the specified <code>Soundbank</code>
Loads the instruments referenced by the specified patches, from the specified <code>Soundbank</code>
Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified
Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class
Dump source file attribute to file stream in binary format
Store a new JavaClass instance into this Repository
Remove class from repository
Find an already defined (cached) JavaClass object by name
Load a JavaClass object for the given class name using the CLASSPATH environment variable
Try to find class source via getResourceAsStream()
Clear all entries from cache
Creates a UI for a JFormattedTextField
Fetches the name used as a key to lookup properties through the UIManager
{@inheritDoc}
Draws a line between the two end points
Draws a line between the two end points
Lays out text and an icon returning, by reference, the location to place the icon and text
Returns the size of the passed in string
Returns the minimum size needed to properly render an icon and text
Returns the maximum size needed to properly render an icon and text
Returns the maximum height of the the Font from the passed in SynthContext
Returns the preferred size needed to properly render an icon and text
Paints text at the specified location
Paints text at the specified location
Paints an icon and text
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Returns the LabelUI implementation used for the skins look and feel
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
Notifies this UI delegate to repaint the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Sets the SynthStyleFactory that the UI classes provided by synth will use to obtain a SynthStyle
Returns the current SynthStyleFactory
Gets a SynthStyle for the specified region of the specified component
Updates the style associated with <code>c</code>, and all its children
Returns the Region for the JComponent <code>c</code>
Creates the Synth look and feel <code>ComponentUI</code> for the passed in <code>JComponent</code>
Loads the set of <code>SynthStyle</code>s that will be used by this <code>SynthLookAndFeel</code>
Loads the set of <code>SynthStyle</code>s that will be used by this <code>SynthLookAndFeel</code>
Called by UIManager when this look and feel is installed
Called by UIManager when this look and feel is uninstalled
Returns the defaults for this SynthLookAndFeel
Returns true, SynthLookAndFeel is always supported
Returns false, SynthLookAndFeel is not a native look and feel
Returns a textual description of SynthLookAndFeel
Return a short string that identifies this look and feel
Return a string that identifies this look and feel
Returns whether or not the UIs should update their <code>SynthStyles</code> from the <code>SynthStyleFactory</code> when the ancestor of the <code>JComponent</code> changes
Returns whether or not the UIs should update their styles when a particular event occurs
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Called from {@link #installComponents} to create a {@code Container} containing the body of the message
{@inheritDoc}
Paints the background of an arrow button
Paints the border of an arrow button
Paints the foreground of an arrow button
Paints the background of a button
Paints the border of a button
Paints the background of a check box menu item
Paints the border of a check box menu item
Paints the background of a check box
Paints the border of a check box
Paints the background of a color chooser
Paints the border of a color chooser
Paints the background of a combo box
Paints the border of a combo box
Paints the background of a desktop icon
Paints the border of a desktop icon
Paints the background of a desktop pane
Paints the background of a desktop pane
Paints the background of an editor pane
Paints the border of an editor pane
Paints the background of a file chooser
Paints the border of a file chooser
Paints the background of a formatted text field
Paints the border of a formatted text field
Paints the background of an internal frame title pane
Paints the border of an internal frame title pane
Paints the background of an internal frame
Paints the border of an internal frame
Paints the background of a label
Paints the border of a label
Paints the background of a list
Paints the border of a list
Paints the background of a menu bar
Paints the border of a menu bar
Paints the background of a menu item
Paints the border of a menu item
Paints the background of a menu
Paints the border of a menu
Paints the background of an option pane
Paints the border of an option pane
Paints the background of a panel
Paints the border of a panel
Paints the background of a password field
Paints the border of a password field
Paints the background of a popup menu
Paints the border of a popup menu
Paints the background of a progress bar
Paints the background of a progress bar
Paints the border of a progress bar
Paints the border of a progress bar
Paints the foreground of a progress bar
Paints the background of a radio button menu item
Paints the border of a radio button menu item
Paints the background of a radio button
Paints the border of a radio button
Paints the background of a root pane
Paints the border of a root pane
Paints the background of a scrollbar
Paints the background of a scrollbar
Paints the border of a scrollbar
Paints the border of a scrollbar
Paints the background of the thumb of a scrollbar
Paints the border of the thumb of a scrollbar
Paints the background of the track of a scrollbar
Paints the background of the track of a scrollbar
Paints the border of the track of a scrollbar
Paints the border of the track of a scrollbar
Paints the background of a scroll pane
Paints the border of a scroll pane
Paints the background of a separator
Paints the background of a separator
Paints the border of a separator
Paints the border of a separator
Paints the foreground of a separator
Paints the background of a slider
Paints the background of a slider
Paints the border of a slider
Paints the border of a slider
Paints the background of the thumb of a slider
Paints the border of the thumb of a slider
Paints the background of the track of a slider
Paints the background of the track of a slider
Paints the border of the track of a slider
Paints the border of the track of a slider
Paints the background of a spinner
Paints the border of a spinner
Paints the background of the divider of a split pane
Paints the background of the divider of a split pane
Paints the foreground of the divider of a split pane
Paints the divider, when the user is dragging the divider, of a split pane
Paints the background of a split pane
Paints the border of a split pane
Paints the background of a tabbed pane
Paints the border of a tabbed pane
Paints the background of the area behind the tabs of a tabbed pane
Paints the background of the area behind the tabs of a tabbed pane
Paints the border of the area behind the tabs of a tabbed pane
Paints the border of the area behind the tabs of a tabbed pane
Paints the background of a tab of a tabbed pane
Paints the background of a tab of a tabbed pane
Paints the border of a tab of a tabbed pane
Paints the border of a tab of a tabbed pane
Paints the background of the area that contains the content of the selected tab of a tabbed pane
Paints the border of the area that contains the content of the selected tab of a tabbed pane
Paints the background of the header of a table
Paints the border of the header of a table
Paints the background of a table
Paints the border of a table
Paints the background of a text area
Paints the border of a text area
Paints the background of a text pane
Paints the border of a text pane
Paints the background of a text field
Paints the border of a text field
Paints the background of a toggle button
Paints the border of a toggle button
Paints the background of a tool bar
Paints the background of a tool bar
Paints the border of a tool bar
Paints the border of a tool bar
Paints the background of the tool bar's content area
Paints the background of the tool bar's content area
Paints the border of the content area of a tool bar
Paints the border of the content area of a tool bar
Paints the background of the window containing the tool bar when it has been detached from its primary frame
Paints the background of the window containing the tool bar when it has been detached from its primary frame
Paints the border of the window containing the tool bar when it has been detached from it's primary frame
Paints the border of the window containing the tool bar when it has been detached from it's primary frame
Paints the background of a tool tip
Paints the border of a tool tip
Paints the background of a tree
Paints the border of a tree
Paints the background of the row containing a cell in a tree
Paints the border of the row containing a cell in a tree
Paints the focus indicator for a cell in a tree when it has focus
Paints the background of the viewport
Paints the border of a viewport
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Installs listeners into the panel
Uninstalls listeners from the panel
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a UI for a JPasswordField
Fetches the name used as a key to look up properties through the UIManager
Creates a view (PasswordView) for an element
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
Paints the component's text
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
Returns the Icon used in calculating the preferred/minimum/maximum size
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Invoked when a property changes on the root pane
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Paints the scrollbar track
Paints the scrollbar thumb
A vertical scrollbar's preferred width is the maximum of preferred widths of the (non <code>null</code>) increment/decrement buttons, and the minimum width of the thumb
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Installs default setting
Uninstalls default setting
Installs listeners
Uninstalls listeners
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
Uninstalls default setting
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Lays out the slider
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Paints the slider thumb
Paints the slider track
{@inheritDoc}
Returns a new instance of SynthSpinnerUI
{@inheritDoc}
{@inheritDoc}
Initializes the <code>JSpinner</code> <code>border</code>, <code>foreground</code>, and <code>background</code>, properties based on the corresponding "Spinner
Sets the <code>JSpinner's</code> layout manager to null
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
This method is called by installUI to get the editor component of the <code>JSpinner</code>
Called by the <code>PropertyChangeListener</code> when the <code>JSpinner</code> editor property changes
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new SynthSplitPaneUI instance
Installs the UI defaults
Installs the event listeners for the UI
Uninstalls the UI defaults
Uninstalls the event listeners from the UI
{@inheritDoc}
{@inheritDoc}
Creates the default divider
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Returns the <code>SynthGraphicUtils</code> for the specified context
Returns the color for the specified state
Returns the color for the specified state
Returns the Font for the specified state
Returns the font for the specified state
Returns the Insets that are used to calculate sizing information
Returns the <code>SynthPainter</code> that will be used for painting
Returns true if the region is opaque
Getter for a region specific style property
Installs the necessary state from this Style on the <code>JComponent</code> from <code>context</code>
Uninstalls any state that this style installed on the <code>JComponent</code> from <code>context</code>
Convenience method to get a specific style property whose value is a <code>Number</code>
Convenience method to get a specific style property whose value is an Boolean
Convenience method to get a specific style property whose value is an Icon
Convenience method to get a specific style property whose value is a String
Returns the style for the specified Component
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} Overridden to keep track of whether the selected tab is also pressed
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
{@inheritDoc}
{@inheritDoc}
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc} Overridden to create a TabbedPaneLayout subclass which takes into account tabOverlap
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
Initializes JTable properties, such as font, foreground, and background
Attaches listeners to the JTable
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
{@inheritDoc}
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Creates a UI object for a JTextArea
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component
{@inheritDoc} Overridden to do nothing
{@inheritDoc}
This method gets called when a bound property is changed on the associated JTextComponent
Creates a UI for a JTextField
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component
{@inheritDoc}
{@inheritDoc} Overridden to do nothing
This method gets called when a bound property is changed on the associated JTextComponent
{@inheritDoc}
{@inheritDoc}
Creates a UI for the JTextPane
Fetches the name used as a key to lookup properties through the UIManager
Installs the UI for a component
This method gets called when a bound property is changed on the associated JTextComponent
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Creates a {@code LayoutManager} to use with the toolbar
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the specified component according to the Look and Feel
{@inheritDoc}
This implementation does nothing, because the {@code rollover} property of the {@code JToolBar} class is not used in the Synth Look and Feel
This implementation does nothing, because the {@code rollover} property of the {@code JToolBar} class is not used in the Synth Look and Feel
This implementation does nothing, because the {@code rollover} property of the {@code JToolBar} class is not used in the Synth Look and Feel
Paints the toolbar
Paints the toolbar content
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
{@inheritDoc}
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
{@inheritDoc}
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the Context for the specified component
Paints the border
Creates a new UI object for the given component
{@inheritDoc}
{@inheritDoc}
Installs defaults for a viewport
Installs listeners into the viewport
Uninstalls listeners from the viewport
Uninstalls defaults from a viewport
{@inheritDoc}
Notifies this UI delegate to repaint the specified component
Paints the border
Paints the specified component according to the Look and Feel
Paints the specified component
{@inheritDoc}
Sets the data for the system exclusive message
Sets the data for the system exclusive message
Obtains a copy of the data for the system exclusive message
Creates a new object of the same class and with the same contents as this object
Reassigns the "standard" input stream
Reassigns the "standard" output stream
Reassigns the "standard" error output stream
Returns the unique {@link java
Returns the channel inherited from the entity that created this Java virtual machine
Sets the System security
Gets the system security interface
Returns the current time in milliseconds
Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds
Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array
Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode()
Determines the current system properties
Returns the system-dependent line separator string
Sets the system properties to the <code>Properties</code> argument
Gets the system property indicated by the specified key
Gets the system property indicated by the specified key
Sets the system property indicated by the specified key
Removes the system property indicated by the specified key
Gets the value of the specified environment variable
Returns an unmodifiable string map view of the current system environment
Terminates the currently running Java Virtual Machine
Runs the garbage collector
Runs the finalization methods of any objects pending finalization
Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits
Loads the native library specified by the filename argument
Loads the native library specified by the <code>libname</code> argument
Maps a library name into a platform-specific string representing a native library
Returns a string representation of this <code>Color</code>'s values
Converts this exception to a representative string
Returns the default FlavorMap for this thread's ClassLoader
Returns a <code>List</code> of <code>String</code> natives to which the specified <code>DataFlavor</code> can be translated by the data transfer subsystem
Returns a <code>List</code> of <code>DataFlavor</code>s to which the specified <code>String</code> native can be translated by the data transfer subsystem
Returns a <code>Map</code> of the specified <code>DataFlavor</code>s to their most preferred <code>String</code> native
Returns a <code>Map</code> of the specified <code>String</code> natives to their most preferred <code>DataFlavor</code>
Adds a mapping from the specified <code>DataFlavor</code> (and all <code>DataFlavor</code>s equal to the specified <code>DataFlavor</code>) to the specified <code>String</code> native
Discards the current mappings for the specified <code>DataFlavor</code> and all <code>DataFlavor</code>s equal to the specified <code>DataFlavor</code>, and creates new mappings to the specified <code>String</code> natives
Adds a mapping from a single <code>String</code> native to a single <code>DataFlavor</code>
Discards the current mappings for the specified <code>String</code> native, and creates new mappings to the specified <code>DataFlavor</code>s
Encodes a MIME type for use as a <code>String</code> native
Encodes a <code>DataFlavor</code> for use as a <code>String</code> native
Returns whether the specified <code>String</code> is an encoded Java MIME type
Decodes a <code>String</code> native for use as a Java MIME type
Decodes a <code>String</code> native for use as a <code>DataFlavor</code>
Get an absolute URI from a given relative URI (local path)
Return true if the systemId denotes an absolute URI 
Return true if the local path is an absolute path
Take a SystemID string and try to turn it into a good absolute URI
Take a SystemID string and try to turn it into a good absolute URI
Gets the <code>SystemTray</code> instance that represents the desktop's tray area
Returns whether the system tray is supported on the current platform
Adds a <code>TrayIcon</code> to the <code>SystemTray</code>
Removes the specified <code>TrayIcon</code> from the <code>SystemTray</code>
Returns an array of all icons added to the tray by this application
Returns the size, in pixels, of the space that a tray icon will occupy in the system tray
Adds a {@code PropertyChangeListener} to the list of listeners for the specific property
Removes a {@code PropertyChangeListener} from the listener list for a specific property
Returns an array of all the listeners that have been associated with the named property
Returns the size of the system tray icon
Determines the desired span when using the given tab expansion implementation
Determines the span along the same axis as tab expansion for a portion of the view
Returns the next tab stop position given a reference position
Sets an initial <code>value</code> for the editor
Returns the component used for drawing the cell
Sets the model index for this column
Returns the model index for this column
Sets the <code>TableColumn</code>'s identifier to <code>anIdentifier</code>
Returns the <code>identifier</code> object for this column
Sets the <code>Object</code> whose string representation will be used as the value for the <code>headerRenderer</code>
Returns the <code>Object</code> used as the value for the header renderer
Sets the <code>TableCellRenderer</code> used to draw the <code>TableColumn</code>'s header to <code>headerRenderer</code>
Returns the <code>TableCellRenderer</code> used to draw the header of the <code>TableColumn</code>
Sets the <code>TableCellRenderer</code> used by <code>JTable</code> to draw individual values for this column
Returns the <code>TableCellRenderer</code> used by the <code>JTable</code> to draw values for this column
Sets the editor to used by when a cell in this column is edited
Returns the <code>TableCellEditor</code> used by the <code>JTable</code> to edit values for this column
This method should not be used to set the widths of columns in the <code>JTable</code>, use <code>setPreferredWidth</code> instead
Returns the width of the <code>TableColumn</code>
Sets this column's preferred width to <code>preferredWidth</code>
Returns the preferred width of the <code>TableColumn</code>
Sets the <code>TableColumn</code>'s minimum width to <code>minWidth</code>, adjusting the new minimum width if necessary to ensure that 0 &lt;= <code>minWidth</code> &lt;= <code>maxWidth</code>
Returns the minimum width for the <code>TableColumn</code>
Sets the <code>TableColumn</code>'s maximum width to <code>maxWidth</code> or, if <code>maxWidth</code> is less than the minimum width, to the minimum width
Returns the maximum width for the <code>TableColumn</code>
Sets whether this column can be resized
Returns true if the user is allowed to resize the <code>TableColumn</code>'s width, false otherwise
Resizes the <code>TableColumn</code> to fit the width of its header cell
This field was not used in previous releases and there are currently no plans to support it in the future
This field was not used in previous releases and there are currently no plans to support it in the future
Adds a <code>PropertyChangeListener</code> to the listener list
Removes a <code>PropertyChangeListener</code> from the listener list
Returns an array of all the <code>PropertyChangeListener</code>s added to this TableColumn with addPropertyChangeListener()
As of Java 2 platform v1
Appends <code>aColumn</code> to the end of the  <code>tableColumns</code> array
Deletes the <code>TableColumn</code> <code>column</code> from the  <code>tableColumns</code> array
Moves the column and its header at <code>columnIndex</code> to <code>newIndex</code>
Sets the <code>TableColumn</code>'s column margin to <code>newMargin</code>
Returns the number of columns in the model
Returns an <code>Enumeration</code> of all the columns in the model
Returns the index of the first column in the table whose identifier is equal to <code>identifier</code>, when compared using <code>equals</code>
Returns the <code>TableColumn</code> object for the column at <code>columnIndex</code>
Returns the width between the cells in each column
Returns the index of the column that lies on the horizontal point, <code>xPosition</code>; or -1 if it lies outside the any of the column's bounds
Returns the total width of all the columns
Sets whether the columns in this model may be selected
Returns true if columns may be selected
Returns an array of indicies of all selected columns
Returns the number of selected columns
Sets the selection model
Returns the current selection model
Adds a listener for table column model events
Removes a listener for table column model events
Returns the fromIndex
Returns the toIndex
Tells listeners that a column was added to the model
Tells listeners that a column was removed from the model
Tells listeners that a column was repositioned
Tells listeners that a column was moved due to a margin change
Tells listeners that the selection model of the TableColumnModel changed
Returns the number of rows in the model
Returns the number of columns in the model
Returns the name of the column at <code>columnIndex</code>
Returns the most specific superclass for all the cell values in the column
Returns true if the cell at <code>rowIndex</code> and <code>columnIndex</code> is editable
Returns the value for the cell at <code>columnIndex</code> and <code>rowIndex</code>
Sets the value in the cell at <code>columnIndex</code> and <code>rowIndex</code> to <code>aValue</code>
Adds a listener to the list that is notified each time a change to the data model occurs
Removes a listener from the list that is notified each time a change to the data model occurs
Returns the first row that changed
Returns the last row that changed
Returns the column for the event
Returns the type of event - one of: INSERT, UPDATE and DELETE
This fine grain notification tells listeners the exact range of cells, rows, or columns that changed
Sets the <code>TableModel</code> to use as the underlying model for this <code>TableRowSorter</code>
Sets the object responsible for converting values from the model to strings
Returns the object responsible for converting values from the model to strings
Returns the <code>Comparator</code> for the specified column
{@inheritDoc}
Returns the string representation of the value at the specified location
Dump instruction as byte code to stream out
Read needed data (e
Call corresponding visitor method(s)
Creates a new table row
Change the child views
Lays out the columns to fit within the given target span
Perform layout for the minor axis of the box (i
Calculate the requirements for the minor axis
Fetches the child view that represents the given position in the model
Change the child views
Perform layout for the major axis of the box (i
Perform layout for the minor axis of the box (i
Determines the resizability of the view along the given axis
Fetches the child view that represents the given position in the model
Gets the number of columns this cell spans (e
Gets the number of rows this cell spans (that is, the grid height)
Sets the grid location
Gets the row of the grid location
Gets the column of the grid location
Returns the number of Tab instances the receiver contains
Returns the TabStop at index <code>index</code>
Returns the Tab instance after <code>location</code>
Returns the index of the Tab to be used after <code>location</code>
Indicates whether this <code>TabSet</code> is equal to another one
Returns a hashcode for this set of TabStops
Returns the string representation of the set of tabs
Returns the position, as a float, of the tab
Returns the alignment, as an integer, of the tab
Returns the leader of the tab
Returns true if the tabs are equal
Returns the hashCode for the object
Returns the <i>tabular type</i> describing this <tt>TabularData</tt> instance
Calculates the index that would be used in this <tt>TabularData</tt> instance to refer to the specified composite data <var>value</var> parameter if it were added to this instance
Returns the number of <tt>CompositeData</tt> values (ie the number of rows) contained in this <tt>TabularData</tt> instance
Returns <tt>true</tt> if the number of <tt>CompositeData</tt> values (ie the number of rows) contained in this <tt>TabularData</tt> instance is zero
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value (ie a row) whose index is the specified <var>key</var>
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified <tt>CompositeData</tt> value
Returns the <tt>CompositeData</tt> value whose index is <var>key</var>, or <tt>null</tt> if there is no value mapping to <var>key</var>, in this <tt>TabularData</tt> instance
Adds <var>value</var> to this <tt>TabularData</tt> instance
Removes the <tt>CompositeData</tt> value whose index is <var>key</var> from this <tt>TabularData</tt> instance, and returns the removed value, or returns <tt>null</tt> if there is no value whose index is <var>key</var>
Add all the elements in <var>values</var> to this <tt>TabularData</tt> instance
Removes all <tt>CompositeData</tt> values (ie rows) from this <tt>TabularData</tt> instance
Returns a set view of the keys (ie the index values) of the {@code CompositeData} values (ie the rows) contained in this {@code TabularData} instance
Returns a collection view of the {@code CompositeData} values (ie the rows) contained in this {@code TabularData} instance
Compares the specified <var>obj</var> parameter with this <code>TabularData</code> instance for equality
Returns the hash code value for this <code>TabularData</code> instance
Returns a string representation of this <code>TabularData</code> instance
Returns the <i>tabular type</i> describing this <tt>TabularData</tt> instance
Calculates the index that would be used in this <tt>TabularData</tt> instance to refer to the specified composite data <var>value</var> parameter if it were added to this instance
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value (ie a row) whose index is the specified <var>key</var>
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains a <tt>CompositeData</tt> value (ie a row) whose index is the specified <var>key</var>
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified <tt>CompositeData</tt> value
Returns <tt>true</tt> if and only if this <tt>TabularData</tt> instance contains the specified value
This method simply calls <tt>get((Object[]) key)</tt>
Returns the <tt>CompositeData</tt> value whose index is <var>key</var>, or <tt>null</tt> if there is no value mapping to <var>key</var>, in this <tt>TabularData</tt> instance
This method simply calls <tt>put((CompositeData) value)</tt> and therefore ignores its <var>key</var> parameter which can be <tt>null</tt>
This method simply calls <tt>remove((Object[]) key)</tt>
Removes the <tt>CompositeData</tt> value whose index is <var>key</var> from this <tt>TabularData</tt> instance, and returns the removed value, or returns <tt>null</tt> if there is no value whose index is <var>key</var>
Add all the values contained in the specified map <var>t</var> to this <tt>TabularData</tt> instance
Add all the elements in <var>values</var> to this <tt>TabularData</tt> instance
Removes all rows from this <code>TabularDataSupport</code> instance
Returns the number of rows in this <code>TabularDataSupport</code> instance
Returns <tt>true</tt> if this <code>TabularDataSupport</code> instance contains no rows
Returns a set view of the keys contained in the underlying map of this {@code TabularDataSupport} instance used to index the rows
Returns a collection view of the rows contained in this {@code TabularDataSupport} instance
Returns a collection view of the index to row mappings contained in this {@code TabularDataSupport} instance
Returns a clone of this <code>TabularDataSupport</code> instance: the clone is obtained by calling <tt>super
Compares the specified <var>obj</var> parameter with this <code>TabularDataSupport</code> instance for equality
Returns the hash code value for this <code>TabularDataSupport</code> instance
Returns a string representation of this <code>TabularDataSupport</code> instance
Returns the type of the row elements of tabular data values described by this <code>TabularType</code> instance
<p>Returns, in the same order as was given to this instance's constructor, an unmodifiable List of the names of the items the values of which are used to uniquely index each row element of tabular data values described by this <code>TabularType</code> instance
Tests whether <var>obj</var> is a value which could be described by this <code>TabularType</code> instance
Compares the specified <code>obj</code> parameter with this <code>TabularType</code> instance for equality
Returns the hash code value for this <code>TabularType</code> instance
Returns a string representation of this <code>TabularType</code> instance
Return the name of this tag
Return the containing {@link Doc} of this Tag element
Return the kind of this tag
Return the text of this tag, that is, the portion beyond tag name
Convert this object to a string
For a documentation comment with embedded <code>{&#064;link}</code> tags, return an array of <code>Tag</code> objects
Return the first sentence of the comment as an array of tags
Return the source position of this tag
Create a tagged component from a GIOP marshalled representation of a tagged component
Return an iterator that iterates over tagged components with identifier id
Create a TaggedProfile from this template
Write the profile create( oktemp, id ) to the OutputStream os
Return true if temp is equivalent to this template
Return the tagged components in this profile (if any) in the GIOP marshalled form, which is required for Portable Interceptors
Returns an array of the kinds of elements an annotation type can be applied to
Opens the line with the specified format and requested buffer size, causing the line to acquire any required system resources and become operational
Opens the line with the specified format, causing the line to acquire any required system resources and become operational
Reads audio data from the data line's input buffer
<p>The emitted notification
<p>The ID of the listener to which the notification is    targeted
Returns a textual representation of this Targeted Notification
Cancel the submitted task
Submit a task to be executed
Retrieves the value of this <code>TCKind</code> instance
Converts the given <code>int</code> to the corresponding <code>TCKind</code> instance
Compare this template to another
When the parser realises that it is dealign with a simplified stylesheet it will create an empty Stylesheet object with the root element of the stylesheet (a LiteralElement object) as its only child
Create a new transformation context for this Templates object
Get the properties corresponding to the effective xsl:output element
When a TemplatesHandler object is used as a ContentHandler for the parsing of transformation instructions, it creates a Templates object, which the caller can get once the SAX events have been completed
Set the base ID (URI or system ID) for the Templates object created by this builder
Get the base ID (URI or system ID) from where relative URLs will be resolved
Implements javax
Implements javax
Store URIResolver needed for Transformers
Implements javax
This method implements XSLTC's SourceLoader interface
Re-initialize parser and forward SAX2 event
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Just forward SAX2 event to parser object
Set internal system Id and forward SAX2 event to parser object
Return the state of the services mechanism feature
Store URIResolver needed for Transformers
Returns the index of the main class in array of bytecodes
The TransformerFactory should call this method to set the translet name
Returns the name of the main translet class stored in this template
Implements JAXP's Templates
Implements JAXP's Templates
Return the thread local copy of the stylesheet DOM
Set the thread local copy of the stylesheet DOM
Checks if the specified unit is supported
Returns an adjusted object of the same type as this object with the adjustment made
Returns an object of the same type as this object with the specified field altered
Returns an object of the same type as this object with an amount added
Returns an object of the same type as this object with the specified period added
Returns an object of the same type as this object with an amount subtracted
Returns an object of the same type as this object with the specified period subtracted
Calculates the amount of time until another temporal in terms of the specified unit
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field as an {@code int}
Gets the value of the specified field as a {@code long}
Queries this date-time
Adjusts the specified temporal object
Obtains a {@code TemporalAdjuster} that wraps a date adjuster
Returns the "first day of month" adjuster, which returns a new date set to the first day of the current month
Returns the "last day of month" adjuster, which returns a new date set to the last day of the current month
Returns the "first day of next month" adjuster, which returns a new date set to the first day of the next month
Returns the "first day of year" adjuster, which returns a new date set to the first day of the current year
Returns the "last day of year" adjuster, which returns a new date set to the last day of the current year
Returns the "first day of next year" adjuster, which returns a new date set to the first day of the next year
Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week
Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week
Returns the day-of-week in month adjuster, which returns a new date in the same month with the ordinal day-of-week
Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted
Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned
Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted
Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned
Returns the value of the requested unit
Returns the list of units uniquely defining the value of this TemporalAmount
Adds to the specified temporal object
Subtracts this object from the specified temporal object
Gets the display name for the field in the requested locale
Gets the unit that the field is measured in
Gets the range that the field is bound by
Gets the range of valid values for the field
Checks if this field represents a component of a date
Checks if this field represents a component of a time
Checks if this field is supported by the temporal object
Get the range of valid values for this field using the temporal object to refine the result
Gets the value of this field from the specified temporal object
Returns a copy of the specified temporal object with the value of this field set
Resolves this field to provide a simpler alternative or a date
Gets a descriptive name for the field
A strict query for the {@code ZoneId}
A query for the {@code Chronology}
A query for the smallest supported unit
A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}
A query for {@code ZoneOffset} returning null if not found
A query for {@code LocalDate} returning null if not found
A query for {@code LocalTime} returning null if not found
Queries the specified temporal object
Gets the duration of this unit, which may be an estimate
Checks if the duration of the unit is an estimate
Checks if this unit represents a component of a date
Checks if this unit represents a component of a time
Checks if this unit is supported by the specified temporal object
Returns a copy of the specified temporal object with the specified period added
Calculates the amount of time between two temporal objects
Gets a descriptive name for the unit
by default context node is the same as current node
Breaks this node into two nodes at the specified <code>offset</code>, keeping both in the tree as siblings
Returns whether this text node contains <a href='http://www
Returns all text of <code>Text</code> nodes logically-adjacent text nodes to this node, concatenated in document order
Replaces the text of the current node and all logically-adjacent text nodes with the specified text
Determines the component to use for the action
Takes one list of commands and augments it with another list of commands
Fetches the text component that currently has focus
Creates the <code>TextArea</code>'s peer
Inserts the specified text at the specified position in this text area
Appends the given text to the text area's current text
Replaces text between the indicated start and end positions with the specified replacement text
Returns the number of rows in the text area
Sets the number of rows for this text area
Returns the number of columns in this text area
Sets the number of columns for this text area
Returns an enumerated value that indicates which scroll bars the text area uses
Determines the preferred size of a text area with the specified number of rows and columns
Determines the preferred size of this text area
Determines the minimum size of a text area with the specified number of rows and columns
Determines the minimum size of this text area
Returns a string representing the state of this <code>TextArea</code>
Returns the <code>AccessibleContext</code> associated with this <code>TextArea</code>
Gets the state set of this object
Inserts the specified text at the specified position in the document
Replaces a range of text by the specified string
Returns the preferred size of a textarea with the specified number of columns and rows
Returns the minimum size of a textarea with the specified number of columns and rows
Resolves instances being deserialized to the predefined constants
Handles the specified set of callbacks
Start parsing a text catalog file
The destructor
Return the next token in the catalog file
Return the next logical character from the input stream
Enables or disables input method support for this text component
Makes this Component displayable by connecting it to a native screen resource
Removes the <code>TextComponent</code>'s peer
Sets the text that is presented by this text component to be the specified text
Returns the text that is presented by this text component
Returns the selected text from the text that is presented by this text component
Indicates whether or not this text component is editable
Sets the flag that determines whether or not this text component is editable
Gets the background color of this text component
Sets the background color of this text component
Gets the start position of the selected text in this text component
Sets the selection start for this text component to the specified position
Gets the end position of the selected text in this text component
Sets the selection end for this text component to the specified position
Selects the text between the specified start and end positions
Selects all the text in this text component
Sets the position of the text insertion caret
Returns the position of the text insertion caret
Adds the specified text event listener to receive text events from this text component
Removes the specified text event listener so that it no longer receives text events from this text component If <code>l</code> is <code>null</code>, no exception is thrown and no action is performed
Returns an array of all the text listeners registered on this text component
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>TextComponent</code>
Processes events on this text component
Processes text events occurring on this text component by dispatching them to any registered <code>TextListener</code> objects
Returns a string representing the state of this <code>TextComponent</code>
Gets the AccessibleContext associated with this TextComponent
TextListener notification of a text value change
Gets the state set of the TextComponent
Gets the role of this object
Get the AccessibleText associated with this object
Given a point in local coordinates, return the zero-based index of the character under that Point
Determines the bounding box of the character at the given index into the string
Returns the number of characters (valid indicies)
Returns the zero-based offset of the caret
Returns the AttributeSet for a given character (at a given index)
Returns the start offset within the selected text
Returns the end offset within the selected text
Returns the portion of the text that is selected
Returns the String at a given index
Returns the String after a given index
Returns the String before a given index
Sets if the text component should be editable or not
Returns the current content of the text component
Sets the content for the text component
Returns the start index of the current selection
Returns the end index of the current selection
Selects an area of the text component
Sets the caret position of the text component
Returns the current caret position
Returns the input method requests
Returns a parameter string identifying this text event
Creates the TextField's peer
Gets the character that is to be used for echoing
Sets the echo character for this text field
Sets the text that is presented by this text component to be the specified text
Indicates whether or not this text field has a character set for echoing
Gets the number of columns in this text field
Sets the number of columns in this text field
Gets the preferred size of this text field with the specified number of columns
Gets the preferred size of this text field
Gets the minimum dimensions for a text field with the specified number of columns
Gets the minimum dimensions for this text field
Adds the specified action listener to receive action events from this text field
Removes the specified action listener so that it no longer receives action events from this text field
Returns an array of all the action listeners registered on this textfield
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>TextField</code>
Processes events on this text field
Processes action events occurring on this text field by dispatching them to any registered <code>ActionListener</code> objects
Returns a string representing the state of this <code>TextField</code>
Gets the AccessibleContext associated with this TextField
Gets the state set of this object
Sets the echo character
Returns the preferred size of the text field with the specified number of columns
Returns the minimum size of the text field with the specified number of columns
Returns the index of the character hit
Returns <code>true</code> if the leading edge of the character was hit
Returns the insertion index
Returns the hash code
Returns <code>true</code> if the specified <code>Object</code> is a <code>TextHitInfo</code> and equals this <code>TextHitInfo</code>
Returns <code>true</code> if the specified <code>TextHitInfo</code> has the same <code>charIndex</code> and <code>isLeadingEdge</code> as this <code>TextHitInfo</code>
Returns a <code>String</code> representing the hit for debugging use only
Creates a <code>TextHitInfo</code> on the leading edge of the character at the specified <code>charIndex</code>
Creates a hit on the trailing edge of the character at the specified <code>charIndex</code>
Creates a <code>TextHitInfo</code> at the specified offset, associated with the character before the offset
Creates a <code>TextHitInfo</code> at the specified offset, associated with the character after the offset
Creates a <code>TextHitInfo</code> on the other side of the insertion point
Creates a <code>TextHitInfo</code> whose character index is offset by <code>delta</code> from the <code>charIndex</code> of this <code>TextHitInfo</code>
The character data of the node that implements this interface
The number of 16-bit units that are available through <code>data</code> and the <code>substringData</code> method below
Extracts a range of data from the node
Get the prompt
Get the default text
Set the retrieved text
Get the retrieved text
Creates a copy of this <code>TextLayout</code>
Creates a copy of this <code>TextLayout</code> justified to the specified width
Justify this layout
Returns the baseline for this <code>TextLayout</code>
Returns the offsets array for the baselines used for this <code>TextLayout</code>
Returns the advance of this <code>TextLayout</code>
Returns the advance of this <code>TextLayout</code>, minus trailing whitespace
Returns the ascent of this <code>TextLayout</code>
Returns the descent of this <code>TextLayout</code>
Returns the leading of the <code>TextLayout</code>
Returns the bounds of this <code>TextLayout</code>
Returns the pixel bounds of this <code>TextLayout</code> when rendered in a graphics with the given <code>FontRenderContext</code> at the given location
Returns <code>true</code> if this <code>TextLayout</code> has a left-to-right base direction or <code>false</code> if it has a right-to-left base direction
Returns <code>true</code> if this <code>TextLayout</code> is vertical
Returns the number of characters represented by this <code>TextLayout</code>
Returns information about the caret corresponding to <code>hit</code>
Returns information about the caret corresponding to <code>hit</code>
Returns the hit for the next caret to the right (bottom); if there is no such hit, returns <code>null</code>
Returns the hit for the next caret to the right (bottom); if no such hit, returns <code>null</code>
Returns the hit for the next caret to the right (bottom); if no such hit, returns <code>null</code>
Returns the hit for the next caret to the left (top); if no such hit, returns <code>null</code>
Returns the hit for the next caret to the left (top); if no such hit, returns <code>null</code>
Returns the hit for the next caret to the left (top); if no such hit, returns <code>null</code>
Returns the hit on the opposite side of the specified hit's caret
Returns a {@link Shape} representing the caret at the specified hit inside the specified bounds
Returns a <code>Shape</code> representing the caret at the specified hit inside the natural bounds of this <code>TextLayout</code>
Returns the level of the character at <code>index</code>
Returns two paths corresponding to the strong and weak caret
Returns two paths corresponding to the strong and weak caret
Returns two paths corresponding to the strong and weak caret
Returns the logical ranges of text corresponding to a visual selection
Returns a path enclosing the visual selection in the specified range, extended to <code>bounds</code>
Returns a <code>Shape</code> enclosing the visual selection in the specified range, extended to the bounds
Returns a <code>Shape</code> enclosing the logical selection in the specified range, extended to the specified <code>bounds</code>
Returns a <code>Shape</code> enclosing the logical selection in the specified range, extended to the natural bounds of this <code>TextLayout</code>
Returns the black box bounds of the characters in the specified range
Returns a <code>TextHitInfo</code> corresponding to the specified point
Returns a <code>TextHitInfo</code> corresponding to the specified point
Returns the hash code of this <code>TextLayout</code>
Returns <code>true</code> if the specified <code>Object</code> is a <code>TextLayout</code> object and if the specified <code>Object</code> equals this <code>TextLayout</code>
Returns <code>true</code> if the two layouts are equal
Returns debugging information for this <code>TextLayout</code>
Renders this <code>TextLayout</code> at the specified location in the specified {@link java
Returns a <code>Shape</code> representing the outline of this <code>TextLayout</code>
Return the LayoutPath, or null if the layout path is the default path (x maps to advance, y maps to offset)
Convert a hit to a point in standard coordinates
Chooses one of the specified <code>TextHitInfo</code> instances as a strong caret in the specified <code>TextLayout</code>
Invoked when the value of the text has changed
Returns the index of the first character which will not fit on on a line beginning at <code>start</code> and possible measuring up to <code>maxAdvance</code> in graphical width
Returns the graphical width of a line beginning at <code>start</code> and including characters up to <code>limit</code>
Returns a <code>TextLayout</code> on the given character range
Updates the <code>TextMeasurer</code> after a single character has been inserted into the paragraph currently represented by this <code>TextMeasurer</code>
Updates the <code>TextMeasurer</code> after a single character has been deleted from the paragraph currently represented by this <code>TextMeasurer</code>
Get the message type
Get the message to be displayed
Called to serialize the document's DOCTYPE by the root element
Called to serialize a DOM element
Serialize the DOM node
Returns true if the Style is a stand-alone style
Returns the stand-alone style with the same size
Returns the normal style with the same size
Returns this text attribute's text string
Returns this text attribute's text string's natural language (locale)
Returns a hashcode for this text attribute
Returns whether this text attribute is equivalent to the passed in object
Returns a String identifying this text attribute
Converts the given location in the model to a place in the view coordinate system
Converts the given location in the model to a place in the view coordinate system
Converts the given place in the view coordinate system to the nearest representative location in the model
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Provides a way to determine the next visually represented model location that one might place a caret
Causes the portion of the view responsible for the given part of the model to be repainted
Causes the portion of the view responsible for the given part of the model to be repainted
Fetches the binding of services that set a policy for the type of document being edited
Fetches a View with the allocation of the associated text component (i
Returns the string to be used as the tooltip at the passed in location
Returns the <code>BufferedImage</code> texture used to fill the shapes
Returns a copy of the anchor rectangle which positions and sizes the textured image
Creates and returns a {@link PaintContext} used to generate a tiled image pattern
Returns the transparency mode for this <code>TexturePaint</code>
Gets the ID of the chronology - 'ThaiBuddhist'
Gets the calendar type of the underlying calendar system - 'buddhist'
Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields
Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields
Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields
Obtains a local date in the Thai Buddhist calendar system from the epoch-day
Checks if the specified year is a leap year
Obtains the current {@code ThaiBuddhistDate} from the system clock in the default time-zone
Obtains the current {@code ThaiBuddhistDate} from the system clock in the specified time-zone
Obtains the current {@code ThaiBuddhistDate} from the specified clock
Obtains a {@code ThaiBuddhistDate} representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields
Obtains a {@code ThaiBuddhistDate} from a temporal object
Gets the chronology of this date, which is the Thai Buddhist calendar system
Gets the era applicable at this date
Returns the length of the month represented by this date
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Compares this date to another date, including the chronology
A hash code for this date
Obtains an instance of {@code ThaiBuddhistEra} from an {@code int} value
Gets the numeric era {@code int} value
Returns a reference to the currently executing thread object
A hint to the scheduler that the current thread is willing to yield its current use of a processor
Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers
Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers
Throws CloneNotSupportedException as a Thread can not be meaningfully cloned
Causes this thread to begin execution; the Java Virtual Machine calls the <code>run</code> method of this thread
If this thread was constructed using a separate <code>Runnable</code> run object, then that <code>Runnable</code> object's <code>run</code> method is called; otherwise, this method does nothing and returns
Forces the thread to stop executing
Throws {@code UnsupportedOperationException}
Interrupts this thread
Tests whether the current thread has been interrupted
Tests whether this thread has been interrupted
Throws {@link NoSuchMethodError}
Tests if this thread is alive
Suspends this thread
Resumes a suspended thread
Changes the priority of this thread
Returns this thread's priority
Changes the name of this thread to be equal to the argument <code>name</code>
Returns this thread's name
Returns the thread group to which this thread belongs
Returns an estimate of the number of active threads in the current thread's {@linkplain java
Copies into the specified array every active thread in the current thread's thread group and its subgroups
Counts the number of stack frames in this thread
Waits at most {@code millis} milliseconds for this thread to die
Waits at most {@code millis} milliseconds plus {@code nanos} nanoseconds for this thread to die
Waits for this thread to die
Prints a stack trace of the current thread to the standard error stream
Marks this thread as either a {@linkplain #isDaemon daemon} thread or a user thread
Tests if this thread is a daemon thread
Determines if the currently running thread has permission to modify this thread
Returns a string representation of this thread, including the thread's name, priority, and thread group
Returns the context ClassLoader for this Thread
Sets the context ClassLoader for this Thread
Returns <tt>true</tt> if and only if the current thread holds the monitor lock on the specified object
Returns an array of stack trace elements representing the stack dump of this thread
Returns a map of stack traces for all live threads
Returns the identifier of this Thread
Returns the state of this thread
Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread
Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception
Returns the handler invoked when this thread abruptly terminates due to an uncaught exception
Set the handler invoked when this thread abruptly terminates due to an uncaught exception
Method invoked when the given thread terminates due to the given uncaught exception
<p>Get the Object that was most recently pushed with the given key
<p>Check whether a value with the given key exists in the stack
<p>Push an object on the context stack with the given key
<p>Return an object that can later be supplied to <code>restore</code> to restore the context stack to its current state
<p>Restore the context stack to an earlier state
<p>Set the initial context of the calling thread to a context obtained from another thread
Will get a thread from the pool, execute the task  and return the thread to the pool
Wait until the task is completed on the worker  thread
Constructs a new {@code Thread}
Returns the name of this thread group
Returns the parent of this thread group
Returns the maximum priority of this thread group
Tests if this thread group is a daemon thread group
Tests if this thread group has been destroyed
Changes the daemon status of this thread group
Sets the maximum priority of the group
Tests if this thread group is either the thread group argument or one of its ancestor thread groups
Determines if the currently running thread has permission to modify this thread group
Returns an estimate of the number of active threads in this thread group and its subgroups
Copies into the specified array every active thread in this thread group and its subgroups
Copies into the specified array every active thread in this thread group
Returns an estimate of the number of active groups in this thread group and its subgroups
Copies into the specified array references to every active subgroup in this thread group and its subgroups
Copies into the specified array references to every active subgroup in this thread group
Stops all threads in this thread group
Interrupts all threads in this thread group
Suspends all threads in this thread group
Resumes all threads in this thread group
Destroys this thread group and all of its subgroups
Prints information about this thread group to the standard output
Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific {@link Thread
Used by VM to control lowmem implicit suspension
Returns a string representation of this Thread group
Returns the ID of the thread associated with this <tt>ThreadInfo</tt>
Returns the name of the thread associated with this <tt>ThreadInfo</tt>
Returns the state of the thread associated with this <tt>ThreadInfo</tt>
Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this <tt>ThreadInfo</tt> has blocked to enter or reenter a monitor since thread contention monitoring is enabled
Returns the total number of times that the thread associated with this <tt>ThreadInfo</tt> blocked to enter or reenter a monitor
Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this <tt>ThreadInfo</tt> has waited for notification since thread contention monitoring is enabled
Returns the total number of times that the thread associated with this <tt>ThreadInfo</tt> waited for notification
Returns the <tt>LockInfo</tt> of an object for which the thread associated with this <tt>ThreadInfo</tt> is blocked waiting
Returns the {@link LockInfo#toString string representation} of an object for which the thread associated with this <tt>ThreadInfo</tt> is blocked waiting
Returns the ID of the thread which owns the object for which the thread associated with this <tt>ThreadInfo</tt> is blocked waiting
Returns the name of the thread which owns the object for which the thread associated with this <tt>ThreadInfo</tt> is blocked waiting
Returns the stack trace of the thread associated with this <tt>ThreadInfo</tt>
Tests if the thread associated with this <tt>ThreadInfo</tt> is suspended
Tests if the thread associated with this <tt>ThreadInfo</tt> is executing native code via the Java Native Interface (JNI)
Returns a string representation of this thread info
Returns a <tt>ThreadInfo</tt> object represented by the given <tt>CompositeData</tt>
Returns an array of {@link MonitorInfo} objects, each of which represents an object monitor currently locked by the thread associated with this <tt>ThreadInfo</tt>
Returns an array of {@link LockInfo} objects, each of which represents an <a href="LockInfo
Returns the current thread's "initial value" for this thread-local variable
Creates a thread local variable
Returns the value in the current thread's copy of this thread-local variable
Sets the current thread's copy of this thread-local variable to the specified value
Removes the current thread's value for this thread-local variable
Returns the current thread's {@code ThreadLocalRandom}
Throws {@code UnsupportedOperationException}
Returns a pseudorandom {@code int} value
Returns a pseudorandom {@code int} value between zero (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code int} value between the specified origin (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code long} value
Returns a pseudorandom {@code long} value between zero (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code long} value between the specified origin (inclusive) and the specified bound (exclusive)
Returns a pseudorandom {@code double} value between zero (inclusive) and one (exclusive)
Returns a pseudorandom {@code double} value between 0
Returns a pseudorandom {@code double} value between the specified origin (inclusive) and bound (exclusive)
Returns a pseudorandom {@code boolean} value
Returns a pseudorandom {@code float} value between zero (inclusive) and one (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values
Returns an effectively unlimited stream of pseudorandom {@code int} values
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code int} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code int} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long} values
Returns an effectively unlimited stream of pseudorandom {@code long} values
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code long}, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code long} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values, each between zero (inclusive) and one (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values, each between zero (inclusive) and one (exclusive)
Returns a stream producing the given {@code streamSize} number of pseudorandom {@code double} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns an effectively unlimited stream of pseudorandom {@code double} values, each conforming to the given origin (inclusive) and bound (exclusive)
Returns the current number of live threads including both daemon and non-daemon threads
Returns the peak live thread count since the Java virtual machine started or peak was reset
Returns the total number of threads created and also started since the Java virtual machine started
Returns the current number of live daemon threads
Returns all live thread IDs
Returns the thread info for a thread of the specified <tt>id</tt> with no stack trace
Returns the thread info for each thread whose ID is in the input array <tt>ids</tt> with no stack trace
Returns a thread info for a thread of the specified <tt>id</tt>, with stack trace of a specified number of stack trace elements
Returns the thread info for each thread whose ID is in the input array <tt>ids</tt>, with stack trace of a specified number of stack trace elements
Tests if the Java virtual machine supports thread contention monitoring
Tests if thread contention monitoring is enabled
Enables or disables thread contention monitoring
Returns the total CPU time for the current thread in nanoseconds
Returns the CPU time that the current thread has executed in user mode in nanoseconds
Returns the total CPU time for a thread of the specified ID in nanoseconds
Returns the CPU time that a thread of the specified ID has executed in user mode in nanoseconds
Tests if the Java virtual machine implementation supports CPU time measurement for any thread
Tests if the Java virtual machine supports CPU time measurement for the current thread
Tests if thread CPU time measurement is enabled
Enables or disables thread CPU time measurement
Finds cycles of threads that are in deadlock waiting to acquire object monitors
Resets the peak thread count to the current number of live threads
Finds cycles of threads that are in deadlock waiting to acquire object monitors or <a href="LockInfo
Tests if the Java virtual machine supports monitoring of object monitor usage
Tests if the Java virtual machine supports monitoring of <a href="LockInfo
Returns the thread info for each thread whose ID is in the input array <tt>ids</tt>, with stack trace and synchronization information
Returns the thread info for all live threads with stack trace and synchronization information
specifies the policy value
This method will return any instance of the WorkQueue
This method will return an instance of the of the WorkQueue given a queueId
This method will return the number of WorkQueues serviced by the threadpool
This method will return the minimum number of threads maintained by the threadpool
This method will return the maximum number of threads in the threadpool at any point in time, for the life of the threadpool
This method will return the time in milliseconds when idle threads in the threadpool are removed
This method will return the current number of threads in the threadpool
This method will return the number of available threads in the threadpool which are waiting for work
This method will return the number of busy threads in the threadpool This method returns a value which is not synchronized
This method returns the number of Work items processed by the threadpool
This method returns the average elapsed time taken to complete a Work item
This method will return the name of the threadpool
This method is used to return an instance of ThreadPool based on the strategy/policy implemented in the ThreadPoolChooser from the set of ThreadPools allowed to be used by the ORB
This method is used to return an instance of ThreadPool that is obtained by using the id argument passed to it
This method is a convenience method to see what threadpool-ids are being used by the ThreadPoolChooser
Executes the given task sometime in the future
Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
Returns true if this executor is in the process of terminating after {@link #shutdown} or {@link #shutdownNow} but has not completely terminated
Invokes {@code shutdown} when this executor is no longer referenced and it has no threads
Sets the thread factory used to create new threads
Returns the thread factory used to create new threads
Sets a new handler for unexecutable tasks
Returns the current handler for unexecutable tasks
Sets the core number of threads
Returns the core number of threads
Starts a core thread, causing it to idly wait for work
Starts all core threads, causing them to idly wait for work
Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive
Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive
Sets the maximum allowed number of threads
Returns the maximum allowed number of threads
Sets the time limit for which threads may remain idle before being terminated
Returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated
Returns the task queue used by this executor
Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started
Tries to remove from the work queue all {@link Future} tasks that have been cancelled
Returns the current number of threads in the pool
Returns the approximate number of threads that are actively executing tasks
Returns the largest number of threads that have ever simultaneously been in the pool
Returns the approximate total number of tasks that have ever been scheduled for execution
Returns the approximate total number of tasks that have completed execution
Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts
Method invoked prior to executing the given Runnable in the given thread
Method invoked upon completion of execution of the given Runnable
Method invoked when the Executor has terminated
Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded
Always throws RejectedExecutionException
Does nothing, which has the effect of discarding task r
Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded
This method will return the number of WorkQueues serviced by the threadpool
This method will return an instance of the threadpool given a threadpoolId, that can be used by any component in the app
This method will return an instance of the threadpool given a numeric threadpoolId
This method is used to return the numeric id of the threadpool, given a String threadpoolId
Return a String Id for a numericId of a threadpool managed by the threadpool manager
Returns the first instance of ThreadPool in the ThreadPoolManager
Return an instance of ThreadPoolChooser based on the componentId that was passed as argument
Return an instance of ThreadPoolChooser based on the componentIndex that was passed as argument
Sets a ThreadPoolChooser for a particular componentId in the ThreadPoolManager
Gets the numeric index associated with the componentId specified for a ThreadPoolChooser
This method will return an instance of the threadpool given a threadpoolId, that can be used by any component in the app
This method will return an instance of the threadpool given a numeric threadpoolId
This method is used to return the numeric id of the threadpool, given a String threadpoolId
Return a String Id for a numericId of a threadpool managed by the threadpool manager
Returns the first instance of ThreadPool in the ThreadPoolManager
Return an instance of ThreadPoolChooser based on the componentId that was passed as argument
Return an instance of ThreadPoolChooser based on the componentIndex that was passed as argument
Sets a ThreadPoolChooser for a particular componentId in the ThreadPoolManager
Gets the numeric index associated with the componentId specified for a ThreadPoolChooser
Submit a task to be executed
Submit a task to be executed
Returns the detail message string of this throwable
Creates a localized description of this throwable
Returns the cause of this throwable or {@code null} if the cause is nonexistent or unknown
Initializes the <i>cause</i> of this throwable to the specified value
Returns a short description of this throwable
Prints this throwable and its backtrace to the standard error stream
Prints this throwable and its backtrace to the specified print stream
Prints this throwable and its backtrace to the specified print writer
Fills in the execution stack trace
Provides programmatic access to the stack trace information printed by {@link #printStackTrace()}
Sets the stack trace elements that will be returned by {@link #getStackTrace()} and printed by {@link #printStackTrace()} and related methods
Appends the specified exception to the exceptions that were suppressed in order to deliver this exception
Returns an array containing all of the exceptions that were suppressed, typically by the {@code try}-with-resources statement, in order to deliver this exception
Return the name of the exception associated with this <code>ThrowsTag</code>
Return the exception comment associated with this <code>ThrowsTag</code>
Return a <code>ClassDoc</code> that represents the exception
Return the type of the exception associated with this <code>ThrowsTag</code>
Returns an object reference for the target object represented by this tie
Deactivates the target object represented by this tie
Returns the ORB for this tie
Sets the ORB for this tie
Called by {@link Util#registerTarget} to set the target for this tie
Returns the target for this tie
A tile is about to be updated (it is either about to be grabbed for writing, or it is being released from writing)
Sets a <code>Time</code> object using a milliseconds time value
Converts a string in JDBC time escape format to a <code>Time</code> value
Formats a time in JDBC time escape format
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a year component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a month component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a day component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a date component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a year component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a month component
This method is deprecated and should not be used because SQL <code>TIME</code> values do not have a date component
Obtains an instance of {@code Time} from a {@link LocalTime} object with the same hour, minute and second time value as the given {@code LocalTime}
Converts this {@code Time} object to a {@code LocalTime}
This method always throws an UnsupportedOperationException and should not be used because SQL {@code Time} values do not have a date component
Convert a string to a compiled form
Parses, validates and computes normalized version of time object
Converts time object representation to String
Adds an action listener to the <code>Timer</code>
Removes the specified action listener from the <code>Timer</code>
Returns an array of all the action listeners registered on this timer
Notifies all listeners that have registered interest for notification on this event type
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this <code>Timer</code>
Enables or disables the timer log
Returns <code>true</code> if logging is enabled
Sets the <code>Timer</code>'s between-event delay, the number of milliseconds between successive action events
Returns the delay, in milliseconds, between firings of action events
Sets the <code>Timer</code>'s initial delay, the time in milliseconds to wait after the timer is started before firing the first event
Returns the <code>Timer</code>'s initial delay
If <code>flag</code> is <code>false</code>, instructs the <code>Timer</code> to send only one action event to its listeners
Returns <code>true</code> (the default) if the <code>Timer</code> will send an action event to its listeners multiple times
Sets whether the <code>Timer</code> coalesces multiple pending <code>ActionEvent</code> firings
Returns <code>true</code> if the <code>Timer</code> coalesces multiple pending action events
Sets the string that will be delivered as the action command in <code>ActionEvent</code>s fired by this timer
Returns the string that will be delivered as the action command in <code>ActionEvent</code>s fired by this timer
Starts the <code>Timer</code>, causing it to start sending action events to its listeners
Returns <code>true</code> if the <code>Timer</code> is running
Stops the <code>Timer</code>, causing it to stop sending action events to its listeners
Restarts the <code>Timer</code>, canceling any pending firings and causing it to fire with its initial delay
Starts the timer
Stops the timer
Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE> and <CODE>userData</CODE> and inserts it into the list of notifications with a given date, period and number of occurrences
Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE> and <CODE>userData</CODE> and inserts it into the list of notifications with a given date, period and number of occurrences
Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE> and <CODE>userData</CODE> and inserts it into the list of notifications with a given date and period and a null number of occurrences
Creates a new timer notification with the specified <CODE>type</CODE>, <CODE>message</CODE> and <CODE>userData</CODE> and inserts it into the list of notifications with a given date and a null period and number of occurrences
Removes the timer notification corresponding to the specified identifier from the list of notifications
Removes all the timer notifications corresponding to the specified type from the list of notifications
Removes all the timer notifications from the list of notifications and resets the counter used to update the timer notification identifiers
Gets the number of timer notifications registered into the list of notifications
Gets all timer notification identifiers registered into the list of notifications
Gets all the identifiers of timer notifications corresponding to the specified type
Gets the timer notification type corresponding to the specified identifier
Gets the timer notification detailed message corresponding to the specified identifier
Gets the timer notification user data object corresponding to the specified identifier
Gets a copy of the date associated to a timer notification
Gets a copy of the period (in milliseconds) associated to a timer notification
Gets a copy of the remaining number of occurrences associated to a timer notification
Gets a copy of the flag indicating whether a periodic notification is executed at <i>fixed-delay</i> or at <i>fixed-rate</i>
Gets the flag indicating whether or not the timer sends past notifications
Sets the flag indicating whether the timer sends past notifications or not
Tests whether the timer MBean is active
Tests whether the list of timer notifications is empty
Gets the identifier of this timer notification
The action to be performed by this timer task
Cancels this timer task
Returns the <i>scheduled</i> execution time of the most recent <i>actual</i> execution of this task
Returns the date and time when the timestamp was generated
Returns the certificate path for the Timestamping Authority
Returns the hash code value for this timestamp
Tests for equality between the specified object and this timestamp
Returns a string describing this timestamp
Converts the given time duration in the given unit to this unit
Equivalent to {@link #convert(long, TimeUnit) NANOSECONDS
Equivalent to {@link #convert(long, TimeUnit) MICROSECONDS
Equivalent to {@link #convert(long, TimeUnit) MILLISECONDS
Equivalent to {@link #convert(long, TimeUnit) SECONDS
Equivalent to {@link #convert(long, TimeUnit) MINUTES
Equivalent to {@link #convert(long, TimeUnit) HOURS
Equivalent to {@link #convert(long, TimeUnit) DAYS
Performs a timed {@link Object#wait(long, int) Object
Performs a timed {@link Thread#join(long, int) Thread
Performs a {@link Thread#sleep(long, int) Thread
Gets the time zone offset, for current date, modified in case of daylight savings
Returns the offset of this time zone from UTC at the specified date
Sets the base time zone offset to GMT
Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone
Gets the ID of this time zone
Sets the time zone ID
Returns a long standard time name of this {@code TimeZone} suitable for presentation to the user in the default locale
Returns a long standard time name of this {@code TimeZone} suitable for presentation to the user in the specified {@code locale}
Returns a name in the specified {@code style} of this {@code TimeZone} suitable for presentation to the user in the default locale
Returns a name in the specified {@code style} of this {@code TimeZone} suitable for presentation to the user in the specified {@code locale}
Returns the amount of time to be added to local standard time to get local wall clock time
Queries if this {@code TimeZone} uses Daylight Saving Time
Returns {@code true} if this {@code TimeZone} is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time
Queries if the given {@code date} is in Daylight Saving Time in this time zone
Gets the <code>TimeZone</code> for the given ID
Gets the {@code TimeZone} for the given {@code zoneId}
Converts this {@code TimeZone} object to a {@code ZoneId}
Gets the available IDs according to the given time zone offset in milliseconds
Gets all the available IDs supported
Gets the default {@code TimeZone} of the Java virtual machine
Sets the {@code TimeZone} that is returned by the {@code getDefault} method
Returns true if this zone has the same rule and offset as another zone
Creates a copy of this <code>TimeZone</code>
Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale
Returns a generic name for the given time zone {@code ID} that's suitable for presentation to the user in the specified {@code locale}
Paints the border for the specified component with the specified position and size
Reinitialize the insets parameter with this Border's current Insets
Returns whether or not the border is opaque
Returns the title of the titled border
Returns the border of the titled border
Returns the title-position of the titled border
Returns the title-justification of the titled border
Returns the title-font of the titled border
Returns the title-color of the titled border
Sets the title of the titled border
Sets the border of the titled border
Sets the title-position of the titled border
Sets the title-justification of the titled border
Sets the title-font of the titled border
Sets the title-color of the titled border
Returns the minimum dimensions this border requires in order to fully display the border and title
Returns the baseline
Returns an enum indicating how the baseline of the border changes as the size changes
Connect the given servant to the ORB by allocating a transient object key  and creating an IOR and object reference using the current factory
Disconnect the object from this ORB
Get the servant for the request given by the parameters
Return the most derived interface for the given servant and objectId
Applies this function to the given arguments
Applies this function to the given argument
Returns null
Reurns null
Returns null
Does nothing
Does nothing
Turns special character escaping on/off
Does nothing
Does nothing
Does nothing
Does nothing
Does nothing
Does nothing
Does nothing
Receive notification of the end of an element
Does nothing
Does nothing
Receive notification of a processing instruction
Does nothing
Does nothing
Receive notification of the beginning of an element, although this is a SAX method additional namespace or attribute information can occur before or after this call, that is associated with this element
Receive notification of a comment anywhere in the document
Does nothing
Does nothing
Does nothing
Does nothing
Receive notification of the end of a document
This method is called when all the data needed for a call to the SAX handler's startElement() method has been gathered
Do nothing
Receive notification of character data
An element starts, but attributes are not fully known yet
An element starts, but attributes are not fully known yet
Receive notification of the end of an element
Receive notification of character data
This method flushes any pending events, which can be startDocument() closing the opening tag of an element, or closing an open CDATA section
Handle a prefix/uri mapping, which is associated with a startElement() that is soon to follow
Begin the scope of a prefix-URI Namespace mapping just before another element is about to start
This method is used when a prefix/uri namespace mapping is indicated after the element was started with a startElement() and before and endElement()
Try's to reset the super class and reset this class for re-use, so that you don't need to create a new serializer (mostly for performance reasons)
Tells if the formatter should use special URL escaping
Tells if the formatter should omit the META tag
Specifies an output format for this serializer
Get a description of the given element
Receive notification of the beginning of a document
Receive notification of the end of a document
Receive notification of the beginning of an element
Receive notification of the end of an element
Process an attribute
Write the specified <var>string</var> after substituting non ASCII characters, with <CODE>%HH</CODE>, where HH is the hex of the byte value
Writes the specified <var>string</var> after substituting <VAR>specials</VAR>, and UTF-16 surrogates for character references <CODE>&amp;#xnn</CODE>
Receive notification of character data
Receive notification of cdata
Receive notification of a processing instruction
Receive notivication of a entityReference
Process the attributes, which means to write out the currently collected attributes to the writer
For the enclosing elements starting tag write out out any attributes followed by ">"
Initialize the serializer with the specified output stream and output format
Specifies an output stream to which the document should be serialized
This method is used when a prefix/uri namespace mapping is indicated after the element was started with a startElement() and before and endElement()
Report the end of DTD declarations
This method does nothing
This method does nothing
This method does nothing
This method does nothing
This method is used to add an attribute to the currently open element
Applies this function to the given arguments
Applies this function to the given argument
Applies this function to the given arguments
Applies this function to the given argument
Run the tool with the given I/O channels and arguments
Gets the source versions of the Java&trade; programming language supported by this tool
Creates this toolkit's implementation of the <code>Desktop</code> using the specified peer interface
Creates this toolkit's implementation of <code>Button</code> using the specified peer interface
Creates this toolkit's implementation of <code>TextField</code> using the specified peer interface
Creates this toolkit's implementation of <code>Label</code> using the specified peer interface
Creates this toolkit's implementation of <code>List</code> using the specified peer interface
Creates this toolkit's implementation of <code>Checkbox</code> using the specified peer interface
Creates this toolkit's implementation of <code>Scrollbar</code> using the specified peer interface
Creates this toolkit's implementation of <code>ScrollPane</code> using the specified peer interface
Creates this toolkit's implementation of <code>TextArea</code> using the specified peer interface
Creates this toolkit's implementation of <code>Choice</code> using the specified peer interface
Creates this toolkit's implementation of <code>Frame</code> using the specified peer interface
Creates this toolkit's implementation of <code>Canvas</code> using the specified peer interface
Creates this toolkit's implementation of <code>Panel</code> using the specified peer interface
Creates this toolkit's implementation of <code>Window</code> using the specified peer interface
Creates this toolkit's implementation of <code>Dialog</code> using the specified peer interface
Creates this toolkit's implementation of <code>MenuBar</code> using the specified peer interface
Creates this toolkit's implementation of <code>Menu</code> using the specified peer interface
Creates this toolkit's implementation of <code>PopupMenu</code> using the specified peer interface
Creates this toolkit's implementation of <code>MenuItem</code> using the specified peer interface
Creates this toolkit's implementation of <code>FileDialog</code> using the specified peer interface
Creates this toolkit's implementation of <code>CheckboxMenuItem</code> using the specified peer interface
Obtains this toolkit's implementation of helper class for <code>MouseInfo</code> operations
Creates a peer for a component or container
Creates this toolkit's implementation of <code>Font</code> using the specified peer interface
Fills in the integer array that is supplied as an argument with the current system color values
Controls whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete
Returns whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete
Returns whether dynamic layout of Containers on resize is currently active (both set in program( {@code isDynamicLayoutSet()} ), and supported by the underlying operating system and/or window manager)
Gets the size of the screen
Returns the screen resolution in dots-per-inch
Gets the insets of the screen
Determines the color model of this toolkit's screen
Returns the names of the available fonts in this toolkit
Gets the screen device metrics for rendering of the font
Synchronizes this toolkit's graphics state
Gets the default toolkit
Returns an image which gets pixel data from the specified file, whose format can be either GIF, JPEG or PNG
Returns an image which gets pixel data from the specified URL
Returns an image which gets pixel data from the specified file
Returns an image which gets pixel data from the specified URL
Prepares an image for rendering
Indicates the construction status of a specified image that is being prepared for display
Creates an image with the specified image producer
Creates an image which decodes the image stored in the specified byte array
Creates an image which decodes the image stored in the specified byte array, and at the specified offset and length
Gets a <code>PrintJob</code> object which is the result of initiating a print operation on the toolkit's platform
Gets a <code>PrintJob</code> object which is the result of initiating a print operation on the toolkit's platform
Emits an audio beep depending on native system settings and hardware capabilities
Gets the singleton instance of the system Clipboard which interfaces with clipboard facilities provided by the native platform
Gets the singleton instance of the system selection as a <code>Clipboard</code> object
Determines which modifier key is the appropriate accelerator key for menu shortcuts
Returns whether the given locking key on the keyboard is currently in its "on" state
Sets the state of the given locking key on the keyboard
Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight)
Creates a new custom cursor object
Returns the supported cursor dimension which is closest to the desired sizes
Returns the maximum number of colors the Toolkit supports in a custom cursor palette
Returns whether Toolkit supports this state for <code>Frame</code>s
Gets a property with the specified key and default
Get the application's or applet's EventQueue instance
Gets the application's or applet's <code>EventQueue</code> instance, without checking access
Creates the peer for a DragSourceContext
Creates a concrete, platform dependent, subclass of the abstract DragGestureRecognizer class requested, and associates it with the DragSource, Component and DragGestureListener specified
Obtains a value for the specified desktop property
Sets the named desktop property to the specified value and fires a property change event to notify any listeners that the value has changed
an opportunity to lazily evaluate desktop property values
initializeDesktopProperties
Adds the specified property change listener for the named desktop property
Removes the specified property change listener for the named desktop property
Returns an array of all the property change listeners registered on this toolkit
Returns an array of all property change listeners associated with the specified name of a desktop property
Returns whether the always-on-top mode is supported by this toolkit
Returns whether the given modality type is supported by this toolkit
Returns whether the given modal exclusion type is supported by this toolkit
Adds an AWTEventListener to receive all AWTEvents dispatched system-wide that conform to the given <code>eventMask</code>
Removes an AWTEventListener from receiving dispatched AWTEvents
Returns an array of all the <code>AWTEventListener</code>s registered on this toolkit
Returns an array of all the <code>AWTEventListener</code>s registered on this toolkit which listen to all of the event types specified in the {@code eventMask} argument
Returns a map of visual attributes for the abstract level description of the given input method highlight, or null if no mapping is found
Reports whether events from extra mouse buttons are allowed to be processed and posted into {@code EventQueue}
Gets the Java&trade; programming language compiler provided with this platform
Gets the Java&trade; programming language documentation tool provided with this platform
Returns the class loader for tools provided with this platform
Enables or disables the tooltip
Returns true if this object is enabled
When displaying the <code>JToolTip</code>, the <code>ToolTipManager</code> chooses to use a lightweight <code>JPanel</code> if it fits
Returns true if lightweight (all-Java) <code>Tooltips</code> are in use, or false if heavyweight (native peer) <code>Tooltips</code> are being used
Specifies the initial delay value
Returns the initial delay value
Specifies the dismissal delay value
Returns the dismissal delay value
Used to specify the amount of time before the user has to wait <code>initialDelay</code> milliseconds before a tooltip will be shown
Returns the reshow delay property
Returns a shared <code>ToolTipManager</code> instance
Registers a component for tooltip management
Removes a component from tooltip control
Called when the mouse enters the region of a component
Called when the mouse exits the region of a component
Called when the mouse is pressed
Called when the mouse is pressed and dragged
Called when the mouse is moved
Pass callback to the SAX Handler
Do nothing
Receive notification of character data
Receive notification of a comment
Do nothing as this is an abstract class
Receive notification of the beginning of an element, although this is a SAX method additional namespace or attribute information can occur before or after this call, that is associated with this element
Sets the LexicalHandler
Sets the SAX ContentHandler
Does nothing
Set whether or not namespace declarations (e
This method flushes any pending events, which can be startDocument() closing the opening tag of an element, or closing an open CDATA section
Pass in a reference to a TransformState object, which can be used during SAX ContentHandler events to obtain information about he state of the transformation
Receives notification that an element starts, but attributes are not fully known yet
An element starts, but attributes are not fully known yet
This method gets the node's value as a String and uses that String as if it were an input character notification
Try's to reset the super class and reset this class for re-use, so that you don't need to create a new serializer (mostly for performance reasons)
Add a unique attribute
This helper method to writes out "]]>" when closing a CDATA section
Serializes the DOM node
Flush the formatter's result stream
Get the output stream where the events will be serialized to
Report an element type declaration
Report an internal entity declaration
Output a system-dependent line break
Specifies an output format for this serializer
Initialize the serializer with the specified output stream and output format
Returns the output format for this serializer
Specifies a writer to which the document should be serialized
Set if the operating systems end-of-line line separator should be used when serializing
Specifies an output stream to which the document should be serialized
Might print a newline character and the indentation amount of the given depth
Indent at the current element nesting depth
Report an attribute type declaration
Get the character stream where the events will be serialized to
Report a parsed external entity declaration
Tell if this character can be written without escaping
Once a surrogate has been detected, write out the pair of characters if it is in the encoding, or if there is no encoding, otherwise write out an entity reference of the value of the unicode code point of the character represented by the high/low surrogate pair
Handle one of the default entities, return false if it is not a default entity
Ends an un-escaping section
Starts an un-escaping section
Receive notification of cdata
If available, when the disable-output-escaping attribute is used, output raw text without escaping
Receive notification of character data
Receive notification of character data
Escape and writer
Receive notification of the beginning of an element, although this is a SAX method additional namespace or attribute information can occur before or after this call, that is associated with this element
Receive notification of the beginning of an element, additional namespace or attribute information can occur before or after this call, that is associated with this element
Process the attributes, which means to write out the currently collected attributes to the writer
Returns the specified <var>string</var> after substituting <VAR>specials</VAR>, and UTF-16 surrogates for chracter references <CODE>&amp;#xnn</CODE>
Receive notification of the end of an element
Receive notification of the end of an element
Begin the scope of a prefix-URI Namespace mapping just before another element is about to start
Handle a prefix/uri mapping, which is associated with a startElement() that is soon to follow
Receive notification of an XML comment anywhere in the document
Report the end of a CDATA section
Report the end of DTD declarations
End the scope of a prefix-URI Namespace mapping
Receive notification of ignorable whitespace in element content
Receive notification of a skipped entity
Report the start of a CDATA section
Report the beginning of an entity
For the enclosing elements starting tag write out out any attributes followed by ">"
Report the start of DTD declarations, if any
Returns the m_indentAmount
Sets the m_indentAmount
Tell if, based on space preservation constraints and the doIndent property, if an indent should occur
Remembers the cdata sections specified in the cdata-section-elements
Makes sure that the namespace URI for the given qualified attribute name is declared
This method flushes any pending events, which can be startDocument() closing the opening tag of an element, or closing an open CDATA section
Adds the given attribute to the set of attributes, even if there is no currently open element
To fire off the pseudo characters of attributes, as they currently exist
Try's to reset the super class and reset this class for re-use, so that you don't need to create a new serializer (mostly for performance reasons)
Sets the character encoding coming from the xsl:output encoding stylesheet attribute
If this method is called, the serializer is used as a DTDHandler, which changes behavior how the serializer handles document entities
If this method is called, the serializer is used as a DTDHandler, which changes behavior how the serializer handles document entities
If set to false the serializer does not expand DTD entities, but leaves them as is, the default value is true;
From XSLTC
Does nothing because the indent attribute is ignored for text output
From XSLTC
From XSLTC
From XSLTC
From XSLTC
Receive notification of the beginning of a document
Receive notification of the end of a document
Receive notification of the beginning of an element
Receive notification of the end of an element
Receive notification of character data
If available, when the disable-output-escaping attribute is used, output raw text without escaping
Receive notification of cdata
Receive notification of ignorable whitespace in element content
Receive notification of a processing instruction
Called when a Comment is to be constructed
Report an XML comment anywhere in the document
Receive notivication of a entityReference
From XSLTC
From XSLTC
From XSLTC
Add a unique attribute
passes the call on to the underlying HTML or XML handler
Converts the DOM node to output
Set the properties of the handler
Sets the output stream to write to
Sets the writer to write to
Adds an attribute to the currenly open tag
Adds an attribute to the currenly open tag
Adds an attribute to the currenly open tag
Adds a unique attribute to the currenly open tag
Converts the String to a character array and calls the SAX method characters(char[],int,int);
Pass the call on to the underlying handler
This method is used when a prefix/uri namespace mapping is indicated after the element was started with a startElement() and before and endElement()
This method cannot be cached because default is different in HTML and XML (we need more than a boolean)
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Set the doctype in the underlying XML handler
Set the doctype in the underlying XML handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Pass the call on to the underlying handler
Get the current namespace mappings
This method is used to set the source locator, which might be used to generated an error message
Do nothing for SAX
Receives notification of the end of the document
This method is called when all the data needed for a call to the SAX handler's startElement() method has been gathered
Closes ane open cdata tag, and unlike the this
Remember the prefix/uri mapping at the current nested element depth
Start an element in the output document
Send a namespace declaration in the output document
Undeclare the namespace that is currently pointed to by a given prefix
Adds the given attribute to the set of attributes, and also makes sure that the needed prefix/uri mapping is declared, but only if there is a currently open element
Try's to reset the super class and reset this class for re-use, so that you don't need to create a new serializer (mostly for performance reasons)
Copy properties from another SerializerToXML
Receive notification of the beginning of a document
Receive notification of the end of a document
Starts a whitespace preserving section
Ends a whitespace preserving section
Receive notification of a processing instruction
Receive notivication of a entityReference
This method is used to add an attribute to the currently open element
Add an attribute to the current element
This method is used to notify the serializer of a namespace mapping (or node) that applies to the current element whose startElement() call has already been seen
From XSLTC Declare a prefix to point to a namespace URI
Try's to reset the super class and reset this class for re-use, so that you don't need to create a new serializer (mostly for performance reasons)
Start parsing an OASIS TR9401 Open Catalog file
Adds a new event to the track
Removes the specified event from the track
Obtains the event at the specified index
Obtains the number of events in this track
Obtains the length of the track, expressed in MIDI ticks
Makes permanent all changes that have been performed by the <code>acceptChanges</code> method since the last call to either the <code>commit</code> or <code>rollback</code> methods
Undoes all changes made in the current transaction
Undoes all changes made in the current transaction made prior to the given <code>Savepoint</code> object
Returns an array of DataFlavor objects indicating the flavors the data can be provided in
Returns whether or not the specified data flavor is supported for this object
Returns an object which represents the data to be transferred
Returns an {@code Action} that performs cut operations to the clipboard
Returns an {@code Action} that performs copy operations to the clipboard
Returns an {@code Action} that performs paste operations from the clipboard
Sets the drag image parameter
Returns the drag image
Sets an anchor offset for the image to drag
Returns an anchor offset for the image to drag
Causes the Swing drag support to be initiated
Causes a transfer from the given component to the given clipboard
Causes a transfer to occur from a clipboard or a drag and drop operation
Causes a transfer to a component from a clipboard or a DND drop operation
This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of {@code true} indicating that the transfer represented by the given {@code TransferSupport} (which contains all of the details of the transfer) is acceptable at the current time, and a value of {@code false} rejecting the transfer
Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it
Returns the type of transfer actions supported by the source; any bitwise-OR combination of {@code COPY}, {@code MOVE} and {@code LINK}
Returns an object that establishes the look of a transfer
Creates a <code>Transferable</code> to use as the source for a data transfer
Invoked after data has been exported
Returns the drop point, representing the mouse's current location within the component
Returns a string representation of this drop location
Returns whether or not this <code>TransferSupport</code> represents a drop operation
Returns the target component of this transfer
Returns the current (non-{@code null}) drop location for the component, when this {@code TransferSupport} represents a drop
Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop
Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action
Returns the action chosen for the drop, when this {@code TransferSupport} represents a drop
Returns the user drop action for the drop, when this {@code TransferSupport} represents a drop
Returns the drag source's supported drop actions, when this {@code TransferSupport} represents a drop
Returns the data flavors for this transfer
Returns whether or not the given data flavor is supported
Returns the <code>Transferable</code> associated with this transfer
Transfers the element to a waiting consumer immediately, if possible
Transfers the element to a consumer, waiting if necessary to do so
Transfers the element to a consumer if it is possible to do so before the timeout elapses
Returns {@code true} if there is at least one consumer waiting to receive an element via {@link #take} or timed {@link #poll(long,TimeUnit) poll}
Returns an estimate of the number of consumers waiting to receive elements via {@link #take} or timed {@link #poll(long,TimeUnit) poll}
Returns the algorithm-specific input parameters associated with this <code>Transform</code>
Transforms the specified data using the underlying transform algorithm
Transforms the specified data using the underlying transform algorithm
Returns a copy of the wrapped transform
Returns <code>true</code> if the wrapped transform is an identity transform
Returns <code>true</code> if rhs is a <code>TransformAttribute</code> whose transform is equal to this <code>TransformAttribute</code>'s transform
Method engineGetURI
Method enginePerformTransform
Method engineGetURI
Method engineGetURI
Method engineGetURI
<p>Reset this <code>Transformer</code> to its original configuration
<p>Transform the XML <code>Source</code> to a <code>Result</code>
Add a parameter for the transformation
Get a parameter that was explicitly set with setParameter
Clear all parameters set with setParameter
Set an object that will be used to resolve URIs used in document()
Get an object that will be used to resolve URIs used in document()
Set the output properties for the transformation
<p>Get a copy of the output properties for the transformation
Set an output property that will be in effect for the transformation
<p>Get an output property that is in effect for the transformer
Set the error event listener in effect for the transformation
Get the error event handler in effect for the transformation
Method getLocator retrieves an instance of a SourceLocator object that specifies where an error occurred
Method setLocator sets an instance of a SourceLocator object that specifies where an error occurred
This method retrieves an exception that this exception wraps
Returns the cause of this throwable or <code>null</code> if the cause is nonexistent or unknown
Initializes the <i>cause</i> of this throwable to the specified value
Get the error message with location information appended
Get the location information as a string
Print the the trace of methods from where the error originated
Print the the trace of methods from where the error originated
Print the the trace of methods from where the error originated
<p>Obtain a new instance of a <code>TransformerFactory</code>
<p>Obtain a new instance of a <code>TransformerFactory</code> from factory class name
<p>Process the <code>Source</code> into a <code>Transformer</code> <code>Object</code>
<p>Create a new <code>Transformer</code> that performs a copy of the <code>Source</code> to the <code>Result</code>
Process the Source into a Templates object, which is a a compiled representation of the source
<p>Get the stylesheet specification(s) associated with the XML <code>Source</code> document via the <a href="http://www
Set an object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include
Get the object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include
<p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s or <code>Template</code>s created by this factory
Look up the value of a feature
Allows the user to set specific attributes on the underlying implementation
Allows the user to retrieve specific attributes on the underlying implementation
Set the error event listener for the TransformerFactory, which is used for the processing of transformation instructions, and not for the transformation itself
Get the error event handler for the TransformerFactory
Return the message (if any) for this error 
Return the actual exception (if any) that caused this exception to be raised
use the exception chaining mechanism of JDK1
javax
javax
javax
javax
<p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s or <code>Template</code>s created by this factory
javax
Return the state of the services mechanism feature
javax
javax
javax
javax
javax
javax
javax
javax
javax
javax
javax
javax
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Receive notification of a warning
This method implements XSLTC's SourceLoader interface
Returns a new instance of the XSLTC DTM Manager service
<p>Set  the <code>Result</code> associated with this <code>TransformerHandler</code> to be used for the transformation
Set the base ID (URI or system ID) from where relative URLs will be resolved
Get the base ID (URI or system ID) from where relative URLs will be resolved
<p>Get the <code>Transformer</code> associated with this handler, which is needed in order to set parameters and output properties
Implements javax
Implements javax
Implements javax
Implements javax
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implements org
Implementation of the reset() method
Return the state of the secure processing feature
Set the state of the secure processing feature
Return the state of the services mechanism feature
Set the state of the services mechanism feature
Returns the translet wrapped inside this Transformer or null if this is the identity transform
Implements JAXP's Transformer
Create an output handler for the transformation output based on the type and contents of the TrAX Result object passed to the transform() method
Set the internal DOM that will be used for the next transformation
Returns the {@link com
Returns the {@link com
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
This method is used to pass any properties to the output handler when running the identity transform
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
Implements JAXP's Transformer
This class should only be used as a DOMCache for the translet if the URIResolver has been set
Receive notification of a recoverable error
Receive notification of a non-recoverable error
Receive notification of a warning
This method resets  the Transformer to its original configuration Transformer code is reset to the same state it was when it was created
Returns the cause of this <code>TransformException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>TransformException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>TransformException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>TransformException</code>, its backtrace and the cause's backtrace to the specified print writer
Set whether secure validation is enabled or not
Adds the <code>Transform</code> with the specified <code>Transform algorithm URI</code>
Adds the <code>Transform</code> with the specified <code>Transform algorithm URI</code>
Adds the <code>Transform</code> with the specified <code>Transform algorithm URI</code>
Applies all included <code>Transform</code>s to xmlSignatureInput and returns the result of these transformations
Applies all included <code>Transform</code>s to xmlSignatureInput and returns the result of these transformations
Return the nonnegative number of transformations
Return the <it>i</it><sup>th</sup> <code>{@link Transform}</code>
Returns a <code>TransformService</code> that supports the specified algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type (ex: DOM)
Returns a <code>TransformService</code> that supports the specified algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type (ex: DOM) as supplied by the specified provider
Returns a <code>TransformService</code> that supports the specified algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type (ex: DOM) as supplied by the specified provider
Returns the mechanism type supported by this <code>TransformService</code>
Returns the URI of the algorithm supported by this <code>TransformService</code>
Returns the provider of this <code>TransformService</code>
Initializes this <code>TransformService</code> with the specified parameters
Marshals the algorithm-specific parameters
Initializes this <code>TransformService</code> with the specified parameters and document context
The mega method which MUST be implemented by the Transformation Algorithm
The mega method which MUST be implemented by the Transformation Algorithm
The mega method which MUST be implemented by the Transformation Algorithm
Returns the URI representation of <code>Transformation algorithm</code>
Set the current node
Reset the state on the given transformer object
Method engineGetURI
Method enginePerformTransform
Method engineGetURI
Method enginePerformTransform
Method enginePerformTransform
Method engineGetURI
Returns the next binding in the NamingContext
Destroys this BindingIterator by disconnecting from the ORB
Returns the remaining number of elements in the iterator
Main startup routine
Return the initial NamingContext
Binds the object to the name component as the specified binding type
Resolves the supplied name to an object reference and returns the type of the resolved binding
Deletes the binding with the supplied name
List the contents of this NamingContext
Create a new NamingContext
Destroys this NamingContext by disconnecting from the ORB
Return whether this NamingContext contains any bindings
Sets the receiver to which this transmitter will deliver MIDI messages
Obtains the current receiver to which this transmitter will deliver MIDI messages
Indicates that the application has finished using the transmitter, and that limited resources it requires may be released or made available
Returns the type of this <code>Transparency</code>
Sets the image for this <code>TrayIcon</code>
Returns the current image used for this <code>TrayIcon</code>
Sets the popup menu for this <code>TrayIcon</code>
Returns the popup menu associated with this <code>TrayIcon</code>
Sets the tooltip string for this <code>TrayIcon</code>
Returns the tooltip string associated with this <code>TrayIcon</code>
Sets the auto-size property
Returns the value of the auto-size property
Adds the specified mouse listener to receive mouse events from this <code>TrayIcon</code>
Removes the specified mouse listener
Returns an array of all the mouse listeners registered on this <code>TrayIcon</code>
Adds the specified mouse listener to receive mouse-motion events from this <code>TrayIcon</code>
Removes the specified mouse-motion listener
Returns an array of all the mouse-motion listeners registered on this <code>TrayIcon</code>
Returns the command name of the action event fired by this tray icon
Sets the command name for the action event fired by this tray icon
Adds the specified action listener to receive <code>ActionEvent</code>s from this <code>TrayIcon</code>
Removes the specified action listener
Returns an array of all the action listeners registered on this <code>TrayIcon</code>
Displays a popup message near the tray icon
Returns the size, in pixels, of the space that the tray icon occupies in the system tray
Disposes the tray icon and releases and resources held by it
Sets the tool tip for the tray icon
Updates the icon image
Displays a message at the tray icon
Shows the popup menu of this tray icon at the specified position
Gets the kind of this tree
Accept method used to implement the visitor pattern
Sets an initial <I>value</I> for the editor
Sets the value of the current tree cell to <code>value</code>
Returns the path to the value that has been expanded/collapsed
Called whenever an item in the tree has been expanded
Called whenever an item in the tree has been collapsed
Returns the number of key-value mappings in this map
Returns {@code true} if this map contains a mapping for the specified key
Returns {@code true} if this map maps one or more keys to the specified value
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Copies all of the mappings from the specified map to this map
Associates the specified value with the specified key in this map
Removes the mapping for this key from this TreeMap if present
Removes all of the mappings from this map
Returns a shallow copy of this {@code TreeMap} instance
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
Returns the root of the tree
Returns the child of <code>parent</code> at index <code>index</code> in the parent's child array
Returns the number of children of <code>parent</code>
Returns <code>true</code> if <code>node</code> is a leaf
Messaged when the user has altered the value for the item identified by <code>path</code> to <code>newValue</code>
Returns the index of child in parent
Adds a listener for the <code>TreeModelEvent</code> posted after the tree changes
Removes a listener previously added with <code>addTreeModelListener</code>
For all events, except treeStructureChanged, returns the parent of the changed nodes
Convenience method to get the array of objects from the TreePath instance that this event wraps
Returns the objects that are children of the node identified by <code>getPath</code> at the locations specified by <code>getChildIndices</code>
Returns the values of the child indexes
Returns a string that displays and identifies this object's properties
<p>Invoked after a node (or a set of siblings) has changed in some way
<p>Invoked after nodes have been inserted into the tree
<p>Invoked after nodes have been removed from the tree
<p>Invoked after the tree has drastically changed structure from a given node down
Returns the child <code>TreeNode</code> at index <code>childIndex</code>
Returns the number of children <code>TreeNode</code>s the receiver contains
Returns the parent <code>TreeNode</code> of the receiver
Returns the index of <code>node</code> in the receivers children
Returns true if the receiver allows children
Returns true if the receiver is a leaf
Returns the children of the receiver as an <code>Enumeration</code>
Returns an ordered array of the elements of this {@code TreePath}
Returns the last element of this path
Returns the number of elements in the path
Returns the path element at the specified index
Compares this {@code TreePath} to the specified object
Returns the hash code of this {@code TreePath}
Returns true if <code>aTreePath</code> is a descendant of this {@code TreePath}
Returns a new path containing all the elements of this path plus <code>child</code>
Returns the {@code TreePath} of the parent
Returns a string that displays and identifies this object's properties
Scan a tree from a position identified by a TreePath
Scan a single node
Get the current path for the node, as built up by the currently active set of scan calls
Gets a Trees object for a given CompilationTask
Gets a Trees object for a given ProcessingEnvironment
Gets a utility object for obtaining source positions
Gets the Tree node for a given Element
Gets the ClassTree node for a given TypeElement
Gets the MethodTree node for a given ExecutableElement
Gets the Tree node for an AnnotationMirror on a given Element
Gets the Tree node for an AnnotationValue for an AnnotationMirror on a given Element
Gets the path to tree node within the specified compilation unit
Gets the TreePath node for a given Element
Gets the TreePath node for an AnnotationMirror on a given Element
Gets the TreePath node for an AnnotationValue for an AnnotationMirror on a given Element
Gets the Element for the Tree node identified by a given TreePath
Gets the TypeMirror for the Tree node identified by a given TreePath
Gets the Scope for the Tree node identified by a given TreePath
Gets the doc comment, if any, for the Tree node identified by a given TreePath
Checks whether a given type is accessible in a given scope
Checks whether the given element is accessible as a member of the given type in a given scope
Gets the original type from the ErrorType object
Prints a message of the specified kind at the location of the tree within the provided compilation unit
Gets the lub of an exception parameter declared in a catch clause
Scan a single node
Scan a list of nodes
Reduces two results into a combined result
Returns the paths that have been added or removed from the selection
Returns the first path element
Returns whether the path identified by {@code getPath} was added to the selection
Returns whether the specified path was added to the selection
Returns whether the path at {@code getPaths()[index]} was added to the selection
Returns the path that was previously the lead path
Returns the current lead path
Returns a copy of the receiver, but with the source being newSource
Called whenever the value of the selection changes
Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION
Returns the current selection mode, one of <code>SINGLE_TREE_SELECTION</code>, <code>CONTIGUOUS_TREE_SELECTION</code> or <code>DISCONTIGUOUS_TREE_SELECTION</code>
Sets the selection to path
Sets the selection to path
Adds path to the current selection
Adds paths to the current selection
Removes path from the selection
Removes paths from the selection
Returns the first path in the selection
Returns the paths in the selection
Returns the number of paths that are selected
Returns true if the path, <code>path</code>, is in the current selection
Returns true if the selection is currently empty
Empties the current selection
Sets the RowMapper instance
Returns the RowMapper instance that is able to map a TreePath to a row
Returns all of the currently selected rows
Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths
Returns the largest value obtained from the RowMapper for the current set of selected TreePaths
Returns true if the row identified by <code>row</code> is selected
Updates this object's mapping from TreePaths to rows
Returns the lead selection index
Returns the last path that was added
Adds a PropertyChangeListener to the listener list
Removes a PropertyChangeListener from the listener list
Adds x to the list of listeners that are notified each time the set of selected TreePaths changes
Removes x from the list of listeners that are notified each time the set of selected TreePaths changes
Returns an iterator over the elements in this set in ascending order
Returns an iterator over the elements in this set in descending order
Returns the number of elements in this set (its cardinality)
Returns {@code true} if this set contains no elements
Returns {@code true} if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Adds all of the elements in the specified collection to this set
Returns a shallow copy of this {@code TreeSet} instance
Creates a <em><a href="Spliterator
Returns the Rectangle enclosing the label portion that the last item in path will be drawn into
Returns the path for passed in row
Returns the row that the last item identified in path is visible at
Returns the number of rows that are being displayed
Returns the path to the node that is closest to x,y
Returns true if the tree is being edited
Stops the current editing session
Cancels the current editing session
Selects the last item in path and tries to edit it
Returns the path to the element that is being edited
The <code>root</code> node of the <code>TreeWalker</code>, as specified when it was created
This attribute determines which node types are presented via the <code>TreeWalker</code>
The filter used to screen nodes
The value of this flag determines whether the children of entity reference nodes are visible to the <code>TreeWalker</code>
The node at which the <code>TreeWalker</code> is currently positioned
The node at which the <code>TreeWalker</code> is currently positioned
Moves to and returns the closest visible ancestor node of the current node
Moves the <code>TreeWalker</code> to the first visible child of the current node, and returns the new node
Moves the <code>TreeWalker</code> to the last visible child of the current node, and returns the new node
Moves the <code>TreeWalker</code> to the previous sibling of the current node, and returns the new node
Moves the <code>TreeWalker</code> to the next sibling of the current node, and returns the new node
Moves the <code>TreeWalker</code> to the previous visible node in document order relative to the current node, and returns the new node
Moves the <code>TreeWalker</code> to the next visible node in document order relative to the current node, and returns the new node
Return the whatToShow value
Return the NodeFilter
Return whether children entity references are included in the iterator
Return the current Node
Return the current Node
Return the parent Node from the current node,  after applying filter, whatToshow
Return the first child Node from the current node,  after applying filter, whatToshow
Return the last child Node from the current node,  after applying filter, whatToshow
Return the previous sibling Node from the current node,  after applying filter, whatToshow
Return the next sibling Node from the current node,  after applying filter, whatToshow
Return the previous Node from the current node,  after applying filter, whatToshow
Return the next Node from the current node,  after applying filter, whatToshow
Invoked whenever a node in the tree is about to be expanded
Invoked whenever a node in the tree is about to be collapsed
Put an object into the trie for lookup
Get an object that matches the key
Allows access to the raster that was in the progress of being decoded may be null, it is likely to be only partially filled with image data
Allows access to the BufferedImage that was in the progress of being decoded, this may be null, it is likely to be only partially filled with image data
Returns the most-trusted CA certificate
Returns the name of the most-trusted CA as an X500Principal
Returns the name of the most-trusted CA in RFC 2253 {@code String} format
Returns the public key of the most-trusted CA
Returns the name constraints parameter
Returns a formatted string describing the {@code TrustAnchor}
Returns a string describing this type, including information about any type parameters
Compares this <code>TypeCode</code> object with the given one, testing for equality
Tests to see if the given <code>TypeCode</code> object is equivalent to this <code>TypeCode</code> object
Strips out all optional name and member name fields, but leaves all alias typecodes intact
Retrieves the kind of this <code>TypeCode</code> object
Retrieves the RepositoryId globally identifying the type of this <code>TypeCode</code> object
Retrieves the simple name identifying this <code>TypeCode</code> object within its enclosing scope
Retrieves the number of members in the type described by this <code>TypeCode</code> object
Retrieves the simple name of the member identified by the given index
Retrieves the <code>TypeCode</code> object describing the type of the member identified by the given index
Retrieves the label of the union member identified by the given index
Returns a <code>TypeCode</code> object describing all non-default member labels
Returns the index of the default member, or -1 if there is no default member
Returns the number of elements in the type described by this <code>TypeCode</code> object
Returns the <code>TypeCode</code> object representing the IDL type for the members of the object described by this <code>TypeCode</code> object
Returns the number of digits in the fixed type described by this <code>TypeCode</code> object
Returns the scale of the fixed type described by this <code>TypeCode</code> object
Returns the constant that indicates the visibility of the member at the given index
Returns a constant indicating the modifier of the value type that this <code>TypeCode</code> object describes
Returns the <code>TypeCode</code> object that describes the concrete base type of the value type that this <code>TypeCode</code> object describes
Reads from <code>input</code> and initalizes the value in this <code>TypeCodeHolder</code> object with the unmarshalled data
Marshals to <code>output</code> the value in this <code>TypeCodeHolder</code> object
Returns the TypeCode corresponding to the value held in this <code>TypeCodeHolder</code> object
The equivalent operation is used by the ORB when determining type equivalence for values stored in an IDL any
This is not a copy of the TypeCodeImpl objects, but instead it copies the value this type code is representing
Get the vendor specific error code
Get the linked exception
Add a linked Exception
Returns a short description of this TypeConstraintException
Prints this TypeConstraintException and its stack trace (including the stack trace of the linkedException if it is non-null) to the PrintStream
Prints this TypeConstraintException and its stack trace (including the stack trace of the linkedException if it is non-null) to <tt>System
Returns the fields, methods, constructors, and member types that are directly declared in this class or interface
Returns the <i>nesting kind</i> of this type element
Returns the fully qualified name of this type element
Returns the simple name of this type element
Returns the direct superclass of this type element
Returns the interface types directly implemented by this class or extended by this interface
Returns the formal type parameters of this type element in declaration order
Returns the package of a top-level type and returns the immediately lexically enclosing element for a {@linkplain NestingKind#isNested nested} type
The name of a type declared for the associated element or attribute, or <code>null</code> if unknown
The namespace of the type declared for the associated element or attribute or <code>null</code> if the element does not have declaration or if no namespace information is available
This method returns if there is a derivation between the reference type definition, i
<p>Returns the immutable {@link TypeInfo} object for the current element
Returns the immutable {@link TypeInfo} object for the specified attribute of the current element
Returns <code>true</code> if the specified attribute is determined to be ID
Returns <code>false</code> if the attribute was added by the validator
Returns {@code true} if this kind corresponds to a primitive type and {@code false} otherwise
Visits a primitive type, dispatching to the visit method for the specific {@linkplain TypeKind kind} of primitive type: {@code BOOLEAN}, {@code BYTE}, etc
Visits a {@code BOOLEAN} primitive type by calling {@code defaultAction}
Visits a {@code BYTE} primitive type by calling {@code defaultAction}
Visits a {@code SHORT} primitive type by calling {@code defaultAction}
Visits an {@code INT} primitive type by calling {@code defaultAction}
Visits a {@code LONG} primitive type by calling {@code defaultAction}
Visits a {@code CHAR} primitive type by calling {@code defaultAction}
Visits a {@code FLOAT} primitive type by calling {@code defaultAction}
Visits a {@code DOUBLE} primitive type by calling {@code defaultAction}
Visits a {@link NoType} instance, dispatching to the visit method for the specific {@linkplain TypeKind kind} of pseudo-type: {@code VOID}, {@code PACKAGE}, or {@code NONE}
Visits a {@link TypeKind#VOID VOID} pseudo-type by calling {@code defaultAction}
Visits a {@link TypeKind#PACKAGE PACKAGE} pseudo-type by calling {@code defaultAction}
Visits a {@link TypeKind#NONE NONE} pseudo-type by calling {@code defaultAction}
This implementation visits a {@code UnionType} by calling {@code defaultAction}
This implementation visits an {@code IntersectionType} by calling {@code defaultAction}
Returns the {@code kind} of this type
Obeys the general contract of {@link Object#equals Object
Obeys the general contract of {@link Object#hashCode Object
Returns an informative string representation of this type
Applies a visitor to this type
Returns the fully qualified name of the unavailable type
Returns the generic class, interface, method, or constructor that is parameterized by this type parameter
Returns the bounds of this type parameter
Returns the {@linkplain TypeParameterElement#getGenericElement generic element} of this type parameter
Return annotations on the type parameter declaration
Returns the element corresponding to a type
Tests whether two {@code TypeMirror} objects represent the same type
Tests whether one type is a subtype of another
Tests whether one type is assignable to another
Tests whether one type argument <i>contains</i> another
Tests whether the signature of one method is a <i>subsignature</i> of another
Returns the direct supertypes of a type
Returns the erasure of a type
Returns the class of a boxed value of a given primitive type
Returns the type (a primitive type) of unboxed values of a given type
Applies capture conversion to a type
Returns a primitive type
Returns the null type
Returns a pseudo-type used where no actual type is appropriate
Returns an array type with the specified component type
Returns a new wildcard type argument
Returns the type corresponding to a type element and actual type arguments
Returns the type corresponding to a type element and actual type arguments, given a {@linkplain DeclaredType#getEnclosingType() containing type} of which it is a member
Returns the type of an element when that element is viewed as a member of, or otherwise directly contained by, a given type
Returns an array of {@code Type} objects representing the upper bound(s) of this type variable
Returns the {@code GenericDeclaration} object representing the generic declaration declared this type variable
Returns the name of this type variable, as it occurs in the source code
Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable
Visits a type
A convenience method equivalent to {@code v
Visits a primitive type
Visits the null type
Visits an array type
Visits a declared type
Visits an error type
Visits a type variable
Visits a wildcard type
Visits an executable type
Visits a {@link NoType} instance
Visits an unknown kind of type
Visits a union type
Visits an intersection type
Read a single character
Read characters into a portion of an array
Skip characters
Tell whether this stream is ready to be read
Tell whether this stream supports the mark() operation
Mark the present position in the stream
Reset the stream
Close the stream
Returns the hash code value for this <code>UID</code>
Compares the specified object with this <code>UID</code> for equality
Returns a string representation of this <code>UID</code>
Marshals a binary representation of this <code>UID</code> to a <code>DataOutput</code> instance
Constructs and returns a new <code>UID</code> instance by unmarshalling a binary representation from an <code>DataInput</code> instance
Returns the value for key
Returns the value for key associated with the given locale
Sets the value of <code>key</code> to <code>value</code> for all locales
Puts all of the key/value pairs in the database and unconditionally generates one <code>PropertyChangeEvent</code>
If the value of <code>key</code> is a <code>Font</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is a <code>Font</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is a <code>Color</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is a <code>Color</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is an <code>Icon</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is an <code>Icon</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is a <code>Border</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is a <code>Border</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is a <code>String</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is a <code>String</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is an <code>Integer</code> return its integer value, otherwise return 0
If the value of <code>key</code> for the given <code>Locale</code> is an <code>Integer</code> return its integer value, otherwise return 0
If the value of <code>key</code> is boolean, return the boolean value, otherwise return false
If the value of <code>key</code> for the given <code>Locale</code> is boolean, return the boolean value, otherwise return false
If the value of <code>key</code> is an <code>Insets</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is an <code>Insets</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> is a <code>Dimension</code> return it, otherwise return <code>null</code>
If the value of <code>key</code> for the given <code>Locale</code> is a <code>Dimension</code> return it, otherwise return <code>null</code>
The value of <code>get(uidClassID)</code> must be the <code>String</code> name of a class that implements the corresponding <code>ComponentUI</code> class
Returns the L&amp;F class that renders this component
If <code>getUI()</code> fails for any reason, it calls this method before returning <code>null</code>
Creates an <code>ComponentUI</code> implementation for the specified component
Adds a <code>PropertyChangeListener</code> to the listener list
Removes a <code>PropertyChangeListener</code> from the listener list
Returns an array of all the <code>PropertyChangeListener</code>s added to this UIDefaults with addPropertyChangeListener()
Support for reporting bound property changes
Adds a resource bundle to the list of resource bundles that are searched for localized values
Removes a resource bundle from the list of resource bundles that are searched for localized defaults
Sets the default locale
Returns the default locale
Creates the actual value retrieved from the <code>UIDefaults</code> table
Creates the value retrieved from the <code>UIDefaults</code> table
Creates the value retrieved from the <code>UIDefaults</code> table
Creates an <code>InputMap</code> with the bindings that are passed in
The <code>view</code> attribute identifies the <code>AbstractView</code>  from which the event was generated
Specifies some detail information about the <code>Event</code>, depending on the type of event
The <code>initUIEvent</code> method is used to initialize the value of a <code>UIEvent</code> created through the <code>DocumentEvent</code> interface
Returns an array of {@code LookAndFeelInfo}s representing the {@code LookAndFeel} implementations currently available
Sets the set of available look and feels
Adds the specified look and feel to the set of available look and feels
Adds the specified look and feel to the set of available look and feels
Returns the current look and feel or <code>null</code>
Sets the current look and feel to {@code newLookAndFeel}
Loads the {@code LookAndFeel} specified by the given class name, using the current thread's context class loader, and passes it to {@code setLookAndFeel(LookAndFeel)}
Returns the name of the <code>LookAndFeel</code> class that implements the native system look and feel if there is one, otherwise the name of the default cross platform <code>LookAndFeel</code> class
Returns the name of the <code>LookAndFeel</code> class that implements the default cross platform look and feel -- the Java Look and Feel (JLF)
Returns the defaults
Returns a font from the defaults
Returns a font from the defaults that is appropriate for the given locale
Returns a color from the defaults
Returns a color from the defaults that is appropriate for the given locale
Returns an <code>Icon</code> from the defaults
Returns an <code>Icon</code> from the defaults that is appropriate for the given locale
Returns a border from the defaults
Returns a border from the defaults that is appropriate for the given locale
Returns a string from the defaults
Returns a string from the defaults that is appropriate for the given locale
Returns an integer from the defaults
Returns an integer from the defaults that is appropriate for the given locale
Returns a boolean from the defaults which is associated with the key value
Returns a boolean from the defaults which is associated with the key value and the given <code>Locale</code>
Returns an <code>Insets</code> object from the defaults
Returns an <code>Insets</code> object from the defaults that is appropriate for the given locale
Returns a dimension from the defaults
Returns a dimension from the defaults that is appropriate for the given locale
Returns an object from the defaults
Returns an object from the defaults that is appropriate for the given locale
Stores an object in the developer defaults
Returns the appropriate {@code ComponentUI} implementation for {@code target}
Returns the {@code UIDefaults} from the current look and feel, that were obtained at the time the look and feel was installed
Adds a <code>LookAndFeel</code> to the list of auxiliary look and feels
Removes a <code>LookAndFeel</code> from the list of auxiliary look and feels
Returns the list of auxiliary look and feels (can be <code>null</code>)
Adds a <code>PropertyChangeListener</code> to the listener list
Removes a <code>PropertyChangeListener</code> from the listener list
Returns an array of all the <code>PropertyChangeListener</code>s added to this UIManager with addPropertyChangeListener()
Returns the name of the look and feel in a form suitable for a menu or other presentation
Returns the name of the class that implements this look and feel
Returns a string that displays and identifies this object's properties
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Tell if this expression or it's subexpressions can traverse outside the current subtree
Set the expression operand for the operation
Execute the operand and apply the unary operation to the result
Apply the operation to two operands, and return the result
Returns a unary operator that always returns its input argument
Returns the cause of this exception
Returns the {@code Throwable} instance wrapped in this {@code UndeclaredThrowableException}, which may be {@code null}
Returns the cause of this exception (the {@code Throwable} instance wrapped in this {@code UndeclaredThrowableException}, which may be {@code null})
Undo the edit
Returns true if this edit may be undone
Re-applies the edit
Returns true if this edit may be redone
Informs the edit that it should no longer be used
Adds an <code>UndoableEdit</code> to this <code>UndoableEdit</code>
Returns true if this <code>UndoableEdit</code> should replace <code>anEdit</code>
Returns true if this edit is considered significant
Returns a localized, human-readable description of this edit, suitable for use in a change log, for example
Returns a localized, human-readable description of the undoable form of this edit, suitable for use as an Undo menu item, for example
Returns a localized, human-readable description of the redoable form of this edit, suitable for use as a Redo menu item, for example
Returns the edit value
An undoable edit happened
Registers an <code>UndoableEditListener</code>
Removes an <code>UndoableEditListener</code>
Returns an array of all the <code>UndoableEditListener</code>s added to this UndoableEditSupport with addUndoableEditListener()
Called only from <code>postEdit</code> and <code>endUpdate</code>
DEADLOCK WARNING: Calling this method may call <code>undoableEditHappened</code> in all listeners
Returns the update level value
Called only from <code>beginUpdate</code>
DEADLOCK WARNING: Calling this method may call <code>undoableEditHappened</code> in all listeners
Returns a string that displays and identifies this object's properties
Returns the maximum number of edits this {@code UndoManager} holds
Empties the undo manager sending each edit a <code>die</code> message in the process
Reduces the number of queued edits to a range of size limit, centered on the index of the next edit
Removes edits in the specified range
Sets the maximum number of edits this <code>UndoManager</code> holds
Returns the the next significant edit to be undone if <code>undo</code> is invoked
Returns the the next significant edit to be redone if <code>redo</code> is invoked
Undoes all changes from the index of the next edit to <code>edit</code>, updating the index of the next edit appropriately
Redoes all changes from the index of the next edit to <code>edit</code>, updating the index of the next edit appropriately
Convenience method that invokes one of <code>undo</code> or <code>redo</code>
Returns true if it is possible to invoke <code>undo</code> or <code>redo</code>
Undoes the appropriate edits
Returns true if edits may be undone
Redoes the appropriate edits
Returns true if edits may be redone
Adds an <code>UndoableEdit</code> to this <code>UndoManager</code>, if it's possible
Turns this <code>UndoManager</code> into a normal <code>CompoundEdit</code>
Convenience method that returns either <code>getUndoPresentationName</code> or <code>getRedoPresentationName</code>
Returns a description of the undoable form of this edit
Returns a description of the redoable form of this edit
An <code>UndoableEditListener</code> method
Returns a string that displays and identifies this object's properties
Returns a clone of the remote object that is distinct from the original
Exports the remote object to make it available to receive incoming calls using an anonymous port
Exports the remote object to make it available to receive incoming calls, using the particular supplied port
Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory
Removes the remote object, obj, from the RMI runtime
Throw an error
Throw an error
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Tests whether the DOM implementation implements a specific feature and that feature is supported by this node
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Set Node data
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
Unimplemented
NEEDSDOC Method adoptNode NEEDSDOC @param source NEEDSDOC (adoptNode) @return
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
<p>EXPERIMENTAL! Based on the <a href='http://www
Retrieves the object associated to a key on a this node
This method returns a specialized object which implements the specialized APIs of the specified feature and version
Tests whether two nodes are equal
DOM Level 3 - Experimental: Look up the namespace URI associated to the given prefix, starting from this node
DOM Level 3: Experimental  This method checks if the specified <code>namespaceURI</code> is the  default namespace or not
DOM Level 3 - Experimental: Look up the prefix associated to the given namespace URI, starting from this node
Returns whether this node is the same node as the given one
This attribute returns the text content of this node and its descendants
This attribute returns the text content of this node and its descendants
Compares a node with this node with regard to their position in the document
The absolute base URI of this node or <code>null</code> if undefined
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental  Normalize document
The configuration used when <code>Document
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
DOM Level 3 WD - Experimental
NON-DOM: set the type of this attribute to be ID type
DOM Level 3: register the given attribute node as an ID attribute
DOM Level 3: register the given attribute node as an ID attribute
DOM Level 3: register the given attribute node as an ID attribute
Method getSchemaTypeInfo
Add a node test to the union list
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator
Initialize the context values for this expression after it is cloned
Add an iterator to the union list
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
This will return an iterator capable of handling the union of paths given
Get the analysis bits for this walker, as defined in the WalkerFactory
Get a cloned LocPathIterator that holds the same position as this iterator
Create a new location path iterator
Initialize the location path iterators
Returns the next node in the set and advances the position of the iterator in the set
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Returns the axis being iterated, if it is known
No arguments to process, so this does nothing
Tell if this expression or it's subexpressions can traverse outside the current subtree
Set the contained step patterns to be tested
Get the contained step patterns to be tested
Test a node to see if it matches any of the patterns in the union
Return the alternatives comprising this union type
Initialize this <code>LoginModule</code>
Authenticate the user (first phase)
Commit the authentication (second phase)
Abort the authentication (second phase)
Logout the user <p> This method removes the Principals associated with the <code>Subject</code>
Return the user's group identification number (GID) for this <code>UnixNumericGroupPrincipal</code>
Return the user's group identification number (GID) for this <code>UnixNumericGroupPrincipal</code> as a long
Return whether this group identification number (GID) represents the primary group to which this user belongs
Return a string representation of this <code>UnixNumericGroupPrincipal</code>
Compares the specified Object with this <code>UnixNumericGroupPrincipal</code> for equality
Return a hash code for this <code>UnixNumericGroupPrincipal</code>
Return the user identification number (UID) for this <code>UnixNumericUserPrincipal</code>
Return the user identification number (UID) for this <code>UnixNumericUserPrincipal</code> as a long
Return a string representation of this <code>UnixNumericUserPrincipal</code>
Compares the specified Object with this <code>UnixNumericUserPrincipal</code> for equality
Return a hash code for this <code>UnixNumericUserPrincipal</code>
Return the Unix username for this <code>UnixPrincipal</code>
Return a string representation of this <code>UnixPrincipal</code>
Compares the specified Object with this <code>UnixPrincipal</code> for equality
Return a hash code for this <code>UnixPrincipal</code>
Get the username for the current Unix user
Get the UID for the current Unix user
Get the GID for the current Unix user
Get the supplementary groups for the current Unix user
Returns the unknown annotation value
Returns the additional argument
Returns the unknown element
Returns the additional argument
Returns the unknown conversion
Returns the set of flags which contains an unknown flag
Returns the unknown type
Returns the additional argument
Returns the length of the input
Returns the message
Unmarshal XML data from the specified file and return the resulting content tree
Unmarshal XML data from the specified InputStream and return the resulting content tree
Unmarshal XML data from the specified Reader and return the resulting content tree
Unmarshal XML data from the specified URL and return the resulting content tree
Unmarshal XML data from the specified SAX InputSource and return the resulting content tree
Unmarshal global XML data from the specified DOM tree and return the resulting content tree
Unmarshal XML data by JAXB mapped <tt>declaredType</tt> and return the resulting content tree
Unmarshal XML data from the specified XML Source and return the resulting content tree
Unmarshal XML data from the specified XML Source by <tt>declaredType</tt> and return the resulting content tree
Unmarshal XML data from the specified pull parser and return the resulting content tree
Unmarshal root element to JAXB mapped <tt>declaredType</tt> and return the resulting content tree
Unmarshal XML data from the specified pull parser and return the resulting content tree
Unmarshal root element to JAXB mapped <tt>declaredType</tt> and return the resulting content tree
Get an unmarshaller handler object that can be used as a component in an XML pipeline
Specifies whether or not the default validation mechanism of the <tt>Unmarshaller</tt> should validate during unmarshal operations
Indicates whether or not the <tt>Unmarshaller</tt> is configured to validate during unmarshal operations
Allow an application to register a <tt>ValidationEventHandler</tt>
Return the current event handler or the default event handler if one hasn't been set
Set the particular property in the underlying implementation of <tt>Unmarshaller</tt>
Get the particular property in the underlying implementation of <tt>Unmarshaller</tt>
Specify the JAXP 1
Get the JAXP 1
Associates a configured instance of {@link XmlAdapter} with this unmarshaller
Associates a configured instance of {@link XmlAdapter} with this unmarshaller
Gets the adapter associated with the specified type
<p>Associate a context that resolves cid's, content-id URIs, to binary data passed as attachments
<p> Register unmarshal event callback {@link Listener} with this {@link Unmarshaller}
<p>Return {@link Listener} registered with this {@link Unmarshaller}
<p/> Callback method invoked before unmarshalling into <tt>target</tt>
<p/> Callback method invoked after unmarshalling XML data into <tt>target</tt>
Obtains the unmarshalled result
Called by the RMI runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty
This method always returns false for unresolved permissions
Checks two UnresolvedPermission objects for equality
Returns the hash code value for this object
Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission
Get the type (class name) of the underlying permission that has not been resolved
Get the target name of the underlying permission that has not been resolved
Get the actions for the underlying permission that has not been resolved
Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved
Returns a string describing this UnresolvedPermission
Returns a new PermissionCollection object for storing UnresolvedPermission  objects
Retrieves the referral(s) sent by the server
Retrieves the exception as constructed using information sent by the server
Returns the unsolicited notification
Invokes the <tt>notificationReceived()</tt> method on a listener using this event
Called when an unsolicited notification has been received
Get the unrecognized {@code Callback}
Retrieves the name of the unsupported charset
Creates a URI by parsing the given string
Attempts to parse this URI's authority component, if defined, into user-information, host, and port components
Normalizes this URI's path
Resolves the given URI against this URI
Constructs a new URI by parsing the given string and then resolving it against this URI
Relativizes the given URI against this URI
Constructs a URL from this URI
Returns the scheme component of this URI
Tells whether or not this URI is absolute
Tells whether or not this URI is opaque
Returns the raw scheme-specific part of this URI
Returns the decoded scheme-specific part of this URI
Returns the raw authority component of this URI
Returns the decoded authority component of this URI
Returns the raw user-information component of this URI
Returns the decoded user-information component of this URI
Returns the host component of this URI
Returns the port number of this URI
Returns the raw path component of this URI
Returns the decoded path component of this URI
Returns the raw query component of this URI
Returns the decoded query component of this URI
Returns the raw fragment component of this URI
Returns the decoded fragment component of this URI
Tests this URI for equality with another object
Returns a hash-code value for this URI
Compares this URI to another object, which must be a URI
Returns the content of this URI as a string
Returns the content of this URI as a US-ASCII string
Dereferences the specified <code>URIReference</code> and returns the dereferenced data
Return the URI
Return the reason for the event
Returns the URI
Returns the URI of the referenced data object
Returns the type of data referenced by this URI
Returns the <code>URIReference</code> that was being dereferenced when the exception was thrown
Returns the cause of this <code>URIReferenceException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>URIReferenceException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>URIReferenceException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>URIReferenceException</code>, its backtrace and the cause's backtrace to the specified print writer
Called by the processor when it encounters an xsl:include, xsl:import, or document() function
Returns this URI attribute's URI value
Returns a hashcode for this URI attribute
Returns whether this URI attribute is equivalent to the passed in object
Returns a String identifying this URI attribute
Returns the input string
Returns a string explaining why the input string could not be parsed
Returns an index into the input string of the position at which the parse error occurred, or {@code -1} if this position is not known
Returns a string describing the parse error
Gets the query part of this {@code URL}
Gets the path part of this {@code URL}
Gets the userInfo part of this {@code URL}
Gets the authority part of this {@code URL}
Gets the port number of this {@code URL}
Gets the default port number of the protocol associated with this {@code URL}
Gets the protocol name of this {@code URL}
Gets the host name of this {@code URL}, if applicable
Gets the file name of this {@code URL}
Gets the anchor (also known as the "reference") of this {@code URL}
Compares this URL for equality with another object
Creates an integer suitable for hash table indexing
Compares two URLs, excluding the fragment component
Constructs a string representation of this {@code URL}
Constructs a string representation of this {@code URL}
Returns a {@link java
Returns a {@link java
Same as {@link #openConnection()}, except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection
Opens a connection to this {@code URL} and returns an {@code InputStream} for reading from that connection
Gets the contents of this URL
Gets the contents of this URL
Sets an application's {@code URLStreamHandlerFactory}
Returns an input stream for reading the specified resource
Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader
Appends the specified URL to the list of URLs to search for classes and resources
Returns the search path of URLs for loading classes and resources
Finds and loads the class with the specified name from the URL search path
Defines a new package by name in this ClassLoader
Finds the resource with the specified name on the URL search path
Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name
Returns the permissions for the given codesource object
Creates a new instance of URLClassLoader for the specified URLs and parent class loader
Creates a new instance of URLClassLoader for the specified URLs and default parent class loader
Loads filename map (a mimetable) from a data file
Sets the FileNameMap
Opens a communications link to the resource referenced by this URL, if such a connection has not already been established
Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection
Returns setting for connect timeout
Sets the read timeout to a specified timeout, in milliseconds
Returns setting for read timeout
Returns the value of this {@code URLConnection}'s {@code URL} field
Returns the value of the {@code content-length} header field
Returns the value of the {@code content-length} header field as a long
Returns the value of the {@code content-type} header field
Returns the value of the {@code content-encoding} header field
Returns the value of the {@code expires} header field
Returns the value of the {@code date} header field
Returns the value of the {@code last-modified} header field
Returns the value of the named header field
Returns an unmodifiable Map of the header fields
Returns the value of the named field parsed as a number
Returns the value of the named field parsed as a number
Returns the value of the named field parsed as date
Returns the key for the {@code n}<sup>th</sup> header field
Returns the value for the {@code n}<sup>th</sup> header field
Retrieves the contents of this URL connection
Retrieves the contents of this URL connection
Returns a permission object representing the permission necessary to make the connection represented by this object
Returns an input stream that reads from this open connection
Returns an output stream that writes to this connection
Returns a {@code String} representation of this URL connection
Sets the value of the {@code doInput} field for this {@code URLConnection} to the specified value
Returns the value of this {@code URLConnection}'s {@code doInput} flag
Sets the value of the {@code doOutput} field for this {@code URLConnection} to the specified value
Returns the value of this {@code URLConnection}'s {@code doOutput} flag
Set the value of the {@code allowUserInteraction} field of this {@code URLConnection}
Returns the value of the {@code allowUserInteraction} field for this object
Sets the default value of the {@code allowUserInteraction} field for all future {@code URLConnection} objects to the specified value
Returns the default value of the {@code allowUserInteraction} field
Sets the value of the {@code useCaches} field of this {@code URLConnection} to the specified value
Returns the value of this {@code URLConnection}'s {@code useCaches} field
Sets the value of the {@code ifModifiedSince} field of this {@code URLConnection} to the specified value
Returns the value of this object's {@code ifModifiedSince} field
Returns the default value of a {@code URLConnection}'s {@code useCaches} flag
Sets the default value of the {@code useCaches} field to the specified value
Sets the general request property
Adds a general request property specified by a key-value pair
Returns the value of the named general request property for this connection
Returns an unmodifiable Map of general request properties for this connection
Sets the default value of a general request property
Returns the value of the default request property
Sets the {@code ContentHandlerFactory} of an application
Tries to determine the content type of an object, based on the specified "file" component of a URL
Tries to determine the type of an input stream based on the characters at the beginning of the input stream
Decodes a {@code x-www-form-urlencoded} string
Decodes a {@code application/x-www-form-urlencoded} string using a specific encoding scheme
Translates a string into {@code x-www-form-urlencoded} format
Translates a string into {@code application/x-www-form-urlencoded} format using a specific encoding scheme
Returns the normalized method list and request header list, in the form: <pre>      "method-names : header-names" </pre> <p> where method-names is the list of methods separated by commas and header-names is the list of permitted headers separated by commas
Checks if this URLPermission implies the given permission
Returns true if, this
Returns a hashcode calculated from the hashcode of the actions String and the url string
Opens a connection to the object referenced by the {@code URL} argument
Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection
Parses the string representation of a {@code URL} into a {@code URL} object
Returns the default port for a URL parsed by this handler
Provides the default equals calculation
Provides the default hash calculation
Compare two urls to see whether they refer to the same file, i
Get the IP address of our host
Compares the host components of two URLs
Converts a {@code URL} of a specific protocol to a {@code String}
Sets the fields of the {@code URL} argument to the indicated values
Sets the fields of the {@code URL} argument to the indicated values
Creates a new {@code URLStreamHandler} instance with the specified protocol
Returns the name of the ACL
Checks whether or not the specified user has <CODE>READ</CODE> access
Checks whether or not the specified user and context name have <CODE>READ</CODE> access
Checks whether or not a context name is defined
Checks whether or not the specified user has <CODE>WRITE</CODE> access
Checks whether or not the specified user and context name have <CODE>WRITE</CODE> access
This method is called whenever the node for which this handler is registered is imported or cloned
Returns the name of this attribute view
Returns a list containing the names of the user-defined attributes
Returns the size of the value of a user-defined attribute
Read the value of a user-defined attribute into a buffer
Writes the value of a user-defined attribute from a buffer
Deletes a user-defined attribute
Lookup a user principal by name
Lookup a group principal by group name
Returns the user principal name if this exception was created with the user principal name that was not found, otherwise <tt>null</tt>
Read a single character
Read characters into a portion of an array
Skip characters
Tell whether this stream is ready to be read
Tell whether this stream supports the mark() operation
Mark the present position in the stream
Reset the stream
Close the stream
Search for both slashes in order to support URLs and files
Search for both slashes in order to support URLs and files
Replace all illegal Java chars by '_'
Replace a certain character in a string with a new substring
Replace occurances of '
Checks if the string is a literal (i
Checks if the string is valid list of qnames
Delegation call for {@link Util#mapSystemException}
Delegation call for {@link Util#writeAny}
Delegation call for {@link Util#readAny}
Delegation call for {@link Util#writeRemoteObject}
Delegation call for {@link Util#writeAbstractObject}
Delegation call for {@link Util#registerTarget}
Delegation call for {@link Util#unexportObject}
Delegation call for {@link Util#getTie}
Delegation call for {@link Util#createValueHandler}
Delegation call for {@link Util#getCodebase}
Delegation call for {@link Util#loadClass}
Delegation call for {@link Util#isLocal}
Delegation call for {@link Util#wrapException}
Delegation call for {@link Util#copyObject}
Delegation call for {@link Util#copyObjects}
Draws the given text, expanding any tabs that are contained using the given tab expansion technique
Determines the width of the given segment of text taking tabs into consideration
Determines the relative offset into the given text that best represents the given span in the view coordinate system
Determine where to break the given text to fit within the given span
Determines the starting row model position of the row that contains the specified model position
Determines the ending row model position of the row that contains the specified model position
Determines the position in the model that is closest to the given view location in the row above
Determines the position in the model that is closest to the given view location in the row below
Determines the start of a word for the given model location
Determines the end of a word for the given location
Determines the start of the next word for the given location
Determine the start of the prev word for the given location
Determines the element to use for a paragraph/line
Convert bit field of flags into string such as `static final'
Convert bit field of flags into string such as `static final'
Disassemble a byte array of JVM byte codes starting from code line `index' and return the disassembled string representation
Disassemble a stream of byte codes and return the string representation
Shorten long class names, <em>java/lang/String</em> becomes <em>String</em>
Shorten long class name <em>str</em>, i
Shorten long class names, <em>java/lang/String</em> becomes <em>java
Converts string containing the method return and argument types to a byte code method signature
Converts method signature to string with all class names compacted
A return type signature represents the return value from a method
Replace all occurences of <em>old</em> in <em>str</em> with <em>new</em>
Converts signature to string with all class names compacted
The field signature represents the value of an argument to a function or the value of a variable
Parse Java type such as "char", or "java
Return type of method signature as a byte value as defined in <em>Constants</em>
Return type of signature as a byte value as defined in <em>Constants</em>
Map opcode names to opcode numbers
Convert bytes into hexidecimal string
Return a string for an integer justified left or right and filled up with `fill' characters if necessary
Fillup char with up to length characters with char `fill' and justify it left or right
Encode byte array it into Java identifier string, i
Decode a string back to a byte array
Escape all occurences of newline chars '\n', quotes \", etc
Static factory to retrieve a type 4 (pseudo randomly generated) UUID
Static factory to retrieve a type 3 (name based) {@code UUID} based on the specified byte array
Creates a {@code UUID} from the string standard representation as described in the {@link #toString} method
Returns the least significant 64 bits of this UUID's 128 bit value
Returns the most significant 64 bits of this UUID's 128 bit value
The version number associated with this {@code UUID}
The variant number associated with this {@code UUID}
The timestamp value associated with this UUID
The clock sequence value associated with this UUID
The node value associated with this UUID
Returns a {@code String} object representing this {@code UUID}
Returns a hash code for this {@code UUID}
Compares this object to the specified object
Compares this UUID with the specified UUID
reset the state of this object
Return a string representation of the value
Retrieve the severity code for this warning/error
Retrieve the text message for this warning/error
Retrieve the linked exception for this warning/error
Retrieve the locator for this warning/error
Return an array of ValidationEvent objects containing a copy of each of the collected errors and warnings
Clear all collected errors and warnings
Returns true if this event collector contains at least one ValidationEvent
Receive notification of a validation warning or error
Set the severity field of this event
Set the message field of this event
Set the linked exception field of this event
Set the locator object for this event
Returns a string representation of this object in a format helpful to debugging
Return the name of the XML source as a URL if available
Return the byte offset if available
Return the line number if available
Return the column number if available
Return a reference to the object in the Java content tree if available
Return a reference to the DOM Node if available
Set the URL field on this event locator
Set the offset field on this event locator
Set the lineNumber field on this event locator
Set the columnNumber field on this event locator
Set the Object field on this event locator
Set the Node field on this event locator
Returns a string representation of this object in a format helpful to debugging
Each validator should call this method to add its ValidationState into the validation manager
Set the information required to validate entity values
return null if all IDREF values have a corresponding ID value; otherwise return the first IDREF value without a matching ID value
The same validation state can be used to validate more than one (schema) validation roots
<p>Reset this <code>Validator</code> to its original configuration
Validates the specified input
<p>Validates the specified input and send the augmented validation result to the specified output
Sets the {@link ErrorHandler} to receive errors encountered during the <code>validate</code> method invocation
Gets the current {@link ErrorHandler} set to this {@link Validator}
Sets the {@link LSResourceResolver} to customize resource resolution while in a validation episode
Gets the current {@link LSResourceResolver} set to this {@link Validator}
Look up the value of a feature flag
Set the value of a feature flag
Set the value of a property
Look up the value of a property
Sets the {@link ContentHandler} which receives the augmented validation result
Gets the {@link ContentHandler} which receives the augmented validation result
Sets the {@link ErrorHandler} to receive errors encountered during the validation
Gets the current {@link ErrorHandler} set to this {@link ValidatorHandler}
Sets the {@link LSResourceResolver} to customize resource resolution while in a validation episode
Gets the current {@link LSResourceResolver} set to this {@link ValidatorHandler}
Obtains the {@link TypeInfoProvider} implementation of this {@link ValidatorHandler}
Look up the value of a feature flag
<p>Set a feature for this <code>ValidatorHandler</code>
Set the value of a property
Look up the value of a property
Provides truncatable repository ids
Reads from <code>input</code> and initalizes the value in the Holder with the unmarshalled data
Marshals to <code>output</code> the value in the Holder
Returns the <code>TypeCode</code> object corresponding to the value held in the Holder
Applies the ValueExp on a MBean
Sets the MBean server on which the query is to be performed
Is called by the ORB runtime while in the process of unmarshaling a value type
Writes a value to the stream using Java semantics
Reads a value from the stream using Java semantics
Returns the CORBA RepositoryId for the given Java class
Indicates whether the given class performs custom or default marshaling
Returns the CodeBase for this ValueHandler
If the value contains a <code>writeReplace</code> method then the result is returned
Writes the value to the stream using java semantics
Reads a value from the stream using java semantics
Returns the repository ID for the given RMI value Class
Indicates whether the given Class performs custom or default marshaling
Returns the CodeBase for this ValueHandler
Returns a boolean of whether or not RepositoryId indicates  FullValueDescriptor
If the value contains a writeReplace method then the result is returned
Returns the maximum stream format version for RMI/IDL custom value types that is supported by this ValueHandler object
Allows the ORB to pass the stream format version for RMI/IDL custom value types
The start_value method reads a valuetype header for a nested custom valuetype and increments the valuetype nesting depth
The end_value method reads the end tag for the nested custom valuetype (after skipping any data that precedes the end tag) and decrements the valuetype nesting depth
The start_value method ends any currently open chunk, writes a valuetype header for a nested custom valuetype (with a null codebase and the specified repository ID), and increments the valuetype nesting depth
The end_value method ends any currently open chunk, writes the end tag for the nested custom valuetype, and decrements the valuetype nesting depth
Obtains a fixed value range
Obtains a variable value range
Obtains a fully variable value range
Is the value range fixed and fully known
Gets the minimum value that the field can take
Gets the largest possible minimum value that the field can take
Gets the smallest possible maximum value that the field can take
Gets the maximum value that the field can take
Checks if all values in the range fit in an {@code int}
Checks if the value is within the valid range
Checks if the value is within the valid range and that all values in the range fit in an {@code int}
Checks that the specified value is valid
Checks that the specified value is valid and fits in an {@code int}
Checks if this range is equal to another range
A hash code for this range
Outputs this range as a {@code String}
Adds the specified value to the value store
Since the valueStore will have access to an error reporter, this allows it to be called appropriately
Set the index for the variable into the stack
Set the index for the variable into the stack
Set whether or not this is a global reference
Set the index for the variable into the stack
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Set the qualified name of the variable
Get the qualified name of the variable
Execute an expression in the XPath runtime context, and return the result of the expression
Dereference the variable, and return the reference value
Tell if this expression returns a stable number that will not change during iterations within the expression
Get the analysis bits for this walker, as defined in the WalkerFactory
Tell if this is a psuedo variable reference, declared by Xalan instead of by the user
Returns the value of this variable if this is a {@code final} field initialized to a compile-time constant
Returns the simple name of this variable element
Returns the enclosing element of this variable
Sets the <code>TreeModel</code> that will provide the data
Determines whether or not the root node from the <code>TreeModel</code> is visible
Sets the height of each cell
Sets the renderer that is responsible for drawing nodes in the tree
Marks the path <code>path</code> expanded state to <code>isExpanded</code>
Returns true if the path is expanded, and visible
Returns the <code>Rectangle</code> enclosing the label portion into which the item identified by <code>path</code> will be drawn
Returns the path for <code>row</code>
Returns the row where the last item identified in path is visible
Returns the number of visible rows
Instructs the <code>LayoutCache</code> that the bounds for <code>path</code> are invalid, and need to be updated
Returns the preferred height
Returns the preferred width and height for the region in <code>visibleRegion</code>
Returns the path to the node that is closest to x,y
Returns an <code>Enumerator</code> that increments over the visible paths starting at the passed in location
Returns the number of visible children for <code>path</code>
Informs the <code>TreeState</code> that it needs to recalculate all the sizes it is referencing
Returns true if the value identified by <code>path</code> is currently expanded
Invoked after a node (or a set of siblings) has changed in some way
Invoked after nodes have been inserted into the tree
Invoked after nodes have been removed from the tree
Invoked after the tree has drastically changed structure from a given node down
Dereference the variable, and return the reference value
Returns a clone of this variable stack
Get the element at the given index, regardless of stackframe
Get size of the stack
Reset the stack to a start position
Set the current stack frame
Get the position from where the search should start, which is either the searchStart property, or the top of the stack if that value is -1
Allocates memory (called a stackframe) on the stack; used to store local variables and parameter arguments
Free up the stack frame that was last allocated with {@link #link(int size)}
Free up the stack frame that was last allocated with {@link #link(int size)}
Set a local variable or parameter in the current stack frame
Set a local variable or parameter in the specified stack frame
Get a local variable or parameter in the current stack frame
Get a local variable or parameter in the current stack frame
Get a local variable or parameter in the current stack frame
Tell if a local variable has been set or not
Use this to clear the variables in a section of the stack
Set a global variable or parameter in the global stack frame
Get a global variable or parameter from the global stack frame
Get a global variable or parameter from the global stack frame
Get a variable based on it's qualified name
Copies the components of this vector into the specified array
Trims the capacity of this vector to be the vector's current size
Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument
Sets the size of this vector
Returns the current capacity of this vector
Returns the number of components in this vector
Tests if this vector has no components
Returns an enumeration of the components of this vector
Returns {@code true} if this vector contains the specified element
Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Returns the index of the first occurrence of the specified element in this vector, searching forwards from {@code index}, or returns -1 if the element is not found
Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Returns the index of the last occurrence of the specified element in this vector, searching backwards from {@code index}, or returns -1 if the element is not found
Returns the component at the specified index
Returns the first component (the item at index {@code 0}) of this vector
Returns the last component of the vector
Sets the component at the specified {@code index} of this vector to be the specified object
Deletes the component at the specified index
Inserts the specified object as a component in this vector at the specified {@code index}
Adds the specified component to the end of this vector, increasing its size by one
Removes the first (lowest-indexed) occurrence of the argument from this vector
Removes all components from this vector and sets its size to zero
Returns a clone of this vector
Returns an array containing all of the elements in this Vector in the correct order
Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array
Returns the element at the specified position in this Vector
Replaces the element at the specified position in this Vector with the specified element
Appends the specified element to the end of this Vector
Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged
Inserts the specified element at the specified position in this Vector
Removes the element at the specified position in this Vector
Removes all of the elements from this Vector
Returns true if this Vector contains all of the elements in the specified Collection
Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator
Removes from this Vector all of its elements that are contained in the specified Collection
Retains only the elements in this Vector that are contained in the specified Collection
Inserts all of the elements in the specified Collection into this Vector at the specified position
Compares the specified Object with this Vector for equality
Returns the hash code value for this Vector
Returns a string representation of this Vector, containing the String representation of each element
Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive
Removes from this list all of the elements whose index is between {@code fromIndex}, inclusive, and {@code toIndex}, exclusive
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Returns a list iterator over the elements in this list (in proper sequence)
Returns an iterator over the elements in this list in proper sequence
Creates a <em><a href="Spliterator
Prints out the version number to System
This method gets called when a constrained property is changed
Forwards the property change event to the listener delegate
Returns the name of the named property associated with the listener
Add a VetoableChangeListener to the listener list
Remove a VetoableChangeListener from the listener list
Returns an array of all the listeners that were added to the VetoableChangeSupport object with addVetoableChangeListener()
Add a VetoableChangeListener for a specific property
Remove a VetoableChangeListener for a specific property
Returns an array of all the listeners which have been associated with the named property
Reports a constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports an integer constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name
Reports a boolean constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name
Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name
Check if there are any listeners for a specific property, including those registered on all properties
Returns the parent of the view
Returns a boolean that indicates whether  the view is visible or not
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout
Determines the desired alignment for this view along an axis
Renders using the given rendering surface and area on that surface
Establishes the parent view for this view
Returns the number of views in this view
Gets the <i>n</i>th child view
Removes all of the children
Removes one of the children at the given position
Inserts a single child view
Appends a single child view
Replaces child views
Returns the child view index representing the given position in the model
Fetches the allocation for the given child view
Provides a way to determine the next visually represented model location at which one might place a caret
Provides a mapping, for a given character, from the document model coordinate space to the view coordinate space
Provides a mapping, for a given region, from the document model coordinate space to the view coordinate space
Provides a mapping from the view coordinate space to the logical coordinate space of the model
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
Fetches the model associated with the view
Fetches the portion of the model for which this view is responsible
Fetches the portion of the model for which this view is responsible
Fetches the structural portion of the subject that this view is mapped to
Fetch a <code>Graphics</code> for rendering
Fetches the attributes to use when rendering
Tries to break this view on the given axis
Creates a view that represents a portion of the element
Determines how attractive a break opportunity in this view is
Determines the resizability of the view along the given axis
Sets the size of the view
Fetches the container hosting the view
Fetches the <code>ViewFactory</code> implementation that is feeding the view hierarchy
Returns the tooltip text at the specified location
Returns the child view index representing the given position in the view
Updates the child views in response to receiving notification that the model changed, and there is change record for the element this view is responsible for
Forwards the given <code>DocumentEvent</code> to the child views that need to be notified of the change to the model
Forwards the <code>DocumentEvent</code> to the give child view
Updates the layout in response to receiving notification of change from the model
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it
Provides a mapping from the view coordinate space to the logical coordinate space of the model
This method is used to get the computed style as it is defined in [<a href='http://www
Creates a view from the given structural element of a document
Adds the specified component to the layout
Removes the specified component from the layout
Returns the preferred dimensions for this layout given the components in the specified target container
Returns the minimum dimensions needed to layout the components contained in the specified target container
Called by the AWT when the specified container needs to be laid out
Transfer an element from the real to the virtual stack
Indicate whether the stack is empty
Return value on the top of the stack (without popping it)
Pop the stack
Push a state number onto the stack
Determines whether this bean needs a GUI
This method instructs the bean that it should not use the Gui
This method instructs the bean that it is OK to use the Gui
Determines whether this bean is avoiding using a GUI
Return true if an accurate address can be determined for this host
Compute hash code for this VMID
Compare this VMID to another, and return true if they are the same identifier
Return string representation of this VMID
Translates a void into an object of internal type <code>type</code>
Translates a void into a string by pushing the empty string ''
Translates an external (primitive) Java type into a void
Returns the target method of the call site, which behaves like a {@code volatile} field of the {@code VolatileCallSite}
Updates the target method of this call site, as a volatile variable
{@inheritDoc}
Returns a static snapshot image of this object
Returns the width of the <code>VolatileImage</code>
Returns the height of the <code>VolatileImage</code>
This returns an ImageProducer for this VolatileImage
This method returns a {@link Graphics2D}, but is here for backwards compatibility
Creates a <code>Graphics2D</code>, which can be used to draw into this <code>VolatileImage</code>
Attempts to restore the drawing surface of the image if the surface had been lost since the last <code>validate</code> call
Returns <code>true</code> if rendering data was lost since last <code>validate</code> call
Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this VolatileImage
Returns the transparency
{@inheritDoc}
Sets the <code>address</code> to the <code>W3CEndpointReference</code> instance's <code>wsa:Address</code>
Sets the <code>interfaceName</code> as the <code>wsam:InterfaceName</code> element in the <code>wsa:Metadata</code> element
Sets the <code>serviceName</code> as the <code>wsam:ServiceName</code> element in the <code>wsa:Metadata</code> element
Sets the <code>endpointName</code> as <code>wsam:ServiceName/@EndpointName</code> in the <code>wsa:Metadata</code> element
Sets the <code>wsdlDocumentLocation</code> that will be referenced as <code>wsa:Metadata/@wsdli:wsdlLocation</code>
Adds the <code>referenceParameter</code> to the <code>W3CEndpointReference</code> instance <code>wsa:ReferenceParameters</code> element
Adds the <code>metadataElement</code> to the <code>W3CEndpointReference</code> instance's <code>wsa:Metadata</code> element
Adds an extension element to the <code>W3CEndpointReference</code> instance's <code>wsa:EndpointReference</code> element
Adds an extension attribute to the <code>W3CEndpointReference</code> instance's <code>wsa:EndpointReference</code> element
Builds a <code>W3CEndpointReference</code> from the accumulated properties set on this <code>W3CEndpointReferenceBuilder</code> instance
Create a new LocPathIterator iterator
Special purpose function to see if we can optimize the pattern for a DescendantIterator
Get a corresponding BIT_XXX from an axis
Tell if the predicates need to have proximity knowledge
Tell if the given axis goes downword
Tell if the pattern can be 'walked' with the iteration steps in natural document order, without duplicates
Get the analysis bits for this walker, as defined in the WalkerFactory
Get a cloned WalkingIterator that holds the same position as this iterator
Reset the iterator
Initialize the context values for this expression after it is cloned
Returns the next node in the set and advances the position of the iterator in the set
Get the head of the walker list
Set the head of the walker list
Set the last used walker
Get the last used walker
Detaches the iterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
Returns true if all the nodes in the iteration well be returned in document order
This function is used to perform some extra analysis of the iterator
Registers an object with a watch service
Registers an object with a watch service
Returns the event kind
Returns the event count
Returns the context for the event
Returns the name of the event kind
Returns the type of the {@link WatchEvent#context context} value
Returns the name of the modifier
Tells whether or not this watch key is valid
Retrieves and removes all pending events for this watch key, returning a {@code List} of the events that were retrieved
Resets this watch key
Cancels the registration with the watch service
Returns the object for which this watch key was created
Closes this watch service
Retrieves and removes the next watch key, or {@code null} if none are present
Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present
Retrieves and removes next watch key, waiting if none are yet present
Overrides the method defined in the superclass
Overrides the method defined in the superclass
Returns the number of key-value mappings in this map
Returns <tt>true</tt> if this map contains no key-value mappings
Returns the value to which the specified key is mapped, or {@code null} if this map contains no mapping for the key
Returns <tt>true</tt> if this map contains a mapping for the specified key
Associates the specified value with the specified key in this map
Copies all of the mappings from the specified map to this map
Removes the mapping for a key from this weak hash map if it is present
Removes all of the mappings from this map
Returns <tt>true</tt> if this map maps one or more keys to the specified value
Returns a {@link Set} view of the keys contained in this map
Returns a {@link Collection} view of the values contained in this map
Returns a {@link Set} view of the mappings contained in this map
The local name of the endpoint
Element's local name
Element's namespace name
Fault bean name
wsdl:Message's name
Reads a {@code WebRowSet} object in its XML format from the given {@code Reader} object
Reads a stream based XML input to populate this {@code WebRowSet} object
Populates this {@code WebRowSet} object with the contents of the given {@code ResultSet} object and writes its data, properties, and metadata to the given {@code Writer} object in XML format
Populates this {@code WebRowSet} object with the contents of the given {@code ResultSet} object and writes its data, properties, and metadata to the given {@code OutputStream} object in XML format
Writes the data, properties, and metadata for this {@code WebRowSet} object to the given {@code Writer} object in XML format
Writes the data, properties, and metadata for this {@code WebRowSet} object to the given {@code OutputStream} object in XML format
The local name of the Web service
The namespace for the Web service
The location of the WSDL document for the service (a URL)
Returns the <code>MessageContext</code> for the request being served at the time this method is called
Returns the Principal that identifies the sender of the request currently being serviced
Returns a boolean indicating whether the authenticated user is included in the specified logical role
Returns the <code>EndpointReference</code> for this endpoint
Returns the <code>EndpointReference</code> associated with this endpoint
Get the unique identifier for this WebServiceFeature
Returns <code>true</code> if this feature is enabled
Unique identifier for the WebServiceFeature
The <code>WebServiceFeature</code> bean that is associated with the <code>WebServiceFeature</code> annotation
Location of the WSDL description for the service
Service name
Target namespace for the service
Port name
The JNDI name of the resource
The Java type of the resource
A product specific name that this resource should be mapped to
The service class, alwiays a type extending <code>javax
A URL pointing to the WSDL document for the web service
A portable JNDI lookup name that resolves to the target web service reference
Array used for multiple web service reference declarations
Obtains an instance of {@code WeekFields} appropriate for a locale
Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days
Gets the first day-of-week
Gets the minimal number of days in the first week
Returns a field to access the day of week based on this {@code WeekFields}
Returns a field to access the week of month based on this {@code WeekFields}
Returns a field to access the week of year based on this {@code WeekFields}
Returns a field to access the week of a week-based-year based on this {@code WeekFields}
Returns a field to access the year of a week-based-year based on this {@code WeekFields}
Checks if this {@code WeekFields} is equal to the specified object
A hash code for this {@code WeekFields}
A string representation of this {@code WeekFields} instance
Get information about whether or not an element should strip whitespace
Get information about whether or not whitespace can be stripped
Returns an array of {@code Type} objects representing the  upper bound(s) of this type variable
Returns an array of {@code Type} objects representing the lower bound(s) of this type variable
Returns the sequence of images to be displayed as the icon for this window
Sets the sequence of images to be displayed as the icon for this window
Sets the image to be displayed as the icon for this window
Makes this Window displayable by creating the connection to its native screen resource
{@inheritDoc}
Causes this Window to be sized to fit the preferred size and layouts of its subcomponents
Sets the minimum size of this window to a constant value
{@inheritDoc} <p> The {@code d
{@inheritDoc} <p> The {@code width} and {@code height} values are automatically enlarged if either is less than the minimum size as specified by previous call to {@code setMinimumSize}
{@inheritDoc} <p> The method changes the geometry-related data
{@inheritDoc} <p> The method changes the geometry-related data
Shows or hides this {@code Window} depending on the value of parameter {@code b}
Makes the Window visible
Hide this Window, its subcomponents, and all of its owned children
Releases all of the native screen resources used by this {@code Window}, its subcomponents, and all of its owned children
If this Window is visible, brings this Window to the front and may make it the focused Window
If this Window is visible, sends this Window to the back and may cause it to lose focus or activation if it is the focused or active Window
Returns the toolkit of this frame
Gets the warning string that is displayed with this window
Gets the {@code Locale} object that is associated with this window, if the locale has been set
Gets the input context for this window
Set the cursor image to a specified cursor
Returns the owner of this window
Return an array containing all the windows this window currently owns
Returns an array of all {@code Window}s, both owned and ownerless, created by this application
Returns an array of all {@code Window}s created by this application that have no owner
Specifies the modal exclusion type for this window
Returns the modal exclusion type of this window
Adds the specified window listener to receive window events from this window
Adds the specified window state listener to receive window events from this window
Adds the specified window focus listener to receive window events from this window
Removes the specified window listener so that it no longer receives window events from this window
Removes the specified window state listener so that it no longer receives window events from this window
Removes the specified window focus listener so that it no longer receives window events from this window
Returns an array of all the window listeners registered on this window
Returns an array of all the window focus listeners registered on this window
Returns an array of all the window state listeners registered on this window
Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this {@code Window}
Processes events on this window
Processes window events occurring on this window by dispatching them to any registered WindowListener objects
Processes window focus event occurring on this window by dispatching them to any registered WindowFocusListener objects
Processes window state event occurring on this window by dispatching them to any registered {@code WindowStateListener} objects
Sets whether this window should always be above other windows
Returns whether the always-on-top mode is supported for this window
Returns whether this window is an always-on-top window
Returns the child Component of this Window that has focus if this Window is focused; returns null otherwise
Returns the child Component of this Window that will receive the focus when this Window is focused
Returns whether this Window is active
Returns whether this Window is focused
Gets a focus traversal key for this Window
Does nothing because Windows must always be roots of a focus traversal cycle
Always returns {@code true} because all Windows must be roots of a focus traversal cycle
Always returns {@code null} because Windows have no ancestors; they represent the top of the Component hierarchy
Returns whether this Window can become the focused Window, that is, whether this Window or any of its subcomponents can become the focus owner
Returns whether this Window can become the focused Window if it meets the other requirements outlined in {@code isFocusableWindow}
Sets whether this Window can become the focused Window if it meets the other requirements outlined in {@code isFocusableWindow}
Sets whether this window should receive focus on subsequently being shown (with a call to {@link #setVisible setVisible(true)}), or being moved to the front (with a call to {@link #toFront})
Returns whether this window should receive focus on subsequently being shown (with a call to {@link #setVisible setVisible(true)}), or being moved to the front (with a call to {@link #toFront})
Adds a PropertyChangeListener to the listener list
Adds a PropertyChangeListener to the listener list for a specific property
Indicates if this container is a validate root
Checks if this Window is showing on screen
Sets the type of the window
Returns the type of the window
Gets the AccessibleContext associated with this Window
Sets the location of the window relative to the specified component according to the following scenarios
Creates a new strategy for multi-buffering on this component
Creates a new strategy for multi-buffering on this component with the required buffer capabilities
Returns the {@code BufferStrategy} used by this component
Sets whether this Window should appear at the default location for the native windowing system or at the current location (returned by {@code getLocation}) the next time the Window is made visible
Returns {@code true} if this Window will appear at the default location for the native windowing system the next time this Window is made visible
{@inheritDoc} <p> The {@code width} or {@code height} values are automatically enlarged if either is less than the minimum size as specified by previous call to {@code setMinimumSize}
{@inheritDoc} <p> The {@code r
Returns the opacity of the window
Sets the opacity of the window
Returns the shape of the window
Sets the shape of the window
Gets the background color of this window
Sets the background color of this window
Indicates if the window is currently opaque
{@inheritDoc}
Get the role of this object
Get the state of this object
Invoked when a window has been opened
Invoked when a window is in the process of being closed
Invoked when a window has been closed
Invoked when a window is iconified
Invoked when a window is de-iconified
Invoked when a window is activated
Invoked when a window is de-activated
Invoked when a window state is changed
Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events
Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents
Returns the originator of the event
Returns the other Window involved in this focus or activation change
For <code>WINDOW_STATE_CHANGED</code> events returns the previous state of the window
For <code>WINDOW_STATE_CHANGED</code> events returns the new state of the window
Returns a parameter string identifying this event
Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events
Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents
Invoked the first time a window is made visible
Invoked when the user attempts to close the window from the window's system menu
Invoked when a window has been closed as the result of calling dispose on the window
Invoked when a window is changed from a normal to a minimized state
Invoked when a window is changed from a minimized to a normal state
Invoked when the Window is set to be the active Window
Invoked when a Window is no longer the active Window
Makes this window the topmost window on the desktop
Makes this window the bottommost window on the desktop
Updates the window's always-on-top state
Updates the window's focusable state
Sets if this window is blocked by a modal dialog or not
Updates the minimum size on the peer
Updates the icons for the window
Sets the level of opacity for the window
Enables the per-pixel alpha support for the window
Updates the native part of non-opaque window
Instructs the peer to update the position of the security warning
Returns a  border instance for a Windows Progress Bar
Returns a border instance for a Windows ToolBar
Returns an new instance of a border used to indicate which cell item has focus
Overridden method to render the text without the mnemonic
Method which renders the text of the current menu item
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
If necessary paints the currently selected item
{@inheritDoc}
Creates a layout manager for managing the components which make up the combo box
Creates the default editor that will be used in editable combo boxes
{@inheritDoc}
Creates an button which will be used as the control to show or hide the popup portion of the combo box
{@inheritDoc}
Windows desktop icons are restricted to a width of 160 pixels by default
Creates a UI for a JEditorPane
Creates the object to use for a caret
Creates a selection listener for the list of files and directories
Returns the preferred size of the specified <code>JFileChooser</code>
Returns the minimum size of the <code>JFileChooser</code>
Returns the maximum size of the <code>JFileChooser</code>
Property to remember whether a directory is currently selected in the UI
Renders a text String in Windows without the mnemonic
Initialize the uiClassID to BasicComponentUI mapping
Load the SystemColors into the defaults table
Sets the state of the hide mnemonic flag
Gets the state of the hide mnemonic flag
Gets the state of the flag which indicates if the old Windows look and feel should be rendered
<p> Invoked when the user attempts an invalid operation, such as pasting into an uneditable <code>JTextField</code> that has focus
{@inheritDoc}
Returns an <code>Action</code>
{@inheritDoc}
Method which renders the text of the current menu item
Draws the background of the menu
Method which renders the text of the current menu item
Creates a UI for a JPasswordField
Creates the object to use for a caret
Returns the <code>Popup</code> that will be responsible for displaying the <code>JPopupMenu</code>
Returns the baseline
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Method which renders the text of the current menu item
Overridden method to render the text without the mnemonic
Creates a UI for a JScrollBar
{@inheritDoc}
{@inheritDoc}
Overrides to return a private track listener subclass which handles the HOT, PRESSED, and FOCUSED states
{@inheritDoc}
Paints the divider
Creates a new WindowsSplitPaneUI instance
Creates the default divider
Invoked when window state is changed
Creates the object to use for a caret
Creates a UI for a JTextField
Creates a UI for a JTextField
Paints a background for the view
Creates the caret for a field
Creates a UI for a JTextPane
Creates the object to use for a caret
Creates the object to use for a caret
Overridden method to render the text without the mnemonic
{@inheritDoc}
Ensures that the rows identified by beginRow through endRow are visible
Returns the default cell renderer that is used to do the stamping of each node
Configures the renderer based on the passed in components
While it might make sense to throw an exception here, this causes problems since we need to check whether unusual object references are local or not
Adapter ID is not available, since our ORB did not implement the object carrying this key
This method denotes the actual work that is done by the work item
This methods sets the time in millis in the work item, when this work item was enqueued in the work queue
This methods gets the time in millis in the work item, when this work item was enqueued in the work queue
This method will return the name of the work item
This method is used to add work to the WorkQueue
This method will return the name of the WorkQueue
Returns the total number of Work items added to the Queue
Returns the total number of Work items in the Queue to be processed
Returns the average time a work item is waiting in the queue before getting processed
Set the ThreadPool instance servicing this WorkQueue
Get the ThreadPool instance servicing this WorkQueue
Returns the total number of Work items added to the Queue
Returns the total number of Work items in the Queue to be processed This method is unsynchronized and only gives a snapshot of the state when it is called
Returns the tab size set for the document, defaulting to 8
Renders a line of text, suppressing whitespace at the end and expanding any tabs
Renders the given range in the model as normal unselected text
Renders the given range in the model as selected text
Gives access to a buffer that can be used to fetch text from the associated document
This is called by the nested wrapped line views to determine the break location
Loads all of the children to initialize the view
Returns the next tab stop position after a given reference position
Renders using the given rendering surface and area on that surface
Sets the size of the view
Determines the preferred span for this view along an axis
Determines the minimum span for this view along an axis
Determines the maximum span for this view along an axis
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
Gives notification from the document that attributes were changed in a location that this view is responsible for
Get the checked exception that this runtime exception wraps
Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy
Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does
Writes a sequence of bytes to this channel from the given buffer
Returns the parent WritableRaster (if any) of this WritableRaster,  or else null
Create a WritableRaster with the same size, SampleModel and DataBuffer as this one, but with a different location
Returns a new WritableRaster which shares all or part of this WritableRaster's DataBuffer
Sets the data for a single pixel from a primitive array of type TransferType
Sets the data for a rectangle of pixels from an input Raster
Sets the data for a rectangle of pixels from a primitive array of type TransferType
Copies pixels from Raster srcRaster to this WritableRaster
Copies pixels from Raster srcRaster to this WritableRaster
Sets a pixel in the DataBuffer using an int array of samples for input
Sets a pixel in the DataBuffer using a float array of samples for input
Sets a pixel in the DataBuffer using a double array of samples for input
Sets all samples for a rectangle of pixels from an int array containing one sample per array element
Sets all samples for a rectangle of pixels from a float array containing one sample per array element
Sets all samples for a rectangle of pixels from a double array containing one sample per array element
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element
Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element
Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element
Adds an observer
Removes an observer
Checks out a tile for writing
Relinquishes the right to write to a tile
Returns whether a tile is currently checked out for writing
Returns an array of Point objects indicating which tiles are checked out for writing
Returns whether any tile is checked out for writing
Sets a rect of the image to the contents of the Raster r, which is assumed to be in the same coordinate space as the WritableRenderedImage
Write this object directly to the output stream
Produce the message and include the message from the nested exception, if there is one
Returns the exception that terminated the operation (the <i>cause</i>)
Writes a single character
Writes an array of characters
Writes a portion of an array of characters
Writes a string
Writes a portion of a string
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Flushes the stream
Closes the stream, flushing it first
Returns a string representation of the X
Returns a string representation of the X
Returns a string representation of the X
Returns the distinguished name in ASN
Return a user-friendly string representation of this {@code X500Principal}
Compares the specified {@code Object} with this {@code X500Principal} for equality
Return a hash code for this {@code X500Principal}
Returns the X
Returns the PrivateKey
Returns the KeyStore alias
Clears the references to the X
Determines if the references to the X
Instantiates an X509Certificate object, and initializes it with the data read from the input stream {@code inStream}
Instantiates an X509Certificate object, and initializes it with the specified byte array
Checks that the certificate is currently valid
Checks that the specified date is within the certificate's validity period
Gets the {@code version} (version number) value from the certificate
Gets the {@code serialNumber} value from the certificate
Gets the {@code issuer} (issuer distinguished name) value from the certificate
Gets the {@code subject} (subject distinguished name) value from the certificate
Gets the {@code notBefore} date from the validity period of the certificate
Gets the {@code notAfter} date from the validity period of the certificate
Gets the signature algorithm name for the certificate signature algorithm
Gets the signature algorithm OID string from the certificate
Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm
Method engineResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Sets the certificateEquals criterion
Sets the serialNumber criterion
Sets the issuer criterion
<strong>Denigrated</strong>, use {@linkplain #setIssuer(X500Principal)} or {@linkplain #setIssuer(byte[])} instead
Sets the issuer criterion
Sets the subject criterion
<strong>Denigrated</strong>, use {@linkplain #setSubject(X500Principal)} or {@linkplain #setSubject(byte[])} instead
Sets the subject criterion
Sets the subjectKeyIdentifier criterion
Sets the authorityKeyIdentifier criterion
Sets the certificateValid criterion
Sets the privateKeyValid criterion
Sets the subjectPublicKeyAlgID criterion
Sets the subjectPublicKey criterion
Sets the subjectPublicKey criterion
Sets the keyUsage criterion
Sets the extendedKeyUsage criterion
Enables/disables matching all of the subjectAlternativeNames specified in the {@link #setSubjectAlternativeNames setSubjectAlternativeNames} or {@link #addSubjectAlternativeName addSubjectAlternativeName} methods
Sets the subjectAlternativeNames criterion
Adds a name to the subjectAlternativeNames criterion
Adds a name to the subjectAlternativeNames criterion
Sets the name constraints criterion
Sets the basic constraints constraint
Sets the policy constraint
Sets the pathToNames criterion
Adds a name to the pathToNames criterion
Adds a name to the pathToNames criterion
Returns the certificateEquals criterion
Returns the serialNumber criterion
Returns the issuer criterion as an {@code X500Principal}
<strong>Denigrated</strong>, use {@linkplain #getIssuer()} or {@linkplain #getIssuerAsBytes()} instead
Returns the issuer criterion as a byte array
Returns the subject criterion as an {@code X500Principal}
<strong>Denigrated</strong>, use {@linkplain #getSubject()} or {@linkplain #getSubjectAsBytes()} instead
Returns the subject criterion as a byte array
Returns the subjectKeyIdentifier criterion
Returns the authorityKeyIdentifier criterion
Returns the certificateValid criterion
Returns the privateKeyValid criterion
Returns the subjectPublicKeyAlgID criterion
Returns the subjectPublicKey criterion
Returns the keyUsage criterion
Returns the extendedKeyUsage criterion
Indicates if the {@code X509Certificate} must contain all or at least one of the subjectAlternativeNames specified in the {@link #setSubjectAlternativeNames setSubjectAlternativeNames} or {@link #addSubjectAlternativeName addSubjectAlternativeName} methods
Returns a copy of the subjectAlternativeNames criterion
Returns the name constraints criterion
Returns the basic constraints constraint
Returns the policy criterion
Returns a copy of the pathToNames criterion
Return a printable representation of the {@code CertSelector}
Decides whether a {@code Certificate} should be selected
Returns a copy of this object
Compares this CRL for equality with the given object
Returns a hashcode value for this CRL from its encoded form
Returns the ASN
Verifies that this CRL was signed using the private key that corresponds to the given public key
Verifies that this CRL was signed using the private key that corresponds to the given public key
Verifies that this CRL was signed using the private key that corresponds to the given public key
Gets the {@code version} (version number) value from the CRL
<strong>Denigrated</strong>, replaced by {@linkplain #getIssuerX500Principal()}
Returns the issuer (issuer distinguished name) value from the CRL as an {@code X500Principal}
Gets the {@code thisUpdate} date from the CRL
Gets the {@code nextUpdate} date from the CRL
Gets the CRL entry, if any, with the given certificate serialNumber
Get the CRL entry, if any, for the given certificate
Gets all the entries from this CRL
Gets the DER-encoded CRL information, the {@code tbsCertList} from this CRL
Gets the {@code signature} value (the raw signature bits) from the CRL
Gets the signature algorithm name for the CRL signature algorithm
Gets the signature algorithm OID string from the CRL
Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm
Compares this CRL entry for equality with the given object
Returns a hashcode value for this CRL entry from its encoded form
Returns the ASN
Gets the serial number from this X509CRLEntry, the <em>userCertificate</em>
Get the issuer of the X509Certificate described by this entry
Gets the revocation date from this X509CRLEntry, the <em>revocationDate</em>
Returns true if this CRL entry has extensions
Returns a string representation of this CRL entry
Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry
Sets the issuerNames criterion
<strong>Note:</strong> use {@linkplain #setIssuers(Collection)} instead or only specify the byte array form of distinguished names when using this method
Adds a name to the issuerNames criterion
<strong>Denigrated</strong>, use {@linkplain #addIssuer(X500Principal)} or {@linkplain #addIssuerName(byte[])} instead
Adds a name to the issuerNames criterion
Sets the minCRLNumber criterion
Sets the maxCRLNumber criterion
Sets the dateAndTime criterion
Sets the certificate being checked
Returns the issuerNames criterion
Returns a copy of the issuerNames criterion
Returns the minCRLNumber criterion
Returns the maxCRLNumber criterion
Returns the dateAndTime criterion
Returns the certificate being checked
Returns a printable representation of the {@code X509CRLSelector}
Decides whether a {@code CRL} should be selected
Returns a copy of this object
Returns an {@link java
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
{@inheritDoc}
Returns the key bytes, encoded according to the X
Returns the name of the encoding format associated with this key specification
Check if there is a critical extension that is not supported
Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface
Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface
Gets the DER-encoded OCTET string for the extension value (<em>extnValue</em>) identified by the passed-in {@code oid} String
Returns the X
Returns the serial number of this <code>X509IssuerSerial</code>
Method engineResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Method engineResolvePublicKey
Method engineResolveX509Certificate
Method engineResolveSecretKey
Retrieves an <code>XAResource</code> object that the transaction manager will use to manage this <code>XAConnection</code> object's participation in a distributed transaction
Attempts to establish a physical database connection that can be used in a distributed transaction
Attempts to establish a physical database connection, using the given user name and password
Use an XPath string to select a nodelist
Evaluate an XPath string and return true if the output is to be included or not
Clear any context information from this object
Get a new XPathAPI instance
Tell that this is a CLASS_BOOLEAN
Given a request type, return the equivalent string
Cast result object to a number
Cast result object to a boolean
Cast result object to a string
Return a java object that's closest to the representation that should be handed to an extension
Tell if two objects are functionally equal
Tell if two objects are functionally equal
Set the current catalog
Get the current catalog
The SAX <code>setDocumentLocator</code> method does nothing
The SAX <code>startDocument</code> method does nothing
The SAX <code>endDocument</code> method does nothing
The SAX <code>startElement</code> method recognizes elements from the plain catalog format and instantiates CatalogEntry objects for them
The SAX <code>endElement</code> method does nothing
The SAX <code>characters</code> method does nothing
The SAX <code>ignorableWhitespace</code> method does nothing
The SAX <code>processingInstruction</code> method does nothing
Returns true if the specified character is a valid XML character as per the rules of XML 1
Configures the pipeline
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Event sent at the start of the document
Returns true if the element has the namespace "http://www
Checks if the element is an &lt;include&gt; element
Checks if the element is an &lt;fallback&gt; element
Returns true if the current [base URI] is the same as the [base URI] that was in effect on the include parent
Returns true if the current [language] is equivalent to the [language] that was in effect on the include parent, taking case-insensitivity into account as per [RFC 3066]
Checks if the file indicated by the given XMLLocator has already been included in the current stack
Returns true if the current element is a top level included item
Processes the XMLAttributes object of startElement() calls
Returns a URI, relative to the include parent's base URI, of the current [base URI]
Modify the augmentations
Modify the augmentations
Records that an &lt;fallback&gt; was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element
Returns whether an &lt;fallback&gt; was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element
Records that an &lt;include&gt; was encountered at the specified depth, as an ancestor of the current item
Return whether an &lt;include&gt; was encountered at the specified depth, as an ancestor of the current item
Set the parent of this XIncludeHandler in the tree
Caches an unparsed entity
Caches a notation
Checks if an UnparsedEntity with the given name was declared in the DTD of the document for the current pipeline
Checks if a Notation with the given name was declared in the DTD of the document for the current pipeline
The purpose of this method is to check if an UnparsedEntity conflicts with a previously declared entity in the current pipeline stack
The purpose of this method is to check if a Notation conflicts with a previously declared notation in the current pipeline stack
Saves the current base URI to the top of the stack
Discards the URIs at the top of the stack, and restores the ones beneath it
Saves the given language on the top of the stack
Discards the language at the top of the stack, and returns the one beneath it
Gets the base URI that was in use at that depth
Gets the language that was in use at that depth
Returns a relative URI, which when resolved against the base URI at the specified depth, will create the current base URI
Search for a xml:base attribute, and if one is found, put the new base URI into effect
Search for a xml:lang attribute, and if one is found, put the new [language] into effect
Formats a message with the specified arguments using the given locale information
Pushes a new context onto the stack
This method is used to set a context invalid for XInclude namespace processing
This returns the namespace URI which was associated with the given pretext, in the context that existed at the include parent of the current element
Configures the pipeline
Sets the XMLErrorReporter used for reporting errors while reading the text include
Return the Reader for given XMLInputSource
XMLEntityManager cares about endian-ness, since it creates its own optimized readers
Removes the byte order mark from the stream, if it exists and returns the encoding name
REVISIT: This code is taken from com
Read the input stream as text, and pass the text on to the XIncludeHandler using calls to characters()
Sets the input source on this text reader
Closes the stream
Returns true if the specified character is a valid XML character as per the rules of XML 1
Sets the buffer size property for the reader which decides the chunk sizes that are parsed by the reader at a time and passed to the handler
Returns true if the specified character is a space character as amdended in the XML 1
Returns true if the specified character is valid
Returns true if the specified character is invalid
Returns true if the specified character is valid and permitted outside of a character reference
Returns true if the specified character can be considered content in an external parsed entity
Returns true if the specified character can be considered content in an internal parsed entity
Returns true if the specified character is a valid name start character as defined by production [4] in the XML 1
Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1
Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML 1
Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML 1
Returns whether the given character is a valid high surrogate for a name character
Check to see if a string is a valid Name according to [5] in the XML 1
Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1
Check to see if a string is a valid Nmtoken according to [7] in the XML 1
Simple check to determine if qname is legal
Sets the input source for the document to parse
Set the locale to use for messages
Sets the document handler on the last component in the pipeline to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Returns the state of a feature
Set the state of a feature
Returns the value of a property
setProperty
Returns the locale
reset all XML 1
reset all common components before parsing
reset all components before parsing and namespace context
Configures the XML 1
Configures the pipeline
Check a feature
Check a property
Adds a component to the parser configuration
Adds common component to the parser configuration
Adds an XML 1
Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration
Scans element content
Scans an attribute value and normalizes whitespace converting all whitespace characters to space characters
Scans public ID literal
Normalize whitespace in an XMLString converting all whitespace characters to space characters
Normalize whitespace in an XMLString converting all whitespace characters to space characters
Checks whether this string would be unchanged by normalization
Sets the input source for the document to parse
Set the locale to use for messages
Sets the document handler on the last component in the pipeline to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Returns the state of a feature
Set the state of a feature
setProperty
Returns the locale
reset all XML 1
reset all common components before parsing
reset all components before parsing and namespace context
Configures the XML 1
Configures the pipeline
Check a feature
Check a property
Adds a component to the parser configuration
Adds common component to the parser configuration
Adds an XML 1
Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration
return a dtd type of the given name This will call the super class if and only if it does not recognize the passed-in name
get all built-in DVs, which are stored in a Map keyed by the name New XML 1
Scans public ID literal
Normalize whitespace in an XMLString converting all whitespace characters to space characters
Normalize whitespace in an XMLString converting all whitespace characters to space characters
Checks whether this string would be unchanged by normalization
Returns the next character on the input
Returns the next character on the input
Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present
Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present
Returns a string matching the NCName production appearing immediately on the input as a symbol, or null if no NCName string is present
Scans a qualified name from the input, setting the fields of the QName structure appropriately
Scans a range of parsed character data, setting the fields of the XMLString structure, appropriately
Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately
Scans a range of character data up to the specicied delimiter, setting the fields of the XMLString structure, appropriately
Skips a character appearing immediately on the input
Skips space characters appearing immediately on the input
Skips the specified string appearing immediately on the input
Checks that "content" string is valid ID value
Checks that "content" string is valid IDREF value
Checks that "content" string is valid NMTOKEN value
Sets the input source for the document to parse
Set the locale to use for messages
Sets the document handler on the last component in the pipeline to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the resolver used to resolve external entities
Return the current entity resolver
Allow an application to register an error event handler
Return the current error handler
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Parses the specified input source
Returns the state of a feature
Set the state of a feature
setProperty
Returns the locale
reset all XML 1
reset all common components before parsing
reset all components before parsing and namespace context
Configures the XML 1
Configures the pipeline
Check a feature
Check a property
Adds a component to the parser configuration
Adds common component to the parser configuration
Adds an XML 1
Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration
The scanner is responsible for removing DTD validator from the pipeline if it is not needed
Scans a start element
Scans the name of an element in a start or empty tag
Scans the remainder of a start or empty tag after the element name
Scans an attribute
Scans an end element
Creates a content Driver
return the next state on the input
Scan for root element hook
Bind namespaces
Handles end element
Specifies whether fields or properties are serialized
Convert a value type to a bound type
Convert a bound type to a value type
Controls the unmarshaller behavior when it sees elements known to the current {@link JAXBContext}
Specifies the {@link DomHandler} which is responsible for actually converting XML from/to a DOM-like data structure
Name of the XML Schema attribute
Specifies if the XML Schema attribute is optional or required
Specifies the XML target namespace of the XML Schema attribute
setValues
clear
Adds an attribute
Removes all of the attributes
Removes the attribute at the specified index
Returns the number of attributes in the list
Look up the index of an attribute by XML 1
Look up the index of an attribute by Namespace name
Sets the name of the attribute at the specified index
Sets the fields in the given QName structure with the values of the attribute name at the specified index
Returns the prefix of the attribute at the specified index
Look up an attribute's Namespace URI by index
Look up an attribute's local name by index
Look up an attribute's XML 1
Sets the type of the attribute at the specified index
Look up an attribute's type by index
Look up an attribute's type by XML 1
Look up an attribute's type by Namespace name
Sets the value of the attribute at the specified index
Look up an attribute's value by index
Look up an attribute's value by XML 1
Look up an attribute's value by Namespace name
Sets the non-normalized value of the attribute at the specified index
Returns the non-normalized value of the attribute at the specified index
Sets whether an attribute is specified in the instance document or not
Returns true if the attribute is specified in the instance document
Look up an augmentation by attribute's index
Look up an augmentation by namespace name
Look up an augmentation by XML 1
Sets the augmentations of the attribute at the specified index
Sets whether namespace processing is being performed
Adds an attribute
Removes all of the attributes
Removes the attribute at the specified index
Sets the name of the attribute at the specified index
Sets the fields in the given QName structure with the values of the attribute name at the specified index
Sets the type of the attribute at the specified index
Sets the value of the attribute at the specified index
Sets the non-normalized value of the attribute at the specified index
Returns the non-normalized value of the attribute at the specified index
Sets whether an attribute is specified in the instance document or not
Returns true if the attribute is specified in the instance document
Return the number of attributes in the list
Look up an attribute's type by index
Look up an attribute's type by XML 1
Look up an attribute's value by index
Look up an attribute's value by XML 1
Return the name of an attribute in this list (by position)
Look up the index of an attribute by XML 1
Look up the index of an attribute by Namespace name
Look up the index of an attribute by local name only, ignoring its namespace
Look up an attribute's local name by index
Look up an attribute's XML 1
Look up an attribute's type by Namespace name
Look up the index of an attribute by XML 1
Adds an attribute
Checks for duplicate expanded names (local part and namespace name pairs) in the attribute specification
Look up the index of an attribute by Namespace name
Returns the position in the table view where the given attribute name would be hashed
Returns the position in the table view where the given attribute name would be hashed
Purges all elements from the table view
Prepares the table view of the attributes list for use
Prepares the table view of the attributes list for use, and populates it with the attributes which have been previously read
Returns the prefix of the attribute at the specified index
Look up an attribute's Namespace URI by index
Look up an attribute's value by Namespace name and Local name
Look up an augmentations by Namespace name
Look up an augmentation by XML 1
Look up an augmentations by attributes index
Sets the augmentations of the attribute at the specified index
Sets the uri of the attribute at the specified index
This method will be invoked by XMLEntityReader before ScannedEntities buffer is reloaded
<p>Returns the initial list of catalog entry files
<p>Sets the initial list of catalog entry files
<p>Forces the cache of catalog mappings to be cleared
<p>Returns the preference for whether system or public matches are preferred
<p>Sets the preference for whether system or public matches are preferred
<p>Returns the preference for whether the literal system identifier should be used when resolving system identifiers when both it and the expanded system identifier are available
<p>Sets the preference for whether the literal system identifier should be used when resolving system identifiers when both it and the expanded system identifier are available
<p>Resolves an external entity
<p>Resolves an external entity
<p>Locates an external subset for documents which do not explicitly provide one
<p>Resolves a resource using the catalog
<p>Resolves an external entity
<p>Resolves an identifier using the catalog
<p>Returns the URI mapping in the catalog for the given external identifier or <code>null</code> if no mapping exists
<p>Returns the URI mapping in the catalog for the given external identifier or <code>null</code> if no mapping exists
<p>Returns the URI mapping in the catalog for the given URI reference or <code>null</code> if no mapping exists
Returns true if the specified character is a supplemental character
Returns true the supplemental character corresponding to the given surrogates
Returns the high surrogate of a supplemental character
Returns the low surrogate of a supplemental character
Returns whether the given character is a high surrogate
Returns whether the given character is a low surrogate
Returns true if the specified character is valid
Returns true if the specified character is invalid
Returns true if the specified character can be considered content
Returns true if the specified character can be considered markup
Returns true if the specified character is a space character as defined by production [3] in the XML 1
Returns true if the specified character is a valid name start character as defined by production [5] in the XML 1
Returns true if the specified character is a valid name character as defined by production [4] in the XML 1
Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML recommendation
Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation
Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1
Check to see if a string is a valid Name according to [5] in the XML 1
Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1
Check to see if a string is a valid Nmtoken according to [7] in the XML 1
Returns true if the encoding name is a valid IANA encoding
Returns true if the encoding name is a valid Java encoding
Simple check to determine if qname is legal
Returns whether the specified <var>ch</var> conforms to the XML 1
Tell if the string is whitespace
Tell if the string is whitespace
Tell if the string is whitespace
Set the Serializer algorithm to use
Get the Serializer algorithm to use
Returns an <code>XMLCipher</code> that implements the specified transformation and operates on the specified context document
Returns an <code>XMLCipher</code> that implements the specified transformation, operates on the specified context document and serializes the document with the specified canonicalization algorithm before it encrypts the document
Returns an <code>XMLCipher</code> that implements the specified transformation, operates on the specified context document and serializes the document with the specified canonicalization algorithm before it encrypts the document
Returns an <code>XMLCipher</code> that implements the specified transformation and operates on the specified context document
Returns an <code>XMLCipher</code> that implements the specified transformation, operates on the specified context document and serializes the document with the specified canonicalization algorithm before it encrypts the document
Returns an <code>XMLCipher</code> that implements the specified transformation, operates on the specified context document and serializes the document with the specified canonicalization algorithm before it encrypts the document
Returns an <code>XMLCipher</code> that implements no specific transformation, and can therefore only be used for decrypt or unwrap operations where the encryption method is defined in the <code>EncryptionMethod</code> element
Returns an <code>XMLCipher</code> that implements no specific transformation, and can therefore only be used for decrypt or unwrap operations where the encryption method is defined in the <code>EncryptionMethod</code> element
Initializes this cipher with a key
Set whether secure validation is enabled or not
This method is used to add a custom {@link KeyResolverSpi} to an XMLCipher
Get the EncryptedData being built <p> Returns the EncryptedData being built during an ENCRYPT operation
Get the EncryptedData being build Returns the EncryptedData being built during an ENCRYPT operation
Set a Key Encryption Key
Martial an EncryptedData Takes an EncryptedData object and returns a DOM Element that represents the appropriate <code>EncryptedData</code> <p> <b>Note:</b> This should only be used in cases where the context document has been passed in via a call to doFinal
Martial an EncryptedData Takes an EncryptedData object and returns a DOM Element that represents the appropriate <code>EncryptedData</code>
Martial an EncryptedKey Takes an EncryptedKey object and returns a DOM Element that represents the appropriate <code>EncryptedKey</code> <p> <b>Note:</b> This should only be used in cases where the context document has been passed in via a call to doFinal
Martial an EncryptedKey Takes an EncryptedKey object and returns a DOM Element that represents the appropriate <code>EncryptedKey</code>
Martial a ReferenceList Takes a ReferenceList object and returns a DOM Element that represents the appropriate <code>ReferenceList</code> <p> <b>Note:</b> This should only be used in cases where the context document has been passed in via a call to doFinal
Martial a ReferenceList Takes a ReferenceList object and returns a DOM Element that represents the appropriate <code>ReferenceList</code>
Process a DOM <code>Document</code> node
Process a DOM <code>Element</code> node
Process the contents of a DOM <code>Element</code> node
Returns an <code>EncryptedData</code> interface
Returns an <code>EncryptedData</code> interface
Returns an <code>EncryptedData</code> interface
Returns an <code>EncryptedData</code> interface
Returns an <code>EncryptedKey</code> interface
Returns an <code>EncryptedKey</code> interface
Encrypts a key to an EncryptedKey structure
Encrypts a key to an EncryptedKey structure
Decrypt a key from a passed in EncryptedKey structure
Decrypt a key from a passed in EncryptedKey structure
Decrypt an EncryptedData element to a byte array
Creates an <code>EncryptedData</code> <code>Element</code>
Creates an <code>EncryptedKey</code> <code>Element</code>
Create an AgreementMethod object
Create a CipherData object
Create a CipherReference object
Create a CipherValue element
Create an EncryptionMethod object
Create an EncryptionProperties element
Create a new EncryptionProperty element
Create a new ReferenceList object
Create a new Transforms object <p> <b>Note</b>: A context document <i>must</i> have been set elsewhere (possibly via a call to doFinal)
Create a new Transforms object Because the handling of Transforms is currently done in the signature code, the creation of a Transforms object <b>requires</b> a context document
Set whether secure validation is enabled or not
Dereferences the input and returns it as a single byte array
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Returns the state of a feature
Returns the state of a feature
Returns the value of a property
Returns the value of a property
Returns the exception type
Returns the feature or property identifier
Clears the values
Sets the values
Sets the values of the specified content spec
Sets the values from the values specified by the given content spec provider and identifier
Returns a hash code for this node
Returns true if the two objects are equal
Fills in the provided content spec structure with content spec information for a unique identifier
Returns the base URI
Sets the base URI
Returns the key selector for finding a key
Sets the key selector for finding a key
Returns a <code>URIDereferencer</code> that is used to dereference {@link URIReference}s
Sets a <code>URIDereferencer</code> that is used to dereference {@link URIReference}s
Returns the namespace prefix that the specified namespace URI is associated with
Maps the specified namespace URI to the specified prefix
Returns the default namespace prefix
Sets the default namespace prefix
Sets the specified property
Returns the value of the specified property
Returns the value to which this context maps the specified key
Associates the specified value with the specified key in this context
This method closes the input stream associated with this stream
Sets the exception handler for this stream to <code>exceptionListener</code>
Gets the exception handler for this stream
Reads the next object from the underlying input stream
Sets the owner of this decoder to <code>owner</code>
Gets the owner of this decoder
Creates a new handler for SAX parser that can be used to parse embedded XML archives created by the {@code XMLEncoder} class
The start of the document fragment
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of a general entity
A comment
A processing instruction
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document fragment
Sets the input source
Scans a document
return the next state on the input
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
setDocumentHandler
Returns the document handler
This method notifies of the start of an entity
This method notifies the end of an entity
Creates a content Driver
Scans an XML or text declaration
Scans a processing data
Scans a comment
Scans a start element
Looks for the close of start tag, i
return the attribute iterator implementation
return if standalone is set
return if the doucment is standalone
Scans an attribute name value pair
Scans element content
Scans a CDATA section
Scans an end element
Scans a character reference
Scans an entity reference
Sets the scanner state
Sets the Driver
Returns the scanner state name
Returns the driver name
this function gets an XMLString (which is used to store the attribute value) from the special pool  maintained for attributes
Implements XMLBufferListener interface
receives callbacks from {@link XMLEntityReader } when buffer is being changed
Check if the element scanned during the start elementmatches the stored element
This function doesn't increase depth
Note that this function is considerably different than nextElement() This function just returns the previously stored elements
returns the current depth
Clears the stack without throwing away existing QName objects
Pushes an element on the stack
Note that this function is considerably different than nextElement() This function just returns the previously stored elements
This function should be called only when element was skipped sucessfully
Check if the element scanned during the start elementmatches the stored element
Returns the next element on the stack
Pops an element off of the stack by setting the values of the specified QName
Reposition the stack
Clears the stack without throwing away existing QName objects
This function is as a result of optimization done for endElement -- we dont need to set the value for every end element encouterd
Drives the parser to the next state/event on the input
SCANNER_STATE_CONTENT and SCANNER_STATE_START_OF_MARKUP are two super states of the parser
Drives the parser to the next state/event on the input
Scan for DOCTYPE hook
Element depth iz zero
Scan for root element hook
End of file hook
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
A comment
A processing instruction
The start of an element
An empty element
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of a general entity
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
Sets the document source
Returns the document source
Sets the input source
Scans a document
Sets the input source
return the state of the scanner
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
This method notifies of the start of an entity
This method notifies the end of an entity
return the next state on the input
Creates a content driver
Scans a doctype declaration
Set the scanner state after scanning DTD
Returns the scanner state name
receives callbacks from {@link XMLEntityReader } when buffer is being changed
Drives the parser to the next state/event on the input
Dispatch an XML "event"
Scan for DOCTYPE hook
Element depth iz zero
Scan for root element hook
End of file hook
Sets the document handler
Returns the document handler
The start of a content model
A content model of ANY
A content model of EMPTY
A start of either a mixed or children content model
The appearance of "#PCDATA" within a group signifying a mixed content model
A referenced element in a mixed or children content model
The separator between choices or sequences of a mixed or children content model
The occurrence count for a child in a children content model or for the mixed content model group
The end of a group for mixed or children content models
The end of a content model
Sets the DTD content model handler
Returns the DTD content model handler
Return the root name of this DTD
The start of the DTD
This method notifies of the start of a parameter entity
Notifies of the presence of a TextDecl line in an entity
This method notifies the end of a parameter entity
The start of the DTD external subset
The end of the DTD external subset
A comment
A processing instruction
An element declaration
The start of an attribute list
An attribute declaration
The end of an attribute list
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The start of a conditional section
Characters within an IGNORE conditional section
The end of a conditional section
The end of the DTD
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Returns the state of a property
Sets the value of a property
Returns the state of a feature
Set the locale to use for messages
Return the Locale the XMLGrammarLoader is using
Sets the error handler
Returns the registered error handler
Sets the entity resolver
Returns the registered entity resolver
Returns a Grammar object by parsing the contents of the entity pointed to by source
Parse a DTD internal and/or external subset and insert the content into the existing DTD grammar owned by the given DTDValidator
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Sets the DTD handler
Returns the DTD handler
Sets the DTD content model handler
Gets the DTD content model handler
The start of the DTD external subset
The end of the DTD external subset
Check standalone entity reference
A comment
A processing instruction
The start of the DTD
Characters within an IGNORE conditional section
Notifies of the presence of a TextDecl line in an entity
This method notifies of the start of a parameter entity
This method notifies the end of a parameter entity
An element declaration
The start of an attribute list
An attribute declaration
The end of an attribute list
An internal entity declaration
An external entity declaration
An unparsed entity declaration
A notation declaration
The start of a conditional section
The end of a conditional section
The end of the DTD
The start of a content model
A content model of ANY
A content model of EMPTY
A start of either a mixed or children content model
The appearance of "#PCDATA" within a group signifying a mixed content model
A referenced element in a mixed or children content model
The separator between choices or sequences of a mixed or children content model
The occurrence count for a child in a children content model or for the mixed content model group
The end of a group for mixed or children content models
The end of a content model
Sets the input source
Scans the internal subset of the document
Scans the external subset of the document
Skip the DTD if javax
Sets the input source
Scans the external subset of the document
Scans the internal subset of the document
Skip the DTD if javax
reset
Returns a list of feature identifiers that are recognized by this component
Returns a list of property identifiers that are recognized by this component
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
setDTDHandler
getDTDHandler
setDTDContentModelHandler
getDTDContentModelHandler
This method notifies of the start of an entity
This method notifies the end of an entity
Sets the scanner state
start a parameter entity dealing with the textdecl if there is any
Dispatch an XML "event"
Scans a processing data
Scans a comment
Scans an element declaration <p> <pre> [45]    elementdecl    ::=    '&lt;!ELEMENT' S Name S contentspec S? '>' [46]    contentspec    ::=    'EMPTY' | 'ANY' | Mixed | children </pre> <p> <strong>Note:</strong> Called after scanning past '&lt;!ELEMENT'
Scans an attlist declaration <p> <pre> [52]  AttlistDecl    ::=   '&lt;!ATTLIST' S Name AttDef* S? '>' [53]  AttDef         ::=   S Name S AttType S DefaultDecl </pre> <p> <strong>Note:</strong> Called after scanning past '&lt;!ATTLIST'
Scans an attribute default declaration <p> <pre> [60] DefaultDecl ::= '#REQUIRED' | '#IMPLIED' | (('#FIXED' S)? AttValue) </pre>
Scans an entity value
Dispatch an XML "event"
Sets the DTD handler
Returns the DTD handler
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Sets the document handler to receive information about the document
Returns the document handler
Sets the document source
Returns the document source
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
A comment
A processing instruction
This method notifies the start of a general entity
This method notifies the end of a general entity
Notifies of the presence of a TextDecl line in an entity
Add default attributes and validate
Checks entities in attribute values for standalone VC
Validate attributes in DTD fashion
Returns true if invalid standalone attribute definition
initialization
Handle element
Handle end element
Returns true if the validator has a DTD grammar
Return true if validator must validate the document
Name of the XML Schema element
Customize the element declaration to be nillable
Customize the element declaration to be required
XML target namespace of the XML Schema element
Default value of this element
The Java class being referenced
scope of the mapping
namespace name of the XML element
local name of the XML element
namespace name of a substitution group's head XML element
XML local name of a substitution group's head element
Default value of this element
The Java type being referenced
This parameter and {@link #name()} are used to determine the XML element for the JavaBean property
Customize the element declaration to be required
Collection of @{@link XmlElement} annotations
Name of the XML wrapper element
XML target namespace of the XML wrapper element
If true, the absence of the collection is represented by using <tt>xsi:nil='true'</tt>
Customize the wrapper element declaration to be required
Sets the owner of this encoder to <code>owner</code>
Gets the owner of this encoder
Write an XML representation of the specified object to the output
Records the Statement so that the Encoder will produce the actual output when the stream is flushed
Records the Expression so that the Encoder will produce the actual output when the stream is flushed
This method writes out the preamble associated with the XML encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time <code>flush</code> was called
This method calls <code>flush</code>, writes the closing postamble and then closes the output stream associated with this stream
setValues
setValues
clear
Sets the name of the entity
Returns the name of the entity
Sets the name of the entity
Returns the name of the entity
<p>Sets the values of this entity description
<p>Sets the values of this entity description
<p>Clears the values
Returns a hash code for this object
Returns a string representation of this object
This method notifies of the start of an entity
This method notifies the end of an entity
Adds an internal entity declaration
Adds an external entity declaration
Adds an unparsed entity declaration
get the entity storage object from entity manager
return the entity responsible for reading the entity
This method uses the passed-in XMLInputSource to make fCurrentEntity usable for reading
Checks whether an entity given by name is external
Checks whether the declaration of an entity given by name is // in the external subset
Sets whether the document entity is standalone
Returns true if the document entity is standalone
Sets the entity handler
Resolves the specified public and system identifiers
Starts a named entity
Starts the document entity
Starts the DTD entity
Starts an entity
Return the current entity being scanned
Return the top level entity handled by this manager, or null if no entity was added
Close all opened InputStreams and Readers opened by this parser
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Sets the value of a property
Returns a list of property identifiers that are recognized by this component
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Expands a system id and returns the system id as a URI, if it can be expanded
Absolutizes a URI using the current value of the "user
Expands a system id and returns the system id as a URI, if it can be expanded
Expands a system id and returns the system id as a URI, if it can be expanded
Attempt to set whether redirects will be followed for an <code>HttpURLConnection</code>
Returns the IANA encoding name that is auto-detected from the bytes specified, with the endian-ness of that encoding where appropriate
Creates a reader capable of reading the given input stream in the specified encoding
Return the public identifier for the current document event
Return the expanded system identifier for the current document event
Return the literal system identifier for the current document event
Return the line number where the current document event ends
Return the column number where the current document event ends
Fixes a platform dependent filename to standard URI form
Resolves an external parsed entity
Resets the components
Resets the component
Returns the XML version of the current entity
Sets the XML version
set the instance of current scanned entity
Returns the base system identifier of the currently scanned entity, or null if none is available
Returns the expanded system identifier
Returns the literal system identifier
Returns the public identifier
the version of the current entity being scanned
Returns the encoding of the current entity
Sets the encoding of the scanner
Returns true if the current entity being scanned is external
Returns the next character on the input
Returns the next character on the input
Returns a string matching the NMTOKEN production appearing immediately on the input as a symbol, or null if NMTOKEN Name string is present
Returns a string matching the Name production appearing immediately on the input as a symbol, or null if no Name string is present
Scans a qualified name from the input, setting the fields of the QName structure appropriately
Checks whether the end of the entity buffer has been reached
If the current entity is an Entity reference, check the accumulated size against the limit
If the current entity is an Entity reference, counts the total nodes in the entity and checks the accumulated value against the limit
Checks whether the value of the specified Limit exceeds its limit
CHANGED: Scans a range of parsed character data, This function appends the character data to the supplied buffer
Scans a range of attribute value data, setting the fields of the XMLString structure, appropriately
Scans a range of character data up to the specified delimiter, setting the fields of the XMLString structure, appropriately
Skips a character appearing immediately on the input
Skips space characters appearing immediately on the input
Skips the specified string appearing immediately on the input
Creates a reader capable of reading the given input stream in the specified encoding
Returns the IANA encoding name that is auto-detected from the bytes specified, with the endian-ness of that encoding where appropriate
Registers the listener object and provides callback
Skips space characters appearing immediately on the input that would match non-terminal S (0x09, 0x0A, 0x0D, 0x20) before end of line normalization is performed
Java type that is mapped to a XML simple type
Reports a warning
Reports an error
Report a fatal error
Sets the current locale
Gets the current locale
Sets the document locator
Registers a message formatter for the specified domain
Returns the message formatter associated with the specified domain, or null if no message formatter is registered for that domain
Removes the message formatter for the specified domain and returns the removed message formatter
Reports an error
Reports an error
Reports an error at a specific location
Reports an error at a specific location
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Get the internal XMLErrrorHandler
Gets the internal XMLErrorHandler as SAX ErrorHandler
Get the association list
Get the lookup table for error messages
Get the lookup table for error messages
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the lookup table for error messages
Get the association list
Get the lookup table for error messages
Get the association list
Get the association list
Returns an integer code for this event
Return the location of this event
A utility function to check if this event is a StartElement
A utility function to check if this event is an Attribute
A utility function to check if this event is a Namespace
A utility function to check if this event is a EndElement
A utility function to check if this event is an EntityReference
A utility function to check if this event is a ProcessingInstruction
A utility function to check if this event is Characters
A utility function to check if this event is a StartDocument
A utility function to check if this event is an EndDocument
Returns this event as a start element event, may result in a class cast exception if this event is not a start element
Returns this event as an end  element event, may result in a class cast exception if this event is not a end element
Returns this event as Characters, may result in a class cast exception if this event is not Characters
This method is provided for implementations to provide optional type information about the associated event
This method will write the XMLEvent as per the XML 1
This method creates an instance of the XMLEventAllocator
This method allocates an event given the current state of the XMLStreamReader
This method allocates an event or set of events given the current state of the XMLStreamReader and adds the event or set of events to the consumer that was passed in
This method adds an event to the consumer
Creates a new instance of the factory in exactly the same manner as the {@link #newFactory()} method
Create a new instance of the factory
Create a new instance of the factory
Create a new instance of the factory
This method allows setting of the Location on each event that is created by this factory
Create a new Attribute
Create a new Attribute
Create a new Attribute
Create a new default Namespace
Create a new Namespace
Create a new StartElement
Create a new StartElement
Create a new StartElement
Create a new StartElement
Create a new EndElement
Create a new EndElement
Create a new EndElement
Create a Characters event, this method does not check if the content is all whitespace
Create a Characters event with the CData flag set to true
Create a Characters event with the isSpace flag set to true
Create an ignorable space
Creates a new instance of a StartDocument event
Creates a new instance of a StartDocument event
Creates a new instance of a StartDocument event
Creates a new instance of a StartDocument event
Creates a new instance of an EndDocument event
Creates a new instance of a EntityReference event
Create a comment
Create a processing instruction
Create a document type definition event This string contains the entire document type declaration that matches the doctypedecl in the XML 1
Get the next XMLEvent
Check if there are more events
Check the next XMLEvent without reading it from the stream
Reads the content of a text-only element
Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached
Get the value of a feature/property from the underlying implementation
Frees any resources associated with this Reader
Writes any cached events to the underlying output mechanism
Frees any resources associated with this stream
Add an event to the output stream Adding a START_ELEMENT will open a new namespace scope that will be closed when the corresponding END_ELEMENT is written
Adds an entire stream to an output stream, calls next() on the inputStream argument until hasNext() returns false This should be treated as a convenience method that will perform the following loop over all the events in an event reader and call add on each event
Gets the prefix the uri is bound to
Sets the prefix the uri is bound to
Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair
Sets the current namespace context for prefix and uri bindings
Returns the current namespace context
Set the parent reader
Get the parent reader
Set the parent reader
Get the parent reader
Set the value of a feature
Look up the value of a feature
Set the value of a property
Look up the value of a property
Set the entity resolver
Get the current entity resolver
Set the DTD event handler
Get the current DTD event handler
Set the content event handler
Get the content event handler
Set the error event handler
Get the current error event handler
Parse a document
Parse a document
Filter an external entity resolution
Filter a notation declaration event
Filter an unparsed entity declaration event
Filter a new document locator event
Filter a start document event
Filter an end document event
Filter a start Namespace prefix mapping event
Filter an end Namespace prefix mapping event
Filter a start element event
Filter an end element event
Filter a character data event
Filter an ignorable whitespace event
Filter a processing instruction event
Filter a skipped entity event
Filter a warning event
Filter an error event
Filter a fatal error event
Format the given message to XML
Return the header string for a set of XML formatted records
Return the tail string for a set of XML formatted records
Parse a grammar from a location identified by an URI
Parse a grammar from a location identified by an XMLInputSource
Return the type of this grammar
Returns a list of feature identifiers that are recognized by this XMLGrammarLoader
Returns the state of a feature
Sets the state of a feature
Returns a list of property identifiers that are recognized by this XMLGrammarLoader
Returns the state of a property
Sets the state of a property
Set the locale to use for messages
Return the Locale the XMLGrammarLoader is using
Sets the error handler
Returns the registered error handler
Sets the entity resolver
Returns the registered entity resolver
Returns a Grammar object by parsing the contents of the entity pointed to by source
<p> retrieve the initial known set of grammars
<p>return the final set of grammars that the validator ended up with
<p> This method requests that the application retrieve a grammar corresponding to the given GrammarIdentifier from its cache
Causes the XMLGrammarPool not to store any grammars when the cacheGrammars(String, Grammar[[]) method is called
Allows the XMLGrammarPool to store grammars when its cacheGrammars(String, Grammar[]) method is called
Removes all grammars from the pool
Puts the specified grammar into the grammar pool and associates it to its root element name or its target namespace
Returns the grammar associated to the specified grammar description
Removes the grammar associated to the specified grammar description from the grammar pool and returns the removed grammar
Returns true if the grammar pool contains a grammar associated to the specified grammar description
This method checks whether two grammars are the same
Returns the hash code value for the given grammar description
Parse a grammar from a location identified by an XMLInputSource
Set the locale to use for messages
Return the Locale the XMLGrammarLoader is using
Sets the error handler
Returns the registered error handler
Sets the entity resolver
Returns the registered entity resolver
Sets the grammar pool
Returns the registered grammar pool
<p>Unset all fields to undefined
<p>Reset this <code>XMLGregorianCalendar</code> to its original values
<p>Set low and high order component of XSD <code>dateTime</code> year field
<p>Set year of XSD <code>dateTime</code> year field
<p>Set month
<p>Set days in month
<p>Set the number of minutes in the timezone offset
<p>Set time as one unit
<p>Set hours
<p>Set minutes
<p>Set seconds
<p>Set milliseconds
<p>Set fractional seconds
<p>Set time as one unit, including the optional infinite precision fractional seconds
<p>Set time as one unit, including optional milliseconds
<p>Return high order component for XML Schema 1
<p>Return low order component for XML Schema 1
<p>Return XML Schema 1
<p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}
Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}
Return timezone offset in minutes or {@link DatatypeConstants#FIELD_UNDEFINED} if this optional field is not defined
Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}
Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}
<p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}
<p>Return millisecond precision of {@link #getFractionalSecond()}
<p>Return fractional seconds
<p>Compare two instances of W3C XML Schema 1
<p>Normalize this instance to UTC
<p>Compares this calendar to the specified object
<p>Returns a hash code consistent with the definition of the equals method
<p>Return the lexical representation of <code>this</code> instance
<p>Return the name of the XML Schema date/time type that this instance maps to
<p>Returns a <code>String</code> representation of this <code>XMLGregorianCalendar</code> <code>Object</code>
Validate instance by <code>getXMLSchemaType()</code> constraints
<p>Add <code>duration</code> to this instance
<p>Convert this <code>XMLGregorianCalendar</code> to a {@link GregorianCalendar}
<p>Convert this <code>XMLGregorianCalendar</code> along with provided parameters to a {@link GregorianCalendar} instance
<p>Returns a <code>java
<p>Creates and returns a copy of this object
<p>Create a Java representation of XML Schema builtin datatype <code>dateTime</code>
<p>Create a Java instance of XML Schema builtin datatype dateTime
<p>Create a Java representation of XML Schema builtin datatype <code>dateTime</code>
<p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>
Create a Java instance of XML Schema builtin datatype <code>time</code>
<p>Create a Java instance of XML Schema builtin datatype time
<p>Create a Java instance of XML Schema builtin datatype time
<p>Return high order component for XML Schema 1
<p>Return low order component for XML Schema 1
<p>Return XML Schema 1
<p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}
Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}
Return timezone offset in minutes or {@link DatatypeConstants#FIELD_UNDEFINED} if this optional field is not defined
Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}
Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}
<p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}
<p>Return millisecond precision of {@link #getFractionalSecond()}
<p>Return fractional seconds
<p>Set low and high order component of XSD <code>dateTime</code> year field
<p>Set year of XSD <code>dateTime</code> year field
<p>Set month
<p>Set days in month
<p>Set the number of minutes in the timezone offset
<p>Set time as one unit
<p>Set time as one unit, including the optional infinite precison fractional seconds
<p>Set time as one unit, including optional milliseconds
<p>Compare two instances of W3C XML Schema 1
<p>Normalize this instance to UTC
<p>Indicates whether parameter <code>obj</code> is "equal to" this one
<p>Returns a hash code consistent with the definition of the equals method
<p>Constructs a new XMLGregorianCalendar object by parsing its lexical string representation as defined in <a href="http://www
<p>Return the lexical representation of <code>this</code> instance
<p>Return the name of the XML Schema date/time type that this instance maps to
Validate instance by <code>getXMLSchemaType()</code> constraints
<p>Add <code>duration</code> to this instance
<p>Convert <code>this</code> to <code>java
<p>Convert <code>this</code> along with provided parameters to <code>java
<p>Returns a <code>java
<p>Creates and returns a copy of this object
<p>Unset all fields to undefined
<p><code>reset()</code> is designed to allow the reuse of existing <code>XMLGregorianCalendar</code>s thus saving resources associated  with the creation of new <code>XMLGregorianCalendar</code>s
Creates a new instance of the factory in exactly the same manner as the {@link #newFactory()} method
Create a new instance of the factory
Create a new instance of the factory
Create a new instance of the factory
Create a new XMLStreamReader from a reader
Create a new XMLStreamReader from a JAXP source
Create a new XMLStreamReader from a java
Create a new XMLStreamReader from a java
Create a new XMLStreamReader from a java
Create a new XMLStreamReader from a java
Create a new XMLEventReader from a reader
Create a new XMLEventReader from a reader
Create a new XMLEventReader from an XMLStreamReader
Create a new XMLEventReader from a JAXP source
Create a new XMLEventReader from a java
Create a new XMLEventReader from a java
Create a new XMLEventReader from a java
Create a filtered reader that wraps the filter around the reader
Create a filtered event reader that wraps the filter around the event reader
The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance
The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance
The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance
The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance
Allows the user to set specific feature/property on the underlying implementation
Get the value of a feature/property from the underlying implementation
Query the set of properties that this factory supports
Set a user defined event allocator for events
Gets the allocator used by streams created with this factory
Sets the public identifier
Returns the public identifier
Sets the system identifier
Returns the system identifier
Sets the base system identifier
Returns the base system identifier
Sets the byte stream
Returns the byte stream
Sets the character stream
Returns the character stream
Sets the encoding of the stream
Returns the encoding of the stream, or null if not known
Points to the class that converts a value type to a bound type or vice versa
If this annotation is used at the package level, then value of the type() must be specified
Collection of @{@link XmlJavaTypeAdapter} annotations
Add the value to the current max count for the specified property To find the max value of all entities, set no limit
Add the value to the current count by the index of the property
Return the value of the current max count for the specified property
Return the total value accumulated so far
Return the current max value (count or length) by the index of a property
Stop tracking the entity
Resets the current value of the specified limit
Returns the public identifier
Returns the literal system identifier
Returns the base system identifier
Returns the expanded system identifier
Returns the line number, or <code>-1</code> if no line number is available
Returns the column number, or <code>-1</code> if no column number is available
Returns the character offset, or <code>-1</code> if no character offset is available
Returns the encoding of the current entity
Returns the XML version of the current entity
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Formats a message with the specified arguments using the given locale information
Set the Locale object to use
Get the Locale object that is being used
Creates a message from the specified key and replacement arguments, localized to the given locale
Creates a message from the specified key and replacement arguments, localized to the given locale
The textual representation of the MIME type, such as "image/jpeg" "image/*", "text/xml; charset=iso-8859-1" and so on
Sets whether the namespace binder only passes the prefix mapping events to the registered document handler or passes all document events
Returns true if the namespace binder only passes the prefix mapping events to the registered document handler; false if the namespace binder passes all document events
Resets the component
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property during parsing
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Sets the document handler to receive information about the document
Returns the document handler
Sets the document source
Returns the document source
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
A comment
A processing instruction
Binds the namespaces
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
This method notifies the end of a general entity
Handles start element
Handles end element
setValues
clear
Namespace prefix
Namespace URI
Resets the fields of this scanner
return the next state on the input
The scanner is responsible for removing DTD validator from the pipeline if it is not needed
Scans a start element
Scans an attribute
Creates a content driver
Scan for root element hook
Bind namespaces
Handles end element
Returns an {@link java
Returns the Id of this <code>XMLObject</code>
Returns the mime type of this <code>XMLObject</code>
Returns the encoding URI of this <code>XMLObject</code>
Creates a new instance of the factory in exactly the same manner as the {@link #newFactory()} method
Create a new instance of the factory
Create a new instance of the factory
Create a new instance of the factory
Create a new XMLStreamWriter that writes to a writer
Create a new XMLStreamWriter that writes to a stream
Create a new XMLStreamWriter that writes to a stream
Create a new XMLStreamWriter that writes to a JAXP result
Create a new XMLEventWriter that writes to a JAXP result
Create a new XMLEventWriter that writes to a stream
Create a new XMLEventWriter that writes to a stream
Create a new XMLEventWriter that writes to a writer
Allows the user to set specific features/properties on the underlying implementation
Get a feature/property on the underlying implementation
Query the set of properties that this factory supports
Query the state of a feature
parse
reset all components before parsing
Parse an XML document
Allows a parser to add parser specific features to be recognized and managed by the parser configuration
Sets the state of a feature
Returns the state of a feature
Allows a parser to add parser specific properties to be recognized and managed by the parser configuration
Sets the value of a property
Returns the value of a property
Sets the error handler
Returns the registered error handler
Sets the document handler to receive information about the document
Returns the registered document handler
Sets the DTD handler
Returns the registered DTD handler
Sets the DTD content model handler
Returns the registered DTD content model handler
Sets the entity resolver
Returns the registered entity resolver
Set the locale to use for messages
Returns the locale
Sets the input source for the document to parse
Parses the document in a pull parsing fashion
If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing
Look up the value of a feature flag
Set the value of a feature flag
Look up the value of a property
Set the value of a property
Allow an application to register an entity resolver
Return the current entity resolver
Allow an application to register a DTD event handler
Return the current DTD handler
Allow an application to register a content event handler
Return the current content handler
Allow an application to register an error event handler
Return the current error handler
Parse an XML document
Parse an XML document from a system identifier (URI)
Set the locale for error reporting
Register the entity resolver
Register the DTD event handler
Register the SAX1 document event handler
Register the error event handler
Parse the document
Parse the document
Set a document locator
Start document event
End document event
Adapt a SAX2 start prefix mapping event
Adapt a SAX2 end prefix mapping event
Adapt a SAX2 start element event
Adapt a SAX2 end element event
Adapt a SAX2 characters event
Adapt a SAX2 ignorable whitespace event
Adapt a SAX2 processing instruction event
Adapt a SAX2 skipped entity event
Attempt to create an XMLReader from system defaults
Attempt to create an XML reader from a class name
Retrieves the singleton reader manager
Retrieves a cached XMLReader for this thread, or creates a new XMLReader, if the existing reader is in use
Mark the cached XMLReader as available
Return the state of the services mechanism feature
Set the state of the services mechanism feature
Set feature
Get property value
Set property
Report the desired message in an application specific format
Retrieves a resource
Sets the public identifier
Returns the public identifier
Sets the expanded system identifier
Returns the expanded system identifier
Sets the literal system identifier
Returns the literal system identifier
Setsthe base URI against which the literal SystemId is to be        resolved
<p> Returns the base URI against which the literal SystemId is to be        resolved
Sets the namespace of the resource
Returns the namespace of the resource
Sets the values of the resource identifier
Sets the values of the resource identifier
Clears the values
Sets the public identifier
Sets the literal system identifier
Sets the base system identifier
Sets the expanded system identifier
Sets the namespace of the resource
Returns the public identifier
Returns the literal system identifier
Returns the base URI against which the literal SystemId is to be resolved
Returns the expanded system identifier
Returns the namespace of the resource
Returns a hash code for this object
Returns a string representation of this object
namespace name of the XML element
local name of the XML element
Sets the value of a property during parsing
Scans an XML or text declaration
Scans a pseudo attribute
Scans a processing instruction
Scans a processing data
Scans a comment
Scans an attribute value and normalizes whitespace converting all whitespace characters to space characters
Resolves character entity references
Scans External ID and return the public and system IDs
Scans public ID literal
Normalize whitespace in an XMLString converting all whitespace characters to space characters
This method notifies of the start of an entity
This method notifies the end of an entity
Scans a character reference and append the corresponding chars to the specified buffer
Scans surrogates and append them to the specified buffer
Convenience function used in all XML scanners
Customize the namespace URI, prefix associations
Name of the XML namespace
Namespace qualification for elements
Namespace qualification for attributes
Indicates that this namespace (specified by {@link #namespace()}) has a schema already available exeternally, available at this location
Get the context
If the context is "include" or "redefine", then return the target namespace of the enclosing schema document; otherwise, the expected target namespace of this document
For import and references from the instance document, it's possible to have multiple hints for one namespace
If a call is triggered by an element/attribute/xsi:type in the instance, this call returns the name of such triggering component: the name of the element/attribute, or the value of the xsi:type
If a call is triggered by an attribute or xsi:type, then this method returns the enclosing element of such element
If a call is triggered by an element/attribute/xsi:type in the instance, this call returns all attribute of such element (or enclosing element)
<p>Is specified schema supported by this <code>SchemaFactory</code>?</p>
Returns a list of feature identifiers that are recognized by this XMLGrammarLoader
Returns the state of a feature
Sets the state of a feature
Returns a list of property identifiers that are recognized by this XMLGrammarLoader
Returns the state of a property
Sets the state of a property
Set the locale to use for messages
Return the Locale the XMLGrammarLoader is using
Sets the error handler
Returns the registered error handler
Sets the entity resolver
Returns the registered entity resolver
Returns a Grammar object by parsing the contents of the entities pointed to by sources
Returns a Grammar object by parsing the contents of the entity pointed to by source
This method tries to resolve location of the given schema
If this annotation is used at the package level, then value of the type() must be specified
Collection of @{@link XmlSchemaType} annotations
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
Sets the document handler to receive information about the document
Returns the document handler
Sets the document source
Returns the document source
The start of the document
Notifies of the presence of an XMLDecl line in the document
Notifies of the presence of the DOCTYPE line in the document
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
The end of the document
This method notifies the start of a general entity
Notifies of the presence of a TextDecl line in an entity
A comment
A processing instruction
This method notifies the end of a general entity
Start the value scope for the specified identity constraint
Request to activate the specified field
Ends the value scope for the specified identity constraint
Sets whether the given field is permitted to match a value
Returns whether the given field is permitted to match a value
Resets the XPath matcher stack
Returns the size of the stack
Returns the count of XPath matchers
Adds a matcher
Returns the XPath matcher at the specified index
Pushes a new context onto the stack
Pops a context off of the stack
Start scope for value store
Ends scope for value store
Signals the end of the document
Adds the specified value to the value store
Returns true if this value store contains the locally scoped value stores
Returns -1 if this value store contains the specified values, otherwise the index of the first field in the key sequence
Returns a string of the specified values
Returns a string of the specified values
Returns a string representation of this object
Called when a duplicate value is added
Called when a duplicate value is added
End document
Resets the identity constraint cache
endElement():  merges contents of fGlobalIDConstraintMap with the top of fGlobalMapStack into fGlobalIDConstraintMap
Initializes the value stores for the specified element declaration
Returns the value store associated to the specified IdentityConstraint
Returns the global value store associated to the specified IdentityConstraint
Check identity constraints
Returns a string representation of this object
Returns the length of the vector
Adds the value to the vector
Returns the short value at the specified position in the vector
Clears the vector
Returns whether the short is contained in the vector
Method getMsgID
Method printStackTrace
Method printStackTrace
Method printStackTrace
Method getOriginalException
Setting FEATURE_SECURE_PROCESSING explicitly
Return the state of secure processing
Set limit by property name and state
Set the value for a specific limit
Set the value of a property by its index
Set the value of a property by its index
Return the value of the specified property
Return the value of the specified property
Return the value of a property by its ordinal
Return the value of a property by its ordinal
Return the state of the limit property
Return the state of the limit property
Get the index by property name
Check if there's no limit defined by the Security Manager
Check if the size (length or count) of the specified limit property is over the limit
Check if the value (length or count) of the specified limit property is over the limit
Check against cumulated value
Indicate if a property is set explicitly
Prints out warnings if a parser does not support the specified feature/property
Convert a value set through setProperty to XMLSecurityManager
Set limit by property name and state
Set the value for a specific property
Set the value of a property by its index
Return the value of the specified property
Return the value of the specified property
Return the value of a property by its ordinal
Get the index by property name
Method getMsgID
Method printStackTrace
Method printStackTrace
Method printStackTrace
Method getOriginalException
This methods turns on namespace fixup algorithm during DOM serialization
Called to serialize the document's DOCTYPE by the root element
Called to serialize a DOM element
print text data
DOM Level 3: Check a node to determine if it contains unbound namespace prefixes
Validates the signature according to the <a href="http://www
Returns the key info of this <code>XMLSignature</code>
Returns the signed info of this <code>XMLSignature</code>
Returns an {@link java
Returns the optional Id of this <code>XMLSignature</code>
Returns the signature value of this <code>XMLSignature</code>
Signs this <code>XMLSignature</code>
Returns the result of the {@link KeySelector}, if specified, after this <code>XMLSignature</code> has been signed or validated
Returns the optional <code>Id</code> attribute of this <code>SignatureValue</code>, which permits this element to be referenced from elsewhere
Returns the signature value of this <code>SignatureValue</code>
Validates the signature value
Returns the cause of this <code>XMLSignatureException</code> or <code>null</code> if the cause is nonexistent or unknown
Prints this <code>XMLSignatureException</code>, its backtrace and the cause's backtrace to the standard error stream
Prints this <code>XMLSignatureException</code>, its backtrace and the cause's backtrace to the specified print stream
Prints this <code>XMLSignatureException</code>, its backtrace and the cause's backtrace to the specified print writer
Returns an <code>XMLSignatureFactory</code> that supports the specified XML processing mechanism and representation type (ex: "DOM")
Returns an <code>XMLSignatureFactory</code> that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied by the specified provider
Returns an <code>XMLSignatureFactory</code> that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied by the specified provider
Returns an <code>XMLSignatureFactory</code> that supports the default XML processing mechanism and representation type ("DOM")
Returns the type of the XML processing mechanism and representation supported by this <code>XMLSignatureFactory</code> (ex: "DOM")
Returns the provider of this <code>XMLSignatureFactory</code>
Creates an <code>XMLSignature</code> and initializes it with the contents of the specified <code>SignedInfo</code> and <code>KeyInfo</code> objects
Creates an <code>XMLSignature</code> and initializes it with the specified parameters
Creates a <code>Reference</code> with the specified URI and digest method
Creates a <code>Reference</code> with the specified parameters
Creates a <code>Reference</code> with the specified parameters and pre-calculated digest value
Creates a <code>Reference</code> with the specified parameters
Creates a <code>SignedInfo</code> with the specified canonicalization and signature methods, and list of one or more references
Creates a <code>SignedInfo</code> with the specified parameters
Creates an <code>XMLObject</code> from the specified parameters
Creates a <code>Manifest</code> containing the specified list of {@link Reference}s
Creates a <code>Manifest</code> containing the specified list of {@link Reference}s and optional id
Creates a <code>SignatureProperty</code> containing the specified list of {@link XMLStructure}s, target URI and optional id
Creates a <code>SignatureProperties</code> containing the specified list of {@link SignatureProperty}s and optional id
Creates a <code>DigestMethod</code> for the specified algorithm URI and parameters
Creates a <code>SignatureMethod</code> for the specified algorithm URI and parameters
Creates a <code>Transform</code> for the specified algorithm URI and parameters
Creates a <code>Transform</code> for the specified algorithm URI and parameters
Creates a <code>CanonicalizationMethod</code> for the specified algorithm URI and parameters
Creates a <code>CanonicalizationMethod</code> for the specified algorithm URI and parameters
Returns a <code>KeyInfoFactory</code> that creates <code>KeyInfo</code> objects
Unmarshals a new <code>XMLSignature</code> instance from a mechanism-specific <code>XMLValidateContext</code> instance
Unmarshals a new <code>XMLSignature</code> instance from a mechanism-specific <code>XMLStructure</code> instance
Indicates whether a specified feature is supported
Returns a reference to the <code>URIDereferencer</code> that is used by default to dereference URIs in {@link Reference} objects
Check if the structure needs to be expanded
Set if the structure needs to be expanded
Returns the node set from input which was specified as the parameter of {@link XMLSignatureInput} constructor
Get the Input NodeSet
Returns the node set from input which was specified as the parameter of {@link XMLSignatureInput} constructor
Returns the Octet stream(byte Stream) from input which was specified as the parameter of {@link XMLSignatureInput} constructor
Returns the byte array from input which was specified as the parameter of {@link XMLSignatureInput} constructor
Determines if the object has been set up with a Node set
Determines if the object has been set up with an Element
Determines if the object has been set up with an octet stream
Determines if {@link #setOutputStream} has been called with a non-null OutputStream
Determines if the object has been set up with a ByteArray
Is the object correctly set up?
Returns mimeType
Sets mimeType
Return SourceURI
Sets SourceURI
Method toString
Method getHTMLRepresentation
Method getHTMLRepresentation
Gets the exclude node of this XMLSignatureInput
Sets the exclude node of this XMLSignatureInput
Gets the node of this XMLSignatureInput
Method getHTMLRepresentation
setValues
Set values
clear
Gets the nested exception
Gets the location of the exception
Get the value of a feature/property from the underlying implementation
Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks
Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event
Reads the content of a text-only element, an exception is thrown if this is not a text-only element
Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached
Returns true if there are more parsing events and false if there are no more events
Frees any resources associated with this Reader
Return the uri for the given prefix
Returns true if the cursor points to a start tag (otherwise false)
Returns true if the cursor points to an end tag (otherwise false)
Returns true if the cursor points to a character data event
Returns true if the cursor points to a character data event that consists of all whitespace
Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality
Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE
Returns the qname of the attribute at the provided index
Returns the namespace of the attribute at the provided index
Returns the localName of the attribute at the provided index
Returns the prefix of this attribute at the provided index
Returns the XML type of the attribute at the provided index
Returns the value of the attribute at the index
Returns a boolean which indicates if this attribute was created by default
Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE
Returns the prefix for the namespace declared at the index
Returns the uri for the namespace declared at the index
Returns a read only namespace context for the current position
Returns an integer code that indicates the type of the event the cursor is pointing to
Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD
Returns an array which contains the characters from this event
Gets the the text associated with a CHARACTERS, SPACE or CDATA event
Returns the offset into the text character array where the first character (of this text event) is stored
Returns the length of the sequence of characters for this Text event within the text character array
Return input encoding if known or null if unknown
Return true if the current event has text, false otherwise The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE
Return the current location of the processor
Returns a QName for the current START_ELEMENT or END_ELEMENT event
Returns the (local) name of the current event
returns true if the current event has a name (is a START_ELEMENT or END_ELEMENT) returns false otherwise
If the current event is a START_ELEMENT or END_ELEMENT  this method returns the URI of the prefix or the default namespace
Returns the prefix of the current event or null if the event does not have a prefix
Get the xml version declared on the xml declaration Returns null if none was declared
Get the standalone declaration from the xml declaration
Checks if standalone was set in the document
Returns the character encoding declared on the xml declaration Returns null if none was declared
Get the target of a processing instruction
Get the data section of a processing instruction
This function tells if this instances is available for reuse
Resets this instance so that this instance is ready for reuse
Frees any resources associated with this Reader
Returns the character encoding declared on the xml declaration Returns null if none was declared
Return input encoding if known or null if unknown
Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD
Get the data section of a processing instruction
Get the target of a processing instruction
Get the XML language version of the current document being parsed
this Funtion returns true if the current event has name
Returns true if the cursor points to a character data event that consists of all whitespace  Application calling this method needs to cache the value and avoid calling this method again  for the same event
Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE
Returns the localName of the attribute at the provided index
Returns the namespace of the attribute at the provided index
Returns the prefix of this attribute at the provided index
Returns the qname of the attribute at the provided index
Returns the XML type of the attribute at the provided index
Returns the value of the attribute at the index
Reads the content of a text-only element
Return the current location of the processor
Returns a QName for the current START_ELEMENT or END_ELEMENT event
Returns a read only namespace context for the current position
Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE
Returns the prefix for the namespace declared at the index
Returns the uri for the namespace declared at the index
Get the value of a feature/property from the underlying implementation
Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, or the String value of the DTD
Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event
Gets the the text associated with a CHARACTERS, SPACE or CDATA event
Return true if the current event has text, false otherwise The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT
Returns a boolean which indicates if this attribute was created by default
Returns true if the cursor points to a character data event
Skips any insignificant events (COMMENT and PROCESSING_INSTRUCTION) until a START_ELEMENT or END_ELEMENT is reached
Checks if standalone was set in the document
Return the uri for the given prefix
Writes a start tag to the output
Writes a start tag to the output
Writes a start tag to the output
Writes an empty element tag to the output
Writes an empty element tag to the output
Writes an empty element tag to the output
Writes an end tag to the output relying on the internal state of the writer to determine the prefix and local name of the event
Closes any start tags and writes corresponding end tags
Close this writer and free any resources associated with the writer
Write any cached data to the underlying output mechanism
Writes an attribute to the output stream without a prefix
Writes an attribute to the output stream
Writes an attribute to the output stream
Writes a namespace to the output stream If the prefix argument to this method is the empty string, "xmlns", or null this method will delegate to writeDefaultNamespace
Writes the default namespace to the stream
Writes an xml comment with the data enclosed
Writes a processing instruction
Writes a processing instruction
Writes a CData section
Write a DTD section
Writes an entity reference
Write the XML Declaration
Write the XML Declaration
Write the XML Declaration
Write text to the output
Write text to the output
Gets the prefix the uri is bound to
Sets the prefix the uri is bound to
Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair
Sets the current namespace context for prefix and uri bindings
Returns the current namespace context
Get the value of a feature/property from the underlying implementation
Directly call the characters method on the passed ContentHandler for the string-value
Directly call the comment method on the passed LexicalHandler for the string-value
Conditionally trim all leading and trailing whitespace in the specified String
Returns the length of this string
Returns the character at the specified index
Copies characters from this string into the destination character array
Compares this string to the specified object
Compares this string to the specified <code>String</code>
Compares this string to the specified object
Compares this <code>String</code> to another <code>String</code>, ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically, ignoring case considerations
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix
Tests if this string starts with the specified prefix
Tests if this string ends with the specified suffix
Returns a hashcode for this string
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
Returns the index within this string of the last occurrence of the specified character
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
Returns the index within this string of the rightmost occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring
Returns a new string that is a substring of this string
Returns a new string that is a substring of this string
Concatenates the specified string to the end of this string
Converts all of the characters in this <code>String</code> to lower case using the rules of the given <code>Locale</code>
Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the given locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the default locale, which is returned by <code>Locale
Removes white space from both ends of this string
This object (which is already a string!) is itself returned
Tell if this object contains a java String object
Convert a string to a double -- Allowed input is in fixed notation ddd
Clears the string buffer
append
append
append
append
Directly call the characters method on the passed ContentHandler for the string-value
Directly call the comment method on the passed LexicalHandler for the string-value
Conditionally trim all leading and trailing whitespace in the specified String
Returns the length of this string
Returns the character at the specified index
Copies characters from this string into the destination character array
Compares this string to the specified <code>String</code>
Compares this string to the specified object
Compares this string to the specified object
Compares this <code>String</code> to another <code>String</code>, ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically, ignoring case considerations
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix
Tests if this string starts with the specified prefix
Tests if this string ends with the specified suffix
Returns a hashcode for this string
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
Returns the index within this string of the last occurrence of the specified character
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
Returns the index within this string of the rightmost occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring
Returns a new string that is a substring of this string
Returns a new string that is a substring of this string
Concatenates the specified string to the end of this string
Converts all of the characters in this <code>String</code> to lower case using the rules of the given <code>Locale</code>
Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the given locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the default locale, which is returned by <code>Locale
Removes white space from both ends of this string
This object (which is already a string!) is itself returned
Tell if this object contains a java String object
Convert a string to a double -- Allowed input is in fixed notation ddd
Create a new XMLString from a Java string
Create a XMLString from a FastStringBuffer
Create a XMLString from a FastStringBuffer
Get a cheap representation of an empty string
Create a new XMLString from a Java string
Create a XMLString from a FastStringBuffer
Create a XMLString from a FastStringBuffer
Get a cheap representation of an empty string
Get the XMLStringFactory to pass to DTM construction
Create a new XMLString from a Java string
Create a XMLString from a FastStringBuffer
Create a XMLString from a FastStringBuffer
Get a cheap representation of an empty string
Indicates whether a specified feature is supported
Name of the XML Schema type which the class is mapped
Specifies the order for XML Schema elements when class is mapped to a XML Schema complex type
Name of the target namespace of the XML Schema type
Class containing a no-arg factory method for creating an instance of this class
Name of a no-arg factory method in the class specified in <tt>factoryClass</tt> factoryClass()
Set the prefix for the digital signature namespace
Set the prefix for the digital signature 1
Set the prefix for the encryption namespace
Set the prefix for the encryption namespace 1
Outputs a DOM tree to an {@link OutputStream}
Outputs a DOM tree to an {@link OutputStream}
Serializes the <CODE>contextNode</CODE> into the OutputStream, <I>but suppresses all Exceptions</I>
Method getFullTextChildrenFromElement
Creates an Element in the XML Signature specification namespace
Creates an Element in the XML Signature 1
Creates an Element in the XML Encryption specification namespace
Creates an Element in the XML Encryption 1
Returns true if the element is in XML Signature namespace and the local name equals the supplied one
Returns true if the element is in XML Signature 1
Returns true if the element is in XML Encryption namespace and the local name equals the supplied one
Returns true if the element is in XML Encryption 1
This method returns the owner document of a particular node
This method returns the first non-null owner document of the Nodes in this Set
Method createDSctx
Method addReturnToElement
Method convertNodelistToSet
This method spreads all namespace attributes in a DOM document to their children
Method getStrFromNode
Returns true if the descendantOrSelf is on the descendant-or-self axis of the context node
Returns the attribute value for the attribute with the specified name
This method is a tree-search to help prevent against wrapping attacks
This method is a tree-search to help prevent against wrapping attacks
Reset the reference to the appropriate scanner given the version of the document and start document scanning
This methods scans the XML declaration to find out the version (and provisional encoding)  of the document
Writes the given <code>WebRowSet</code> object to the specified <code>java
Method getCertificateBytes
Method getX509Certificate
Method getPublicKey
Method getCRLBytes
Method getAlgorithmAttr
Method getAlgorithm
Method getDigestBytes
Method getDigestBytesFromCert
Method getSerialNumber
Method getSerialNumberInteger
Method getIssuerName
Method getSKIBytes
Method getSKIBytesFromCert
Method getSubjectName
Returns the wrapped exception
Tell that this is a CLASS_NODESET
Given a request type, return the equivalent string
Get numeric value of the string conversion from a single node
Cast result object to a number
Cast result object to a number, but allow side effects, such as the incrementing of an iterator
Cast result object to a boolean
Cast result object to a boolean, but allow side effects, such as the incrementing of an iterator
Get the string conversion from a single node
Directly call the characters method on the passed ContentHandler for the string-value
Cast result object to an XMLString
Cast result object to a string
Cast result object to a string
Return a java object that's closest to the representation that should be handed to an extension
Cast result object to a nodelist
Cast result object to a nodelist
Return the iterator without cloning, etc
Cast result object to a nodelist
Get a fresh copy of the object
Cast result object to a mutableNodeset
Tell if one object is less than the other
Tell if one object is less than the other
Tell if one object is less than or equal to the other
Tell if one object is less than the other
Tell if one object is less than the other
Tell if two objects are functionally equal
Tell if two objects are functionally not equal
Return the original DOM object that the user passed in
Cast result object to a nodelist
Cast result object to a nodelist
Tell what kind of class this is
Given a request type, return the equivalent string
Cast result object to a number
Cast result object to a boolean
Cast result object to a string
Cast result object to a result tree fragment
Tell if two objects are functionally equal
Tell that this is a CLASS_NUMBER
Given a request type, return the equivalent string
Cast result object to a number
Evaluate expression to a number
Cast result object to a boolean
Cast result object to a string
Return a java object that's closest to the representation that should be handed to an extension
Tell if two objects are functionally equal
Tell if this expression returns a stable number that will not change during iterations within the expression
For support of literal objects in xpaths
Specify if it's OK for detach to release the iterator for reuse
Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Forces the object to release it's resources
Reset for fresh reuse
Directly call the characters method on the passed ContentHandler for the string-value
Create the right XObject based on the type of the object passed
Create the right XObject based on the type of the object passed
Tell what kind of class this is
Given a request type, return the equivalent string
Cast result object to a number
Cast result object to a number, but allow side effects, such as the incrementing of an iterator
Cast result object to a boolean
Cast result object to a boolean, but allow side effects, such as the incrementing of an iterator
Cast result object to a string
Cast result object to a string
Return the string representation of the object
Cast result object to a result tree fragment
Cast result object to a result tree fragment
For functions to override
For functions to override
Return a java object that's closest to the representation that should be handed to an extension
Cast result object to a nodelist
Get a fresh copy of the object
Cast result object to a nodelist
Cast result object to a nodelist
Cast result object to a nodelist
Cast object to type t
Tell if one object is less than the other
Tell if one object is less than or equal to the other
Tell if one object is greater than the other
Tell if one object is greater than or equal to the other
Tell if two objects are functionally equal
Tell if two objects are functionally not equal
Tell the user of an error, and probably throw an exception
Tell the user of an error, and probably throw an exception
XObjects should not normally need to fix up variables
Cast result object to a string
Create the right XObject based on the type of the object passed
Create the right XObject based on the type of the object passed
<p>Reset this <code>XPath</code> to its original configuration
<p>Establish a variable resolver
<p>Return the current variable resolver
<p>Establish a function resolver
<p>Return the current function resolver
<p>Establish a namespace context
<p>Return the current namespace context
<p>Compile an XPath expression for later evaluation
<p>Evaluate an <code>XPath</code> expression in the specified context and return the result as the specified type
<p>Evaluate an XPath expression in the specified context and return the result as a <code>String</code>
<p>Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as the specified type
<p>Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as a <code>String</code>
Creates a new XPath2FilterContainer with the filter type "intersect"
Creates a new XPath2FilterContainer with the filter type "subtract"
Creates a new XPath2FilterContainer with the filter type "union"
Method newInstances
Creates a XPath2FilterContainer from an existing Element; needed for verification
Returns <code>true</code> if the <code>Filter</code> attribute has value "intersect"
Returns <code>true</code> if the <code>Filter</code> attribute has value "subtract"
Returns <code>true</code> if the <code>Filter</code> attribute has value "union"
Returns the XPath 2 Filter String
Returns the first Text node which contains information from the XPath 2 Filter String
Method getBaseLocalName
Method getBaseNamespace
Creates a new XPath2FilterContainer04 with the filter type "intersect"
Creates a new XPath2FilterContainer04 with the filter type "subtract"
Creates a new XPath2FilterContainer04 with the filter type "union"
Creates a XPath2FilterContainer04 from an existing Element; needed for verification
Returns <code>true</code> if the <code>Filter</code> attribute has value "intersect"
Returns <code>true</code> if the <code>Filter</code> attribute has value "subtract"
Returns <code>true</code> if the <code>Filter</code> attribute has value "union"
Returns the XPath 2 Filter String
Returns the first Text node which contains information from the XPath 2 Filter String
Use an XPath string to select a single node
Use an XPath string to select a single node
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Use an XPath string to select a nodelist
Evaluate XPath string to an XObject
Evaluate XPath string to an XObject
Evaluate XPath string to an XObject
Sets the TEXT value of the <CODE>ds:XPath</CODE> Element
Returns the TEXT value of the <CODE>ds:XPath</CODE> Element
Return the DTMManager object
Set the state of the secure processing feature
Return the state of the secure processing feature
Get an instance of a DTM, loaded with the content from the specified source
Get an instance of a DTM that "owns" a node handle
Given a W3C DOM node, try and return a DTM handle
%TBD% Doc
Creates an empty <code>DocumentFragment</code> object
Release a DTM either to a lru pool, or completely remove reference
Create a new <code>DTMIterator</code> based on an XPath <a href="http://www
Create a new <code>DTMIterator</code> based on an XPath <a href="http://www
Create a new <code>DTMIterator</code> based only on a whatToShow and a DTMFilter
Create a new <code>DTMIterator</code> that holds exactly one node
Reset for new run
Set the current locater in the stylesheet
Set the current locater in the stylesheet
Push a slot on the locations stack so that setSAXLocator can be repeatedly called
Pop the current locater
Get the current locater in the stylesheet
Get the "owner" context of this context, which should be, in the case of XSLT, the Transformer object
Get the variable stack, which is in charge of variables and parameters
Get the variable stack, which is in charge of variables and parameters
Get the SourceTreeManager associated with this execution context
Set the SourceTreeManager associated with this execution context
Get the ErrorListener where errors and warnings are to be reported
Set the ErrorListener where errors and warnings are to be reported
Get the URIResolver associated with this execution context
Set the URIResolver associated with this execution context
Get primary XMLReader associated with this execution context
Set primary XMLReader associated with this execution context
Get the current context node list
Set the current context node list
Pop the current context node list
Get the current context node
Set the current context node and expression node
Set the current context node
Push the current context node, expression node, and prefix resolver
Pop the current context node, expression node, and prefix resolver
Set the current context node
Pop the current context node
Set the current predicate root
Pop the current predicate root
Get the current predicate root
Set the current location path iterator root
Pop the current location path iterator root
Get the current location path iterator root
Get the current node that is the expression's context (i
Set the current node that is the expression's context (i
Pop the current node that is the expression's context (i
Get the current namespace context for the xpath
Get the current namespace context for the xpath
Push a current namespace context for the xpath
Just increment the namespace contest stack, so that setNamespaceContext can be used on the slot
Pop the current namespace context for the xpath
Push a TreeWalker on the stack
Pop the last pushed axes iterator
Get the current axes iterator, or return null if none
Get the <a href="http://www
Get the current context node
Get the current context node list
The the expression context for extensions for this context
Get a DTM to be used as a container for a global Result Tree Fragment
Get a DTM to be used as a container for a dynamic Result Tree Fragment
Push the RTFDTM's context mark, to allows discarding RTFs added after this point
Pop the RTFDTM's context mark
Gets DTMXRTreeFrag object if one has already been created
Return the XPathContext associated with this XPathExpressionContext
Return the DTMManager object
Get the current context node
Get the current context node list
Get the error listener
Return the state of the services mechanism feature
Set the state of the services mechanism feature
Get the value of a node as a number
Get the value of a node as a string
Get a variable based on it's qualified name
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Creates a parsed XPath expression with resolved namespaces
Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document
Evaluates an XPath expression string and returns a result of the specified type if possible
Creates a parsed XPath expression with resolved namespaces
Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document
Evaluates an XPath expression string and returns a result of the specified type if possible
<p>Get the cause of this XPathException
<p>Print stack trace to specified <code>PrintStream</code>
<p>Print stack trace to <code>System
<p>Print stack trace to specified <code>PrintWriter</code>
Evaluates this XPath expression and returns a result
<p>Evaluate the compiled XPath expression in the specified context and  return the result as the specified type
<p>Evaluate the compiled XPath expression in the specified context and return the result as a <code>String</code>
<p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as the  specified type
<p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as a <code>String</code>
<p>Get a new <code>XPathFactory</code> instance using the default object model, {@link #DEFAULT_OBJECT_MODEL_URI}, the W3C DOM
<p>Get a new <code>XPathFactory</code> instance using the specified object model
<p>Obtain a new instance of a <code>XPathFactory</code> from a factory class name
<p>Is specified object model supported by this <code>XPathFactory</code>?</p>
<p>Set a feature for this <code>XPathFactory</code> and <code>XPath</code>s created by this factory
<p>Get the state of the named feature
<p>Establish a default variable resolver
<p>Establish a default function resolver
<p>Return a new <code>XPath</code> using the underlying object model determined when the <code>XPathFactory</code> was instantiated
<p>Is specified object model supported by this <code>XPathFactory</code>?</p>
<p>Returns a new <code>XPath</code> object using the underlying object model determined when the factory was instantiated
<p>Set a feature for this <code>XPathFactory</code> and <code>XPath</code>s created by this factory
<p>Get the state of the named feature
<p>Establish a default function resolver
<p>Establish a default variable resolver
Returns a list of one or more {@link XPathType} objects
Creates a new XPathFilterCHGPContainer; needed for generation
Creates a XPathFilterCHGPContainer from an existing Element; needed for verification
Method getIncludeButSearch
Method getExcludeButSearch
Method getExclude
Method getIncludeSlashPolicy
Method getHereContextNodeIncludeButSearch
Method getHereContextNodeExcludeButSearch
Method getHereContextNodeExclude
Method getBaseLocalName
Method getBaseNamespace
Returns the XPath expression to be evaluated
Returns a map of namespace prefixes
<p>Evaluate the function with the specified arguments
<p>Find a function in the set of available functions
<p>Establishes a variable resolver
<p>Returns the current variable resolver
<p>Establishes a function resolver
<p>Returns the current function resolver
<p>Establishes a namespace context
<p>Returns the current namespace context
<p>Evaluate an <code>XPath</code> expression in the specified context and return the result as the specified type
<p>Evaluate an XPath expression in the specified context and return the result as a <code>String</code>
<p>Compile an XPath expression for later evaluation
<p>Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as the specified type
<p>Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as a <code>String</code>
<p>Reset this <code>XPath</code> to its original configuration
Returns value of first member of fMatched that is nonzero
This method is called when the XPath handler matches the XPath expression
The start of the document fragment
The start of an element
Returns a string representation of this object
Creates a message from the specified key and replacement arguments, localized to the given locale
Creates a message from the specified key and replacement arguments, localized to the given locale
Creates a message from the specified key and replacement arguments, localized to the given locale
The <code>Element</code> on which the namespace was in scope when it was requested
Look up the namespace URI associated to the given namespace prefix
Given an string, init an XPath object for selections, in order that a parse doesn't have to be done each time the expression is evaluated
Given an string, init an XPath object for pattern matches, in order that a parse doesn't have to be done each time the expression is evaluated
Allow an application to register an error event handler, where syntax errors will be sent
Return the current error listener
Dump the remaining token queue
Expr  ::=  OrExpr
OrExpr  ::=  AndExpr | OrExpr 'or' AndExpr
AndExpr  ::=  EqualityExpr | AndExpr 'and' EqualityExpr
.
This has to handle construction of the operations so that they are evaluated in pre-fix order
This has to handle construction of the operations so that they are evaluated in pre-fix order
UnaryExpr  ::=  UnionExpr | '-' UnaryExpr
StringExpr  ::=  Expr
StringExpr  ::=  Expr
NumberExpr  ::=  Expr
The context of the right hand side expressions is the context of the left hand side expression
PathExpr  ::=  LocationPath | FilterExpr | FilterExpr '/' RelativeLocationPath | FilterExpr '//' RelativeLocationPath
FilterExpr  ::=  PrimaryExpr | FilterExpr Predicate
PrimaryExpr  ::=  VariableReference | '(' Expr ')' | Literal | Number | FunctionCall
Argument    ::=    Expr
FunctionCall    ::=    FunctionName '(' ( Argument ( ',' Argument)*)? ')'
LocationPath ::= RelativeLocationPath | AbsoluteLocationPath
RelativeLocationPath ::= Step | RelativeLocationPath '/' Step | AbbreviatedRelativeLocationPath
Step    ::=    Basis Predicate | AbbreviatedStep
Basis    ::=    AxisName '::' NodeTest | AbbreviatedBasis
Basis    ::=    AxisName '::' NodeTest | AbbreviatedBasis
NodeTest    ::=    WildcardName | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'
Predicate ::= '[' PredicateExpr ']'
PredicateExpr ::= Expr
QName ::=  (Prefix ':')? LocalPart Prefix ::=  NCName LocalPart ::=  NCName
NCName ::=  (Letter | '_') (NCNameChar) NCNameChar ::=  Letter | Digit | '
The value of the Literal is the sequence of characters inside the " or ' characters>
Number ::= [0-9]+('
Pattern  ::=  LocationPathPattern | Pattern '|' LocationPathPattern
LocationPathPattern  ::=  '/' RelativePathPattern? | IdKeyPattern (('/' | '//') RelativePathPattern)? | '//'? RelativePathPattern
IdKeyPattern  ::=  'id' '(' Literal ')' | 'key' '(' Literal ',' Literal ')' (Also handle doc())
RelativePathPattern  ::=  StepPattern | RelativePathPattern '/' StepPattern | RelativePathPattern '//' StepPattern
StepPattern  ::=  AbbreviatedNodeTestStep
AbbreviatedNodeTestStep    ::=    '@'? NodeTest Predicate
A code representing the type of this result, as defined by the type constants
The value of this number result
The value of this string result
The value of this boolean result
The value of this single node result, which may be <code>null</code>
Signifies that the iterator has become invalid
The number of nodes in the result snapshot
Iterates and returns the next node from the node set or <code>null</code>if there are no more nodes
Returns the <code>index</code>th item in the snapshot collection
Returns the XPath expression to be evaluated
Returns the filter operation
Returns a map of namespace prefixes
Returns the string form of the operation
<p>Find a variable in the set of available variables
This will traverse the heararchy, calling the visitor for each member
Visit a LocationPath
Visit a UnionPath
Visit a step within a location path
Visit a predicate within a location path
Visit a binary operation
Visit a unary operation
Visit a variable reference
Visit a function
Visit a match pattern
Visit a union pattern
Visit a string literal
Visit a number literal
Returns a list of feature identifiers that are recognized by this component
Sets the state of a feature
Returns a list of property identifiers that are recognized by this component
Sets the value of a property
Returns the default state for a feature, or null if this component does not want to report a default value for this feature
Returns the default state for a property, or null if this component does not want to report a default value for this property
set the Schema Name  eg element , xpointer
Return  Schema Name  eg element , xpointer
Parent Contenhandler for the this contenthandler
return the Parent Contenthandler
Content of the XPointer Schema
Return the XPointer Schema
Parses the XPointer framework expression and delegates scheme specific parsing
Returns true if the Node fragment is resolved
Returns true if the XPointer expression resolves to a non-element child of the current resource fragment
Returns true if the XPointer successfully found a sub-resource 
Returns the pointer part used to resolve the document fragment
Initializes error handling objects
Initializes the XPointer Processor;
Returns a Vector of XPointerPart objects
If the comment is a child of a matched element, then pass else return
A processing instruction
The start of an element
An empty element
Character content
Ignorable whitespace
The end of an element
The start of a CDATA section
The end of a CDATA section
<p> Sets the value of a property
Configures the pipeline
Provides scheme specific parsing of a XPointer expression i
Evaluates an XML resource with respect to an XPointer expressions by checking if it's element and attributes parameters match the criteria specified in the xpointer expression
Returns true if the XPointer expression resolves to a resource fragment specified as input else returns false
Returns true if the XPointer expression resolves to a non-element child of the current resource fragment
Returns a String containing the scheme name of the PointerPart or the name of the ShortHand Pointer
Returns a String containing the scheme data of the PointerPart
Sets the scheme name of the PointerPart or the ShortHand Pointer name
Sets the scheme data of the PointerPart
Parses an XPointer expression
Evaluates an XML resource with respect to an XPointer expressions by checking if it's element and attributes parameters match the criteria specified in the xpointer expression
Returns true if the XPointer expression resolves to the current resource fragment or Node which is part of the input resource being streamed else returns false
Returns true if the XPointer expression resolves any subresource of the input resource
set the Schema Name  eg element , xpointer
Return  Schema Name  eg element , xpointer
Parent Contenhandler for the this contenthandler
return the Parent Contenthandler
Content of the XPointer Schema
Return the XPointer Schema
Get the association list
Get the error string associated with the error code
Get the warning string associated with the error code
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association list
Get the association table for this resource
Get the association table for this resource
Get the association list
Get the association list
Get the association list
Get the association list
Return a java object that's closest to the representation that should be handed to an extension
Specify if it's OK for detach to release the iterator for reuse
Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Tell what kind of class this is
Given a request type, return the equivalent string
Cast result object to a number
Cast result object to a boolean
Cast result object to an XMLString
Cast result object to a string
Cast result object to a string
Cast result object to a result tree fragment
Cast result object to a DTMIterator
Cast result object to a nodelist
Tell if two objects are functionally equal
This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time
For support of literal objects in xpaths
Detaches the <code>DTMIterator</code> from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
Cast result object to a number
Cast result object to an XMLString
Cast result object to a string
Tell what kind of class this is
Cast result object to a result tree fragment
Cast result object to a DTMIterator
This methods to be called on entering a first element whose type has this content model
The method corresponds to one transition in the content model
The method indicates the end of list of children
check whether this content violates UPA constraint
Check which elements are valid to appear at this point
Write contents of the annotation to the specified object
A text representation of the annotation
Write contents of the annotation to the specified DOM object
A text representation of annotation
The <code>type</code> of this object, i
The name of type <code>NCName</code> of this declaration as defined in XML Namespaces
The [target namespace] of this object, or <code>null</code> if it is unspecified
A namespace schema information item corresponding to the target namespace of the component, if it's globally declared; or null otherwise
Check whether the specified element conforms to the attributes restriction an array of attribute values is returned
Check whether the specified element conforms to the attributes restriction an array of attribute values is returned
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
A simple type definition
Optional
Locally scoped declarations are available for use only within the complex type definition identified by the <code>scope</code> property
Value constraint: one of default, fixed
Value constraint: The actual value (with respect to the {type definition}) Should we return Object instead of DOMString?
Optional
Optional
[type definition]: A simple type definition
[scope]
The complex type definition for locally scoped declarations (see <code>scope</code>), otherwise <code>null</code> if no such definition exists
Value constraint: one of <code>VC_NONE, VC_DEFAULT, VC_FIXED</code>
Value constraint: The constraint value with respect to the [type definition], otherwise <code>null</code>
Value Constraint: Binding specific actual constraint value or <code>null</code> if the value is in error or there is no value constraint
The actual constraint value built-in datatype, e
In the case the actual constraint value represents a list, i
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty  <code>XSObjectList</code>
Check that the attributes in this group validly restrict those from a base group
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{attribute uses} A set of attribute uses
{attribute wildcard} Optional
Optional
Optional
A set of [attribute uses] if it exists, otherwise an empty <code>XSObjectList</code>
A [wildcard] if it exists, otherwise <code>null</code>
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
[required]: determines whether this use of an attribute declaration requires an appropriate attribute information item to be present, or merely allows it
[attribute declaration]: provides the attribute declaration itself, which will in turn determine the simple type definition used
Value Constraint: one of default, fixed
Value Constraint: The constraint value, otherwise <code>null</code>
Value Constraint: Binding specific actual constraint value or <code>null</code> if the value is in error or there is no value constraint
The actual constraint value built-in datatype, e
In the case the actual constraint value represents a list, i
A sequence of [annotations] or an empty <code>XSObjectList</code>
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{required} determines whether this use of an attribute declaration requires an appropriate attribute information item to be present, or merely allows it
{attribute declaration} provides the attribute declaration itself, which will in turn determine the simple type definition used
Value Constraint: one of default, fixed
Value Constraint: The actual value (with respect to the {type definition})
Optional
Allows the user to set arbitrary data on this content model node
This methods to be called on entering a first element whose type has this content model
The method corresponds to one transaction in the content model
The method indicates the end of list of children
check whether this content violates UPA constraint
Check which elements are valid to appear at this point
Used by constant space algorithm for a{n,m} for n > 1 and m <= unbounded
Checks if a type is derived from another given the the name, namespace and derivation method
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
A boolean that specifies if the type definition is anonymous
The namespace URI of this node, or <code>null</code> if it is unspecified
{base type definition} Either a simple type definition or a complex type definition
{derivation method} Either extension or restriction
{final} For complex type definition it is a subset of {extension, restriction}
{final} For complex type definition it is a subset of {extension, restriction}
{abstract} A boolean
{attribute uses} A set of attribute uses
{attribute wildcard} Optional
{content type} One of empty, a simple type definition (see <code>simpleType</code>, or mixed, element-only (see <code>cmParticle</code>)
A simple type definition corresponding to simple content model, otherwise <code>null</code>
A particle for mixed or element-only content model, otherwise <code>null</code>
{prohibited substitutions} A subset of {extension, restriction}
{prohibited substitutions}
Optional
[derivation method]: either <code>DERIVATION_EXTENSION</code>, <code>DERIVATION_RESTRICTION</code>, or <code>DERIVATION_NONE</code> (see <code>XSConstants</code>)
[abstract]: a boolean
A set of attribute uses if it exists, otherwise an empty <code>XSObjectList</code>
An attribute wildcard if it exists, otherwise <code>null</code>
[content type]: one of empty (<code>CONTENTTYPE_EMPTY</code>), a simple type definition (<code>CONTENTTYPE_SIMPLE</code>), mixed ( <code>CONTENTTYPE_MIXED</code>), or element-only ( <code>CONTENTTYPE_ELEMENT</code>)
A simple type definition corresponding to a simple content model, otherwise <code>null</code>
A particle for a mixed or element-only content model, otherwise <code>null</code>
[prohibited substitutions]: a subset of {extension, restriction}
[prohibited substitutions]: A subset of {extension, restriction} or <code>DERIVATION_NONE</code> represented as a bit flag (see <code>XSConstants</code>)
A sequence of [annotations] or an empty <code>XSObjectList</code>
check whether derived is valid derived from base, given a subset of {restriction, extension}
check whether simple type derived is valid derived from base, given a subset of {restriction, extension}
check whether complex type derived is valid derived from base, given a subset of {restriction, extension}
check whether a value is a valid default for some type returns the compiled form of the value The parameter value could be either a String or a ValidatedInfo object
used to check the 3 constraints against each complex type (should be each model group): Unique Particle Attribution, Particle Derivation (Restriction), Element Declrations Consistent
the type of the grammar (e
Get the context
If the context is "include" or "redefine", then return the target namespace of the enclosing schema document; otherwise, the expected target namespace of this document
For import and references from the instance document, it's possible to have multiple hints for one namespace
If a call is triggered by an element/attribute/xsi:type in the instance, this call returns the name of such triggering component: the name of the element/attribute, or the value of the xsi:type
If a call is triggered by an attribute or xsi:type, then this mehtod returns the enclosing element of such element
If a call is triggered by an element/attribute/xsi:type in the instance, this call returns all attribute of such element (or enclosing element)
Compares this grammar with the given grammar
Returns the hash code of this grammar
resets all the fields
check whether the given state is one of the final states
one transition only
check whether this content violates UPA constraint
Check which elements are valid to appear at this point
Used by constant space algorithm for a{n,m} for n > 1 and m <= unbounded
This method initiates the parse of a schema
First try to find a grammar in the bucket, if failed, consult the grammar pool
Extract location information from an Element node, and create a new SimpleLocator object from such information
Extract location information from an Element node, store such information in the passed-in SimpleLocator object, then return true
get the hash code
whether two decls are the same
Reset current element declaration
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
Either a simple type definition or a complex type definition
Optional
Locally scoped declarations are available for use only within the complex type definition identified by the <code>scope</code> property
A value constraint: one of default, fixed
A value constraint: The actual value (with respect to the {type definition})
If {nillable} is true, then an element may also be valid if it carries the namespace qualified attribute with [local name] nil from namespace http://www
{identity-constraint definitions} A set of constraint definitions
{substitution group affiliation} Optional
Convenience method
Specifies if this declaration can be nominated as the {substitution group affiliation} of other element declarations having the same {type definition} or types derived therefrom
Convenience method
The supplied values for {disallowed substitutions}
{abstract} A boolean
Optional
Optional
[type definition]: either a simple type definition or a complex type definition
[scope]
The complex type definition for locally scoped declarations (see <code>scope</code>), otherwise <code>null</code> if no such definition exists
[Value constraint]: one of <code>VC_NONE, VC_DEFAULT, VC_FIXED</code>
[Value constraint]: the constraint value with respect to the [type definition], otherwise <code>null</code>
Value Constraint: Binding specific actual constraint value or <code>null</code> if the value is in error or there is no value constraint
The actual constraint value built-in datatype, e
In the case the actual constraint value represents a list, i
If nillable is true, then an element may also be valid if it carries the namespace qualified attribute with local name <code>nil</code> from namespace <code>http://www
identity-constraint definitions: a set of constraint definitions if it exists, otherwise an empty <code>XSNamedMap</code>
[substitution group affiliation]: a top-level element definition if it exists, otherwise <code>null</code>
Convenience method that checks if <code>exclusion</code> is a substitution group exclusion for this element declaration
[substitution group exclusions]: the returned value is a bit combination of the subset of { <code>DERIVATION_EXTENSION, DERIVATION_RESTRICTION</code>} or <code>DERIVATION_NONE</code>
Convenience method that checks if <code>disallowed</code> is a disallowed substitution for this element declaration
[disallowed substitutions]: the returned value is a bit combination of the subset of { <code>DERIVATION_SUBSTITUTION, DERIVATION_EXTENSION, DERIVATION_RESTRICTION</code> } corresponding to substitutions disallowed by this <code>XSElementDeclaration</code> or <code>DERIVATION_NONE</code>
{abstract} A boolean
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
This methods to be called on entering a first element whose type has this content model
The method corresponds to one transaction in the content model
The method indicates the end of list of children
check whether this content violates UPA constraint
Check which elements are valid to appear at this point
The name of the facet, e
A value of this facet
[Facets]: check whether a facet is fixed
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
Return an <code>XSModel</code> that represents components in this schema grammar and any schema grammars that are imported by this grammar directly or indirectly
Return an <code>XSModel</code> that represents components in this schema grammar and the grammars in the <code>grammars</code>parameter, any schema grammars that are imported by them directly or indirectly
Get the schema grammar for the specified namespace
Put a schema grammar into the registry This method is for internal use only: it assumes that a grammar with the same target namespace is not already in the bucket
put a schema grammar and any grammars imported by it (directly or inderectly) into the registry
put a schema grammar and any grammars imported by it (directly or inderectly) into the registry
get all grammars in the registry
Clear the registry
Return an <code>XSModel</code> that represents components in the schema grammars in this pool implementation
<p>Returns the grammar pool contained inside the container
<p>Returns whether the schema components contained in this object can be considered to be a fully composed schema and should be used to the exclusion of other schema components which may be present elsewhere
Returns the initial value of a feature for validators created using this grammar pool container or null if the validators should use the default value
Returns the initial value of a property for validators created using this grammar pool container or null if the validators should use the default value
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{model group} A model group
Optional
Optional
[identity-constraint category]: one of key, keyref or unique
[selector]: a restricted XPath 1
[fields]: a non-empty list of restricted  XPath 1
[referenced key]: required if [identity-constraint category] is keyref, <code>null</code> otherwise
A sequence of [annotations] or an empty  <code>XSObjectList</code>
A list containing the versions of XML Schema documents recognized by this <code>XSImplemenation</code>
Creates a new XSLoader
NON-DOM: Obtain and return the single shared object
Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof
Creates a message from the specified key and replacement arguments, localized to the given locale
Creates a message from the specified key and replacement arguments, localized to the given locale
The configuration of a document
Parses the content of XML Schema documents specified as the list of URI references
Parses the content of XML Schema documents specified as a list of <code>LSInput</code>s
Parse an XML Schema document from a location identified by a URI reference
Parse an XML Schema document from a resource identified by a <code>LSInput</code> 
The configuration of a document
Parses the content of XML Schema documents specified as the list of URI references
Parses the content of XML Schema documents specified as a list of <code>LSInput</code>s
Parse an XML Schema document from a location identified by a URI reference
Parse an XML Schema document from a resource identified by a <code>LSInput</code> 
Set the state of the secure processing feature
Return the state of the secure processing feature
Return the value of the specified feature
Return allowed protocols for accessing external stylesheet
Set allowed protocols for accessing external stylesheet
Only for user by the internal TrAX implementation
Only for user by the internal TrAX implementation
Only for user by the internal TrAX implementation
Initializes the compiler to compile a new stylesheet
Defines an external SourceLoader to provide the compiler with documents referenced in xsl:include/import
Set a flag indicating if templates are to be inlined or not
Return the state of the template inlining feature
Set the parameters to use to locate the correct <?xml-stylesheet 
Compiles an XSL stylesheet pointed to by a URL
Compiles an XSL stylesheet pointed to by a URL
Compiles an XSL stylesheet passed in through an InputStream
Compiles an XSL stylesheet passed in through an InputStream
Compiles a set of stylesheets pointed to by a Vector of URLs
Returns an array of bytecode arrays generated by a compilation
Compiles a stylesheet pointed to by a URL
Compiles a stylesheet pointed to by a URL
Set the XMLReader to use for parsing the next input stylesheet
Get the XMLReader to use for parsing the next input stylesheet
Get a list of all compile error messages
Get a list of all compile warning messages
Print all compile error messages to standard output
Print all compile warning messages to standard output
This method is called by the XPathParser when it encounters a call to the document() function
This method is called by the XPathParser when it encounters a call to the nodeset() extension function
Set the class name for the generated translet
Get the class name for the generated translet
Set the destination directory for the translet
Set an optional package name for the translet and auxiliary classes
Set the name of an optional JAR-file to dump the translet and auxiliary classes to
Set the top-level stylesheet
Returns the top-level stylesheet
Registers an attribute and gives it a type so that it can be mapped to DOM attribute types at run-time
Registers an element and gives it a type so that it can be mapped to DOM element types at run-time
Registers a namespace prefix and gives it a type so that it can be mapped to DOM namespace types at run-time
Registers a namespace and gives it a type so that it can be mapped to DOM namespace types at run-time
Returns a unique name for every helper class needed to execute a translet
Generate output JAR-file and packages
Turn debugging messages on/off
Get current debugging message setting
Retrieve a string representation of the character data to be stored in the translet as a <code>char[]</code>
Get the number of char[] arrays, thus far, that will be created to store literal text in the stylesheet
Add literal text to char arrays that will be used to store character data in the stylesheet
Obtain a new instance of a <code>DTMManager</code>
Creates a new instance of the XSLTC DTM Manager service
Get an instance of a DTM, loaded with the content from the specified source
Get an instance of a DTM, loaded with the content from the specified source
Get an instance of a DTM, loaded with the content from the specified source
Get an instance of a DTM, loaded with the content from the specified source
Get an instance of a DTM, loaded with the content from the specified source
Implements javax
Implements javax
Internal interface which returns a DOM for a given DTMManager and translet
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Get the lookup table for error messages
Returns the stylesheet
Formats a message with the specified arguments using the given locale information
Convenience method
A set of namespace schema information information items (of type <code>XSNamespaceItem</code>), one for each namespace name which appears as the target namespace of any schema component in the schema used for that assessment, and one for absent if any schema component in the schema had no target namespace
Returns a list of top-level components, i
Convenience method
[annotations]: a set of annotations if it exists, otherwise an empty <code>XSObjectList</code>
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
[compositor]: one of all, choice or sequence
A list of [particles] if it exists, otherwise an empty <code>XSObjectList</code>
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
A model group
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
3
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{compositor} One of all, choice or sequence
{particles} A list of particles
Optional
Optional
Convenience method
A set of namespace schema information information items (of type <code>XSNamespaceItem</code>), one for each namespace name which appears as the target namespace of any schema component in the schema used for that assessment, and one for absent if any schema component in the schema had no target namespace
Returns a list of top-level components, i
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
[annotations]: a set of annotations if it exists, otherwise an empty <code>XSObjectList</code>
REVISIT: to expose identity constraints from XSModel
Convenience method
The number of <code>XSNamespaceItem</code>s in the list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
The name of the facet, i
Values of this facet
A sequence of [annotations] or an empty <code>XSObjectList</code>
The number of <code>XSObjects</code> in the <code>XSObjectList</code>
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
Retrieves an <code>XSObject</code> specified by local name and namespace URI
The number of <code>XSObjects</code> in the <code>XSObjectList</code>
Retrieves an <code>XSObject</code> specified by local name and namespace URI
Returns the <code>index</code>th item in the map
The number of <code>XSObjects</code> in the <code>XSObjectList</code>
Retrieves an <code>XSObject</code> specified by local name and namespace URI
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
[schema namespace]: A namespace name or <code>null</code> if absent
[schema components]: a list of top-level components, i
[annotations]: a set of annotations if it exists, otherwise an empty <code>XSObjectList</code>
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
Convenience method
[document location] - a list of location URIs for the documents that contributed to the <code>XSModel</code>
The number of <code>XSNamespaceItem</code>s in the list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
Optional if {public identifier} is present
Optional if {system identifier} is present
Optional
Optional
The URI reference representing the system identifier for the notation declaration, if present, <code>null</code> otherwise
The string representing the public identifier for this notation declaration, if present; <code>null</code> otherwise
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
The <code>type</code> of this object, i
The name of type <code>NCName</code>, as defined in XML Namespaces, of this declaration specified in the <code>{name}</code> property of the component or <code>null</code> if the definition of this component does not have a <code>{name}</code> property
The [target namespace] of this object, or <code>null</code> if it is unspecified
A namespace schema information item corresponding to the target namespace of the component, if it is globally declared; or <code>null</code> otherwise
The number of <code>XSObjects</code> in the list
Returns the <code>index</code>th item in the collection or <code>null</code> if <code>index</code> is greater than or equal to the number of objects in the list
The number of <code>XSObjects</code> in the list
Returns the <code>index</code>th item in the collection
[min occurs]: determines the minimum number of terms that can occur
[max occurs]: determines the maximum number of terms that can occur
[max occurs]: whether the maxOccurs value is unbounded
[term]: one of a model group, a wildcard, or an element declaration
A sequence of [annotations] or an empty <code>XSObjectList</code>
3
3
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
{min occurs} determines the minimum number of terms that can occur
{max occurs} whether the maxOccurs value is unbounded
{max occurs} determines the maximum number of terms that can occur
{term} One of a model group, a wildcard, or an element declaration
Optional
return an ID representing the built-in primitive base type
validate a given string against this simple type
validate a given string value, represented by content
Validate an actual value against this simple type
If this type is created from restriction, then some facets can be applied to the simple type
Check whether two actual values are equal
Check whether this type is or is derived from ID
Return the whitespace corresponding to this datatype
Returns the closest built-in type category this type represents or derived from
If variety is <code>atomic</code> the primitive type definition (a built-in primitive datatype definition or the simple ur-type definition) is available, otherwise <code>null</code>
If variety is <code>list</code> the item type definition (an atomic or union simple type definition) is available, otherwise <code>null</code>
If variety is <code>union</code> the list of member type definitions (a non-empty sequence of simple type definitions) is available, otherwise an empty <code>XSObjectList</code>
If <restriction> is chosen
validate a value, and return the compiled form
validate a value, and return the compiled form
validate a value, and return the compiled form
validate an actual value against this DV
Fundamental Facet: ordered
Fundamental Facet: bounded
Fundamental Facet: cardinality
Fundamental Facet: numeric
Convenience method
[facets]: all facets defined on this type
Convenience method
[facets]: all defined facets for this type which are fixed
Convenience method
A list of enumeration values if it exists, otherwise an empty <code>StringList</code>
A list of actual enumeration values if it exists, otherwise an empty <code>ObjectList</code>
A list of enumeration type values (as a list of ShortList objects) if it exists, otherwise returns null
A list of pattern values if it exists, otherwise an empty <code>StringList</code>
[annotations]: a set of annotations for this simple type component if it exists, otherwise an empty <code>XSObjectList</code>
Checks if a type is derived from another by restriction, given the name and namespace
A list of constraining facets if it exists, otherwise an empty <code>XSObjectList</code>
A list of enumeration and pattern constraining facets if it exists, otherwise an empty <code>XSObjectList</code>
[variety]: one of {atomic, list, union} or absent
If variety is <code>atomic</code> the primitive type definition (a built-in primitive datatype definition or the simple ur-type definition) is available, otherwise <code>null</code>
Returns the closest built-in type category this type represents or derived from
If variety is <code>list</code> the item type definition (an atomic or union simple type definition) is available, otherwise <code>null</code>
If variety is <code>union</code> the list of member type definitions (a non-empty sequence of simple type definitions) is available, otherwise an empty <code>XSObjectList</code>
[facets]: all facets defined on this type
Convenience method
[facets]: all defined facets for this type which are fixed
Convenience method
Convenience method
A list of enumeration values if it exists, otherwise an empty <code>StringList</code>
A list of pattern values if it exists, otherwise an empty <code>StringList</code>
Fundamental Facet: ordered
Fundamental Facet: cardinality
Fundamental Facet: bounded
Fundamental Facet: numeric
A list of constraining facets if it exists, otherwise an empty <code>XSObjectList</code>
A list of enumeration and pattern constraining facets if it exists, otherwise an empty <code>XSObjectList</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
Tell that this is a CLASS_STRING
Given a request type, return the equivalent string
Tell if this object contains a java String object
Cast result object to a number
Convert a string to a double -- Allowed input is in fixed notation ddd
Cast result object to a boolean
Cast result object to a string
Cast result object to a string
Cast result object to a result tree fragment
Directly call the characters method on the passed ContentHandler for the string-value
Directly call the comment method on the passed LexicalHandler for the string-value
Returns the length of this string
Returns the character at the specified index
Copies characters from this string into the destination character array
Tell if two objects are functionally equal
Compares this string to the specified <code>String</code>
Compares this string to the specified object
Compares this string to the specified object
Compares this <code>String</code> to another <code>String</code>, ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically, ignoring case considerations
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix
Tests if this string ends with the specified suffix
Returns a hashcode for this string
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
Returns the index within this string of the last occurrence of the specified character
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
Returns the index within this string of the rightmost occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring
Returns a new string that is a substring of this string
Returns a new string that is a substring of this string
Concatenates the specified string to the end of this string
Converts all of the characters in this <code>String</code> to lower case using the rules of the given <code>Locale</code>
Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the given locale
Converts all of the characters in this <code>String</code> to upper case using the rules of the default locale, which is returned by <code>Locale
Removes white space from both ends of this string
Conditionally trim all leading and trailing whitespace in the specified String
Cast result object to a string
Cast result object to a string
Tell if this object contains a java String object
Cast result object to a string
Since this object is incomplete without the length and the offset, we have to convert to a string when this function is called
Directly call the characters method on the passed ContentHandler for the string-value
Directly call the comment method on the passed LexicalHandler for the string-value
Returns the length of this string
Returns the character at the specified index
Copies characters from this string into the destination character array
Cast result object to a string
Cast result object to a string
Tell if this object contains a java String object
Since this object is incomplete without the length and the offset, we have to convert to a string when this function is called
Cast result object to a string
Directly call the characters method on the passed ContentHandler for the string-value
Directly call the comment method on the passed LexicalHandler for the string-value
Returns the length of this string
Returns the character at the specified index
Copies characters from this string into the destination character array
Compares this string to the specified object
Tell if two objects are functionally equal
Tell if two objects are functionally equal
Compares this string to the specified object
Compares this <code>String</code> to another <code>String</code>, ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically, ignoring case considerations
Returns a hashcode for this string
Tests if this string starts with the specified prefix beginning a specified index
Tests if this string starts with the specified prefix
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
Returns a new string that is a substring of this string
Returns a new string that is a substring of this string
Concatenates the specified string to the end of this string
Removes white space from both ends of this string
Conditionally trim all leading and trailing whitespace in the specified String
Convert a string to a double -- Allowed input is in fixed notation ddd
Return whether this type definition is a simple type or complex type
{base type definition}: either a simple type definition or a complex type definition
{final}
For complex types the returned value is a bit combination of the subset of {<code>DERIVATION_EXTENSION, DERIVATION_RESTRICTION</code>} corresponding to <code>final</code> set of this type or <code>DERIVATION_NONE</code>
Convenience attribute
Convenience method which checks if this type is derived from the given <code>ancestorType</code>
Convenience method which checks if this type is derived from the given ancestor type
Namespace constraint: A constraint type: any, not, list
Namespace constraint: For <code>constraintType</code> <code>NSCONSTRAINT_LIST</code>, the list contains allowed namespaces
[process contents]: one of skip, lax or strict
An annotation if it exists, otherwise <code>null</code>
A sequence of [annotations] or an empty <code>XSObjectList</code>
Validation Rule: Wildcard allows Namespace Name
Schema Component Constraint: Wildcard Subset
Check whether this wildcard has a weaker process contents than the super
Schema Component Constraint: Attribute Wildcard Union
Schema Component Constraint: Attribute Wildcard Intersection
Get the type of the object, i
The <code>name</code> of this <code>XSObject</code> depending on the <code>XSObject</code> type
The namespace URI of this node, or <code>null</code> if it is unspecified
Namespace constraint: A constraint type: any, not, list
Namespace constraint
{process contents} One of skip, lax or strict
String valid of {process contents}
Optional
Optional
Obtains the current year from the system clock in the default time-zone
Obtains the current year from the system clock in the specified time-zone
Obtains the current year from the specified clock
Obtains an instance of {@code Year}
Obtains an instance of {@code Year} from a temporal object
Obtains an instance of {@code Year} from a text string such as {@code 2007}
Obtains an instance of {@code Year} from a text string using a specific formatter
Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Gets the year value
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this year as an {@code int}
Gets the value of the specified field from this year as a {@code long}
Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Checks if the month-day is valid for this year
Gets the length of this year in days
Returns an adjusted copy of this year
Returns a copy of this year with the specified field set to a new value
Returns a copy of this year with the specified amount added
Returns a copy of this year with the specified amount added
Returns a copy of this {@code Year} with the specified number of years added
Returns a copy of this year with the specified amount subtracted
Returns a copy of this year with the specified amount subtracted
Returns a copy of this {@code Year} with the specified number of years subtracted
Queries this year using the specified query
Adjusts the specified temporal object to have this year
Calculates the amount of time until another year in terms of the specified unit
Formats this year using the specified formatter
Combines this year with a day-of-year to create a {@code LocalDate}
Combines this year with a month to create a {@code YearMonth}
Combines this year with a month to create a {@code YearMonth}
Combines this year with a month-day to create a {@code LocalDate}
Compares this year to another year
Checks if this year is after the specified year
Checks if this year is before the specified year
Checks if this year is equal to another year
A hash code for this year
Outputs this year as a {@code String}
Convert a string to a compiled form
Parses, validates and computes normalized version of gYear object
Converts year object representation to String
Obtains the current year-month from the system clock in the default time-zone
Obtains the current year-month from the system clock in the specified time-zone
Obtains the current year-month from the specified clock
Obtains an instance of {@code YearMonth} from a year and month
Obtains an instance of {@code YearMonth} from a year and month
Obtains an instance of {@code YearMonth} from a temporal object
Obtains an instance of {@code YearMonth} from a text string such as {@code 2007-12}
Obtains an instance of {@code YearMonth} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this year-month as an {@code int}
Gets the value of the specified field from this year-month as a {@code long}
Gets the year field
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Checks if the day-of-month is valid for this year-month
Returns the length of the month, taking account of the year
Returns the length of the year
Returns an adjusted copy of this year-month
Returns a copy of this year-month with the specified field set to a new value
Returns a copy of this {@code YearMonth} with the year altered
Returns a copy of this {@code YearMonth} with the month-of-year altered
Returns a copy of this year-month with the specified amount added
Returns a copy of this year-month with the specified amount added
Returns a copy of this {@code YearMonth} with the specified number of years added
Returns a copy of this {@code YearMonth} with the specified number of months added
Returns a copy of this year-month with the specified amount subtracted
Returns a copy of this year-month with the specified amount subtracted
Returns a copy of this {@code YearMonth} with the specified number of years subtracted
Returns a copy of this {@code YearMonth} with the specified number of months subtracted
Queries this year-month using the specified query
Adjusts the specified temporal object to have this year-month
Calculates the amount of time until another year-month in terms of the specified unit
Formats this year-month using the specified formatter
Combines this year-month with a day-of-month to create a {@code LocalDate}
Returns a {@code LocalDate} at the end of the month
Compares this year-month to another year-month
Checks if this year-month is after the specified year-month
Checks if this year-month is before the specified year-month
Checks if this year-month is equal to another year-month
A hash code for this year-month
Outputs this year-month as a {@code String}, such as {@code 2007-12}
Convert a string to a compiled form
Parses, validates and computes normalized version of gYearMonth object
Returns the name of the entry
Sets the last modification time of the entry
Returns the last modification time of the entry
Sets the last modification time of the entry
Returns the last modification time of the entry
Sets the last access time of the entry
Returns the last access time of the entry
Sets the creation time of the entry
Returns the creation time of the entry
Sets the uncompressed size of the entry data
Returns the uncompressed size of the entry data
Returns the size of the compressed entry data
Sets the size of the compressed entry data
Sets the CRC-32 checksum of the uncompressed entry data
Returns the CRC-32 checksum of the uncompressed entry data
Sets the compression method for the entry
Returns the compression method of the entry
Sets the optional extra field data for the entry
Returns the extra field data for the entry
Sets the optional comment string for the entry
Returns the comment string for the entry
Returns true if this is a directory entry
Returns a string representation of the ZIP entry
Returns the hash code value for this entry
Returns a copy of this entry
Returns the zip file comment, or null if none
Returns the zip file entry for the specified name, or null if not found
Returns an input stream for reading the contents of the specified zip file entry
Returns the path name of the ZIP file
Returns an enumeration of the ZIP file entries
Return an ordered {@code Stream} over the ZIP file entries
Returns the number of entries in the ZIP file
Closes the ZIP file
Ensures that the system resources held by this ZipFile object are released when there are no more references to it
Reads the next ZIP file entry and positions the stream at the beginning of the entry data
Closes the current ZIP entry and positions the stream for reading the next entry
Returns 0 after EOF has reached for the current entry data, otherwise always return 1
Reads from the current ZIP entry into an array of bytes
Skips specified number of bytes in the current ZIP entry
Closes this input stream and releases any system resources associated with the stream
Creates a new <code>ZipEntry</code> object for the specified entry name
Sets the ZIP file comment
Sets the default compression method for subsequent entries
Sets the compression level for subsequent entries which are DEFLATED
Begins writing a new ZIP file entry and positions the stream to the start of the entry data
Closes the current ZIP entry and positions the stream for writing the next entry
Writes an array of bytes to the current ZIP entry data
Finishes writing the contents of the ZIP output stream without closing the underlying stream
Closes the ZIP output stream as well as the stream being filtered
Obtains the current date-time from the system clock in the default time-zone
Obtains the current date-time from the system clock in the specified time-zone
Obtains the current date-time from the specified clock
Obtains an instance of {@code ZonedDateTime} from a local date and time
Obtains an instance of {@code ZonedDateTime} from a local date-time
Obtains an instance of {@code ZonedDateTime} from a year, month, day, hour, minute, second, nanosecond and time-zone
Obtains an instance of {@code ZonedDateTime} from a local date-time using the preferred offset if possible
Obtains an instance of {@code ZonedDateTime} from an {@code Instant}
Obtains an instance of {@code ZonedDateTime} from the instant formed by combining the local date-time and offset
Obtains an instance of {@code ZonedDateTime} strictly validating the combination of local date-time, offset and zone ID
Obtains an instance of {@code ZonedDateTime} from a temporal object
Obtains an instance of {@code ZonedDateTime} from a text string such as {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}
Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter
Checks if the specified field is supported
Checks if the specified unit is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this date-time as an {@code int}
Gets the value of the specified field from this date-time as a {@code long}
Gets the zone offset, such as '+01:00'
Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
Gets the time-zone, such as 'Europe/Paris'
Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
Returns a copy of this date-time with a different time-zone, retaining the instant
Returns a copy of this date-time with the zone ID set to the offset
Gets the {@code LocalDateTime} part of this date-time
Gets the {@code LocalDate} part of this date-time
Gets the year field
Gets the month-of-year field from 1 to 12
Gets the month-of-year field using the {@code Month} enum
Gets the day-of-month field
Gets the day-of-year field
Gets the day-of-week field, which is an enum {@code DayOfWeek}
Gets the {@code LocalTime} part of this date-time
Gets the hour-of-day field
Gets the minute-of-hour field
Gets the second-of-minute field
Gets the nano-of-second field
Returns an adjusted copy of this date-time
Returns a copy of this date-time with the specified field set to a new value
Returns a copy of this {@code ZonedDateTime} with the year altered
Returns a copy of this {@code ZonedDateTime} with the month-of-year altered
Returns a copy of this {@code ZonedDateTime} with the day-of-month altered
Returns a copy of this {@code ZonedDateTime} with the day-of-year altered
Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered
Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered
Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered
Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered
Returns a copy of this {@code ZonedDateTime} with the time truncated
Returns a copy of this date-time with the specified amount added
Returns a copy of this date-time with the specified amount added
Returns a copy of this {@code ZonedDateTime} with the specified number of years added
Returns a copy of this {@code ZonedDateTime} with the specified number of months added
Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added
Returns a copy of this {@code ZonedDateTime} with the specified number of days added
Returns a copy of this {@code ZonedDateTime} with the specified number of hours added
Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added
Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added
Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this date-time with the specified amount subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted
Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted
Queries this date-time using the specified query
Calculates the amount of time until another date-time in terms of the specified unit
Formats this date-time using the specified formatter
Converts this date-time to an {@code OffsetDateTime}
Checks if this date-time is equal to another date-time
A hash code for this date-time
Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}
Gets the system default time-zone
Gets the set of available zone IDs
Obtains an instance of {@code ZoneId} using its ID using a map of aliases to supplement the standard zone IDs
Obtains an instance of {@code ZoneId} from an ID ensuring that the ID is valid and available for use
Obtains an instance of {@code ZoneId} wrapping an offset
Obtains an instance of {@code ZoneId} from a temporal object
Gets the unique time-zone ID
Gets the textual representation of the zone, such as 'British Time' or '+02:00'
Gets the time-zone rules for this ID allowing calculations to be performed
Normalizes the time-zone ID, returning a {@code ZoneOffset} where possible
Checks if this time-zone ID is equal to another time-zone ID
A hash code for this time-zone ID
Outputs this zone as a {@code String}, using the ID
Obtains an instance of {@code ZoneOffset} using the ID
Obtains an instance of {@code ZoneOffset} using an offset in hours
Obtains an instance of {@code ZoneOffset} using an offset in hours and minutes
Obtains an instance of {@code ZoneOffset} using an offset in hours, minutes and seconds
Obtains an instance of {@code ZoneOffset} from a temporal object
Obtains an instance of {@code ZoneOffset} specifying the total offset in seconds <p> The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800
Gets the total zone offset in seconds
Gets the normalized zone offset ID
Gets the associated time-zone rules
Checks if the specified field is supported
Gets the range of valid values for the specified field
Gets the value of the specified field from this offset as an {@code int}
Gets the value of the specified field from this offset as a {@code long}
Queries this offset using the specified query
Adjusts the specified temporal object to have the same offset as this object
Compares this offset to another offset in descending order
Checks if this offset is equal to another offset
A hash code for this offset
Outputs this offset as a {@code String}, using the normalized ID
Obtains an instance defining a transition between two offsets
Gets the transition instant
Gets the transition instant as an epoch second
Gets the local transition date-time, as would be expressed with the 'before' offset
Gets the local transition date-time, as would be expressed with the 'after' offset
Gets the offset before the transition
Gets the offset after the transition
Gets the duration of the transition
Does this transition represent a gap in the local time-line
Does this transition represent an overlap in the local time-line
Checks if the specified offset is valid during this transition
Compares this transition to another based on the transition instant
Checks if this object equals another
Returns a suitable hash code
Returns a string describing this object
Obtains an instance defining the yearly rule to create transitions between two offsets
Gets the month of the transition
Gets the indicator of the day-of-month of the transition
Gets the day-of-week of the transition
Gets the local time of day of the transition which must be checked with {@link #isMidnightEndOfDay()}
Is the transition local time midnight at the end of day
Gets the time definition, specifying how to convert the time to an instant
Gets the standard offset in force at the transition
Gets the offset before the transition
Gets the offset after the transition
Creates a transition instance for the specified year
Checks if this object equals another
Returns a suitable hash code
Returns a string describing this object
Converts the specified local date-time to the local date-time actually seen on a wall clock
Obtains an instance of a ZoneRules
Obtains an instance of ZoneRules that has fixed zone rules
Checks of the zone rules are fixed, such that the offset never varies
Gets the offset applicable at the specified instant in these rules
Gets a suitable offset for the specified local date-time in these rules
Gets the offset applicable at the specified local date-time in these rules
Gets the offset transition applicable at the specified local date-time in these rules
Gets the standard offset for the specified instant in this zone
Gets the amount of daylight savings in use for the specified instant in this zone
Checks if the specified instant is in daylight savings
Checks if the offset date-time is valid for these rules
Gets the next transition after the specified instant
Gets the previous transition before the specified instant
Gets the complete list of fully defined transitions
Gets the list of transition rules for years beyond those defined in the transition list
Checks if this set of rules equals another
Returns a suitable hash code given the definition of {@code #equals}
Returns a string describing this object
Gets the set of available zone IDs
Gets the rules for the zone ID
Gets the history of rules for the zone ID
Registers a zone rules provider
Refreshes the rules from the underlying data provider
SPI method to get the available zone IDs
SPI method to get the rules for the zone ID
SPI method to get the history of rules for the zone ID
SPI method to refresh the rules from the underlying data provider
Get the current maximum zone size
Set the desired maximum zone size
Get the current setting of the number of zones allowed to be loaded at the same time
Sets the current setting of the number of zones allowed to be loaded at the same time
Called by a zone when it gets loaded
Unload a zone (Convert the zone to its memory saving state)
Determine if a zone is in the loaded state
Create a view to represent a zone for the given range within the model (which should be within the range of this objects responsibility)
Loads all of the children to initialize the view
Returns the child view index representing the given position in the model
The superclass behavior will try to update the child views which is not desired in this case, since the children are zones and not directly effected by the changes to the associated element
Gives notification that something was inserted into the document in a location that this view is responsible for
Gives notification that something was removed from the document in a location that this view is responsible for
This operation returns the next binding
This operation returns at most the requested number of bindings
This operation destroys the iterator
Creates a new DynAny object from an any value
Creates a DynAny from a TypeCode
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the elements of the DynArray
Sets the DynArray to contain the passed elements
Returns the elements of the DynArray as DynAnys
Sets the DynArray to contain the passed elements
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the value of the DynEnum as an IDL identifier
Sets the value of the DynEnum to the enumerated value whose IDL identifier is passed in the value parameter
Returns the value of the DynEnum as the enumerated value's ordinal value
Sets the value of the DynEnum as the enumerated value's ordinal value
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the value of a DynFixed
Sets the value of the DynFixed
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the current length of the sequence
Sets the length of the sequence
Returns the elements of the sequence
Sets the elements of a sequence
Returns the DynAnys representing the elements of the sequence
Sets the elements of a sequence using DynAnys
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the name of the member at the current position
Returns the TCKind associated with the member at the current position
Returns a sequence of NameValuePairs describing the name and the value of each member in the struct associated with a DynStruct object
Initializes the struct data value associated with a DynStruct object from a sequence of NameValuePairs
Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the struct associated with a DynStruct object
Initializes the struct data value associated with a DynStruct object from a sequence of NameDynAnyPairs
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the current discriminator value
Sets the discriminator of the DynUnion to the specified value
Sets the discriminator to a value that is consistent with the value of the default case of a union
Sets the discriminator to a value that does not correspond to any of the unions case labels
Returns true if the union has no active member, that is, the unions value consists solely of its discriminator because the discriminator has a value that is not listed as an explicit case label
Returns the TCKind value of the discriminators TypeCode
Returns the TCKind value of the currently active members TypeCode
Returns the currently active member
Returns the name of the currently active member
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
Returns the name of the member at the current position
Returns the TCKind associated with the member at the current position
Returns a sequence of NameValuePairs describing the name and the value of each member in the value type
Initializes the value type's members from a sequence of NameValuePairs
Returns a sequence of NameDynAnyPairs describing the name and the value of each member in the value type
Initializes the value type's members from a sequence of NameDynAnyPairs
Returns true if the DynValueCommon represents a null value type
Changes the representation of a DynValueCommon to a null value type
Replaces a null value type with a newly constructed value
Returns the TypeCode associated with this DynAny object
Initializes the value associated with a DynAny object with the value associated with another DynAny object
Initializes the value associated with a DynAny object with the value contained in an any
Creates an any value from a DynAny object
Compares two DynAny values for equality
Destroys a DynAny object
Creates a new DynAny object whose value is a deep copy of the DynAny on which it is invoked
Inserts a boolean value into the DynAny
Inserts a byte value into the DynAny
Inserts a char value into the DynAny
Inserts a short value into the DynAny
Inserts a short value into the DynAny
Inserts an integer value into the DynAny
Inserts an integer value into the DynAny
Inserts a float value into the DynAny
Inserts a double value into the DynAny
Inserts a string value into the DynAny
Inserts a reference to a CORBA object into the DynAny
Inserts a TypeCode object into the DynAny
Inserts a long value into the DynAny
Inserts a long value into the DynAny
Inserts a char value into the DynAny
Inserts a string value into the DynAny
Inserts an Any value into the Any represented by this DynAny
Inserts the Any value contained in the parameter DynAny into the Any represented by this DynAny
Inserts a reference to a Serializable object into this DynAny
Extracts the boolean value from this DynAny
Extracts the byte value from this DynAny
Extracts the char value from this DynAny
Extracts the short value from this DynAny
Extracts the short value from this DynAny
Extracts the integer value from this DynAny
Extracts the integer value from this DynAny
Extracts the float value from this DynAny
Extracts the double value from this DynAny
Extracts the string value from this DynAny
Extracts the reference to a CORBA Object from this DynAny
Extracts the TypeCode object from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the long value from this DynAny
Extracts the string value from this DynAny
Extracts an Any value contained in the Any represented by this DynAny
Extracts the Any value contained in the Any represented by this DynAny and returns it wrapped into a new DynAny
Extracts a Serializable object from this DynAny
Sets the current position to index
Is equivalent to seek(0)
Advances the current position to the next component
Returns the number of components of a DynAny
Returns the DynAny for the component at the current position
This operation creates a stringified name from the array of Name components
This operation  converts a Stringified Name into an  equivalent array of Name Components
This operation creates a URL based "iiopname://" format name from the Stringified Name of the object
This operation resolves the Stringified name into the object reference
Creates a binding of a name and an object in the naming context
Names an object that is a naming context
Creates a binding of a name and an object in the naming context even if the name is already bound in the context
Creates a binding of a name and a naming context in the naming context even if the name is already bound in the context
The resolve operation is the process of retrieving an object bound to a name in a given context
The unbind operation removes a name binding from a context
The list operation allows a client to iterate through a set of bindings in a naming context
This operation returns a naming context implemented by the same naming server as the context on which the operation was invoked
This operation creates a new context and binds it to the name supplied as an argument
The destroy operation deletes a naming context
Creates a binding of a name and an object in the naming context
Names an object that is a naming context
Creates a binding of a name and an object in the naming context even if the name is already bound in the context
Creates a binding of a name and a naming context in the naming context even if the name is already bound in the context
The resolve operation is the process of retrieving an object bound to a name in a given context
The unbind operation removes a name binding from a context
The list operation allows a client to iterate through a set of bindings in a naming context
This operation returns a naming context implemented by the same naming server as the context on which the operation was invoked
This operation creates a new context and binds it to the name supplied as an argument
The destroy operation deletes a naming context
Method used to cause ORB to activate the named adapter, if possible
Returns the constant value that corresponds to the type of the policy object
Copies the policy object
Destroys the policy object
Returns an array of repository ids that an object implements
This operation is invoked by the POA whenever the  POA receives a request for an object that is not  currently active, assuming the POA has the  USE_SERVANT_MANAGER and RETAIN policies
This operation is invoked whenever a servant for  an object is deactivated, assuming the POA has  the USE_SERVANT_MANAGER and RETAIN policies
This operations is used to get a servant that will be used to process the request that caused preinvoke to be called
This operation is invoked whenener a servant completes a request
Shutdown this server
Install the server
Uninstall the server
Shutdown this server
Install the server
Uninstall the server
